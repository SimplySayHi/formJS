// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`checkFieldsValidity checkFieldsValidity -> form fields not valid 1`] = `
Object {
  "fields": Array [
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "name": "field-00",
            "required": "",
            "type": "email",
            "value": "a@a.aa",
          },
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {},
      "fieldOptions": Object {
        "beforeValidation": Array [],
        "cssClasses": Object {
          "dirty": "is-dirty",
          "error": "has-error",
          "errorEmpty": "has-error-empty",
          "errorRule": "has-error-rule",
          "pending": "is-pending",
          "valid": "is-valid",
        },
        "focusOnRelated": false,
        "maxFileSize": 10,
        "onValidationCheckAll": false,
        "preventPasteFields": "[type=\\"password\\"], [data-equal-to]",
        "questionContainer": "[data-formjs-question]",
        "skipUIfeedback": false,
        "strictHtmlValidation": true,
        "trimValue": false,
        "validateOnEvents": "input change",
      },
      "result": true,
    },
    Object {
      "$field": Object {},
      "fieldOptions": Object {
        "beforeValidation": Array [],
        "cssClasses": Object {
          "dirty": "is-dirty",
          "error": "has-error",
          "errorEmpty": "has-error-empty",
          "errorRule": "has-error-rule",
          "pending": "is-pending",
          "valid": "is-valid",
        },
        "focusOnRelated": false,
        "maxFileSize": 10,
        "onValidationCheckAll": false,
        "preventPasteFields": "[type=\\"password\\"], [data-equal-to]",
        "questionContainer": "[data-formjs-question]",
        "skipUIfeedback": false,
        "strictHtmlValidation": true,
        "trimValue": false,
        "validateOnEvents": "input change",
      },
      "result": true,
    },
    Object {
      "$field": Object {},
      "errors": Object {
        "empty": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "name": "field-04",
            "required": "",
            "type": "email",
            "value": "aaa",
          },
        },
      },
      "errors": Object {
        "email": true,
        "missingAtChar": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "name": "field-05",
            "required": "",
            "type": "email",
            "value": "a@",
          },
        },
      },
      "errors": Object {
        "email": true,
        "missingDomain": true,
        "missingExtension": true,
        "missingExtensionDot": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "name": "field-06",
            "required": "",
            "type": "email",
            "value": "a@a",
          },
        },
      },
      "errors": Object {
        "email": true,
        "missingExtension": true,
        "missingExtensionDot": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "name": "field-07",
            "required": "",
            "type": "email",
            "value": "a@a.a",
          },
        },
      },
      "errors": Object {
        "email": true,
        "minlengthExtension": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "name": "field-08",
            "required": "",
            "type": "email",
            "value": "a@a.aa",
          },
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "data-subtype": "email",
            "name": "field-09",
            "required": "",
            "type": "text",
            "value": "a@a.aa",
          },
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {},
      "fieldOptions": Object {
        "beforeValidation": Array [],
        "cssClasses": Object {
          "dirty": "is-dirty",
          "error": "has-error",
          "errorEmpty": "has-error-empty",
          "errorRule": "has-error-rule",
          "pending": "is-pending",
          "valid": "is-valid",
        },
        "focusOnRelated": false,
        "maxFileSize": 10,
        "onValidationCheckAll": false,
        "preventPasteFields": "[type=\\"password\\"], [data-equal-to]",
        "questionContainer": "[data-formjs-question]",
        "skipUIfeedback": false,
        "strictHtmlValidation": true,
        "trimValue": false,
        "validateOnEvents": "input change",
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "data-validate-if-filled": "",
            "name": "field-11",
            "type": "email",
            "value": "a",
          },
        },
      },
      "errors": Object {
        "email": true,
        "missingAtChar": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "data-validate-if-filled": "",
            "name": "field-12",
            "type": "email",
            "value": "a@a.aa",
          },
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {},
      "fieldOptions": Object {
        "beforeValidation": Array [],
        "cssClasses": Object {
          "dirty": "is-dirty",
          "error": "has-error",
          "errorEmpty": "has-error-empty",
          "errorRule": "has-error-rule",
          "pending": "is-pending",
          "valid": "is-valid",
        },
        "focusOnRelated": false,
        "maxFileSize": 10,
        "onValidationCheckAll": false,
        "preventPasteFields": "[type=\\"password\\"], [data-equal-to]",
        "questionContainer": "[data-formjs-question]",
        "skipUIfeedback": false,
        "strictHtmlValidation": true,
        "trimValue": false,
        "validateOnEvents": "input change",
      },
      "result": true,
    },
    Object {
      "$field": Object {},
      "fieldOptions": Object {
        "beforeValidation": Array [],
        "cssClasses": Object {
          "dirty": "is-dirty",
          "error": "has-error",
          "errorEmpty": "has-error-empty",
          "errorRule": "has-error-rule",
          "pending": "is-pending",
          "valid": "is-valid",
        },
        "focusOnRelated": false,
        "maxFileSize": 10,
        "onValidationCheckAll": false,
        "preventPasteFields": "[type=\\"password\\"], [data-equal-to]",
        "questionContainer": "[data-formjs-question]",
        "skipUIfeedback": false,
        "strictHtmlValidation": true,
        "trimValue": false,
        "validateOnEvents": "input change",
      },
      "result": true,
    },
    Object {
      "$field": Object {},
      "errors": Object {
        "empty": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "checked": "",
            "name": "field-16",
            "required": "",
            "type": "checkbox",
          },
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {},
      "fieldOptions": Object {
        "beforeValidation": Array [],
        "cssClasses": Object {
          "dirty": "is-dirty",
          "error": "has-error",
          "errorEmpty": "has-error-empty",
          "errorRule": "has-error-rule",
          "pending": "is-pending",
          "valid": "is-valid",
        },
        "focusOnRelated": false,
        "maxFileSize": 10,
        "onValidationCheckAll": false,
        "preventPasteFields": "[type=\\"password\\"], [data-equal-to]",
        "questionContainer": "[data-formjs-question]",
        "skipUIfeedback": false,
        "strictHtmlValidation": true,
        "trimValue": false,
        "validateOnEvents": "input change",
      },
      "result": true,
    },
    Object {
      "$field": Object {},
      "errors": Object {
        "empty": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "checked": "",
            "data-checks": "[1,2]",
            "name": "field-19",
            "required": "",
            "type": "checkbox",
            "value": "sms",
          },
          "dataset": DOMStringMap {
            "checks": "[1,2]",
          },
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "checked": "",
            "data-checks": "[1,2]",
            "name": "field-20",
            "required": "",
            "type": "checkbox",
            "value": "sms",
          },
          "dataset": DOMStringMap {
            "checks": "[1,2]",
          },
        },
      },
      "errors": Object {
        "checkbox": true,
        "checks": true,
        "maxChecks": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "name": "field-21",
            "required": "",
            "type": "date",
            "value": "2012-12-12",
          },
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {},
      "errors": Object {
        "empty": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "data-subtype": "date",
            "name": "field-23",
            "required": "",
            "type": "text",
            "value": "2012/12/12",
          },
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {},
      "fieldOptions": Object {
        "beforeValidation": Array [],
        "cssClasses": Object {
          "dirty": "is-dirty",
          "error": "has-error",
          "errorEmpty": "has-error-empty",
          "errorRule": "has-error-rule",
          "pending": "is-pending",
          "valid": "is-valid",
        },
        "focusOnRelated": false,
        "maxFileSize": 10,
        "onValidationCheckAll": false,
        "preventPasteFields": "[type=\\"password\\"], [data-equal-to]",
        "questionContainer": "[data-formjs-question]",
        "skipUIfeedback": false,
        "strictHtmlValidation": true,
        "trimValue": false,
        "validateOnEvents": "input change",
      },
      "result": true,
    },
    Object {
      "$field": Object {},
      "fieldOptions": Object {
        "beforeValidation": Array [],
        "cssClasses": Object {
          "dirty": "is-dirty",
          "error": "has-error",
          "errorEmpty": "has-error-empty",
          "errorRule": "has-error-rule",
          "pending": "is-pending",
          "valid": "is-valid",
        },
        "focusOnRelated": false,
        "maxFileSize": 10,
        "onValidationCheckAll": false,
        "preventPasteFields": "[type=\\"password\\"], [data-equal-to]",
        "questionContainer": "[data-formjs-question]",
        "skipUIfeedback": false,
        "strictHtmlValidation": true,
        "trimValue": false,
        "validateOnEvents": "input change",
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "name": "field-25",
            "required": "",
            "type": "text",
            "value": "hello",
          },
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "data-equal-to": "field-25",
            "name": "field-25-equalto",
            "required": "",
            "type": "text",
            "value": "hello",
          },
          "dataset": DOMStringMap {
            "equalTo": "field-25",
          },
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "name": "field-26",
            "required": "",
            "type": "text",
            "value": "hello",
          },
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "data-equal-to": "field-26",
            "name": "field-26-equalto",
            "required": "",
            "type": "text",
            "value": "hello-",
          },
          "dataset": DOMStringMap {
            "equalTo": "field-26",
          },
        },
      },
      "errors": Object {
        "equalTo": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {},
      "fieldOptions": Object {
        "beforeValidation": Array [],
        "cssClasses": Object {
          "dirty": "is-dirty",
          "error": "has-error",
          "errorEmpty": "has-error-empty",
          "errorRule": "has-error-rule",
          "pending": "is-pending",
          "valid": "is-valid",
        },
        "focusOnRelated": false,
        "maxFileSize": 10,
        "onValidationCheckAll": false,
        "preventPasteFields": "[type=\\"password\\"], [data-equal-to]",
        "questionContainer": "[data-formjs-question]",
        "skipUIfeedback": false,
        "strictHtmlValidation": true,
        "trimValue": false,
        "validateOnEvents": "input change",
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "data-exact-length": "5",
            "name": "field-29",
            "required": "",
            "type": "text",
            "value": "hello",
          },
          "dataset": DOMStringMap {
            "exactLength": "5",
          },
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "data-exact-length": "5",
            "name": "field-30",
            "required": "",
            "type": "text",
            "value": "hellohello",
          },
          "dataset": DOMStringMap {
            "exactLength": "5",
          },
        },
      },
      "errors": Object {
        "exactLength": true,
        "maxlength": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "data-exact-length": "5",
            "name": "field-31",
            "required": "",
            "type": "text",
            "value": "he",
          },
          "dataset": DOMStringMap {
            "exactLength": "5",
          },
        },
      },
      "errors": Object {
        "exactLength": true,
        "minlength": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "data-exact-length": "a",
            "name": "field-32",
            "required": "",
            "type": "text",
            "value": "hellohello",
          },
          "dataset": DOMStringMap {
            "exactLength": "a",
          },
        },
      },
      "errors": Object {
        "exactLength": true,
        "maxlength": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {},
      "fieldOptions": Object {
        "beforeValidation": Array [],
        "cssClasses": Object {
          "dirty": "is-dirty",
          "error": "has-error",
          "errorEmpty": "has-error-empty",
          "errorRule": "has-error-rule",
          "pending": "is-pending",
          "valid": "is-valid",
        },
        "focusOnRelated": false,
        "maxFileSize": 10,
        "onValidationCheckAll": false,
        "preventPasteFields": "[type=\\"password\\"], [data-equal-to]",
        "questionContainer": "[data-formjs-question]",
        "skipUIfeedback": false,
        "strictHtmlValidation": true,
        "trimValue": false,
        "validateOnEvents": "input change",
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "data-length": "[3,20]",
            "name": "field-34",
            "required": "",
            "type": "text",
            "value": "Valerio",
          },
          "dataset": DOMStringMap {
            "length": "[3,20]",
          },
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "data-length": "[3,20]",
            "name": "field-35",
            "required": "",
            "type": "text",
            "value": "a",
          },
          "dataset": DOMStringMap {
            "length": "[3,20]",
          },
        },
      },
      "errors": Object {
        "length": true,
        "minlength": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "data-length": "[3,20]",
            "name": "field-36",
            "required": "",
            "type": "text",
            "value": "ValerioValerioValerio",
          },
          "dataset": DOMStringMap {
            "length": "[3,20]",
          },
        },
      },
      "errors": Object {
        "length": true,
        "maxlength": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {},
      "fieldOptions": Object {
        "beforeValidation": Array [],
        "cssClasses": Object {
          "dirty": "is-dirty",
          "error": "has-error",
          "errorEmpty": "has-error-empty",
          "errorRule": "has-error-rule",
          "pending": "is-pending",
          "valid": "is-valid",
        },
        "focusOnRelated": false,
        "maxFileSize": 10,
        "onValidationCheckAll": false,
        "preventPasteFields": "[type=\\"password\\"], [data-equal-to]",
        "questionContainer": "[data-formjs-question]",
        "skipUIfeedback": false,
        "strictHtmlValidation": true,
        "trimValue": false,
        "validateOnEvents": "input change",
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "max": "10",
            "name": "field-39",
            "required": "",
            "type": "number",
            "value": "7",
          },
          "dataset": DOMStringMap {},
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {},
      "fieldOptions": Object {
        "beforeValidation": Array [],
        "cssClasses": Object {
          "dirty": "is-dirty",
          "error": "has-error",
          "errorEmpty": "has-error-empty",
          "errorRule": "has-error-rule",
          "pending": "is-pending",
          "valid": "is-valid",
        },
        "focusOnRelated": false,
        "maxFileSize": 10,
        "onValidationCheckAll": false,
        "preventPasteFields": "[type=\\"password\\"], [data-equal-to]",
        "questionContainer": "[data-formjs-question]",
        "skipUIfeedback": false,
        "strictHtmlValidation": true,
        "trimValue": false,
        "validateOnEvents": "input change",
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "max": "10",
            "name": "field-41",
            "required": "",
            "type": "number",
            "value": "11",
          },
          "dataset": DOMStringMap {},
        },
      },
      "errors": Object {
        "max": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {},
      "fieldOptions": Object {
        "beforeValidation": Array [],
        "cssClasses": Object {
          "dirty": "is-dirty",
          "error": "has-error",
          "errorEmpty": "has-error-empty",
          "errorRule": "has-error-rule",
          "pending": "is-pending",
          "valid": "is-valid",
        },
        "focusOnRelated": false,
        "maxFileSize": 10,
        "onValidationCheckAll": false,
        "preventPasteFields": "[type=\\"password\\"], [data-equal-to]",
        "questionContainer": "[data-formjs-question]",
        "skipUIfeedback": false,
        "strictHtmlValidation": true,
        "trimValue": false,
        "validateOnEvents": "input change",
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "max": "2012-12-12",
            "name": "field-43",
            "required": "",
            "type": "date",
            "value": "2012-12-11",
          },
          "dataset": DOMStringMap {},
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {},
      "fieldOptions": Object {
        "beforeValidation": Array [],
        "cssClasses": Object {
          "dirty": "is-dirty",
          "error": "has-error",
          "errorEmpty": "has-error-empty",
          "errorRule": "has-error-rule",
          "pending": "is-pending",
          "valid": "is-valid",
        },
        "focusOnRelated": false,
        "maxFileSize": 10,
        "onValidationCheckAll": false,
        "preventPasteFields": "[type=\\"password\\"], [data-equal-to]",
        "questionContainer": "[data-formjs-question]",
        "skipUIfeedback": false,
        "strictHtmlValidation": true,
        "trimValue": false,
        "validateOnEvents": "input change",
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "max": "2012-12-12",
            "name": "field-45",
            "required": "",
            "type": "date",
            "value": "2012-12-13",
          },
          "dataset": DOMStringMap {},
        },
      },
      "errors": Object {
        "max": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "maxlength": "10",
            "name": "field-46",
            "required": "",
            "type": "text",
            "value": "hello",
          },
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "maxlength": "10",
            "name": "field-47",
            "required": "",
            "type": "text",
            "value": "hellohellohello",
          },
        },
      },
      "errors": Object {
        "maxlength": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {},
      "fieldOptions": Object {
        "beforeValidation": Array [],
        "cssClasses": Object {
          "dirty": "is-dirty",
          "error": "has-error",
          "errorEmpty": "has-error-empty",
          "errorRule": "has-error-rule",
          "pending": "is-pending",
          "valid": "is-valid",
        },
        "focusOnRelated": false,
        "maxFileSize": 10,
        "onValidationCheckAll": false,
        "preventPasteFields": "[type=\\"password\\"], [data-equal-to]",
        "questionContainer": "[data-formjs-question]",
        "skipUIfeedback": false,
        "strictHtmlValidation": true,
        "trimValue": false,
        "validateOnEvents": "input change",
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "min": "10",
            "name": "field-49",
            "required": "",
            "type": "number",
            "value": "7",
          },
          "dataset": DOMStringMap {},
        },
      },
      "errors": Object {
        "min": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {},
      "fieldOptions": Object {
        "beforeValidation": Array [],
        "cssClasses": Object {
          "dirty": "is-dirty",
          "error": "has-error",
          "errorEmpty": "has-error-empty",
          "errorRule": "has-error-rule",
          "pending": "is-pending",
          "valid": "is-valid",
        },
        "focusOnRelated": false,
        "maxFileSize": 10,
        "onValidationCheckAll": false,
        "preventPasteFields": "[type=\\"password\\"], [data-equal-to]",
        "questionContainer": "[data-formjs-question]",
        "skipUIfeedback": false,
        "strictHtmlValidation": true,
        "trimValue": false,
        "validateOnEvents": "input change",
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "min": "10",
            "name": "field-51",
            "required": "",
            "type": "number",
            "value": "11",
          },
          "dataset": DOMStringMap {},
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {},
      "fieldOptions": Object {
        "beforeValidation": Array [],
        "cssClasses": Object {
          "dirty": "is-dirty",
          "error": "has-error",
          "errorEmpty": "has-error-empty",
          "errorRule": "has-error-rule",
          "pending": "is-pending",
          "valid": "is-valid",
        },
        "focusOnRelated": false,
        "maxFileSize": 10,
        "onValidationCheckAll": false,
        "preventPasteFields": "[type=\\"password\\"], [data-equal-to]",
        "questionContainer": "[data-formjs-question]",
        "skipUIfeedback": false,
        "strictHtmlValidation": true,
        "trimValue": false,
        "validateOnEvents": "input change",
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "min": "2012-12-12",
            "name": "field-53",
            "required": "",
            "type": "date",
            "value": "2012-12-11",
          },
          "dataset": DOMStringMap {},
        },
      },
      "errors": Object {
        "min": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {},
      "fieldOptions": Object {
        "beforeValidation": Array [],
        "cssClasses": Object {
          "dirty": "is-dirty",
          "error": "has-error",
          "errorEmpty": "has-error-empty",
          "errorRule": "has-error-rule",
          "pending": "is-pending",
          "valid": "is-valid",
        },
        "focusOnRelated": false,
        "maxFileSize": 10,
        "onValidationCheckAll": false,
        "preventPasteFields": "[type=\\"password\\"], [data-equal-to]",
        "questionContainer": "[data-formjs-question]",
        "skipUIfeedback": false,
        "strictHtmlValidation": true,
        "trimValue": false,
        "validateOnEvents": "input change",
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "min": "2012-12-12",
            "name": "field-55",
            "required": "",
            "type": "date",
            "value": "2012-12-13",
          },
          "dataset": DOMStringMap {},
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "minlength": "10",
            "name": "field-56",
            "required": "",
            "type": "text",
            "value": "hellohellohello",
          },
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "minlength": "10",
            "name": "field-57",
            "required": "",
            "type": "text",
            "value": "hello",
          },
        },
      },
      "errors": Object {
        "minlength": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "name": "field-58",
            "required": "",
            "type": "number",
            "value": "7",
          },
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {},
      "errors": Object {
        "empty": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {},
      "errors": Object {
        "empty": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "name": "field-61",
            "pattern": "^(IT){0,1}[0-9]{11}$",
            "required": "",
            "type": "text",
            "value": "12345678901",
          },
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "name": "field-62",
            "pattern": "^(IT){0,1}[0-9]{11}$",
            "required": "",
            "type": "text",
            "value": "123",
          },
        },
      },
      "errors": Object {
        "pattern": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {},
      "errors": Object {
        "empty": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {},
      "errors": Object {
        "empty": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "checked": "",
            "name": "field-65",
            "required": "",
            "type": "radio",
            "value": "accepted",
          },
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {},
      "fieldOptions": Object {
        "beforeValidation": Array [],
        "cssClasses": Object {
          "dirty": "is-dirty",
          "error": "has-error",
          "errorEmpty": "has-error-empty",
          "errorRule": "has-error-rule",
          "pending": "is-pending",
          "valid": "is-valid",
        },
        "focusOnRelated": false,
        "maxFileSize": 10,
        "onValidationCheckAll": false,
        "preventPasteFields": "[type=\\"password\\"], [data-equal-to]",
        "questionContainer": "[data-formjs-question]",
        "skipUIfeedback": false,
        "strictHtmlValidation": true,
        "trimValue": false,
        "validateOnEvents": "input change",
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "name": "field-67",
            "required": "",
            "type": "radio",
            "value": "accepted",
          },
        },
      },
      "errors": Object {
        "radio": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {},
      "errors": Object {
        "empty": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "name": "field-69",
            "required": "",
            "type": "radio",
            "value": "1",
          },
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "data-required-from": "#req-more-1",
            "name": "field-69-more",
            "required": "",
            "type": "text",
            "value": "Hi",
          },
          "dataset": DOMStringMap {
            "requiredFrom": "#req-more-1",
          },
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "name": "field-70",
            "required": "",
            "type": "radio",
            "value": "1",
          },
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {},
      "errors": Object {
        "empty": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "checked": "",
            "name": "field-71",
            "required": "",
            "type": "radio",
            "value": "1",
          },
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {},
      "fieldOptions": Object {
        "beforeValidation": Array [],
        "cssClasses": Object {
          "dirty": "is-dirty",
          "error": "has-error",
          "errorEmpty": "has-error-empty",
          "errorRule": "has-error-rule",
          "pending": "is-pending",
          "valid": "is-valid",
        },
        "focusOnRelated": false,
        "maxFileSize": 10,
        "onValidationCheckAll": false,
        "preventPasteFields": "[type=\\"password\\"], [data-equal-to]",
        "questionContainer": "[data-formjs-question]",
        "skipUIfeedback": false,
        "strictHtmlValidation": true,
        "trimValue": false,
        "validateOnEvents": "input change",
      },
      "result": true,
    },
    Object {
      "$field": Object {},
      "errors": Object {
        "empty": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {},
      "fieldOptions": Object {
        "beforeValidation": Array [],
        "cssClasses": Object {
          "dirty": "is-dirty",
          "error": "has-error",
          "errorEmpty": "has-error-empty",
          "errorRule": "has-error-rule",
          "pending": "is-pending",
          "valid": "is-valid",
        },
        "focusOnRelated": false,
        "maxFileSize": 10,
        "onValidationCheckAll": false,
        "preventPasteFields": "[type=\\"password\\"], [data-equal-to]",
        "questionContainer": "[data-formjs-question]",
        "skipUIfeedback": false,
        "strictHtmlValidation": true,
        "trimValue": false,
        "validateOnEvents": "input change",
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "name": "field-73",
            "required": "",
            "type": "radio",
            "value": "1",
          },
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "data-required-from": "#req-more-5",
            "name": "field-73-more",
            "required": "",
            "type": "email",
            "value": "a",
          },
          "dataset": DOMStringMap {
            "requiredFrom": "#req-more-5",
          },
        },
      },
      "errors": Object {
        "email": true,
        "missingAtChar": true,
      },
      "result": false,
    },
  ],
  "result": false,
}
`;

exports[`checkFieldsValidity checkFieldsValidity -> form fields not valid with skip field 1`] = `
Object {
  "fields": Array [
    Object {
      "$field": Object {},
      "result": true,
    },
    Object {
      "$field": Object {},
      "fieldOptions": Object {
        "beforeValidation": Array [],
        "cssClasses": Object {
          "dirty": "is-dirty",
          "error": "has-error",
          "errorEmpty": "has-error-empty",
          "errorRule": "has-error-rule",
          "pending": "is-pending",
          "valid": "is-valid",
        },
        "focusOnRelated": false,
        "maxFileSize": 10,
        "onValidationCheckAll": false,
        "preventPasteFields": "[type=\\"password\\"], [data-equal-to]",
        "questionContainer": "[data-formjs-question]",
        "skipUIfeedback": false,
        "strictHtmlValidation": true,
        "trimValue": false,
        "validateOnEvents": "input change",
      },
      "result": true,
    },
    Object {
      "$field": Object {},
      "fieldOptions": Object {
        "beforeValidation": Array [],
        "cssClasses": Object {
          "dirty": "is-dirty",
          "error": "has-error",
          "errorEmpty": "has-error-empty",
          "errorRule": "has-error-rule",
          "pending": "is-pending",
          "valid": "is-valid",
        },
        "focusOnRelated": false,
        "maxFileSize": 10,
        "onValidationCheckAll": false,
        "preventPasteFields": "[type=\\"password\\"], [data-equal-to]",
        "questionContainer": "[data-formjs-question]",
        "skipUIfeedback": false,
        "strictHtmlValidation": true,
        "trimValue": false,
        "validateOnEvents": "input change",
      },
      "result": true,
    },
    Object {
      "$field": Object {},
      "errors": Object {
        "empty": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "name": "field-04",
            "required": "",
            "type": "email",
            "value": "aaa",
          },
        },
      },
      "errors": Object {
        "email": true,
        "missingAtChar": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "name": "field-05",
            "required": "",
            "type": "email",
            "value": "a@",
          },
        },
      },
      "errors": Object {
        "email": true,
        "missingDomain": true,
        "missingExtension": true,
        "missingExtensionDot": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "name": "field-06",
            "required": "",
            "type": "email",
            "value": "a@a",
          },
        },
      },
      "errors": Object {
        "email": true,
        "missingExtension": true,
        "missingExtensionDot": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "name": "field-07",
            "required": "",
            "type": "email",
            "value": "a@a.a",
          },
        },
      },
      "errors": Object {
        "email": true,
        "minlengthExtension": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "name": "field-08",
            "required": "",
            "type": "email",
            "value": "a@a.aa",
          },
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "data-subtype": "email",
            "name": "field-09",
            "required": "",
            "type": "text",
            "value": "a@a.aa",
          },
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {},
      "fieldOptions": Object {
        "beforeValidation": Array [],
        "cssClasses": Object {
          "dirty": "is-dirty",
          "error": "has-error",
          "errorEmpty": "has-error-empty",
          "errorRule": "has-error-rule",
          "pending": "is-pending",
          "valid": "is-valid",
        },
        "focusOnRelated": false,
        "maxFileSize": 10,
        "onValidationCheckAll": false,
        "preventPasteFields": "[type=\\"password\\"], [data-equal-to]",
        "questionContainer": "[data-formjs-question]",
        "skipUIfeedback": false,
        "strictHtmlValidation": true,
        "trimValue": false,
        "validateOnEvents": "input change",
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "data-validate-if-filled": "",
            "name": "field-11",
            "type": "email",
            "value": "a",
          },
        },
      },
      "errors": Object {
        "email": true,
        "missingAtChar": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "data-validate-if-filled": "",
            "name": "field-12",
            "type": "email",
            "value": "a@a.aa",
          },
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {},
      "fieldOptions": Object {
        "beforeValidation": Array [],
        "cssClasses": Object {
          "dirty": "is-dirty",
          "error": "has-error",
          "errorEmpty": "has-error-empty",
          "errorRule": "has-error-rule",
          "pending": "is-pending",
          "valid": "is-valid",
        },
        "focusOnRelated": false,
        "maxFileSize": 10,
        "onValidationCheckAll": false,
        "preventPasteFields": "[type=\\"password\\"], [data-equal-to]",
        "questionContainer": "[data-formjs-question]",
        "skipUIfeedback": false,
        "strictHtmlValidation": true,
        "trimValue": false,
        "validateOnEvents": "input change",
      },
      "result": true,
    },
    Object {
      "$field": Object {},
      "fieldOptions": Object {
        "beforeValidation": Array [],
        "cssClasses": Object {
          "dirty": "is-dirty",
          "error": "has-error",
          "errorEmpty": "has-error-empty",
          "errorRule": "has-error-rule",
          "pending": "is-pending",
          "valid": "is-valid",
        },
        "focusOnRelated": false,
        "maxFileSize": 10,
        "onValidationCheckAll": false,
        "preventPasteFields": "[type=\\"password\\"], [data-equal-to]",
        "questionContainer": "[data-formjs-question]",
        "skipUIfeedback": false,
        "strictHtmlValidation": true,
        "trimValue": false,
        "validateOnEvents": "input change",
      },
      "result": true,
    },
    Object {
      "$field": Object {},
      "errors": Object {
        "empty": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "checked": "",
            "name": "field-16",
            "required": "",
            "type": "checkbox",
          },
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {},
      "fieldOptions": Object {
        "beforeValidation": Array [],
        "cssClasses": Object {
          "dirty": "is-dirty",
          "error": "has-error",
          "errorEmpty": "has-error-empty",
          "errorRule": "has-error-rule",
          "pending": "is-pending",
          "valid": "is-valid",
        },
        "focusOnRelated": false,
        "maxFileSize": 10,
        "onValidationCheckAll": false,
        "preventPasteFields": "[type=\\"password\\"], [data-equal-to]",
        "questionContainer": "[data-formjs-question]",
        "skipUIfeedback": false,
        "strictHtmlValidation": true,
        "trimValue": false,
        "validateOnEvents": "input change",
      },
      "result": true,
    },
    Object {
      "$field": Object {},
      "errors": Object {
        "empty": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "checked": "",
            "data-checks": "[1,2]",
            "name": "field-19",
            "required": "",
            "type": "checkbox",
            "value": "sms",
          },
          "dataset": DOMStringMap {
            "checks": "[1,2]",
          },
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "checked": "",
            "data-checks": "[1,2]",
            "name": "field-20",
            "required": "",
            "type": "checkbox",
            "value": "sms",
          },
          "dataset": DOMStringMap {
            "checks": "[1,2]",
          },
        },
      },
      "errors": Object {
        "checkbox": true,
        "checks": true,
        "maxChecks": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "name": "field-21",
            "required": "",
            "type": "date",
            "value": "2012-12-12",
          },
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {},
      "errors": Object {
        "empty": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "data-subtype": "date",
            "name": "field-23",
            "required": "",
            "type": "text",
            "value": "2012/12/12",
          },
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {},
      "fieldOptions": Object {
        "beforeValidation": Array [],
        "cssClasses": Object {
          "dirty": "is-dirty",
          "error": "has-error",
          "errorEmpty": "has-error-empty",
          "errorRule": "has-error-rule",
          "pending": "is-pending",
          "valid": "is-valid",
        },
        "focusOnRelated": false,
        "maxFileSize": 10,
        "onValidationCheckAll": false,
        "preventPasteFields": "[type=\\"password\\"], [data-equal-to]",
        "questionContainer": "[data-formjs-question]",
        "skipUIfeedback": false,
        "strictHtmlValidation": true,
        "trimValue": false,
        "validateOnEvents": "input change",
      },
      "result": true,
    },
    Object {
      "$field": Object {},
      "fieldOptions": Object {
        "beforeValidation": Array [],
        "cssClasses": Object {
          "dirty": "is-dirty",
          "error": "has-error",
          "errorEmpty": "has-error-empty",
          "errorRule": "has-error-rule",
          "pending": "is-pending",
          "valid": "is-valid",
        },
        "focusOnRelated": false,
        "maxFileSize": 10,
        "onValidationCheckAll": false,
        "preventPasteFields": "[type=\\"password\\"], [data-equal-to]",
        "questionContainer": "[data-formjs-question]",
        "skipUIfeedback": false,
        "strictHtmlValidation": true,
        "trimValue": false,
        "validateOnEvents": "input change",
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "name": "field-25",
            "required": "",
            "type": "text",
            "value": "hello",
          },
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "data-equal-to": "field-25",
            "name": "field-25-equalto",
            "required": "",
            "type": "text",
            "value": "hello",
          },
          "dataset": DOMStringMap {
            "equalTo": "field-25",
          },
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "name": "field-26",
            "required": "",
            "type": "text",
            "value": "hello",
          },
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "data-equal-to": "field-26",
            "name": "field-26-equalto",
            "required": "",
            "type": "text",
            "value": "hello-",
          },
          "dataset": DOMStringMap {
            "equalTo": "field-26",
          },
        },
      },
      "errors": Object {
        "equalTo": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {},
      "fieldOptions": Object {
        "beforeValidation": Array [],
        "cssClasses": Object {
          "dirty": "is-dirty",
          "error": "has-error",
          "errorEmpty": "has-error-empty",
          "errorRule": "has-error-rule",
          "pending": "is-pending",
          "valid": "is-valid",
        },
        "focusOnRelated": false,
        "maxFileSize": 10,
        "onValidationCheckAll": false,
        "preventPasteFields": "[type=\\"password\\"], [data-equal-to]",
        "questionContainer": "[data-formjs-question]",
        "skipUIfeedback": false,
        "strictHtmlValidation": true,
        "trimValue": false,
        "validateOnEvents": "input change",
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "data-exact-length": "5",
            "name": "field-29",
            "required": "",
            "type": "text",
            "value": "hello",
          },
          "dataset": DOMStringMap {
            "exactLength": "5",
          },
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "data-exact-length": "5",
            "name": "field-30",
            "required": "",
            "type": "text",
            "value": "hellohello",
          },
          "dataset": DOMStringMap {
            "exactLength": "5",
          },
        },
      },
      "errors": Object {
        "exactLength": true,
        "maxlength": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "data-exact-length": "5",
            "name": "field-31",
            "required": "",
            "type": "text",
            "value": "he",
          },
          "dataset": DOMStringMap {
            "exactLength": "5",
          },
        },
      },
      "errors": Object {
        "exactLength": true,
        "minlength": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "data-exact-length": "a",
            "name": "field-32",
            "required": "",
            "type": "text",
            "value": "hellohello",
          },
          "dataset": DOMStringMap {
            "exactLength": "a",
          },
        },
      },
      "errors": Object {
        "exactLength": true,
        "maxlength": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {},
      "fieldOptions": Object {
        "beforeValidation": Array [],
        "cssClasses": Object {
          "dirty": "is-dirty",
          "error": "has-error",
          "errorEmpty": "has-error-empty",
          "errorRule": "has-error-rule",
          "pending": "is-pending",
          "valid": "is-valid",
        },
        "focusOnRelated": false,
        "maxFileSize": 10,
        "onValidationCheckAll": false,
        "preventPasteFields": "[type=\\"password\\"], [data-equal-to]",
        "questionContainer": "[data-formjs-question]",
        "skipUIfeedback": false,
        "strictHtmlValidation": true,
        "trimValue": false,
        "validateOnEvents": "input change",
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "data-length": "[3,20]",
            "name": "field-34",
            "required": "",
            "type": "text",
            "value": "Valerio",
          },
          "dataset": DOMStringMap {
            "length": "[3,20]",
          },
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "data-length": "[3,20]",
            "name": "field-35",
            "required": "",
            "type": "text",
            "value": "a",
          },
          "dataset": DOMStringMap {
            "length": "[3,20]",
          },
        },
      },
      "errors": Object {
        "length": true,
        "minlength": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "data-length": "[3,20]",
            "name": "field-36",
            "required": "",
            "type": "text",
            "value": "ValerioValerioValerio",
          },
          "dataset": DOMStringMap {
            "length": "[3,20]",
          },
        },
      },
      "errors": Object {
        "length": true,
        "maxlength": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {},
      "fieldOptions": Object {
        "beforeValidation": Array [],
        "cssClasses": Object {
          "dirty": "is-dirty",
          "error": "has-error",
          "errorEmpty": "has-error-empty",
          "errorRule": "has-error-rule",
          "pending": "is-pending",
          "valid": "is-valid",
        },
        "focusOnRelated": false,
        "maxFileSize": 10,
        "onValidationCheckAll": false,
        "preventPasteFields": "[type=\\"password\\"], [data-equal-to]",
        "questionContainer": "[data-formjs-question]",
        "skipUIfeedback": false,
        "strictHtmlValidation": true,
        "trimValue": false,
        "validateOnEvents": "input change",
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "max": "10",
            "name": "field-39",
            "required": "",
            "type": "number",
            "value": "7",
          },
          "dataset": DOMStringMap {},
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {},
      "fieldOptions": Object {
        "beforeValidation": Array [],
        "cssClasses": Object {
          "dirty": "is-dirty",
          "error": "has-error",
          "errorEmpty": "has-error-empty",
          "errorRule": "has-error-rule",
          "pending": "is-pending",
          "valid": "is-valid",
        },
        "focusOnRelated": false,
        "maxFileSize": 10,
        "onValidationCheckAll": false,
        "preventPasteFields": "[type=\\"password\\"], [data-equal-to]",
        "questionContainer": "[data-formjs-question]",
        "skipUIfeedback": false,
        "strictHtmlValidation": true,
        "trimValue": false,
        "validateOnEvents": "input change",
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "max": "10",
            "name": "field-41",
            "required": "",
            "type": "number",
            "value": "11",
          },
          "dataset": DOMStringMap {},
        },
      },
      "errors": Object {
        "max": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {},
      "fieldOptions": Object {
        "beforeValidation": Array [],
        "cssClasses": Object {
          "dirty": "is-dirty",
          "error": "has-error",
          "errorEmpty": "has-error-empty",
          "errorRule": "has-error-rule",
          "pending": "is-pending",
          "valid": "is-valid",
        },
        "focusOnRelated": false,
        "maxFileSize": 10,
        "onValidationCheckAll": false,
        "preventPasteFields": "[type=\\"password\\"], [data-equal-to]",
        "questionContainer": "[data-formjs-question]",
        "skipUIfeedback": false,
        "strictHtmlValidation": true,
        "trimValue": false,
        "validateOnEvents": "input change",
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "max": "2012-12-12",
            "name": "field-43",
            "required": "",
            "type": "date",
            "value": "2012-12-11",
          },
          "dataset": DOMStringMap {},
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {},
      "fieldOptions": Object {
        "beforeValidation": Array [],
        "cssClasses": Object {
          "dirty": "is-dirty",
          "error": "has-error",
          "errorEmpty": "has-error-empty",
          "errorRule": "has-error-rule",
          "pending": "is-pending",
          "valid": "is-valid",
        },
        "focusOnRelated": false,
        "maxFileSize": 10,
        "onValidationCheckAll": false,
        "preventPasteFields": "[type=\\"password\\"], [data-equal-to]",
        "questionContainer": "[data-formjs-question]",
        "skipUIfeedback": false,
        "strictHtmlValidation": true,
        "trimValue": false,
        "validateOnEvents": "input change",
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "max": "2012-12-12",
            "name": "field-45",
            "required": "",
            "type": "date",
            "value": "2012-12-13",
          },
          "dataset": DOMStringMap {},
        },
      },
      "errors": Object {
        "max": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "maxlength": "10",
            "name": "field-46",
            "required": "",
            "type": "text",
            "value": "hello",
          },
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "maxlength": "10",
            "name": "field-47",
            "required": "",
            "type": "text",
            "value": "hellohellohello",
          },
        },
      },
      "errors": Object {
        "maxlength": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {},
      "fieldOptions": Object {
        "beforeValidation": Array [],
        "cssClasses": Object {
          "dirty": "is-dirty",
          "error": "has-error",
          "errorEmpty": "has-error-empty",
          "errorRule": "has-error-rule",
          "pending": "is-pending",
          "valid": "is-valid",
        },
        "focusOnRelated": false,
        "maxFileSize": 10,
        "onValidationCheckAll": false,
        "preventPasteFields": "[type=\\"password\\"], [data-equal-to]",
        "questionContainer": "[data-formjs-question]",
        "skipUIfeedback": false,
        "strictHtmlValidation": true,
        "trimValue": false,
        "validateOnEvents": "input change",
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "min": "10",
            "name": "field-49",
            "required": "",
            "type": "number",
            "value": "7",
          },
          "dataset": DOMStringMap {},
        },
      },
      "errors": Object {
        "min": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {},
      "fieldOptions": Object {
        "beforeValidation": Array [],
        "cssClasses": Object {
          "dirty": "is-dirty",
          "error": "has-error",
          "errorEmpty": "has-error-empty",
          "errorRule": "has-error-rule",
          "pending": "is-pending",
          "valid": "is-valid",
        },
        "focusOnRelated": false,
        "maxFileSize": 10,
        "onValidationCheckAll": false,
        "preventPasteFields": "[type=\\"password\\"], [data-equal-to]",
        "questionContainer": "[data-formjs-question]",
        "skipUIfeedback": false,
        "strictHtmlValidation": true,
        "trimValue": false,
        "validateOnEvents": "input change",
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "min": "10",
            "name": "field-51",
            "required": "",
            "type": "number",
            "value": "11",
          },
          "dataset": DOMStringMap {},
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {},
      "fieldOptions": Object {
        "beforeValidation": Array [],
        "cssClasses": Object {
          "dirty": "is-dirty",
          "error": "has-error",
          "errorEmpty": "has-error-empty",
          "errorRule": "has-error-rule",
          "pending": "is-pending",
          "valid": "is-valid",
        },
        "focusOnRelated": false,
        "maxFileSize": 10,
        "onValidationCheckAll": false,
        "preventPasteFields": "[type=\\"password\\"], [data-equal-to]",
        "questionContainer": "[data-formjs-question]",
        "skipUIfeedback": false,
        "strictHtmlValidation": true,
        "trimValue": false,
        "validateOnEvents": "input change",
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "min": "2012-12-12",
            "name": "field-53",
            "required": "",
            "type": "date",
            "value": "2012-12-11",
          },
          "dataset": DOMStringMap {},
        },
      },
      "errors": Object {
        "min": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {},
      "fieldOptions": Object {
        "beforeValidation": Array [],
        "cssClasses": Object {
          "dirty": "is-dirty",
          "error": "has-error",
          "errorEmpty": "has-error-empty",
          "errorRule": "has-error-rule",
          "pending": "is-pending",
          "valid": "is-valid",
        },
        "focusOnRelated": false,
        "maxFileSize": 10,
        "onValidationCheckAll": false,
        "preventPasteFields": "[type=\\"password\\"], [data-equal-to]",
        "questionContainer": "[data-formjs-question]",
        "skipUIfeedback": false,
        "strictHtmlValidation": true,
        "trimValue": false,
        "validateOnEvents": "input change",
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "min": "2012-12-12",
            "name": "field-55",
            "required": "",
            "type": "date",
            "value": "2012-12-13",
          },
          "dataset": DOMStringMap {},
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "minlength": "10",
            "name": "field-56",
            "required": "",
            "type": "text",
            "value": "hellohellohello",
          },
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "minlength": "10",
            "name": "field-57",
            "required": "",
            "type": "text",
            "value": "hello",
          },
        },
      },
      "errors": Object {
        "minlength": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "name": "field-58",
            "required": "",
            "type": "number",
            "value": "7",
          },
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {},
      "errors": Object {
        "empty": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {},
      "errors": Object {
        "empty": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "name": "field-61",
            "pattern": "^(IT){0,1}[0-9]{11}$",
            "required": "",
            "type": "text",
            "value": "12345678901",
          },
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "name": "field-62",
            "pattern": "^(IT){0,1}[0-9]{11}$",
            "required": "",
            "type": "text",
            "value": "123",
          },
        },
      },
      "errors": Object {
        "pattern": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {},
      "errors": Object {
        "empty": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {},
      "errors": Object {
        "empty": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "checked": "",
            "name": "field-65",
            "required": "",
            "type": "radio",
            "value": "accepted",
          },
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {},
      "fieldOptions": Object {
        "beforeValidation": Array [],
        "cssClasses": Object {
          "dirty": "is-dirty",
          "error": "has-error",
          "errorEmpty": "has-error-empty",
          "errorRule": "has-error-rule",
          "pending": "is-pending",
          "valid": "is-valid",
        },
        "focusOnRelated": false,
        "maxFileSize": 10,
        "onValidationCheckAll": false,
        "preventPasteFields": "[type=\\"password\\"], [data-equal-to]",
        "questionContainer": "[data-formjs-question]",
        "skipUIfeedback": false,
        "strictHtmlValidation": true,
        "trimValue": false,
        "validateOnEvents": "input change",
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "name": "field-67",
            "required": "",
            "type": "radio",
            "value": "accepted",
          },
        },
      },
      "errors": Object {
        "radio": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {},
      "errors": Object {
        "empty": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "name": "field-69",
            "required": "",
            "type": "radio",
            "value": "1",
          },
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "data-required-from": "#req-more-1",
            "name": "field-69-more",
            "required": "",
            "type": "text",
            "value": "Hi",
          },
          "dataset": DOMStringMap {
            "requiredFrom": "#req-more-1",
          },
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "name": "field-70",
            "required": "",
            "type": "radio",
            "value": "1",
          },
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {},
      "errors": Object {
        "empty": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "checked": "",
            "name": "field-71",
            "required": "",
            "type": "radio",
            "value": "1",
          },
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {},
      "fieldOptions": Object {
        "beforeValidation": Array [],
        "cssClasses": Object {
          "dirty": "is-dirty",
          "error": "has-error",
          "errorEmpty": "has-error-empty",
          "errorRule": "has-error-rule",
          "pending": "is-pending",
          "valid": "is-valid",
        },
        "focusOnRelated": false,
        "maxFileSize": 10,
        "onValidationCheckAll": false,
        "preventPasteFields": "[type=\\"password\\"], [data-equal-to]",
        "questionContainer": "[data-formjs-question]",
        "skipUIfeedback": false,
        "strictHtmlValidation": true,
        "trimValue": false,
        "validateOnEvents": "input change",
      },
      "result": true,
    },
    Object {
      "$field": Object {},
      "errors": Object {
        "empty": true,
      },
      "result": false,
    },
    Object {
      "$field": Object {},
      "fieldOptions": Object {
        "beforeValidation": Array [],
        "cssClasses": Object {
          "dirty": "is-dirty",
          "error": "has-error",
          "errorEmpty": "has-error-empty",
          "errorRule": "has-error-rule",
          "pending": "is-pending",
          "valid": "is-valid",
        },
        "focusOnRelated": false,
        "maxFileSize": 10,
        "onValidationCheckAll": false,
        "preventPasteFields": "[type=\\"password\\"], [data-equal-to]",
        "questionContainer": "[data-formjs-question]",
        "skipUIfeedback": false,
        "strictHtmlValidation": true,
        "trimValue": false,
        "validateOnEvents": "input change",
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "name": "field-73",
            "required": "",
            "type": "radio",
            "value": "1",
          },
        },
      },
      "result": true,
    },
    Object {
      "$field": Object {
        Symbol(SameObject caches): Object {
          "attributes": NamedNodeMap {
            "data-required-from": "#req-more-5",
            "name": "field-73-more",
            "required": "",
            "type": "email",
            "value": "a",
          },
          "dataset": DOMStringMap {
            "requiredFrom": "#req-more-5",
          },
        },
      },
      "errors": Object {
        "email": true,
        "missingAtChar": true,
      },
      "result": false,
    },
  ],
  "result": false,
}
`;
