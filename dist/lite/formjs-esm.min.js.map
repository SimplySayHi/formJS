{"version":3,"file":"formjs-esm.min.js","sources":["../../src/modules/helpers/isNodeList.js","../../src/modules/helpers/removeClass.js","../../src/modules/helpers/isDOMNode.js","../../src/modules/helpers/mergeObjects.js","../../src/modules/helpers/isPlainObject.js","../../src/modules/helpers/dispatchCustomEvent.js","../../src/modules/helpers/getDateAsNumber.js","../../src/modules/helpers/getSplitChar.js","../../src/modules/helpers/getUniqueFields.js","../../src/modules/helpers/getFormFields.js","../../src/modules/helpers/getJSONobjectFromFieldAttribute.js","../../src/modules/helpers/mergeValidateFieldDefault.js","../../src/modules/helpers/runFunctionsSequence.js","../../src/modules/helpers/toCamelCase.js","../../src/modules-lite/helpers/customEvents.js","../../src/modules/validationRules.js","../../src/modules/validationRules/date.js","../../src/modules/validationRules/email.js","../../src/modules/validationRules/number.js","../../src/modules/validationRules/checkbox.js","../../src/modules/validationRules/checks.js","../../src/modules/validationRules/equalTo.js","../../src/modules/validationRules/exactLength.js","../../src/modules/validationRules/file.js","../../src/modules/validationRules/length.js","../../src/modules/validationRules/max.js","../../src/modules/validationRules/maxlength.js","../../src/modules/validationRules/min.js","../../src/modules/validationRules/minlength.js","../../src/modules/validationRules/pattern.js","../../src/modules/validationRules/radio.js","../../src/modules/checkFieldValidity.js","../../src/modules/isValid.js","../../src/modules/checkFieldsValidity.js","../../src/modules/helpers/mergeValidateFormDefault.js","../../src/index-lite.js","../../src/modules/helpers/checkFormEl.js","../../src/modules/helpers/finalizeFieldPromise.js","../../src/modules/helpers/finalizeFormPromise.js","../../src/modules-lite/options.js"],"sourcesContent":["\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList )\n}\n","\nexport const removeClass = ( element, cssClasses = '' ) => {\n    element && element.classList.remove( ...cssClasses.split(' ') )\n}\n","\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node )\n}\n","\nimport { isPlainObject } from './isPlainObject'\n\nexport const mergeObjects = function( out = {} ){\n    Array.from(arguments).slice(1).filter(arg => !!arg).forEach(arg => {\n        Object.keys(arg).forEach(key => {\n            if( Array.isArray(arg[key]) ){\n                out[key] = (out[key] || []).concat( arg[key].slice(0) )\n            } else if( isPlainObject(arg[key]) ){\n                out[key] = mergeObjects((out[key] || {}), arg[key])\n            } else {\n                // * STRING | NUMBER | BOOLEAN | FUNCTION\n                if( Array.isArray(out[key]) ){\n                    // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                    out[key].push(arg[key])\n                } else {\n                    out[key] = arg[key]\n                }\n            }\n        })\n    })\n\n    return out\n}\n","\nexport const isPlainObject = object => {\n    return Object.prototype.toString.call( object ) === '[object Object]'\n}\n","\nimport { mergeObjects } from './mergeObjects'\n\nexport const dispatchCustomEvent = ( elem, eventName, eventOptions ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions)\n    const eventObj = new CustomEvent(eventName, eventOptions)\n    elem.dispatchEvent( eventObj )\n}\n","\nimport { getSplitChar } from './getSplitChar'\n\nconst formatMap = {\n    'YYYY-MM-DD': function(dateArray){\n        return dateArray\n    },\n    'MM-DD-YYYY': function(dateArray){\n        return [dateArray[2], dateArray[0], dateArray[1]]\n    },\n    'DD-MM-YYYY': function(dateArray){\n        return dateArray.reverse()\n    }\n}\n\nexport const getDateAsNumber = ( dateString, dateFormat ) => {\n    dateFormat = dateFormat || 'YYYY-MM-DD'\n    const splitChar = getSplitChar(dateString)\n\n    if( dateFormat.indexOf(splitChar) < 0 ){\n        return\n    }\n\n    dateFormat = dateFormat.replace(/[^YMD]/g, '-')\n    dateString = dateString.split(splitChar)\n    dateString = formatMap[dateFormat](dateString).join('')\n    \n    return dateString\n}\n","\nexport const getSplitChar = string => {\n    // MATCH ANY NON-DIGIT CHAR\n    const separator = string.match(/\\D/)\n    return (separator && separator.length > 0) ? separator[0] : null\n}\n","\nexport const getUniqueFields = $nodeList => {\n\n    let currentFieldName = ''\n    let currentFieldType = ''\n\n    return Array.from( $nodeList ).filter($field => {\n        const name = $field.name\n        const type = $field.type\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false\n        }\n        \n        if( !$field.matches('[data-required-from]') ){\n            currentFieldName = name\n            currentFieldType = type\n        }\n        \n        return true\n    })\n    \n}\n","\nimport { getUniqueFields } from './getUniqueFields'\n\n// TO SIMULATE fieldsStringSelector => { hidden: false }\n// TO SIMULATE excludeSelector ( USED IN METHOD getFormData ) => { file: false, excludeData: false } => ':not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"file\"]):not([data-exclude-data])'\nexport const getFormFields = ( $form, { unique = false, hidden = true, file = true, excludeData = true } = {} ) => {\n    const BASIC_SELECTOR = 'select, textarea, input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"])'\n    const FIELDS_SELECTOR = `${BASIC_SELECTOR}${hidden ? '' : ':not([type=\"hidden\"])'}${file ? '' : ':not([type=\"file\"])'}${excludeData ? '' : ':not([data-exclude-data])'}`\n    \n    const $fields = unique ? getUniqueFields($form.elements) : Array.from($form.elements)\n\n    return $fields.filter( $el => $el.matches( FIELDS_SELECTOR ) )\n}\n","\nexport const getJSONobjectFromFieldAttribute = ( $field, attrName ) => {\n    const $customAttr = $field.closest(`[${attrName}]`)\n    return ($customAttr && JSON.parse($customAttr.getAttribute(attrName))) || {}\n}\n","\nimport { mergeObjects } from './mergeObjects'\n\nexport const mergeValidateFieldDefault = obj => {\n    return mergeObjects({}, { result: false, $field: null }, obj)\n}\n","\nimport { mergeObjects } from './mergeObjects'\n\nexport const runFunctionsSequence = ( { functionsList = [], data = {}, stopConditionFn = () => false } = {} ) => {\n    return functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1])\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res)\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result)\n                    return res\n                })\n        })\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList)\n}\n","\nexport const toCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase() })\n}\n","\nexport const customEvents = {\n    field: {\n        validation: 'fjs.field:validation'\n    },\n    form: {\n        destroy:    'fjs.form:destroy',\n        init:       'fjs.form:init',\n        validation: 'fjs.form:validation'\n    }\n}\n","\nimport { date }         from './validationRules/date'\nimport { email }        from './validationRules/email'\nimport { number }       from './validationRules/number'\n\nimport { checkbox }     from './validationRules/checkbox'\nimport { equalTo }      from './validationRules/equalTo'\nimport { exactLength }  from './validationRules/exactLength'\nimport { file }         from './validationRules/file'\nimport { length }       from './validationRules/length'\nimport { max }          from './validationRules/max'\nimport { maxlength }    from './validationRules/maxlength'\nimport { min }          from './validationRules/min'\nimport { minlength }    from './validationRules/minlength'\nimport { pattern }      from './validationRules/pattern'\nimport { radio }        from './validationRules/radio'\n\nexport const validationRules = {\n    date,\n    email,\n    number,\n\n    checkbox,\n    equalTo,\n    exactLength,\n    file,\n    length,\n    max,\n    maxlength,\n    min,\n    minlength,\n    pattern,\n    radio\n}\n","\n/*\n    DATE AS ISO 8601 DATE FORMAT:\n    YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n*/\n\nexport const date = function( string ){\n    return {\n        result: /^((((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13578]|1[02])[ \\/\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13456789]|1[012])[ \\/\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.]02[ \\/\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ \\/\\-.]02[ \\/\\-.]29))$/g.test( string )\n    }\n}\n","\n// https://regex101.com/r/cdlyJy/3\n\nexport const email = function( string ){\n    return {\n        result: /^[a-zA-Z_-]([\\w.-]?[a-zA-Z0-9])*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?){2,})+$/.test( string )\n    }\n}\n","\n/*\n    ALL NUMBERS ( INTEGERS AND FLOATING )\n    VALID NUMBERS: 123 | 123.456 | .123\n*/\n\nexport const number = function( string ){\n    return {\n        result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n    }\n}","\nimport { getFormFields } from '../helpers'\nimport { checks } from './checks'\n\nexport const checkbox = function( value, $field ){\n    const $dataChecks = getFormFields($field.form).find( $el => $el.matches(`[name=\"${$field.name}\"][data-checks]`) )\n    return $dataChecks ? checks($dataChecks) : { result: $field.checked }\n}\n","\nimport { getFormFields } from '../helpers'\n\nexport const checks = function( $field ){\n    const attrValue = JSON.parse( $field.dataset.checks )\n    const checkedLength = getFormFields($field.form).filter($el => $el.matches(`[name=\"${$field.name}\"]:checked`)).length\n    const isMinOk = checkedLength >= attrValue[0]\n    const isMaxOk = checkedLength <= attrValue[1]\n    const obj = { result: isMinOk && isMaxOk }\n\n    if( !obj.result ){\n        obj.errors = { checks: true }\n        if( !isMinOk ){ obj.errors.minChecks = true }\n        if( !isMaxOk ){ obj.errors.maxChecks = true }\n    }\n\n    return obj\n}\n","\nimport { getFormFields } from '../helpers'\n\nexport const equalTo = function( value, $field ){\n    const $checkFrom = getFormFields($field.form).find( $el => $el.matches(`[name=\"${$field.dataset.equalTo}\"]`) )\n    return { result: value === $checkFrom.value }\n}\n","\nexport const exactLength = function( value, $field ){\n    const valueLength = value.length\n    const exactLength = $field.dataset.exactLength * 1\n    const obj = { result: valueLength === exactLength }\n\n    if( !obj.result ){\n        obj.errors = {}\n        if( valueLength < exactLength ){ obj.errors.minlength = true }\n        else { obj.errors.maxlength = true }\n    }\n\n    return obj\n}\n","\nexport const file = function( value, $field, fieldOptions ){\n    const maxFileSize = ($field.getAttribute('data-max-file-size') || fieldOptions.maxFileSize) * 1\n    const MIMEtype = $field.accept ? new RegExp($field.accept.replace( '*', '[^\\\\/,]+' )) : null\n    const filesList = Array.from($field.files)\n    const obj = { result: true }\n\n    filesList.forEach(file => {\n        const exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize\n        const isAcceptedFileType = MIMEtype !== null ? MIMEtype.test(file.type) : true\n\n        if( exceedMaxFileSize || !isAcceptedFileType ){\n            obj.result = false\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {}\n            }\n            if( exceedMaxFileSize ){ obj.errors.maxFileSize = true }\n            if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true }\n\n        }\n    })\n\n    return obj\n}\n","\nexport const length = function( value, $field ){\n    const valueL = value.length\n    const attrValue = JSON.parse( $field.dataset.length )\n    const isMinlengthOk = valueL >= attrValue[0]\n    const isMaxlengthOk = valueL <= attrValue[1]\n    const obj = { result: isMinlengthOk && isMaxlengthOk }\n\n    if( !obj.result ){\n        obj.errors = {}\n        if( !isMinlengthOk ){ obj.errors.minlength = true }\n        if( !isMaxlengthOk ){ obj.errors.maxlength = true }\n    }\n\n    return obj\n}\n","\nimport { getDateAsNumber } from '../helpers'\n\nexport const max = function( value, $field ){\n    let maxVal = $field.max\n    const dateFormat = $field.dataset.dateFormat\n    \n    if( $field.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat )\n        maxVal = maxVal.split('-').join('')\n    }\n\n    value = value * 1\n    maxVal = maxVal * 1\n    \n    return { result: value <= maxVal }\n}\n","\nexport const maxlength = function( value, $field ){\n    return { result: value.length <= $field.maxLength * 1 }\n}\n","\nimport { getDateAsNumber } from '../helpers'\n\nexport const min = function( value, $field ){\n    let minVal = $field.min\n    const dateFormat = $field.dataset.dateFormat\n    \n    if( $field.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat )\n        minVal = minVal.split('-').join('')\n    }\n\n    value = value * 1\n    minVal = minVal * 1\n    \n    return { result: value >= minVal }\n}\n","\nexport const minlength = function( value, $field ){\n    return { result: value.length >= $field.minLength * 1 }\n}\n","\nexport const pattern = function( value, $field ){\n    return { result: new RegExp($field.pattern).test(value) }\n}\n","\nimport { getFormFields } from '../helpers'\n\nexport const radio = function( value, $field ){\n    const $fieldChecked = getFormFields($field.form).find( $el => $el.matches(`[name=\"${$field.name}\"]:checked`) )\n    const isValid = $fieldChecked !== null && $fieldChecked.value.trim().length > 0\n\n    return { result: isValid }\n}\n","\nimport {    \n    getFormFields,\n    getJSONobjectFromFieldAttribute,\n    isDOMNode,\n    mergeObjects,\n    mergeValidateFieldDefault,\n    removeClass,\n    runFunctionsSequence\n}                   from './helpers'\nimport { isValid }  from './isValid'\n\nexport async function checkFieldValidity( $field, fieldOptions, validationRules, validationErrors ){\n\n    if( !isDOMNode($field) ){\n        const obj = mergeValidateFieldDefault({$field})\n        return Promise.resolve(obj)\n    }\n\n    const $form = $field.form\n    const $formFields = getFormFields($form)\n    const isValidValue = $field.value.trim().length > 0\n    const dataFieldOptions = getJSONobjectFromFieldAttribute( $field, 'data-field-options' )\n\n    fieldOptions = mergeObjects( fieldOptions, dataFieldOptions )\n\n    // HANDLE FIELD data-required-from WHEN CHANGING ITS RELATED RADIO\n    if( $field.type === 'radio' ){\n        const $checked = $field.checked ? $field : $formFields.find($el => $el.matches(`[name=\"${$field.name}\"]:checked`))\n        const reqMoreIsChecked = $checked && $checked.matches('[data-require-more]')\n        const $findReqMore = reqMoreIsChecked ? $checked : $formFields.find($el => $el.matches(`[data-require-more][name=\"${$field.name}\"]`))\n        const $findReqFrom = $findReqMore ? $formFields.find($el => $el.matches(`[data-required-from=\"#${$findReqMore.id}\"]`)) : null\n        \n        if( $checked && $findReqFrom ){\n            $findReqFrom.required = $findReqMore.required && $findReqMore.checked\n            if( !reqMoreIsChecked ){\n                $findReqFrom.value = ''\n            } else if( fieldOptions.focusOnRelated ) {\n                $findReqFrom.focus()\n            }\n        }\n    }\n\n    // HANDLE FIELD data-require-more & data-required-from WHEN *-from IT'S FILLED\n    if( $field.matches('[data-required-from]') && isValidValue ){\n        const $reqMore = $formFields.find( $el => $el.matches($field.dataset.requiredFrom) )\n        $reqMore.checked = true\n        $field.required = $reqMore.required\n    }\n\n    const dataBeforeValidation = (await runFunctionsSequence({\n        functionsList: fieldOptions.beforeValidation,\n        data: { $field, fieldOptions }\n    })).pop()\n\n    const needsValidation = $field.required || ($field.matches('[data-validate-if-filled]') && isValidValue)\n\n    if( !needsValidation ){\n        delete dataBeforeValidation.fieldOptions\n        dataBeforeValidation.result = true\n    }\n    \n    const validationResult = needsValidation ? await isValid($field, fieldOptions, validationRules, validationErrors) : dataBeforeValidation\n\n    const $container = fieldOptions.questionContainer && validationResult.$field.closest( fieldOptions.questionContainer )\n    removeClass( $container, fieldOptions.cssClasses.pending )\n    \n    return validationResult\n\n}\n","\nimport { getFormFields, mergeObjects, mergeValidateFieldDefault, toCamelCase } from './helpers'\n\nexport async function isValid( $field, fieldOptions, validationRules, validationErrors ){\n\n    const fieldValue = $field.value\n    const obj = mergeValidateFieldDefault({result: fieldValue.trim().length > 0, $field})\n    const isCheckboxOrRadio = ['checkbox', 'radio'].includes($field.type)\n    const hasSelectedInput = getFormFields($field.form).filter($el => $el.matches(`[name=\"${$field.name}\"]:checked`)).length > 0\n\n    if( (!isCheckboxOrRadio && !obj.result) || (isCheckboxOrRadio && !hasSelectedInput) ){\n        obj.result = false\n        obj.errors = { empty: true }\n        return Promise.resolve(obj)\n    }\n\n    // COLLECT VALIDATION METHOD NAMES ( USED TO RUN VALIDATIONS AND GET ERRORS )\n    const validationMethods = Array.from($field.attributes).reduce((accList, attr) => {\n        const attrName = toCamelCase( attr.name.replace('data-', '') )\n        const attrValue = toCamelCase( attr.value )\n        const isAttrValueWithFn = ['type', 'subtype'].includes(attrName) && validationRules[attrValue]\n        const isAttrNameWithFn = validationRules[attrName]\n\n        if( isAttrValueWithFn || isAttrNameWithFn ){\n            accList.push( isAttrValueWithFn ? attrValue : attrName )\n        }\n        return accList\n    }, [])\n\n    const validity = await new Promise(resolve => {\n\n        // RUN VALIDATIONS\n        const validationsResult = validationMethods.reduce((accPromise, methodName) => {\n            return accPromise.then(accObj => {\n                return new Promise(resolveVal => {\n                    // RUN VALIDATION INSIDE A PROMISE IS USEFUL FOR ASYNC VALIDATIONS\n                    resolveVal( validationRules[methodName](fieldValue, $field, fieldOptions) )\n                }).then(valObj => {\n                    // ADD CUSTOM ERROR-KEY FOR EACH VALIDATION RULE\n                    if( !valObj.result ){\n                        const errorObj = {}\n                        if( typeof valObj.errors === 'undefined' || typeof valObj.errors[methodName] === 'undefined' ){\n                            errorObj[methodName] = true\n                        }\n                        valObj.errors = mergeObjects({}, valObj.errors, errorObj)\n                    }\n                    valObj = valObj.result ? {} : valObj\n                    return mergeObjects(accObj, valObj)\n                })\n            })\n        }, Promise.resolve(obj))\n        resolve(validationsResult)\n\n    })\n\n    if( !validity.result ){\n        validity.errors = validationMethods.reduce((accObj, methodName) => {\n            const errors = (validationErrors[methodName] && validationErrors[methodName](fieldValue, $field)) || {}\n            return mergeObjects(accObj, errors)\n        }, validity.errors)\n    }\n\n    return validity\n\n}\n","\nimport { getUniqueFields, mergeValidateFieldDefault, mergeValidateFormDefault, mergeObjects } from './helpers'\nimport { checkFieldValidity } from './checkFieldValidity'\n\nexport async function checkFieldsValidity( $fields, fieldOptions, validationRules, validationErrors, fieldToSkip = null ){\n\n    fieldOptions = mergeObjects( {}, fieldOptions, {focusOnRelated: false} )\n    const $fieldsList = getUniqueFields( $fields )\n\n    const fieldsValidity = await Promise.all( $fieldsList.map($field => {\n\n        if( fieldToSkip && $field === fieldToSkip ){\n            const obj = mergeValidateFieldDefault({$field, result: true})\n            return Promise.resolve(obj)\n        }\n        \n        return checkFieldValidity( $field, fieldOptions, validationRules, validationErrors )\n\n    }) )\n\n    const areAllFieldsValid = fieldsValidity.every(({result}) => result)\n\n    return mergeValidateFormDefault({result: areAllFieldsValid, fields:fieldsValidity})\n\n}\n","\nimport { mergeObjects } from './mergeObjects'\n\nexport const mergeValidateFormDefault = obj => {\n    return mergeObjects({}, { result: true, fields: [] }, obj)\n}\n","\nimport { version }              from '../package.json'\nimport { \n    checkFormEl,\n    dispatchCustomEvent,\n    finalizeFieldPromise,\n    finalizeFormPromise,\n    getFormFields,\n    isNodeList,\n    mergeObjects }              from './modules/helpers'\nimport { customEvents }         from './modules-lite/helpers/customEvents'\nimport { options }              from './modules-lite/options'\nimport { validationRules }      from './modules/validationRules'\nimport { checkFieldValidity }   from './modules/checkFieldValidity'\nimport { checkFieldsValidity }  from './modules/checkFieldsValidity'\n\nclass Form {\n\n    constructor( form, optionsObj ){\n        const argsL = arguments.length\n        const checkFormElem = checkFormEl(form)\n\n        if( argsL === 0 || (argsL > 0 && !form) ){\n            throw new Error('First argument \"form\" is missing or falsy!')\n        }\n        if( isNodeList(form) ){\n            throw new Error('First argument \"form\" must be a single DOM node or a form CSS selector, not a NodeList!')\n        }\n        if( !checkFormElem.result ){\n            throw new Error('First argument \"form\" is not a DOM node nor a form CSS selector!')\n        }\n\n        const self = this\n\n        self.$form = checkFormElem.$el\n        self.$form.formjs = self\n        self.options = mergeObjects({}, Form.prototype.options, optionsObj)\n\n        // BINDING CONTEXT FOR FUTURE EXECUTION\n        self.options.fieldOptions.beforeValidation = self.options.fieldOptions.beforeValidation.map(cbFn => cbFn.bind(self))\n\n        self.$form.noValidate = true\n\n        dispatchCustomEvent( self.$form, customEvents.form.init )\n    }\n\n    destroy(){\n        delete this.$form.formjs\n        dispatchCustomEvent( this.$form, customEvents.form.destroy )\n    }\n\n    async validateField( field, fieldOptions ){\n        const self = this\n        let $field = field\n\n        if( typeof field === 'string' ){\n            const element = self.$form.elements.namedItem(field)\n            if( isDOMNode(element) ){\n                $field = element\n            } else {\n                $field = element[0]\n            }\n        }\n        \n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions)\n        \n        const fieldValidity = await checkFieldValidity($field, fieldOptions, self.validationRules, self.validationErrors)\n\n        dispatchCustomEvent( fieldValidity.$field, customEvents.field.validation, { detail: fieldValidity } )\n\n        return finalizeFieldPromise(fieldValidity)\n    }\n\n    async validateForm( fieldOptions ){\n        const self = this\n        const $form = self.$form\n        const $fields = getFormFields( $form, { hidden: false } )\n\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions)\n\n        const formVaidity = await checkFieldsValidity($fields, fieldOptions, self.validationRules, self.validationErrors)\n\n        formVaidity.fields.forEach(obj => {\n            obj.isCheckingForm = true\n            dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } )\n        })\n\n        dispatchCustomEvent( $form, customEvents.form.validation, { detail: formVaidity } )\n\n        return finalizeFormPromise(formVaidity)\n    }\n    \n    static addValidationErrors( errorsObj ){\n        Form.prototype.validationErrors = mergeObjects({}, Form.prototype.validationErrors, errorsObj)\n    }\n\n    static addValidationRules( rulesObj ){\n        Form.prototype.validationRules = mergeObjects({}, Form.prototype.validationRules, rulesObj)\n    }\n    \n    static setOptions( optionsObj ){\n        Form.prototype.options = mergeObjects({}, Form.prototype.options, optionsObj)\n    }\n\n}\n\nForm.prototype.options = options\nForm.prototype.validationErrors = {}\nForm.prototype.validationRules = validationRules\nForm.prototype.version = version\n\nexport default Form\n","\nimport { isDOMNode } from './isDOMNode'\n\nexport const checkFormEl = form => {\n    const formIsString = typeof form === 'string'\n    const isValidNodeSelector = formIsString && isDOMNode(document.querySelector(form))\n    const isFormSelector = isValidNodeSelector && document.querySelector(form).tagName.toLowerCase() === 'form'\n    \n    return {\n        result: isDOMNode(form) || isFormSelector,\n        $el: (formIsString ? document.querySelector(form) : form)\n    }\n}\n","\nexport const finalizeFieldPromise = ({errors, result}) => {\n    if( result ){\n        return Promise.resolve()\n    }\n    return Promise.reject(errors)\n}\n","\nexport const finalizeFormPromise = ({fields, result}) => {\n    if( result ){\n        return Promise.resolve(fields)\n    }\n    return Promise.reject(fields)\n}\n","\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [],\n        focusOnRelated:         true,\n        maxFileSize:            10\n    }\n    \n}\n"],"names":["removeClass","element","cssClasses","classList","remove","split","isDOMNode","node","Element","prototype","isPrototypeOf","mergeObjects","out","Array","from","arguments","slice","filter","arg","forEach","Object","keys","key","object","isArray","concat","toString","call","push","dispatchCustomEvent","elem","eventName","eventOptions","bubbles","eventObj","CustomEvent","dispatchEvent","formatMap","dateArray","reverse","getDateAsNumber","dateString","dateFormat","splitChar","string","separator","match","length","getSplitChar","indexOf","replace","join","getUniqueFields","$nodeList","currentFieldName","currentFieldType","$field","name","type","matches","getFormFields","$form","unique","hidden","file","excludeData","FIELDS_SELECTOR","elements","$el","getJSONobjectFromFieldAttribute","attrName","$customAttr","closest","JSON","parse","getAttribute","mergeValidateFieldDefault","obj","result","runFunctionsSequence","functionsList","data","stopConditionFn","reduce","acc","promiseFn","then","res","dataNew","Promise","resolve","dataList","toCamelCase","all","letter","toUpperCase","customEvents","validation","destroy","init","validationRules","date","test","email","number","checkbox","value","$dataChecks","form","find","attrValue","dataset","checks","checkedLength","isMinOk","isMaxOk","errors","minChecks","maxChecks","checked","equalTo","exactLength","valueLength","minlength","maxlength","fieldOptions","maxFileSize","MIMEtype","accept","RegExp","filesList","files","exceedMaxFileSize","size","isAcceptedFileType","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","max","maxVal","maxLength","min","minVal","minLength","pattern","radio","$fieldChecked","trim","async","checkFieldValidity","validationErrors","$formFields","isValidValue","dataFieldOptions","$checked","reqMoreIsChecked","$findReqMore","$findReqFrom","id","required","focusOnRelated","focus","$reqMore","requiredFrom","dataBeforeValidation","beforeValidation","pop","needsValidation","validationResult","fieldValue","isCheckboxOrRadio","includes","hasSelectedInput","empty","validationMethods","attributes","accList","attr","isAttrValueWithFn","isAttrNameWithFn","validity","accPromise","methodName","accObj","resolveVal","valObj","errorObj","isValid","$container","questionContainer","pending","checkFieldsValidity","$fields","fieldToSkip","$fieldsList","fieldsValidity","map","areAllFieldsValid","every","fields","Form","constructor","optionsObj","argsL","checkFormElem","formIsString","isFormSelector","document","querySelector","tagName","toLowerCase","checkFormEl","Error","nodeList","NodeList","self","this","formjs","options","cbFn","bind","noValidate","validateField","field","namedItem","fieldValidity","detail","reject","finalizeFieldPromise","validateForm","formVaidity","isCheckingForm","finalizeFormPromise","addValidationErrors","errorsObj","addValidationRules","rulesObj","setOptions","version"],"mappings":"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"}