{"version":3,"file":"formjs-esm.min.js","sources":["../../src/modules/version.js","../../src/modules/helpers/isNodeList.js","../../src/modules/helpers/isDOMNode.js","../../src/modules/helpers/checkFormEl.js","../../src/modules/helpers/mergeObjects.js","../../src/modules/helpers/getSplitChar.js","../../src/modules/helpers/getValidateFieldDefault.js","../../src/modules/helpers/toCamelCase.js","../../src/modules/validationRules.js","../../src/modules/validationRules/date.js","../../src/modules/validationRules/email.js","../../src/modules/validationRules/number.js","../../src/modules/validationRules/checks.js","../../src/modules/validationRulesAttributes.js","../../src/modules/validationRules/checkbox.js","../../src/modules/validationRules/equalTo.js","../../src/modules/validationRules/exactLength.js","../../src/modules/validationRules/file.js","../../src/modules/validationRules/length.js","../../src/modules/validationRules/max.js","../../src/modules/validationRules/maxlength.js","../../src/modules/validationRules/min.js","../../src/modules/validationRules/minlength.js","../../src/modules/validationRules/pattern.js","../../src/modules/validationRules/radio.js","../../src/modules/validationRules/requiredFrom.js","../../src/modules/checkFieldValidity.js","../../src/modules/helpers/runFunctionsSequence.js","../../src/modules/isValid.js","../../src/modules/checkFormValidity.js","../../src/modules/helpers/getValidateFormDefault.js","../../src/modules/helpers/getUniqueFields.js","../../src/modules/helpers/fieldsStringSelector.js","../../src/index-lite.js","../../src/modules-lite/constructor.js","../../src/modules-lite/options.js"],"sourcesContent":["\nexport const version = '4.0.2';\n","\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList );\n}\n","\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node );\n}\n","\nimport { isDOMNode } from './isDOMNode';\n\nexport const checkFormEl = formEl => {\n    let isString = typeof formEl,\n        isValidNodeSelector = isString === 'string' && isDOMNode(document.querySelector(formEl)),\n        isFormSelector = isValidNodeSelector && document.querySelector(formEl).tagName.toLowerCase() === 'form',\n        obj = {\n            result: isDOMNode(formEl) || isFormSelector,\n            element: (isString === 'string' ? document.querySelector(formEl) : formEl)\n        };\n\n    return obj;\n}\n","\nexport const mergeObjects = function( out = {} ){\n    for(let i=1; i<arguments.length; i++){\n        let obj = arguments[i];\n\n        if(!obj){ continue; }\n\n        for(let key in obj){\n            let isArray = Object.prototype.toString.call(obj[key]) === \"[object Array]\";\n            let isObject = Object.prototype.toString.call(obj[key]) === \"[object Object]\";\n\n            // COPY ONLY ENUMERABLE PROPERTIES\n            if( obj.hasOwnProperty(key) ){\n                if( isArray ){\n\n                    if( typeof out[key] === 'undefined' ){\n                        out[key] = [];\n                    }\n                    out[key] = out[key].concat( obj[key].slice(0) );\n\n                } else if( isObject ){\n\n                    out[key] = mergeObjects(out[key], obj[key]);\n\n                } else {\n\n                    // * STRING | NUMBER | BOOLEAN | FUNCTION\n                    if( Array.isArray(out[key]) ){\n                        // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                        out[key].push(obj[key]);\n                    } else {\n                        out[key] = obj[key];\n                    }\n\n                }\n            }\n        }\n    }\n\n    return out;\n}\n","\nexport const getSplitChar = string => {\n    // MATCH ANY NON-DIGIT CHAR\n    const separator = string.match(/\\D/);\n    return (separator && separator.length > 0) ? separator[0] : null;\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const getValidateFieldDefault = obj => {\n    return mergeObjects({}, { result: false, fieldEl: null }, obj);\n}\n","\nexport const toCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase(); });\n}\n","\nimport { date }         from './validationRules/date';\nimport { email }        from './validationRules/email';\nimport { number }       from './validationRules/number';\n\nexport const validationRules = {\n    date,\n    email,\n    number\n}\n","\n/*\n    DATE AS ISO 8601 DATE FORMAT:\n    YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n*/\n\nexport const date = function( string ){\n    let date = /^((((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13578]|1[02])[ \\/\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13456789]|1[012])[ \\/\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.]02[ \\/\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ \\/\\-.]02[ \\/\\-.]29))$/g.test( string ),\n        obj = {\n            result: date\n        };\n\n    return obj;\n}\n","\n// https://regex101.com/r/cdlyJy/3\n\nexport const email = function( string ){\n    let obj = {\n        result: /^[a-zA-Z_-]([\\w.-]?[a-zA-Z0-9])*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?){2,})+$/.test( string )\n    };\n\n    return obj;\n}\n","\n/*\n    ALL NUMBERS ( INTEGERS AND FLOATING )\n    VALID NUMBERS: 123 | 123.456 | .123\n*/\n\nexport const number = function( string ){\n    let obj = {\n        result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n    };\n\n    return obj;\n}","\nexport const checks = function( fieldEl ){\n    try {\n        let attrValue = JSON.parse( fieldEl.getAttribute('data-checks') ),\n            checkedElLength = fieldEl.closest('form').querySelectorAll('[name=\"' + fieldEl.name + '\"]:checked').length,\n            isMinOk = checkedElLength >= attrValue[0],\n            isMaxOk = checkedElLength <= attrValue[1],\n            obj = { result: isMinOk && isMaxOk };\n\n        if( !obj.result ){\n            obj.errors = { checks: true };\n            if( !isMinOk ){ obj.errors.minChecks = true; }\n            if( !isMaxOk ){ obj.errors.maxChecks = true; }\n        }\n\n        return obj;\n    } catch(e){\n        throw new Error('\"data-checks\" attribute is not a valid array!');\n    }\n}\n","\nimport { checkbox }     from './validationRules/checkbox';\nimport { equalTo }      from './validationRules/equalTo';\nimport { exactLength }  from './validationRules/exactLength';\nimport { file }         from './validationRules/file';\nimport { length }       from './validationRules/length';\nimport { max }          from './validationRules/max';\nimport { maxlength }    from './validationRules/maxlength';\nimport { min }          from './validationRules/min';\nimport { minlength }    from './validationRules/minlength';\nimport { pattern }      from './validationRules/pattern';\nimport { radio }        from './validationRules/radio';\nimport { requiredFrom } from './validationRules/requiredFrom';\n\nexport const validationRulesAttributes = {\n    checkbox,\n    equalTo,\n    exactLength,\n    file,\n    length,\n    max,\n    maxlength,\n    min,\n    minlength,\n    pattern,\n    radio,\n    requiredFrom,\n}\n","\nimport { checks } from './checks';\n\nexport const checkbox = function( fieldEl ){\n    let dataChecksEl = fieldEl.closest('form').querySelector('[name=\"' + fieldEl.name + '\"][data-checks]');\n    return dataChecksEl ? checks(dataChecksEl): {result: fieldEl.checked};\n}\n","\nexport const equalTo = function( fieldEl ){\n    let checkFromEl = fieldEl.closest('form').querySelector( '[name=\"' + fieldEl.getAttribute('data-equal-to') + '\"]' ),\n        obj = { result: !!checkFromEl && fieldEl.value === checkFromEl.value };\n\n    if( !obj.result ){\n        obj.errors = { equalTo: true };\n    }\n\n    return obj;\n}\n","\nexport const exactLength = function( fieldEl ){\n    try {\n        let valueLength = fieldEl.value.length,\n            exactLength = fieldEl.getAttribute('data-exact-length') * 1,\n            obj = { result: !Number.isNaN(exactLength) && valueLength === exactLength };\n\n        if( !obj.result ){\n            obj.errors = { exactLength: true };\n            if( valueLength < exactLength ){ obj.errors.minlength = true; }\n            else { obj.errors.maxlength = true; }\n        }\n\n        return obj;\n    }catch(e){\n        throw new Error('\"data-exact-length\" attribute is not a number!');\n    }\n}\n","\nexport const file = function( fieldEl, fieldOptions ){\n    let maxFileSize = (fieldEl.getAttribute('data-max-file-size') || fieldOptions.maxFileSize) * 1,\n        MIMEtype = (fieldEl.accept ? new RegExp(fieldEl.accept.replace( '*', '[^\\\\/,]+' )) : null),\n        filesList = Array.from(fieldEl.files),\n        obj = { result: true };\n\n    filesList.forEach(function( file ){\n        let exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize,\n            isAcceptedFileType = (MIMEtype !== null ? MIMEtype.test(file.type) : true);\n\n        if( exceedMaxFileSize || !isAcceptedFileType ){\n            obj.result = false;\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {};\n            }\n            obj.errors.file = true;\n            if( exceedMaxFileSize ){ obj.errors.maxFileSize = true; }\n            if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true; }\n\n        }\n    });\n\n    return obj;\n}\n","\nexport const length = function( fieldEl ){\n    try {\n        let valueL = fieldEl.value.length,\n            attrValue = JSON.parse( fieldEl.getAttribute('data-length') ),\n            isMinlengthOk = valueL >= attrValue[0],\n            isMaxlengthOk = valueL <= attrValue[1],\n            obj = { result: isMinlengthOk && isMaxlengthOk };\n\n        if( !obj.result ){\n            obj.errors = { stringLength: true };\n            if( !isMinlengthOk ){ obj.errors.minlength = true; }\n            if( !isMaxlengthOk ){ obj.errors.maxlength = true; }\n        }\n\n        return obj;\n    } catch(e){\n        throw new Error('\"data-length\" attribute is not a valid array!');\n    }\n}\n","\nimport { getSplitChar } from '../helpers';\n\nexport const max = function( fieldEl ){\n    let value = fieldEl.value,\n        maxVal = fieldEl.max;\n    \n    //  if( fieldEl.type === 'date' || fieldEl.getAttribute('data-date-format') ){\n    if( fieldEl.type === 'date' ){\n        let splitChar = getSplitChar( value );\n        value = value.split( splitChar ).join('');\n        maxVal = maxVal.split('-').join('');\n    }\n\n    value = value * 1;\n    maxVal = maxVal * 1;\n\n    let obj = { result: value <= maxVal };\n\n    if( !obj.result ){\n        obj.errors = { max: true };\n    }\n    \n    return obj;\n}\n","\nexport const maxlength = function( fieldEl ){\n    try {\n        const obj = { result: fieldEl.value.length <= fieldEl.maxLength * 1 };\n\n        if( !obj.result ){\n            obj.errors = { maxlength: true };\n        }\n\n        return obj;\n    }catch(e){\n        throw new Error('\"maxlength\" is not a number!');\n    }\n}\n","\nimport { getSplitChar } from '../helpers';\n\nexport const min = function( fieldEl ){\n    let value = fieldEl.value,\n        minVal = fieldEl.min;\n    \n    //  if( fieldEl.type === 'date' || fieldEl.getAttribute('data-date-format') ){\n    if( fieldEl.type === 'date' ){\n        let splitChar = getSplitChar( value );\n        value = value.split( splitChar ).join('');\n        minVal = minVal.split('-').join('');\n    }\n\n    value = value * 1;\n    minVal = minVal * 1;\n\n    let obj = { result: value >= minVal };\n\n    if( !obj.result ){\n        obj.errors = { min: true };\n    }\n    \n    return obj;\n}\n","\nexport const minlength = function( fieldEl ){\n    try {\n        const obj = { result: fieldEl.value.length >= fieldEl.minLength * 1 };\n\n        if( !obj.result ){\n            obj.errors = { minlength: true };\n        }\n\n        return obj;\n    }catch(e){\n        throw new Error('\"minlength\" is not a number!');\n    }\n}\n","\nexport const pattern = function( fieldEl ){\n    try {\n        let fieldPattern = fieldEl.pattern,\n            fieldRegex = new RegExp( fieldPattern ),\n            obj = { result: fieldRegex.test( fieldEl.value ) };\n\n        if( !obj.result ){\n            obj.errors = { pattern: true };\n        }\n\n        return obj;\n    }catch(e){\n        throw new Error('\"pattern\" is not a valid RegExp!');\n    }\n}\n","\nexport const radio = function( fieldEl ){\n    let fieldChecked = fieldEl.closest('form').querySelector( '[name=\"'+ fieldEl.name +'\"]:checked' ),\n        isValid = fieldChecked !== null && fieldChecked.value.trim().length > 0;\n\n    return { result: isValid };\n}\n","\nexport const requiredFrom = function( fieldEl ){\n    let formEl = fieldEl.closest('form'),\n        isValidValue = fieldEl.value.trim().length > 0,\n        reqMoreEl = formEl.querySelector( fieldEl.getAttribute('data-required-from') ),\n        checkedEl = formEl.querySelector( '[name=\"'+ reqMoreEl.name +'\"]:checked' ),\n        obj = { result: checkedEl !== null };\n\n    if( reqMoreEl.checked && reqMoreEl.required ){\n        obj.result = isValidValue;\n    }\n\n    if( !obj.result ){\n        obj.errors = { requiredFrom: true };\n    }\n    \n    return obj;\n}\n","\nimport { getValidateFieldDefault, isDOMNode, runFunctionsSequence } from './helpers';\nimport { isValid } from './isValid';\n\nexport function checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    if( !isDOMNode(fieldEl) ){\n        const obj = getValidateFieldDefault({fieldEl});\n        return Promise.resolve(obj);\n    }\n\n    const formEl = fieldEl.closest('form'),\n          isValidValue = fieldEl.value.trim().length > 0;\n\n     // HANDLE FIELDS radio/data-require-more\n     if( fieldEl.type === 'radio' ){\n        const checkedEl = fieldEl.checked ? fieldEl : formEl.querySelector('[name=\"'+ fieldEl.name +'\"]:checked'),\n              reqMoreIsChecked = checkedEl.matches('[data-require-more]'),\n              findReqMoreEl = reqMoreIsChecked ? checkedEl : formEl.querySelector('[data-require-more][name=\"'+ fieldEl.name +'\"]'),\n              findReqFromEl = findReqMoreEl ? formEl.querySelector('[data-required-from=\"#'+ findReqMoreEl.id +'\"]') : null;\n        \n        if( checkedEl && findReqFromEl ){\n            findReqFromEl.required = findReqMoreEl.required && findReqMoreEl.checked;\n            if( !reqMoreIsChecked ){\n                findReqFromEl.value = '';\n            } else if( fieldOptions.focusOnRelated ) {\n                findReqFromEl.focus();\n            }\n        }\n    }\n\n    // HANDLE FIELDS data-required-from\n    if( fieldEl.matches('[data-required-from]') && isValidValue ){\n        const reqMoreEl = formEl.querySelector( fieldEl.getAttribute('data-required-from') );\n        reqMoreEl.checked = true;\n        fieldEl.required = reqMoreEl.required;\n    }\n\n    const needsValidation = fieldEl.required || (fieldEl.matches('[data-validate-if-filled]') && isValidValue);\n\n    return runFunctionsSequence({\n            functionsList: fieldOptions.beforeValidation,\n            data: {fieldEl}\n        })\n        .then(data => {\n            let dataObj = data.pop();\n            return new Promise(resolve => {\n                if( !needsValidation ){\n                    dataObj.result = true;\n                }\n                resolve( needsValidation ? isValid(fieldEl, fieldOptions, validationRules, validationErrors) : dataObj );\n            });\n        });\n\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const runFunctionsSequence = ( { functionsList = [], data = {}, stopConditionFn = () => false } = {} ) => {\n    return functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1]);\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res);\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result);\n                    return res;\n                });\n        });\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList);\n}\n","\nimport { getValidateFieldDefault, mergeObjects, toCamelCase } from './helpers';\nimport { validationRulesAttributes } from './validationRulesAttributes';\n\nexport function isValid( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    const fieldType = fieldEl.matches('[data-subtype]') ? toCamelCase(fieldEl.getAttribute('data-subtype')) : fieldEl.type,\n          fieldValue = fieldEl.value,\n          isValidValue = fieldValue.trim().length > 0;\n\n    let obj = getValidateFieldDefault({result: isValidValue, fieldEl});\n\n    if( !obj.result ){\n        obj.errors = { empty: true };\n        return Promise.resolve(obj);\n    }\n\n    let attrValidationsResult;\n\n    return new Promise(resolve => {\n\n        // RUN SPECIFIC VALIDATIONS FOR validationRulesAttributes\n        attrValidationsResult = Array.from(fieldEl.attributes).reduce((valResult, attr) => {\n            // FOR data-* ATTRIBUTES -> REMOVE \"data-\" AND TRANSFORM TO CAMELCASE\n            const attrName = toCamelCase( attr.name.replace('data-', '') ),\n                  attrValue = attr.value,\n                  isAttrValueWithFn = attrName === 'type' && typeof validationRulesAttributes[attrValue] === 'function',\n                  isAttrNameWithFn = typeof validationRulesAttributes[attrName] === 'function';\n\n            if( isAttrValueWithFn || isAttrNameWithFn ){\n                const method = isAttrValueWithFn ? attrValue : attrName;\n                const extraVal = validationRulesAttributes[method]( fieldEl, fieldOptions );\n                if( !extraVal.result ){\n                    obj = mergeObjects({}, obj, extraVal);\n                    return false;\n                }\n            }\n            return valResult;\n        }, isValidValue);\n\n        // RUN VALIDATION FOR validationRules\n        if( typeof validationRules[fieldType] === 'function' ){\n            resolve( validationRules[fieldType](fieldValue, fieldEl) );\n        } else {\n            resolve( obj );\n        }\n\n    }).then(data => {\n\n        obj = mergeObjects( {}, obj, data );\n        obj.result = obj.result && attrValidationsResult;\n\n        if( !obj.result ){\n            const fieldErrors = (typeof validationErrors[fieldType] === 'function' ? validationErrors[fieldType](fieldValue, fieldEl) : {});\n            obj.errors = mergeObjects({}, obj.errors || {}, fieldErrors);\n            obj.errors.rule = true;\n        }\n        \n        return obj;\n\n    });\n\n}\n","\nimport { fieldsStringSelector, getUniqueFields, getValidateFieldDefault, getValidateFormDefault, mergeObjects } from './helpers';\nimport { checkFieldValidity } from './checkFieldValidity';\n\nexport function checkFormValidity( formEl, fieldOptions, validationRules, validationErrors, fieldToSkip = null ){\n\n    fieldOptions = mergeObjects( {}, fieldOptions, {focusOnRelated: false} );\n\n    const obj = getValidateFormDefault(),\n          fieldsList = getUniqueFields( formEl.querySelectorAll(fieldsStringSelector) );\n\n    return Promise.all( fieldsList.map(fieldEl => {\n\n        if( fieldToSkip && fieldEl === fieldToSkip ){\n            const obj2 = getValidateFieldDefault({fieldEl, result: true});\n            return Promise.resolve(obj2);\n        }\n        \n        return checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors );\n\n    }) ).then(list => {\n\n        let areAllFieldsValid = list.filter(fieldObj => !fieldObj.result).length === 0;\n        obj.result = areAllFieldsValid;\n        obj.fields = list;\n\n        return obj;\n\n    });\n\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const getValidateFormDefault = obj => {\n    return mergeObjects({}, { result: true, fields: [] }, obj);\n}\n","\nexport const getUniqueFields = nodeList => {\n\n    let currentFieldName = '',\n        currentFieldType = '';\n\n    return Array.from( nodeList ).filter(fieldEl => {\n        const name = fieldEl.name,\n              type = fieldEl.type;\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false;\n        }\n        \n        if( !fieldEl.matches('[data-required-from]') ){\n            currentFieldName = name;\n            currentFieldType = type;\n        }\n        return true;\n    });\n    \n}\n","\nexport const fieldsStringSelector = 'input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"hidden\"]), select, textarea'\n","\nimport { version }              from './modules/version';\nimport { mergeObjects }         from './modules/helpers';\nimport { options }              from './modules-lite/options';\nimport { validationRules }      from './modules/validationRules';\nimport { constructorFn }        from './modules-lite/constructor';\nimport { checkFieldValidity }   from './modules/checkFieldValidity';\nimport { checkFormValidity }    from './modules/checkFormValidity';\n\nclass Form {\n\n    constructor( formEl, optionsObj ){\n        constructorFn(this, formEl, optionsObj);\n    }\n\n    destroy(){\n        delete this.formEl.formjs;\n    }\n\n    validateField( fieldEl, fieldOptions ){\n        fieldEl = (typeof fieldEl === 'string' ? this.formEl.querySelector(fieldEl) : fieldEl);\n        fieldOptions = mergeObjects({}, this.options.fieldOptions, fieldOptions);\n        return checkFieldValidity(fieldEl, fieldOptions, this.validationRules, this.validationErrors);\n    }\n\n    validateForm( fieldOptions ){\n        fieldOptions = mergeObjects({}, this.options.fieldOptions, fieldOptions);\n        return checkFormValidity(this.formEl, fieldOptions, this.validationRules, this.validationErrors);\n    }\n    \n    static addValidationErrors( errorsObj ){\n        this.prototype.validationErrors = mergeObjects({}, this.prototype.validationErrors, errorsObj);\n    }\n\n    static addValidationRules( rulesObj ){\n        this.prototype.validationRules = mergeObjects({}, this.prototype.validationRules, rulesObj);\n    }\n    \n    static setOptions( optionsObj ){\n        this.prototype.options = mergeObjects({}, this.prototype.options, optionsObj);\n    }\n\n}\n\nForm.prototype.options = options;\nForm.prototype.validationErrors = {};\nForm.prototype.validationRules = validationRules;\nForm.prototype.version = version;\n\nexport default Form;\n","\nimport { checkFormEl, isNodeList, mergeObjects }   from '../modules/helpers';\n\nexport function constructorFn( self, formEl, optionsObj ){\n\n    let argsL = arguments.length,\n        checkFormElem = checkFormEl(formEl);\n\n    if( argsL === 0 || (argsL > 0 && !formEl) ){\n        throw new Error('First argument \"formEl\" is missing or falsy!');\n    }\n    if( isNodeList(formEl) ){\n        throw new Error('First argument \"formEl\" must be a single DOM node or a form CSS selector, not a NodeList!');\n    }\n    if( !checkFormElem.result ){\n        throw new Error('First argument \"formEl\" is not a DOM node nor a form CSS selector!');\n    }\n\n    self.formEl = checkFormElem.element;\n    self.formEl.formjs = self;\n    self.options = mergeObjects({}, self.constructor.prototype.options, optionsObj);\n\n    // BINDING CONTEXT FOR FUTURE EXECUTION\n    self.options.fieldOptions.beforeValidation = self.options.fieldOptions.beforeValidation.map(cbFn => cbFn.bind(self));\n\n    self.formEl.noValidate = true;\n    \n}\n","\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [],\n        maxFileSize:            10\n    }\n    \n}\n"],"names":["isNodeList","nodeList","NodeList","prototype","isPrototypeOf","isDOMNode","node","Element","checkFormEl","formEl","isString","isFormSelector","document","querySelector","tagName","toLowerCase","result","element","mergeObjects","out","i","arguments","length","obj","key","isArray","Object","toString","call","isObject","hasOwnProperty","concat","slice","Array","push","getSplitChar","string","separator","match","getValidateFieldDefault","fieldEl","toCamelCase","replace","all","letter","toUpperCase","validationRules","date","test","email","number","validationRulesAttributes","checkbox","dataChecksEl","closest","name","attrValue","JSON","parse","getAttribute","checkedElLength","querySelectorAll","isMinOk","isMaxOk","errors","checks","minChecks","maxChecks","e","Error","checked","equalTo","checkFromEl","value","exactLength","valueLength","Number","isNaN","minlength","maxlength","file","fieldOptions","maxFileSize","MIMEtype","accept","RegExp","filesList","from","files","forEach","exceedMaxFileSize","size","isAcceptedFileType","type","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","stringLength","max","maxVal","splitChar","split","join","maxLength","min","minVal","minLength","pattern","fieldPattern","radio","fieldChecked","trim","requiredFrom","isValidValue","reqMoreEl","required","checkFieldValidity","validationErrors","Promise","resolve","checkedEl","reqMoreIsChecked","matches","findReqMoreEl","findReqFromEl","id","focusOnRelated","focus","needsValidation","functionsList","data","stopConditionFn","reduce","acc","promiseFn","then","res","dataNew","dataList","runFunctionsSequence","beforeValidation","dataObj","pop","fieldType","fieldValue","attrValidationsResult","attributes","valResult","attr","attrName","isAttrValueWithFn","isAttrNameWithFn","extraVal","fieldErrors","rule","empty","isValid","checkFormValidity","fieldToSkip","fields","getValidateFormDefault","fieldsList","currentFieldName","currentFieldType","filter","getUniqueFields","map","obj2","list","areAllFieldsValid","fieldObj","Form","[object Object]","optionsObj","self","argsL","checkFormElem","formjs","options","constructor","cbFn","bind","noValidate","constructorFn","this","errorsObj","rulesObj","version"],"mappings":"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"}