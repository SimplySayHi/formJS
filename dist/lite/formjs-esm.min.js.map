{"version":3,"file":"formjs-esm.min.js","sources":["../../src/modules/helpers.js","../../src/modules/validationRules.js","../../src/modules/isValidField.js","../../src/modules/isValid.js","../../src/modules/isValidForm.js","../../src/index-lite.js","../../src/modules-lite/constructor.js","../../src/modules-lite/options.js"],"sourcesContent":["\nexport const\n\naddClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.add( className );\n    });\n},\n\ncheckDirtyField = ( fields, cssClasses ) => {\n\n    var fields = (isNodeList(fields) ? Array.from( fields ) : [fields]);\n    \n    fields.forEach(fieldEl => {\n        if( fieldEl.type !== 'checkbox' && fieldEl.type !== 'radio' ){\n            let containerEl = fieldEl.closest('[data-formjs-question]') || fieldEl;\n\n            if( fieldEl.value ){\n                \n                addClass( containerEl, cssClasses );\n                \n            } else {\n                \n                removeClass( containerEl, cssClasses );\n                \n            }\n        }\n    });\n    \n},\n\ncheckFormEl = formEl => {\n    let isString = typeof formEl,\n        isValidNodeSelector = isString === 'string' && isDOMNode(document.querySelector(formEl)),\n        isFormSelector = isValidNodeSelector && document.querySelector(formEl).tagName.toLowerCase() === 'form',\n        obj = {\n            result: isDOMNode(formEl) || isFormSelector,\n            element: (isString === 'string' ? document.querySelector(formEl) : formEl)\n        };\n\n    return obj;\n},\n\ncustomEvents = {\n    field: {\n        validation: 'fjs.field:validation'\n    },\n    form: {\n        submit:     'fjs.form:submit',\n        validation: 'fjs.form:validation'\n    }\n},\n\ndispatchCustomEvent = ( elem, eventName, data = {}, eventOptions = {} ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions);\n    const eventObj = new Event(eventName, eventOptions);\n    eventObj.data = data;\n    elem.dispatchEvent( eventObj );\n},\n\nexcludeSelector = ':not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"file\"]):not([data-exclude-data])',\n\nfieldsStringSelector = 'input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"hidden\"]), select, textarea',\n\ngetFilledFields = formEl => {\n    return getUniqueFields( formEl.querySelectorAll(fieldsStringSelector) )\n    .map(fieldEl => {\n\n        const name = fieldEl.name,\n              type = fieldEl.type,\n              isCheckboxOrRadio = (type === 'checkbox' || type === 'radio'),\n              fieldChecked = formEl.querySelector('[name=\"' + name + '\"]:checked'),\n              isReqFrom = fieldEl.matches('[data-required-from]'),\n              reqMoreEl = (isReqFrom ? formEl.querySelector(fieldEl.getAttribute('data-required-from')) : null);\n\n        return (\n            isCheckboxOrRadio ? (fieldChecked || null) :\n            (isReqFrom && reqMoreEl.checked) || (!isReqFrom && fieldEl.value) ? fieldEl : null\n        );\n\n    })\n    .filter(fieldEl => {\n        return  fieldEl !== null;\n    });\n},\n\ngetSplitChar = string => {\n    let splitChar = '.';\n\n    if( string.indexOf(splitChar) === -1 ){\n        if( string.indexOf('-') >= 0 ){\n            splitChar = '-';\n        } else if( string.indexOf('/') >= 0 ){\n            splitChar = '/';\n        }\n    }\n\n    return splitChar;\n},\n\ngetUniqueFields = nodeList => {\n\n    let currentFieldName = '',\n        currentFieldType = '';\n\n    return Array.from( nodeList ).filter(fieldEl => {\n        const name = fieldEl.name,\n              type = fieldEl.type;\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false;\n        }\n        \n        if( !fieldEl.matches('[data-required-from]') ){\n            currentFieldName = name;\n            currentFieldType = type;\n        }\n        return true;\n    });\n    \n},\n\nisDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node );\n},\n\nisFieldForChangeEvent = fieldEl => {\n    return fieldEl.matches('select, [type=\"radio\"], [type=\"checkbox\"], [type=\"file\"]');\n},\n\nisNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList );\n},\n\nisPlainObject = object => {\n    return Object.prototype.toString.call( object ) === '[object Object]';\n},\n\nmergeObjects = function( out = {} ){\n    for(let i=1; i<arguments.length; i++){\n        let obj = arguments[i];\n\n        if(!obj){ continue; }\n\n        for(let key in obj){\n            let isArray = Object.prototype.toString.call(obj[key]) === \"[object Array]\";\n            let isObject = Object.prototype.toString.call(obj[key]) === \"[object Object]\";\n\n            // COPY ONLY ENUMERABLE PROPERTIES\n            if( obj.hasOwnProperty(key) ){\n                if( isArray ){\n\n                    if( typeof out[key] === 'undefined' ){\n                        out[key] = [];\n                    }\n                    out[key] = out[key].concat( obj[key].slice(0) );\n\n                } else if( isObject ){\n\n                    out[key] = mergeObjects(out[key], obj[key]);\n\n                } else {\n\n                    // * STRING | NUMBER | BOOLEAN | FUNCTION\n                    if( Array.isArray(out[key]) ){\n                        // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                        out[key].push(obj[key]);\n                    } else {\n                        out[key] = obj[key];\n                    }\n\n                }\n            }\n        }\n    }\n\n    return out;\n},\n\nremoveClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.remove( className );\n    });\n},\n\nrunFunctionsSequence = ( { functionsList = [], data = {}, stopConditionFn = function(){return false} } = {} ) => {\n    return functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1]);\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res);\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result);\n                    return res;\n                });\n        });\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList);\n},\n\nserializeObject = obj => {\n    var objToString = (\n            (obj && typeof obj === 'object' && obj.constructor === Object) ? \n            Object.keys(obj)\n                .reduce((a,k) => {\n                    a.push(k+'='+encodeURIComponent(obj[k]));\n                    return a\n                },[]).join('&') : \n            obj\n    );\n    return objToString;\n},\n\ntoCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase(); });\n},\n\nvalidateFieldObjDefault = { result: false, fieldEl: null },\n\nvalidateFormObjDefault = { result: true, fields: [] }\n","\nimport { getSplitChar } from './helpers';\n\nexport const validationRules = {\n    \n    date: function( string ){\n        // DATE AS ISO 8601 DATE FORMAT     YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n\n        let date = /^((((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13578]|1[02])[ \\/\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13456789]|1[012])[ \\/\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.]02[ \\/\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ \\/\\-.]02[ \\/\\-.]29))$/g.test( string ),\n            obj = {\n                result: date\n            };\n\n        return obj;\n    },\n    \n    email: function( string ){\n        // https://regex101.com/r/cdlyJy/3\n        let obj = {\n            result: /^[a-zA-Z_-]([\\w.-]?[a-zA-Z0-9])*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?){2,})+$/.test( string )\n        };\n\n        return obj;\n    },\n    \n    number: function( string ){\n        // ALL NUMBERS ( INTEGERS AND FLOATING )\n        // VALID NUMBERS: 123 | 123.456 | .123\n        let obj = {\n            result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n        };\n\n        return obj;\n    }\n    \n}\n\nexport const validationRulesAttributes = {\n\n    checkbox: function( data ){\n        let formEl = data.fieldEl.closest('form'),\n            dataChecksEl = formEl.querySelector('[name=\"' + data.fieldEl.name + '\"][data-checks]'),\n            obj = { result: data.fieldEl.checked };\n\n        if( dataChecksEl !== null ){\n            obj = this.checks({ attrValue: dataChecksEl.getAttribute('data-checks'), fieldEl: dataChecksEl});\n        }\n\n        return obj;\n    },\n\n    checks: function( data ){\n        try {\n            let attrValue = JSON.parse(data.attrValue),\n                fieldEl = data.fieldEl,\n                formEl = fieldEl.closest('form'),\n                checkedElLength = formEl.querySelectorAll('[name=\"' + fieldEl.name + '\"]:checked').length,\n                isMinOk = checkedElLength >= attrValue[0],\n                isMaxOk = checkedElLength <= attrValue[1],\n                obj = {\n                    result: isMinOk && isMaxOk\n                };\n\n            if( !obj.result ){\n\n                obj.errors = { checks: true };\n                if( !isMinOk ){ obj.errors.minChecks = true; }\n                if( !isMaxOk ){ obj.errors.maxChecks = true; }\n\n            }\n\n            return obj;\n        } catch(e){\n            throw new Error('\"data-checks\" attribute is not a valid array!');\n        }\n    },\n\n    equalTo: function( data ){\n        let fieldEl = data.fieldEl,\n            formEl = fieldEl.closest('form'),\n            checkFromEl = formEl.querySelector( '[name=\"' + fieldEl.getAttribute('data-equal-to') + '\"]' ),\n            obj = {\n                result: fieldEl.value === checkFromEl.value\n            };\n\n        if( !obj.result ){\n            \n            obj.errors = { equalTo: true };\n        }\n\n        return obj;\n    },\n    \n    exactLength: function( data ){\n        let valueLength = data.fieldEl.value.length,\n            exactLength = (data.attrValue * 1),\n            obj = {\n                result: valueLength === exactLength\n            };\n\n        if( !obj.result ){\n\n            obj.errors = { exactLength: true };\n            if( valueLength < exactLength ){ obj.errors.minlength = true; }\n            else { obj.errors.maxlength = true; }\n\n        }\n\n        return obj;\n    },\n\n    file: function( data ){\n        let fieldEl = data.fieldEl,\n            maxFileSize = (fieldEl.getAttribute('data-max-file-size') || data.fieldOptions.maxFileSize) * 1,\n            MIMEtype = (fieldEl.accept ? new RegExp(fieldEl.accept.replace( '*', '[^\\\\/,]+' )) : null),\n            filesList = Array.from(fieldEl.files),\n            obj = { result: true };\n\n        filesList.forEach(function( file ){\n            let exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize,\n                isAcceptedFileType = (MIMEtype !== null ? MIMEtype.test(file.type) : true);\n\n            if( exceedMaxFileSize || !isAcceptedFileType ){\n                obj.result = false;\n                if( typeof obj.errors === 'undefined' ){\n                    obj.errors = {};\n                }\n                obj.errors.file = true;\n                if( exceedMaxFileSize ){ obj.errors.maxFileSize = true; }\n                if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true; }\n\n            }\n        });\n\n        return obj;\n    },\n\n    length: function( data ){\n        try {\n            let valueL = data.fieldEl.value.length,\n                attrValue = JSON.parse(data.attrValue),\n                isMinlengthOk = valueL >= attrValue[0],\n                isMaxlengthOk = valueL <= attrValue[1],\n                obj = { result: isMinlengthOk && isMaxlengthOk };\n\n            if( !obj.result ){\n\n                obj.errors = { stringLength: true };\n                if( !isMinlengthOk ){ obj.errors.minlength = true; }\n                if( !isMaxlengthOk ){ obj.errors.maxlength = true; }\n\n            }\n\n            return obj;\n        } catch(e){\n            throw new Error('\"data-length\" attribute is not a valid array!');\n        }\n    },\n    \n    max: function( data ){\n        let fieldEl = data.fieldEl,\n            isDate = (fieldEl.matches('[type=\"date\"]') || fieldEl.matches('[data-subtype=\"date\"]') || fieldEl.matches('[data-subtype=\"dateDDMMYYYY\"]')),\n            value = data.fieldEl.value,\n            maxVal = data.attrValue;\n        \n        if( isDate ){\n\n            let splitChar = getSplitChar( value );\n\n            if( value.indexOf(splitChar) === 2 ){\n                // DD MM YYYY\n                value = value.split( splitChar ).reverse();\n            } else {\n                // YYYY MM DD\n                value = value.split( splitChar );\n            }\n\n            value = value.join('');\n            maxVal = maxVal.split('-').join('');\n\n        }\n\n        value = value * 1;\n        maxVal = maxVal * 1;\n\n        let obj = {\n                result: value <= maxVal\n            };\n\n        if( !obj.result ){\n            \n            obj.errors = { max: true };\n        }\n        \n        return obj;\n    },\n    \n    maxlength: function( data ){\n        const obj = {\n            result: data.fieldEl.value.length <= (data.attrValue * 1)\n        };\n\n        if( !obj.result ){\n\n            obj.errors = { maxlength: true };\n        }\n\n        return obj;\n    },\n    \n    min: function( data ){\n        let fieldEl = data.fieldEl,\n            isDate = (fieldEl.matches('[type=\"date\"]') || fieldEl.matches('[data-subtype=\"date\"]') || fieldEl.matches('[data-subtype=\"dateDDMMYYYY\"]')),\n            value = data.fieldEl.value,\n            minVal = data.attrValue;\n        \n        if( isDate ){\n\n            let splitChar = getSplitChar( value );\n\n            if( value.indexOf(splitChar) === 2 ){\n                // DD MM YYYY\n                value = value.split( splitChar ).reverse();\n            } else {\n                // YYYY MM DD\n                value = value.split( splitChar );\n            }\n\n            value = value.join('');\n            minVal = minVal.split('-').join('');\n\n        }\n\n        value = value * 1;\n        minVal = minVal * 1;\n\n        let obj = {\n                result: value >= minVal\n            };\n\n        if( !obj.result ){\n            \n            obj.errors = { min: true };\n        }\n        \n        return obj;\n    },\n\n    minlength: function( data ){\n        const obj = {\n            result: data.fieldEl.value.length >= (data.attrValue * 1)\n        };\n\n        if( !obj.result ){\n\n            obj.errors = { minlength: true };\n        }\n\n        return obj;\n    },\n\n    pattern: function( data ){\n        let fieldEl = data.fieldEl,\n            fieldPattern = fieldEl.pattern,\n            fieldRegex = new RegExp( fieldPattern ),\n            obj = {\n                result: fieldRegex.test( fieldEl.value )\n            };\n\n        if( !obj.result ){\n\n            obj.errors = { pattern: true };\n        }\n\n        return obj;\n    },\n\n    radio: function( data ){\n        let fieldEl = data.fieldEl,\n            fieldChecked = fieldEl.closest('form').querySelector( '[name=\"'+ fieldEl.name +'\"]:checked' ),\n            isValid = fieldChecked !== null && fieldChecked.value.trim().length > 0,\n            obj = { result: isValid };\n\n        return obj;\n    },\n\n    requiredFrom: function( data ){\n        let fieldEl = data.fieldEl,\n            formEl = fieldEl.closest('form'),\n            isValidValue = fieldEl.value.trim().length > 0,\n            reqMoreEl = formEl.querySelector( fieldEl.getAttribute('data-required-from') ),\n            checkedEl = formEl.querySelector( '[name=\"'+ reqMoreEl.name +'\"]:checked' ),\n            obj = { result: checkedEl !== null };\n\n        if( reqMoreEl.checked && reqMoreEl.required ){\n            obj.result = isValidValue;\n        }\n\n        if( !obj.result ){\n            obj.errors = { requiredFrom: true };\n        }\n        \n        return obj;\n    }\n    \n}\n","\nimport { isDOMNode, mergeObjects, runFunctionsSequence, validateFieldObjDefault } from './helpers';\nimport { isValid } from './isValid';\n\nexport function isValidField( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    const obj = mergeObjects({}, validateFieldObjDefault, {fieldEl});\n\n    if( !isDOMNode(fieldEl) ){ return Promise.resolve(obj); }\n\n    const isValidValue =      fieldEl.value.trim().length > 0,\n          isRequired =        fieldEl.required,\n          isReqFrom =         fieldEl.matches('[data-required-from]'),\n          isValidateIfFilled =fieldEl.matches('[data-validate-if-filled]'),\n          rfsObject = {\n            functionsList: fieldOptions.beforeValidation,\n            data: {fieldEl}\n        };\n\n    return runFunctionsSequence(rfsObject)\n        .then(data => {\n\n            let dataObj = data.pop();\n            return new Promise(resolve => {\n                if(\n                    (!isRequired && !isValidateIfFilled && !isReqFrom) ||   // IT IS A NORMAL FORM FIELD\n                    (isValidateIfFilled && !isValidValue) ||                // IT IS data-validate-if-filled AND EMPTY\n                    (isReqFrom && !isRequired )                             // IT IS data-required-from AND NOT required\n                ){\n\n                    dataObj.result = true;\n                    resolve( dataObj );\n                \n                } else {\n\n                    resolve( isValid( fieldEl, fieldOptions, validationRules, validationErrors ) );\n                    \n                }\n\n            });\n\n        });\n\n}\n","\nimport { mergeObjects, toCamelCase } from './helpers';\nimport { validationRulesAttributes } from './validationRules';\n\nexport function isValid( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    const fieldType = ( fieldEl.matches('[data-subtype]') ? toCamelCase( fieldEl.getAttribute('data-subtype') ) : fieldEl.type ),\n          fieldValue = fieldEl.value,\n          isValidValue = fieldValue.trim().length > 0,\n          // ALPHABETICAL REVERSE ORDER\n          fieldAttributes = Array.from(fieldEl.attributes).sort((a,b) => { return a.name < b.name });\n\n    const attrValidations = [];\n    let attrValidationsResult = isValidValue,\n        obj = { result: isValidValue, fieldEl };\n\n    if( !obj.result ){\n        obj.errors = { empty: true };\n        return Promise.resolve(obj);\n    }\n\n    // COLLECT SPECIFIC VALIDATIONS FOR validationRulesAttributes\n    fieldAttributes.forEach(attr => {\n        // FOR data-* ATTRIBUTES -> REMOVE \"data-\" AND TRANSFORM TO CAMELCASE\n        const attrName = toCamelCase( attr.name.replace('data-', '') ),\n              attrValue = attr.value,\n              isAttrValueWithFn = attrName === 'type' && typeof validationRulesAttributes[attrValue] === 'function',\n              isAttrNameWithFn = typeof validationRulesAttributes[attrName] === 'function';\n\n        if( isAttrValueWithFn || isAttrNameWithFn ){\n\n            const extraValObj = {\n                    attrName: (isAttrValueWithFn ? attrValue : attrName),\n                    attrValue: attrValue,\n                    fieldEl,\n                    fieldOptions\n                };\n\n            if( isAttrValueWithFn || attrName === 'requiredFrom' ){\n                // THESE VALIDATIONS MUST RUN BEFORE ALL OTHERS\n                attrValidations.unshift( extraValObj );\n            } else {\n                attrValidations.push( extraValObj );\n            }\n\n        }\n    });\n\n    return new Promise(resolve => {\n\n        // RUN SPECIFIC VALIDATIONS FOR validationRulesAttributes\n        attrValidations.forEach(item => {\n            const extraVal = validationRulesAttributes[item.attrName]( item );\n            if( !extraVal.result ){\n                obj = mergeObjects({}, obj, extraVal);\n                attrValidationsResult = false;\n            }\n        });\n\n        // RUN VALIDATIONS FOR validationRules\n        if( typeof validationRules[fieldType] === 'function' ){\n            resolve( validationRules[fieldType](fieldValue, fieldEl) );\n        } else {\n            resolve( obj );\n        }\n\n    }).then(data => {\n\n        obj = mergeObjects( {}, obj, data, {fieldEl} );\n        obj.result = obj.result && attrValidationsResult;\n\n        if( !obj.result ){\n            const fieldErrors = (typeof validationErrors[fieldType] === 'function' ? validationErrors[fieldType](fieldValue, fieldEl) : {});\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {};\n            }\n            obj.errors.rule = true;\n            obj.errors = mergeObjects({}, obj.errors, fieldErrors);\n        }\n        \n        return obj;\n\n    });\n\n}\n","\nimport { fieldsStringSelector, getUniqueFields, mergeObjects, validateFormObjDefault } from './helpers';\nimport { isValidField } from './isValidField';\n\nexport function isValidForm( formEl, fieldOptions, validationRules, validationErrors ){\n\n    fieldOptions = mergeObjects( {}, fieldOptions, {focusOnRelated: false} );\n\n    const obj = mergeObjects({}, validateFormObjDefault),\n          fieldsList = getUniqueFields( formEl.querySelectorAll(fieldsStringSelector) );\n\n    return Promise.all( fieldsList.map(fieldEl => {\n        \n        return isValidField( fieldEl, fieldOptions, validationRules, validationErrors );\n\n    }) ).then(list => {\n\n        let areAllFieldsValid = list.filter(fieldObj => !fieldObj.result).length === 0;\n        obj.result = areAllFieldsValid;\n        obj.fields = list;\n\n        return obj;\n\n    });\n\n}\n","\nimport { mergeObjects }         from './modules/helpers';\nimport { options }              from './modules-lite/options';\nimport { validationRules }      from './modules/validationRules';\nimport { constructorFn }        from './modules-lite/constructor';\nimport { isValidField }         from './modules/isValidField';\nimport { isValidForm }          from './modules/isValidForm';\n\nconst version = '4.0.2';\n\nclass Form {\n\n    constructor( formEl, optionsObj ){\n        constructorFn(this, formEl, optionsObj);\n    }\n\n    destroy(){\n        delete this.formEl.formjs;\n    }\n\n    validateField( fieldEl, fieldOptions = {} ){\n        fieldEl = (typeof fieldEl === 'string' ? this.formEl.querySelector(fieldEl) : fieldEl);\n        fieldOptions = mergeObjects({}, this.options.fieldOptions, fieldOptions);\n        return isValidField(fieldEl, fieldOptions, this.validationRules, this.validationErrors);\n    }\n\n    validateForm( fieldOptions = {} ){\n        fieldOptions = mergeObjects({}, this.options.fieldOptions, fieldOptions);\n        return isValidForm(this.formEl, fieldOptions, this.validationRules, this.validationErrors);\n    }\n    \n    static addValidationErrors( errorsObj ){\n        this.prototype.validationErrors = mergeObjects({}, this.prototype.validationErrors, errorsObj);\n    }\n\n    static addValidationRules( rulesObj ){\n        this.prototype.validationRules = mergeObjects({}, this.prototype.validationRules, rulesObj);\n    }\n    \n    static setOptions( optionsObj ){\n        this.prototype.options = mergeObjects({}, this.prototype.options, optionsObj);\n    }\n\n}\n\nForm.prototype.isInitialized = false;\nForm.prototype.options = options;\nForm.prototype.validationErrors = {};\nForm.prototype.validationRules = validationRules;\nForm.prototype.version = version;\n\nexport default Form;\n","\nimport { checkFormEl, isNodeList, mergeObjects }   from '../modules/helpers';\n\nexport function constructorFn( self, formEl, optionsObj ){\n\n    let argsL = arguments.length,\n        checkFormElem = checkFormEl(formEl);\n\n    if( argsL === 0 || (argsL > 0 && !formEl) ){\n        throw new Error('First argument \"formEl\" is missing or falsy!');\n    }\n    if( isNodeList(formEl) ){\n        throw new Error('First argument \"formEl\" must be a single DOM node or a form CSS selector, not a NodeList!');\n    }\n    if( !checkFormElem.result ){\n        throw new Error('First argument \"formEl\" is not a DOM node nor a form CSS selector!');\n    }\n\n    self.formEl = checkFormElem.element;\n    self.formEl.formjs = self;\n    self.options = mergeObjects({}, self.constructor.prototype.options, optionsObj);\n\n    // BINDING CONTEXT FOR FUTURE EXECUTION\n    let beforeValidation = self.options.fieldOptions.beforeValidation;\n    self.options.fieldOptions.beforeValidation = ( Array.isArray(beforeValidation) ? beforeValidation.map(cbFn => cbFn.bind(self)) : beforeValidation.bind(self) );\n    \n}\n","\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [],\n        maxFileSize:            10\n    }\n    \n}\n"],"names":["checkFormEl","formEl","isString","isFormSelector","isDOMNode","document","querySelector","tagName","toLowerCase","result","element","getSplitChar","string","splitChar","indexOf","node","Element","prototype","isPrototypeOf","isNodeList","nodeList","NodeList","mergeObjects","out","i","arguments","length","obj","key","isArray","Object","toString","call","isObject","hasOwnProperty","concat","slice","Array","push","toCamelCase","replace","all","letter","toUpperCase","validateFieldObjDefault","fieldEl","validateFormObjDefault","fields","validationRulesAttributes","checkbox","data","dataChecksEl","closest","name","checked","this","checks","attrValue","getAttribute","JSON","parse","checkedElLength","querySelectorAll","isMinOk","isMaxOk","errors","minChecks","maxChecks","e","Error","equalTo","checkFromEl","value","exactLength","valueLength","minlength","maxlength","file","maxFileSize","fieldOptions","MIMEtype","accept","RegExp","filesList","from","files","forEach","exceedMaxFileSize","size","isAcceptedFileType","test","type","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","stringLength","max","isDate","matches","maxVal","split","reverse","join","min","minVal","pattern","fieldPattern","radio","fieldChecked","trim","requiredFrom","isValidValue","reqMoreEl","required","isValidField","validationRules","validationErrors","Promise","resolve","isRequired","isReqFrom","isValidateIfFilled","functionsList","stopConditionFn","reduce","acc","promiseFn","then","res","dataNew","dataList","runFunctionsSequence","beforeValidation","dataObj","pop","fieldType","fieldValue","fieldAttributes","attributes","sort","a","b","attrValidations","attrValidationsResult","attr","attrName","isAttrValueWithFn","isAttrNameWithFn","extraValObj","unshift","item","extraVal","fieldErrors","rule","empty","isValid","isValidForm","focusOnRelated","fieldsList","currentFieldName","currentFieldType","filter","getUniqueFields","map","list","areAllFieldsValid","fieldObj","Form","[object Object]","optionsObj","self","argsL","checkFormElem","formjs","options","constructor","cbFn","bind","constructorFn","errorsObj","rulesObj","isInitialized","date","email","number","version"],"mappings":"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"}