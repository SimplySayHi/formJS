{"version":3,"file":"formjs-esm.min.js","sources":["../../src/modules/helpers/isNodeList.js","../../src/modules/helpers/isDOMNode.js","../../src/modules/helpers/isPlainObject.js","../../src/modules/helpers/mergeObjects.js","../../src/modules/helpers/dispatchCustomEvent.js","../../src/modules/helpers/finalizeFieldPromise.js","../../src/modules/helpers/finalizeFormPromise.js","../../src/modules/helpers/getDateAsNumber.js","../../src/modules/helpers/getSplitChar.js","../../src/modules/helpers/mergeValidateFieldDefault.js","../../src/modules/helpers/toCamelCase.js","../../src/modules-lite/helpers/customEvents.js","../../src/modules/validationRules.js","../../src/modules/validationRules/date.js","../../src/modules/validationRules/email.js","../../src/modules/validationRules/number.js","../../src/modules/validationRules/checkbox.js","../../src/modules/validationRules/checks.js","../../src/modules/validationRules/equalTo.js","../../src/modules/validationRules/exactLength.js","../../src/modules/validationRules/file.js","../../src/modules/validationRules/length.js","../../src/modules/validationRules/max.js","../../src/modules/validationRules/maxlength.js","../../src/modules/validationRules/min.js","../../src/modules/validationRules/minlength.js","../../src/modules/validationRules/pattern.js","../../src/modules/validationRules/radio.js","../../src/modules/checkFieldValidity.js","../../src/modules/helpers/getJSONobjectFromFieldAttribute.js","../../src/modules/helpers/runFunctionsSequence.js","../../src/modules/isValid.js","../../src/modules/checkFieldsValidity.js","../../src/modules/helpers/getUniqueFields.js","../../src/modules/helpers/mergeValidateFormDefault.js","../../src/index-lite.js","../../src/modules/helpers/checkFormEl.js","../../src/modules/helpers/fieldsStringSelector.js","../../src/modules-lite/options.js"],"sourcesContent":["/* eslint-disable no-prototype-builtins */\n\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList );\n}\n","/* eslint-disable no-prototype-builtins */\n\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node );\n}\n","\nexport const isPlainObject = object => {\n    return Object.prototype.toString.call( object ) === '[object Object]';\n}\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const mergeObjects = function( out = {} ){\n    Array.from(arguments).slice(1).filter(arg => !!arg).forEach(arg => {\n        Object.keys(arg).forEach(key => {\n            if( Array.isArray(arg[key]) ){\n                out[key] = (out[key] || []).concat( arg[key].slice(0) );\n            } else if( isPlainObject(arg[key]) ){\n                out[key] = mergeObjects((out[key] || {}), arg[key]);\n            } else {\n                // * STRING | NUMBER | BOOLEAN | FUNCTION\n                if( Array.isArray(out[key]) ){\n                    // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                    out[key].push(arg[key]);\n                } else {\n                    out[key] = arg[key];\n                }\n            }\n        });\n    });\n\n    return out;\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const dispatchCustomEvent = ( elem, eventName, eventOptions ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions);\n    const eventObj = new CustomEvent(eventName, eventOptions);\n    elem.dispatchEvent( eventObj );\n}\n","\nexport const finalizeFieldPromise = ({errors, result}) => {\n    if( result ){\n        return Promise.resolve();\n    }\n    return Promise.reject(errors);\n}\n","\nexport const finalizeFormPromise = ({fields, result}) => {\n    if( result ){\n        return Promise.resolve(fields);\n    }\n    return Promise.reject(fields);\n}\n","\nimport { getSplitChar } from './getSplitChar';\n\nconst formatMap = {\n    'YYYY-MM-DD': function(dateArray){\n        return dateArray;\n    },\n    'MM-DD-YYYY': function(dateArray){\n        return [dateArray[2], dateArray[0], dateArray[1]];\n    },\n    'DD-MM-YYYY': function(dateArray){\n        return dateArray.reverse();\n    }\n};\n\nexport const getDateAsNumber = ( dateString, dateFormat ) => {\n    dateFormat = dateFormat || 'YYYY-MM-DD';\n    const splitChar = getSplitChar(dateString);\n\n    if( !dateFormat.includes(splitChar) ){\n        return;\n    }\n\n    dateFormat = dateFormat.replace(/[^YMD]/g, '-');\n    dateString = dateString.split(splitChar);\n    dateString = formatMap[dateFormat](dateString).join('');\n    \n    return dateString;\n}\n","\nexport const getSplitChar = string => {\n    // MATCH ANY NON-DIGIT CHAR\n    const separator = string.match(/\\D/);\n    return (separator && separator.length > 0) ? separator[0] : null;\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const mergeValidateFieldDefault = obj => {\n    return mergeObjects({}, { result: false, $field: null }, obj);\n}\n","\nexport const toCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase(); });\n}\n","\nexport const customEvents = {\n    field: {\n        validation: 'fjs.field:validation'\n    },\n    form: {\n        destroy:    'fjs.form:destroy',\n        init:       'fjs.form:init',\n        validation: 'fjs.form:validation'\n    }\n}\n","\nimport { date }         from './validationRules/date';\nimport { email }        from './validationRules/email';\nimport { number }       from './validationRules/number';\n\nimport { checkbox }     from './validationRules/checkbox';\nimport { equalTo }      from './validationRules/equalTo';\nimport { exactLength }  from './validationRules/exactLength';\nimport { file }         from './validationRules/file';\nimport { length }       from './validationRules/length';\nimport { max }          from './validationRules/max';\nimport { maxlength }    from './validationRules/maxlength';\nimport { min }          from './validationRules/min';\nimport { minlength }    from './validationRules/minlength';\nimport { pattern }      from './validationRules/pattern';\nimport { radio }        from './validationRules/radio';\n\nexport const validationRules = {\n    date,\n    email,\n    number,\n\n    checkbox,\n    equalTo,\n    exactLength,\n    file,\n    length,\n    max,\n    maxlength,\n    min,\n    minlength,\n    pattern,\n    radio\n}\n","\n/*\n    DATE AS ISO 8601 DATE FORMAT:\n    YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n*/\n\nexport const date = function( string ){\n    return {\n        result: /^((((19|[2-9]\\d)\\d{2})[ /\\-.](0[13578]|1[02])[ /\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ /\\-.](0[13456789]|1[012])[ /\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ /\\-.]02[ /\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ /\\-.]02[ /\\-.]29))$/g.test( string )\n    };\n}\n","\n// https://regex101.com/r/cdlyJy/3\n\nexport const email = function( string ){\n    return {\n        result: /^[a-zA-Z_-]([\\w.-]?[a-zA-Z0-9])*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?){2,})+$/.test( string )\n    };\n}\n","\n/*\n    ALL NUMBERS ( INTEGERS AND FLOATING )\n    VALID NUMBERS: 123 | 123.456 | .123\n*/\n\nexport const number = function( string ){\n    return {\n        result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n    };\n}","\nimport { checks } from './checks';\n\nexport const checkbox = function( value, $field ){\n    const $dataChecks = $field.closest('form').querySelector('[name=\"' + $field.name + '\"][data-checks]');\n    return $dataChecks ? checks($dataChecks) : { result: $field.checked };\n}\n","\nexport const checks = function( $field ){\n    const attrValue = JSON.parse( $field.getAttribute('data-checks') ),\n          checkedLength = $field.closest('form').querySelectorAll('[name=\"' + $field.name + '\"]:checked').length,\n          isMinOk = checkedLength >= attrValue[0],\n          isMaxOk = checkedLength <= attrValue[1],\n          obj = { result: isMinOk && isMaxOk };\n\n    if( !obj.result ){\n        obj.errors = { checks: true };\n        if( !isMinOk ){ obj.errors.minChecks = true; }\n        if( !isMaxOk ){ obj.errors.maxChecks = true; }\n    }\n\n    return obj;\n}\n","\nexport const equalTo = function( value, $field ){\n    const $checkFrom = $field.closest('form').querySelector( '[name=\"' + $field.getAttribute('data-equal-to') + '\"]' );\n    return { result: value === $checkFrom.value };\n}\n","\nexport const exactLength = function( value, $field ){\n    const valueLength = value.length,\n          exactLength = $field.getAttribute('data-exact-length') * 1,\n          obj = { result: valueLength === exactLength };\n\n    if( !obj.result ){\n        obj.errors = {};\n        if( valueLength < exactLength ){ obj.errors.minlength = true; }\n        else { obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nexport const file = function( value, $field, fieldOptions ){\n    const maxFileSize = ($field.getAttribute('data-max-file-size') || fieldOptions.maxFileSize) * 1,\n          MIMEtype = $field.accept ? new RegExp($field.accept.replace( '*', '[^\\\\/,]+' )) : null,\n          filesList = Array.from($field.files),\n          obj = { result: true };\n\n    filesList.forEach(file => {\n        const exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize,\n              isAcceptedFileType = MIMEtype !== null ? MIMEtype.test(file.type) : true;\n\n        if( exceedMaxFileSize || !isAcceptedFileType ){\n            obj.result = false;\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {};\n            }\n            if( exceedMaxFileSize ){ obj.errors.maxFileSize = true; }\n            if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true; }\n\n        }\n    });\n\n    return obj;\n}\n","\nexport const length = function( value, $field ){\n    const valueL = value.length,\n          attrValue = JSON.parse( $field.getAttribute('data-length') ),\n          isMinlengthOk = valueL >= attrValue[0],\n          isMaxlengthOk = valueL <= attrValue[1],\n          obj = { result: isMinlengthOk && isMaxlengthOk };\n\n    if( !obj.result ){\n        obj.errors = {};\n        if( !isMinlengthOk ){ obj.errors.minlength = true; }\n        if( !isMaxlengthOk ){ obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const max = function( value, $field ){\n    let maxVal = $field.max;\n    const dateFormat = $field.getAttribute('data-date-format');\n    \n    if( $field.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat );\n        maxVal = maxVal.split('-').join('');\n    }\n\n    value = value * 1;\n    maxVal = maxVal * 1;\n    \n    return { result: value <= maxVal };\n}\n","\nexport const maxlength = function( value, $field ){\n    return { result: value.length <= $field.maxLength * 1 };\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const min = function( value, $field ){\n    let minVal = $field.min;\n    const dateFormat = $field.getAttribute('data-date-format');\n    \n    if( $field.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat );\n        minVal = minVal.split('-').join('');\n    }\n\n    value = value * 1;\n    minVal = minVal * 1;\n    \n    return { result: value >= minVal };\n}\n","\nexport const minlength = function( value, $field ){\n    return { result: value.length >= $field.minLength * 1 };\n}\n","\nexport const pattern = function( value, $field ){\n    return { result: new RegExp($field.pattern).test(value) };\n}\n","\nexport const radio = function( value, $field ){\n    const $fieldChecked = $field.closest('form').querySelector( '[name=\"'+ $field.name +'\"]:checked' ),\n          isValid = $fieldChecked !== null && $fieldChecked.value.trim().length > 0;\n\n    return { result: isValid };\n}\n","\nimport {    getJSONobjectFromFieldAttribute,\n            isDOMNode,\n            mergeObjects,\n            mergeValidateFieldDefault,\n            runFunctionsSequence\n        }           from './helpers';\nimport { isValid }  from './isValid';\n\nexport function checkFieldValidity( $field, fieldOptions, validationRules, validationErrors ){\n\n    if( !isDOMNode($field) ){\n        const obj = mergeValidateFieldDefault({$field});\n        return Promise.resolve(obj);\n    }\n\n    const $form = $field.closest('form'),\n          isValidValue = $field.value.trim().length > 0,\n          dataFieldOptions = getJSONobjectFromFieldAttribute( $field, 'data-field-options' );\n\n    fieldOptions = mergeObjects( fieldOptions, dataFieldOptions );\n\n    // HANDLE FIELD data-required-from WHEN CHANGING ITS RELATED RADIO\n    if( $field.type === 'radio' ){\n        const $checked = $field.checked ? $field : $form.querySelector('[name=\"'+ $field.name +'\"]:checked'),\n              reqMoreIsChecked = $checked && $checked.matches('[data-require-more]'),\n              $findReqMore = reqMoreIsChecked ? $checked : $form.querySelector('[data-require-more][name=\"'+ $field.name +'\"]'),\n              $findReqFrom = $findReqMore ? $form.querySelector('[data-required-from=\"#'+ $findReqMore.id +'\"]') : null;\n        \n        if( $checked && $findReqFrom ){\n            $findReqFrom.required = $findReqMore.required && $findReqMore.checked;\n            if( !reqMoreIsChecked ){\n                $findReqFrom.value = '';\n            } else if( fieldOptions.focusOnRelated ) {\n                $findReqFrom.focus();\n            }\n        }\n    }\n\n    // HANDLE FIELD data-require-more & data-required-from WHEN *-from IT'S FILLED\n    if( $field.matches('[data-required-from]') && isValidValue ){\n        const $reqMore = $form.querySelector( $field.getAttribute('data-required-from') );\n        $reqMore.checked = true;\n        $field.required = $reqMore.required;\n    }\n\n    const needsValidation = $field.required || ($field.matches('[data-validate-if-filled]') && isValidValue);\n\n    return runFunctionsSequence({\n            functionsList: fieldOptions.beforeValidation,\n            data: { $field, fieldOptions }\n        })\n        .then(data => {\n            const dataObj = data.pop();\n            return new Promise(resolve => {\n                if( !needsValidation ){\n                    dataObj.result = true;\n                }\n                resolve( needsValidation ? isValid($field, fieldOptions, validationRules, validationErrors) : dataObj );\n            });\n        });\n\n}\n","\nexport const getJSONobjectFromFieldAttribute = ( fieldEl, attrName ) => {\n    const customAttrEl = fieldEl.closest('['+ attrName +']');\n    return (customAttrEl && JSON.parse(customAttrEl.getAttribute(attrName))) || {};\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const runFunctionsSequence = ( { functionsList = [], data = {}, stopConditionFn = () => false } = {} ) => {\n    return functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1]);\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res);\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result);\n                    return res;\n                });\n        });\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList);\n}\n","\nimport { mergeValidateFieldDefault, mergeObjects, toCamelCase } from './helpers';\n\nexport function isValid( $field, fieldOptions, validationRules, validationErrors ){\n\n    const fieldValue = $field.value,\n          obj = mergeValidateFieldDefault({result: fieldValue.trim().length > 0, $field}),\n          isRadioOrCheckbox = /^(radio|checkbox)$/.test($field.type),\n          hasSelectedInput = $field.closest('form').querySelectorAll('[name=\"'+ $field.name +'\"]:checked').length > 0;\n\n    if( (!isRadioOrCheckbox && !obj.result) || (isRadioOrCheckbox && !hasSelectedInput) ){\n        obj.result = false;\n        obj.errors = { empty: true };\n        return Promise.resolve(obj);\n    }\n\n    // COLLECT VALIDATION METHOD NAMES ( USED TO RUN VALIDATIONS AND GET ERRORS )\n    const validationMethods = Array.from($field.attributes).reduce((accList, attr) => {\n        const attrName = toCamelCase( attr.name.replace('data-', '') ),\n              attrValue = toCamelCase( attr.value ),\n              isAttrValueWithFn = (attrName === 'type' || attrName === 'subtype') && validationRules[attrValue],\n              isAttrNameWithFn = validationRules[attrName];\n\n        if( isAttrValueWithFn || isAttrNameWithFn ){\n            accList.push( isAttrValueWithFn ? attrValue : attrName );\n        }\n        return accList;\n    }, []);\n\n    return new Promise(resolve => {\n\n        // RUN VALIDATIONS\n        const validationsResult = validationMethods.reduce((accPromise, methodName) => {\n            return accPromise.then(accObj => {\n                return new Promise(resolveVal => {\n                    // RUN VALIDATION INSIDE A PROMISE IS USEFUL FOR ASYNC VALIDATIONS\n                    resolveVal( validationRules[methodName](fieldValue, $field, fieldOptions) );\n                }).then(valObj => {\n                    // ADD CUSTOM ERROR-KEY FOR EACH VALIDATION RULE\n                    if( !valObj.result ){\n                        const errorObj = {};\n                        if( typeof valObj.errors === 'undefined' || typeof valObj.errors[methodName] === 'undefined' ){\n                            errorObj[methodName] = true;\n                        }\n                        valObj.errors = mergeObjects({}, valObj.errors, errorObj);\n                    }\n                    valObj = valObj.result ? {} : valObj;\n                    return mergeObjects(accObj, valObj);\n                });\n            });\n        }, Promise.resolve(obj));\n        resolve(validationsResult);\n\n    }).then(data => {\n\n        // GET ERRORS\n        if( !data.result ){\n            data.errors = validationMethods.reduce((accObj, methodName) => {\n                const errors = (validationErrors[methodName] && validationErrors[methodName](fieldValue, $field)) || {};\n                return mergeObjects(accObj, errors);\n            }, data.errors);\n        }\n        return data;\n\n    });\n\n}\n","\nimport { getUniqueFields, mergeValidateFieldDefault, mergeValidateFormDefault, mergeObjects } from './helpers';\nimport { checkFieldValidity } from './checkFieldValidity';\n\nexport function checkFieldsValidity( $fields, fieldOptions, validationRules, validationErrors, fieldToSkip = null ){\n\n    fieldOptions = mergeObjects( {}, fieldOptions, {focusOnRelated: false} );\n    const $fieldsList = getUniqueFields( $fields );\n\n    return Promise.all( $fieldsList.map($field => {\n\n        if( fieldToSkip && $field === fieldToSkip ){\n            const obj = mergeValidateFieldDefault({$field, result: true});\n            return Promise.resolve(obj);\n        }\n        return checkFieldValidity( $field, fieldOptions, validationRules, validationErrors );\n\n    }) ).then(fields => {\n\n        const areAllFieldsValid = fields.every(({result}) => result);\n        return mergeValidateFormDefault({result: areAllFieldsValid, fields});\n\n    });\n\n}\n","\nexport const getUniqueFields = $nodeList => {\n\n    let currentFieldName = '',\n        currentFieldType = '';\n\n    return Array.from( $nodeList ).filter($field => {\n        const name = $field.name,\n              type = $field.type;\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false;\n        }\n        \n        if( !$field.matches('[data-required-from]') ){\n            currentFieldName = name;\n            currentFieldType = type;\n        }\n        return true;\n    });\n    \n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const mergeValidateFormDefault = obj => {\n    return mergeObjects({}, { result: true, fields: [] }, obj);\n}\n","\nimport { version }              from '../package.json';\nimport { \n    checkFormEl,\n    dispatchCustomEvent,\n    fieldsStringSelector,\n    finalizeFieldPromise,\n    finalizeFormPromise,\n    isNodeList,\n    mergeObjects }              from './modules/helpers';\nimport { customEvents }         from './modules-lite/helpers/customEvents';\nimport { options }              from './modules-lite/options';\nimport { validationRules }      from './modules/validationRules';\nimport { checkFieldValidity }   from './modules/checkFieldValidity';\nimport { checkFieldsValidity }  from './modules/checkFieldsValidity';\n\nclass Form {\n\n    constructor( form, optionsObj ){\n        const argsL = arguments.length,\n              checkFormElem = checkFormEl(form);\n\n        if( argsL === 0 || (argsL > 0 && !form) ){\n            throw new Error('First argument \"form\" is missing or falsy!');\n        }\n        if( isNodeList(form) ){\n            throw new Error('First argument \"form\" must be a single DOM node or a form CSS selector, not a NodeList!');\n        }\n        if( !checkFormElem.result ){\n            throw new Error('First argument \"form\" is not a DOM node nor a form CSS selector!');\n        }\n\n        const self = this;\n\n        self.$form = checkFormElem.$el;\n        self.$form.formjs = self;\n        self.options = mergeObjects({}, Form.prototype.options, optionsObj);\n\n        // BINDING CONTEXT FOR FUTURE EXECUTION\n        self.options.fieldOptions.beforeValidation = self.options.fieldOptions.beforeValidation.map(cbFn => cbFn.bind(self));\n\n        self.$form.noValidate = true;\n\n        dispatchCustomEvent( self.$form, customEvents.form.init );\n    }\n\n    destroy(){\n        delete this.$form.formjs;\n        dispatchCustomEvent( this.$form, customEvents.form.destroy );\n    }\n\n    validateField( field, fieldOptions ){\n        const self = this;\n        const $field = typeof field === 'string' ? self.$form.querySelector(field) : field;\n        \n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions);\n        \n        return checkFieldValidity($field, fieldOptions, self.validationRules, self.validationErrors)\n            .then(obj => {\n                dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } );\n                return obj;\n            })\n            .then(finalizeFieldPromise);\n    }\n\n    validateForm( fieldOptions ){\n        const self = this;\n        const $form = self.$form;\n        const $fields = $form.querySelectorAll(fieldsStringSelector);\n\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions);\n\n        return checkFieldsValidity($fields, fieldOptions, self.validationRules, self.validationErrors)\n            .then(data => {\n                data.fields.forEach(obj => {\n                    obj.isCheckingForm = true;\n                    dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } );\n                });\n                dispatchCustomEvent( $form, customEvents.form.validation, { detail: data } );\n                return data;\n            })\n            .then(finalizeFormPromise);\n    }\n    \n    static addValidationErrors( errorsObj ){\n        Form.prototype.validationErrors = mergeObjects({}, Form.prototype.validationErrors, errorsObj);\n    }\n\n    static addValidationRules( rulesObj ){\n        Form.prototype.validationRules = mergeObjects({}, Form.prototype.validationRules, rulesObj);\n    }\n    \n    static setOptions( optionsObj ){\n        Form.prototype.options = mergeObjects({}, Form.prototype.options, optionsObj);\n    }\n\n}\n\nForm.prototype.options = options;\nForm.prototype.validationErrors = {};\nForm.prototype.validationRules = validationRules;\nForm.prototype.version = version;\n\nexport default Form;\n","\nimport { isDOMNode } from './isDOMNode';\n\nexport const checkFormEl = form => {\n    let isString = typeof form,\n        isValidNodeSelector = isString === 'string' && isDOMNode(document.querySelector(form)),\n        isFormSelector = isValidNodeSelector && document.querySelector(form).tagName.toLowerCase() === 'form',\n        obj = {\n            result: isDOMNode(form) || isFormSelector,\n            $el: (isString === 'string' ? document.querySelector(form) : form)\n        };\n\n    return obj;\n}\n","\nexport const fieldsStringSelector = 'input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"hidden\"]), select, textarea'\n","\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [],\n        focusOnRelated:         true,\n        maxFileSize:            10\n    }\n    \n}\n"],"names":["isDOMNode","node","Element","prototype","isPrototypeOf","isPlainObject","object","Object","toString","call","mergeObjects","out","Array","from","arguments","slice","filter","arg","forEach","keys","key","isArray","concat","push","dispatchCustomEvent","elem","eventName","eventOptions","bubbles","eventObj","CustomEvent","dispatchEvent","finalizeFieldPromise","errors","result","Promise","resolve","reject","finalizeFormPromise","fields","formatMap","YYYY-MM-DD","dateArray","MM-DD-YYYY","DD-MM-YYYY","reverse","getDateAsNumber","dateString","dateFormat","splitChar","string","separator","match","length","getSplitChar","includes","replace","split","join","mergeValidateFieldDefault","obj","$field","toCamelCase","all","letter","toUpperCase","customEvents","validation","destroy","init","validationRules","date","test","email","number","checkbox","value","$dataChecks","closest","querySelector","name","attrValue","JSON","parse","getAttribute","checkedLength","querySelectorAll","isMinOk","isMaxOk","checks","minChecks","maxChecks","checked","equalTo","exactLength","valueLength","minlength","maxlength","file","fieldOptions","maxFileSize","MIMEtype","accept","RegExp","filesList","files","exceedMaxFileSize","size","isAcceptedFileType","type","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","max","maxVal","maxLength","min","minVal","minLength","pattern","radio","$fieldChecked","trim","checkFieldValidity","validationErrors","$form","isValidValue","dataFieldOptions","fieldEl","attrName","customAttrEl","getJSONobjectFromFieldAttribute","$checked","reqMoreIsChecked","matches","$findReqMore","$findReqFrom","id","required","focusOnRelated","focus","$reqMore","needsValidation","functionsList","data","stopConditionFn","reduce","acc","promiseFn","then","res","dataNew","dataList","runFunctionsSequence","beforeValidation","dataObj","pop","fieldValue","isRadioOrCheckbox","hasSelectedInput","empty","validationMethods","attributes","accList","attr","isAttrValueWithFn","isAttrNameWithFn","accPromise","methodName","accObj","resolveVal","valObj","errorObj","isValid","checkFieldsValidity","$fields","fieldToSkip","$fieldsList","$nodeList","currentFieldName","currentFieldType","getUniqueFields","map","areAllFieldsValid","every","Form","[object Object]","form","optionsObj","argsL","checkFormElem","isString","isFormSelector","document","tagName","toLowerCase","$el","checkFormEl","Error","nodeList","NodeList","self","this","formjs","options","cbFn","bind","noValidate","field","detail","isCheckingForm","errorsObj","rulesObj","version"],"mappings":"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"}