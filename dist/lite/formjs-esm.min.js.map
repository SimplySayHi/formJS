{"version":3,"file":"formjs-esm.min.js","sources":["../../src/modules/version.js","../../src/modules/helpers/isNodeList.js","../../src/modules/helpers/isDOMNode.js","../../src/modules/helpers/checkFormEl.js","../../src/modules/helpers/mergeObjects.js","../../src/modules/helpers/getDateAsNumber.js","../../src/modules/helpers/getSplitChar.js","../../src/modules/helpers/getValidateFieldDefault.js","../../src/modules/helpers/toCamelCase.js","../../src/modules/validationRules.js","../../src/modules/validationRules/date.js","../../src/modules/validationRules/email.js","../../src/modules/validationRules/number.js","../../src/modules/validationRules/checkbox.js","../../src/modules/validationRules/checks.js","../../src/modules/validationRules/equalTo.js","../../src/modules/validationRules/exactLength.js","../../src/modules/validationRules/file.js","../../src/modules/validationRules/length.js","../../src/modules/validationRules/max.js","../../src/modules/validationRules/maxlength.js","../../src/modules/validationRules/min.js","../../src/modules/validationRules/minlength.js","../../src/modules/validationRules/pattern.js","../../src/modules/validationRules/radio.js","../../src/modules/checkFieldValidity.js","../../src/modules/helpers/runFunctionsSequence.js","../../src/modules/isValid.js","../../src/modules/checkFormValidity.js","../../src/modules/helpers/getUniqueFields.js","../../src/modules/helpers/fieldsStringSelector.js","../../src/modules/helpers/getValidateFormDefault.js","../../src/index-lite.js","../../src/modules-lite/constructor.js","../../src/modules-lite/options.js"],"sourcesContent":["\nexport const version = '4.2.0';\n","\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList );\n}\n","\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node );\n}\n","\nimport { isDOMNode } from './isDOMNode';\n\nexport const checkFormEl = formEl => {\n    const isString = typeof formEl,\n          isValidNodeSelector = isString === 'string' && isDOMNode(document.querySelector(formEl)),\n          isFormSelector = isValidNodeSelector && document.querySelector(formEl).tagName.toLowerCase() === 'form',\n          obj = {\n            result: isDOMNode(formEl) || isFormSelector,\n            element: (isString === 'string' ? document.querySelector(formEl) : formEl)\n          };\n\n    return obj;\n}\n","\nexport const mergeObjects = function( out = {} ){\n    for(let i=1; i<arguments.length; i++){\n        let obj = arguments[i];\n\n        if(!obj){ continue; }\n\n        for(let key in obj){\n            let isArray = Object.prototype.toString.call(obj[key]) === \"[object Array]\";\n            let isObject = Object.prototype.toString.call(obj[key]) === \"[object Object]\";\n\n            // COPY ONLY ENUMERABLE PROPERTIES\n            if( obj.hasOwnProperty(key) ){\n                if( isArray ){\n\n                    if( typeof out[key] === 'undefined' ){\n                        out[key] = [];\n                    }\n                    out[key] = out[key].concat( obj[key].slice(0) );\n\n                } else if( isObject ){\n\n                    out[key] = mergeObjects(out[key], obj[key]);\n\n                } else {\n\n                    // * STRING | NUMBER | BOOLEAN | FUNCTION\n                    if( Array.isArray(out[key]) ){\n                        // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                        out[key].push(obj[key]);\n                    } else {\n                        out[key] = obj[key];\n                    }\n\n                }\n            }\n        }\n    }\n\n    return out;\n}\n","\nimport { getSplitChar } from './getSplitChar';\n\nconst formatMap = {\n    'YYYY-MM-DD': function(dateArray){\n        return dateArray;\n    },\n    'MM-DD-YYYY': function(dateArray){\n        return [dateArray[2], dateArray[0], dateArray[1]];\n    },\n    'DD-MM-YYYY': function(dateArray){\n        return dateArray.reverse();\n    }\n};\n\nexport const getDateAsNumber = ( dateString, dateFormat ) => {\n    dateFormat = dateFormat || 'YYYY-MM-DD';\n    const splitChar = getSplitChar(dateString);\n\n    if( dateFormat.indexOf(splitChar) < 0 ){\n        return;\n    }\n\n    dateFormat = dateFormat.replace(/[^YMD]/g, '-');\n    dateString = dateString.split(splitChar);\n    dateString = formatMap[dateFormat](dateString).join('');\n    \n    return dateString;\n}\n","\nexport const getSplitChar = string => {\n    // MATCH ANY NON-DIGIT CHAR\n    const separator = string.match(/\\D/);\n    return (separator && separator.length > 0) ? separator[0] : null;\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const getValidateFieldDefault = obj => {\n    return mergeObjects({}, { result: false, fieldEl: null }, obj);\n}\n","\nexport const toCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase(); });\n}\n","\nimport { date }         from './validationRules/date';\nimport { email }        from './validationRules/email';\nimport { number }       from './validationRules/number';\n\nimport { checkbox }     from './validationRules/checkbox';\nimport { equalTo }      from './validationRules/equalTo';\nimport { exactLength }  from './validationRules/exactLength';\nimport { file }         from './validationRules/file';\nimport { length }       from './validationRules/length';\nimport { max }          from './validationRules/max';\nimport { maxlength }    from './validationRules/maxlength';\nimport { min }          from './validationRules/min';\nimport { minlength }    from './validationRules/minlength';\nimport { pattern }      from './validationRules/pattern';\nimport { radio }        from './validationRules/radio';\n\nexport const validationRules = {\n    date,\n    email,\n    number,\n\n    checkbox,\n    equalTo,\n    exactLength,\n    file,\n    length,\n    max,\n    maxlength,\n    min,\n    minlength,\n    pattern,\n    radio\n}\n","\n/*\n    DATE AS ISO 8601 DATE FORMAT:\n    YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n*/\n\nexport const date = function( string ){\n    return {\n        result: /^((((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13578]|1[02])[ \\/\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13456789]|1[012])[ \\/\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.]02[ \\/\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ \\/\\-.]02[ \\/\\-.]29))$/g.test( string )\n    };\n}\n","\n// https://regex101.com/r/cdlyJy/3\n\nexport const email = function( string ){\n    return {\n        result: /^[a-zA-Z_-]([\\w.-]?[a-zA-Z0-9])*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?){2,})+$/.test( string )\n    };\n}\n","\n/*\n    ALL NUMBERS ( INTEGERS AND FLOATING )\n    VALID NUMBERS: 123 | 123.456 | .123\n*/\n\nexport const number = function( string ){\n    return {\n        result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n    };\n}","\nimport { checks } from './checks';\n\nexport const checkbox = function( value, fieldEl ){\n    const dataChecksEl = fieldEl.closest('form').querySelector('[name=\"' + fieldEl.name + '\"][data-checks]');\n    return dataChecksEl ? checks(dataChecksEl) : { result: fieldEl.checked };\n}\n","\nexport const checks = function( fieldEl ){\n    const attrValue = JSON.parse( fieldEl.getAttribute('data-checks') ),\n          checkedElLength = fieldEl.closest('form').querySelectorAll('[name=\"' + fieldEl.name + '\"]:checked').length,\n          isMinOk = checkedElLength >= attrValue[0],\n          isMaxOk = checkedElLength <= attrValue[1],\n          obj = { result: isMinOk && isMaxOk };\n\n    if( !obj.result ){\n        obj.errors = { checks: true };\n        if( !isMinOk ){ obj.errors.minChecks = true; }\n        if( !isMaxOk ){ obj.errors.maxChecks = true; }\n    }\n\n    return obj;\n}\n","\nexport const equalTo = function( value, fieldEl ){\n    const checkFromEl = fieldEl.closest('form').querySelector( '[name=\"' + fieldEl.getAttribute('data-equal-to') + '\"]' );\n    return { result: value === checkFromEl.value };\n}\n","\nexport const exactLength = function( value, fieldEl ){\n    const valueLength = value.length,\n          exactLength = fieldEl.getAttribute('data-exact-length') * 1,\n          obj = { result: valueLength === exactLength };\n\n    if( !obj.result ){\n        obj.errors = {};\n        if( valueLength < exactLength ){ obj.errors.minlength = true; }\n        else { obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nexport const file = function( value, fieldEl ){\n    const maxFileSize = (fieldEl.getAttribute('data-max-file-size') || fieldOptions.maxFileSize) * 1,\n          MIMEtype = fieldEl.accept ? new RegExp(fieldEl.accept.replace( '*', '[^\\\\/,]+' )) : null,\n          filesList = Array.from(fieldEl.files),\n          obj = { result: true };\n\n    filesList.forEach(file => {\n        const exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize,\n              isAcceptedFileType = MIMEtype !== null ? MIMEtype.test(file.type) : true;\n\n        if( exceedMaxFileSize || !isAcceptedFileType ){\n            obj.result = false;\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {};\n            }\n            if( exceedMaxFileSize ){ obj.errors.maxFileSize = true; }\n            if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true; }\n\n        }\n    });\n\n    return obj;\n}\n","\nexport const length = function( value, fieldEl ){\n    const valueL = value.length,\n          attrValue = JSON.parse( fieldEl.getAttribute('data-length') ),\n          isMinlengthOk = valueL >= attrValue[0],\n          isMaxlengthOk = valueL <= attrValue[1],\n          obj = { result: isMinlengthOk && isMaxlengthOk };\n\n    if( !obj.result ){\n        obj.errors = { stringLength: true };\n        if( !isMinlengthOk ){ obj.errors.minlength = true; }\n        if( !isMaxlengthOk ){ obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const max = function( value, fieldEl ){\n    let maxVal = fieldEl.max;\n    const dateFormat = fieldEl.getAttribute('data-date-format');\n    \n    if( fieldEl.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat );\n        maxVal = maxVal.split('-').join('');\n    }\n\n    value = value * 1;\n    maxVal = maxVal * 1;\n    \n    return { result: value <= maxVal };\n}\n","\nexport const maxlength = function( value, fieldEl ){\n    return { result: value.length <= fieldEl.maxLength * 1 };\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const min = function( value, fieldEl ){\n    let minVal = fieldEl.min;\n    const dateFormat = fieldEl.getAttribute('data-date-format');\n    \n    if( fieldEl.type === 'date' || fieldEl.getAttribute('data-date-format') ){\n        value = getDateAsNumber( value, dateFormat );\n        minVal = minVal.split('-').join('');\n    }\n\n    value = value * 1;\n    minVal = minVal * 1;\n    \n    return { result: value >= minVal };\n}\n","\nexport const minlength = function( value, fieldEl ){\n    return { result: value.length >= fieldEl.minLength * 1 };\n}\n","\nexport const pattern = function( value, fieldEl ){\n    return { result: new RegExp(fieldEl.pattern).test(value) };\n}\n","\nexport const radio = function( value, fieldEl ){\n    const fieldChecked = fieldEl.closest('form').querySelector( '[name=\"'+ fieldEl.name +'\"]:checked' ),\n          isValid = fieldChecked !== null && fieldChecked.value.trim().length > 0;\n\n    return { result: isValid };\n}\n","\nimport { getValidateFieldDefault, isDOMNode, runFunctionsSequence } from './helpers';\nimport { isValid } from './isValid';\n\nexport function checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    if( !isDOMNode(fieldEl) ){\n        const obj = getValidateFieldDefault({fieldEl});\n        return Promise.resolve(obj);\n    }\n\n    const formEl = fieldEl.closest('form'),\n          isValidValue = fieldEl.value.trim().length > 0;\n\n     // HANDLE FIELDS radio/data-require-more\n     if( fieldEl.type === 'radio' ){\n        const checkedEl = fieldEl.checked ? fieldEl : formEl.querySelector('[name=\"'+ fieldEl.name +'\"]:checked'),\n              reqMoreIsChecked = checkedEl && checkedEl.matches('[data-require-more]'),\n              findReqMoreEl = reqMoreIsChecked ? checkedEl : formEl.querySelector('[data-require-more][name=\"'+ fieldEl.name +'\"]'),\n              findReqFromEl = findReqMoreEl ? formEl.querySelector('[data-required-from=\"#'+ findReqMoreEl.id +'\"]') : null;\n        \n        if( checkedEl && findReqFromEl ){\n            findReqFromEl.required = findReqMoreEl.required && findReqMoreEl.checked;\n            if( !reqMoreIsChecked ){\n                findReqFromEl.value = '';\n            } else if( fieldOptions.focusOnRelated ) {\n                findReqFromEl.focus();\n            }\n        }\n    }\n\n    // HANDLE FIELDS data-required-from\n    if( fieldEl.matches('[data-required-from]') && isValidValue ){\n        const reqMoreEl = formEl.querySelector( fieldEl.getAttribute('data-required-from') );\n        reqMoreEl.checked = true;\n        fieldEl.required = reqMoreEl.required;\n    }\n\n    const needsValidation = fieldEl.required || (fieldEl.matches('[data-validate-if-filled]') && isValidValue);\n\n    return runFunctionsSequence({\n            functionsList: fieldOptions.beforeValidation,\n            data: {fieldEl}\n        })\n        .then(data => {\n            const dataObj = data.pop();\n            return new Promise(resolve => {\n                if( !needsValidation ){\n                    dataObj.result = true;\n                }\n                resolve( needsValidation ? isValid(fieldEl, fieldOptions, validationRules, validationErrors) : dataObj );\n            });\n        });\n\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const runFunctionsSequence = ( { functionsList = [], data = {}, stopConditionFn = () => false } = {} ) => {\n    return functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1]);\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res);\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result);\n                    return res;\n                });\n        });\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList);\n}\n","\nimport { getValidateFieldDefault, mergeObjects, toCamelCase } from './helpers';\n\nexport function isValid( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    const fieldValue = fieldEl.value,\n          obj = getValidateFieldDefault({result: fieldValue.trim().length > 0, fieldEl}),\n          isRadioOrCheckbox = /^(radio|checkbox)$/.test(fieldEl.type),\n          hasSelectedInput = fieldEl.closest('form').querySelectorAll('[name=\"'+ fieldEl.name +'\"]:checked').length > 0;\n\n    if( (!isRadioOrCheckbox && !obj.result) || (isRadioOrCheckbox && !hasSelectedInput) ){\n        obj.result = false;\n        obj.errors = { empty: true };\n        return Promise.resolve(obj);\n    }\n\n    // COLLECT VALIDATION METHOD NAMES ( USED TO RUN VALIDATIONS AND GET ERRORS )\n    const validationMethods = Array.from(fieldEl.attributes).reduce((accList, attr) => {\n        const attrName = toCamelCase( attr.name.replace('data-', '') ),\n              attrValue = toCamelCase( attr.value ),\n              isAttrValueWithFn = (attrName === 'type' || attrName === 'subtype') && validationRules[attrValue],\n              isAttrNameWithFn = validationRules[attrName];\n\n        if( isAttrValueWithFn || isAttrNameWithFn ){\n            accList.push( isAttrValueWithFn ? attrValue : attrName );\n        }\n        return accList;\n    }, []);\n\n    return new Promise(resolve => {\n\n        // RUN VALIDATIONS\n        const validationsResult = validationMethods.reduce((accPromise, methodName) => {\n            return accPromise.then(accObj => {\n                return new Promise(resolveVal => {\n                    // RUN VALIDATION INSIDE A PROMISE IS USEFUL FOR ASYNC VALIDATIONS\n                    resolveVal( validationRules[methodName](fieldValue, fieldEl, fieldOptions) );\n                }).then(valObj => {\n                    // ADD CUSTOM ERROR-KEY FOR EACH VALIDATION RULE\n                    if( !valObj.result ){\n                        const errorObj = {};\n                        if( typeof valObj.errors === 'undefined' || typeof valObj.errors[methodName] === 'undefined' ){\n                            errorObj[methodName] = true;\n                        }\n                        valObj.errors = mergeObjects({}, valObj.errors, errorObj);\n                    }\n                    valObj = valObj.result ? {} : valObj;\n                    return mergeObjects(accObj, valObj);\n                });\n            });\n        }, Promise.resolve(obj));\n        resolve(validationsResult);\n\n    }).then(data => {\n\n        // GET ERRORS\n        if( !data.result ){\n            data.errors = validationMethods.reduce((accObj, methodName) => {\n                const errors = (validationErrors[methodName] && validationErrors[methodName](fieldValue, fieldEl)) || {};\n                return mergeObjects(accObj, errors);\n            }, data.errors);\n            data.errors.rule = true;\n        }\n        return data;\n\n    });\n\n}\n","\nimport { fieldsStringSelector, getUniqueFields, getValidateFieldDefault, getValidateFormDefault, mergeObjects } from './helpers';\nimport { checkFieldValidity } from './checkFieldValidity';\n\nexport function checkFormValidity( formEl, fieldOptions, validationRules, validationErrors, fieldToSkip = null ){\n\n    fieldOptions = mergeObjects( {}, fieldOptions, {focusOnRelated: false} );\n    const fieldsList = getUniqueFields( formEl.querySelectorAll(fieldsStringSelector) );\n\n    return Promise.all( fieldsList.map(fieldEl => {\n\n        if( fieldToSkip && fieldEl === fieldToSkip ){\n            const obj = getValidateFieldDefault({fieldEl, result: true});\n            return Promise.resolve(obj);\n        }\n        return checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors );\n\n    }) ).then(fields => {\n\n        const areAllFieldsValid = fields.filter(fieldObj => !fieldObj.result).length === 0;\n        return getValidateFormDefault({result: areAllFieldsValid, fields});\n\n    });\n\n}\n","\nexport const getUniqueFields = nodeList => {\n\n    let currentFieldName = '',\n        currentFieldType = '';\n\n    return Array.from( nodeList ).filter(fieldEl => {\n        const name = fieldEl.name,\n              type = fieldEl.type;\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false;\n        }\n        \n        if( !fieldEl.matches('[data-required-from]') ){\n            currentFieldName = name;\n            currentFieldType = type;\n        }\n        return true;\n    });\n    \n}\n","\nexport const fieldsStringSelector = 'input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"hidden\"]), select, textarea'\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const getValidateFormDefault = obj => {\n    return mergeObjects({}, { result: true, fields: [] }, obj);\n}\n","\nimport { version }              from './modules/version';\nimport { mergeObjects }         from './modules/helpers';\nimport { options }              from './modules-lite/options';\nimport { validationRules }      from './modules/validationRules';\nimport { constructorFn }        from './modules-lite/constructor';\nimport { checkFieldValidity }   from './modules/checkFieldValidity';\nimport { checkFormValidity }    from './modules/checkFormValidity';\n\nclass Form {\n\n    constructor( formEl, optionsObj ){\n        constructorFn(this, formEl, optionsObj);\n    }\n\n    destroy(){\n        delete this.formEl.formjs;\n    }\n\n    validateField( fieldEl, fieldOptions ){\n        fieldEl = (typeof fieldEl === 'string' ? this.formEl.querySelector(fieldEl) : fieldEl);\n        fieldOptions = mergeObjects({}, this.options.fieldOptions, fieldOptions);\n        return checkFieldValidity(fieldEl, fieldOptions, this.validationRules, this.validationErrors);\n    }\n\n    validateForm( fieldOptions ){\n        fieldOptions = mergeObjects({}, this.options.fieldOptions, fieldOptions);\n        return checkFormValidity(this.formEl, fieldOptions, this.validationRules, this.validationErrors);\n    }\n    \n    static addValidationErrors( errorsObj ){\n        this.prototype.validationErrors = mergeObjects({}, this.prototype.validationErrors, errorsObj);\n    }\n\n    static addValidationRules( rulesObj ){\n        this.prototype.validationRules = mergeObjects({}, this.prototype.validationRules, rulesObj);\n    }\n    \n    static setOptions( optionsObj ){\n        this.prototype.options = mergeObjects({}, this.prototype.options, optionsObj);\n    }\n\n}\n\nForm.prototype.options = options;\nForm.prototype.validationErrors = {};\nForm.prototype.validationRules = validationRules;\nForm.prototype.version = version;\n\nexport default Form;\n","\nimport { checkFormEl, isNodeList, mergeObjects }   from '../modules/helpers';\n\nexport function constructorFn( self, formEl, optionsObj ){\n\n    let argsL = arguments.length,\n        checkFormElem = checkFormEl(formEl);\n\n    if( argsL === 0 || (argsL > 0 && !formEl) ){\n        throw new Error('First argument \"formEl\" is missing or falsy!');\n    }\n    if( isNodeList(formEl) ){\n        throw new Error('First argument \"formEl\" must be a single DOM node or a form CSS selector, not a NodeList!');\n    }\n    if( !checkFormElem.result ){\n        throw new Error('First argument \"formEl\" is not a DOM node nor a form CSS selector!');\n    }\n\n    self.formEl = checkFormElem.element;\n    self.formEl.formjs = self;\n    self.options = mergeObjects({}, self.constructor.prototype.options, optionsObj);\n\n    // BINDING CONTEXT FOR FUTURE EXECUTION\n    self.options.fieldOptions.beforeValidation = self.options.fieldOptions.beforeValidation.map(cbFn => cbFn.bind(self));\n\n    self.formEl.noValidate = true;\n    \n}\n","\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [],\n        focusOnRelated:         true,\n        maxFileSize:            10\n    }\n    \n}\n"],"names":["isNodeList","nodeList","NodeList","prototype","isPrototypeOf","isDOMNode","node","Element","checkFormEl","formEl","isString","isFormSelector","document","querySelector","tagName","toLowerCase","result","element","mergeObjects","out","i","arguments","length","obj","key","isArray","Object","toString","call","isObject","hasOwnProperty","concat","slice","Array","push","formatMap","YYYY-MM-DD","dateArray","MM-DD-YYYY","DD-MM-YYYY","reverse","getDateAsNumber","dateString","dateFormat","splitChar","string","separator","match","getSplitChar","indexOf","replace","split","join","getValidateFieldDefault","fieldEl","toCamelCase","all","letter","toUpperCase","validationRules","date","test","email","number","checkbox","value","dataChecksEl","closest","name","attrValue","JSON","parse","getAttribute","checkedElLength","querySelectorAll","isMinOk","isMaxOk","errors","checks","minChecks","maxChecks","checked","equalTo","exactLength","valueLength","minlength","maxlength","file","maxFileSize","fieldOptions","MIMEtype","accept","RegExp","filesList","from","files","forEach","exceedMaxFileSize","size","isAcceptedFileType","type","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","stringLength","max","maxVal","maxLength","min","minVal","minLength","pattern","radio","fieldChecked","trim","checkFieldValidity","validationErrors","Promise","resolve","isValidValue","checkedEl","reqMoreIsChecked","matches","findReqMoreEl","findReqFromEl","id","required","focusOnRelated","focus","reqMoreEl","needsValidation","functionsList","data","stopConditionFn","reduce","acc","promiseFn","then","res","dataNew","dataList","runFunctionsSequence","beforeValidation","dataObj","pop","fieldValue","isRadioOrCheckbox","hasSelectedInput","empty","validationMethods","attributes","accList","attr","attrName","isAttrValueWithFn","isAttrNameWithFn","accPromise","methodName","accObj","resolveVal","valObj","errorObj","rule","isValid","checkFormValidity","fieldToSkip","fieldsList","currentFieldName","currentFieldType","filter","getUniqueFields","map","fields","areAllFieldsValid","fieldObj","Form","[object Object]","optionsObj","self","argsL","checkFormElem","Error","formjs","options","constructor","cbFn","bind","noValidate","constructorFn","this","errorsObj","rulesObj","version"],"mappings":"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"}