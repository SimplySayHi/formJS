{"version":3,"file":"formjs-esm.min.js","sources":["../../src/modules/version.js","../../src/modules/helpers/isDOMNode.js","../../src/modules/helpers/isPlainObject.js","../../src/modules/helpers/mergeObjects.js","../../src/modules/helpers/getDateAsNumber.js","../../src/modules/helpers/getSplitChar.js","../../src/modules/helpers/getValidateFieldDefault.js","../../src/modules/helpers/toCamelCase.js","../../src/modules/validationRules.js","../../src/modules/validationRules/date.js","../../src/modules/validationRules/email.js","../../src/modules/validationRules/number.js","../../src/modules/validationRules/checkbox.js","../../src/modules/validationRules/checks.js","../../src/modules/validationRules/equalTo.js","../../src/modules/validationRules/exactLength.js","../../src/modules/validationRules/file.js","../../src/modules/validationRules/length.js","../../src/modules/validationRules/max.js","../../src/modules/validationRules/maxlength.js","../../src/modules/validationRules/min.js","../../src/modules/validationRules/minlength.js","../../src/modules/validationRules/pattern.js","../../src/modules/validationRules/radio.js","../../src/modules/checkFieldValidity.js","../../src/modules/helpers/getJSONobjectFromFieldAttribute.js","../../src/modules/helpers/runFunctionsSequence.js","../../src/modules/isValid.js","../../src/modules/helpers/removeClass.js","../../src/modules/checkFormValidity.js","../../src/modules/helpers/getUniqueFields.js","../../src/modules/helpers/fieldsStringSelector.js","../../src/modules/helpers/getValidateFormDefault.js","../../src/index-lite.js","../../src/modules/helpers/checkFormEl.js","../../src/modules/helpers/isNodeList.js","../../src/modules-lite/options.js"],"sourcesContent":["\nexport const version = '4.4.0';\n","\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node );\n}\n","\nexport const isPlainObject = object => {\n    return Object.prototype.toString.call( object ) === '[object Object]';\n}\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const mergeObjects = function( out = {} ){\n    Array.from(arguments).slice(1).filter(arg => !!arg).forEach(arg => {\n        Object.keys(arg).forEach(key => {\n            if( Array.isArray(arg[key]) ){\n                out[key] = (out[key] || []).concat( arg[key].slice(0) );\n            } else if( isPlainObject(arg[key]) ){\n                out[key] = mergeObjects((out[key] || {}), arg[key]);\n            } else {\n                // * STRING | NUMBER | BOOLEAN | FUNCTION\n                if( Array.isArray(out[key]) ){\n                    // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                    out[key].push(arg[key]);\n                } else {\n                    out[key] = arg[key];\n                }\n            }\n        });\n    });\n\n    return out;\n}\n","\nimport { getSplitChar } from './getSplitChar';\n\nconst formatMap = {\n    'YYYY-MM-DD': function(dateArray){\n        return dateArray;\n    },\n    'MM-DD-YYYY': function(dateArray){\n        return [dateArray[2], dateArray[0], dateArray[1]];\n    },\n    'DD-MM-YYYY': function(dateArray){\n        return dateArray.reverse();\n    }\n};\n\nexport const getDateAsNumber = ( dateString, dateFormat ) => {\n    dateFormat = dateFormat || 'YYYY-MM-DD';\n    const splitChar = getSplitChar(dateString);\n\n    if( dateFormat.indexOf(splitChar) < 0 ){\n        return;\n    }\n\n    dateFormat = dateFormat.replace(/[^YMD]/g, '-');\n    dateString = dateString.split(splitChar);\n    dateString = formatMap[dateFormat](dateString).join('');\n    \n    return dateString;\n}\n","\nexport const getSplitChar = string => {\n    // MATCH ANY NON-DIGIT CHAR\n    const separator = string.match(/\\D/);\n    return (separator && separator.length > 0) ? separator[0] : null;\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const getValidateFieldDefault = obj => {\n    return mergeObjects({}, { result: false, fieldEl: null }, obj);\n}\n","\nexport const toCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase(); });\n}\n","\nimport { date }         from './validationRules/date';\nimport { email }        from './validationRules/email';\nimport { number }       from './validationRules/number';\n\nimport { checkbox }     from './validationRules/checkbox';\nimport { equalTo }      from './validationRules/equalTo';\nimport { exactLength }  from './validationRules/exactLength';\nimport { file }         from './validationRules/file';\nimport { length }       from './validationRules/length';\nimport { max }          from './validationRules/max';\nimport { maxlength }    from './validationRules/maxlength';\nimport { min }          from './validationRules/min';\nimport { minlength }    from './validationRules/minlength';\nimport { pattern }      from './validationRules/pattern';\nimport { radio }        from './validationRules/radio';\n\nexport const validationRules = {\n    date,\n    email,\n    number,\n\n    checkbox,\n    equalTo,\n    exactLength,\n    file,\n    length,\n    max,\n    maxlength,\n    min,\n    minlength,\n    pattern,\n    radio\n}\n","\n/*\n    DATE AS ISO 8601 DATE FORMAT:\n    YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n*/\n\nexport const date = function( string ){\n    return {\n        result: /^((((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13578]|1[02])[ \\/\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13456789]|1[012])[ \\/\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.]02[ \\/\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ \\/\\-.]02[ \\/\\-.]29))$/g.test( string )\n    };\n}\n","\n// https://regex101.com/r/cdlyJy/3\n\nexport const email = function( string ){\n    return {\n        result: /^[a-zA-Z_-]([\\w.-]?[a-zA-Z0-9])*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?){2,})+$/.test( string )\n    };\n}\n","\n/*\n    ALL NUMBERS ( INTEGERS AND FLOATING )\n    VALID NUMBERS: 123 | 123.456 | .123\n*/\n\nexport const number = function( string ){\n    return {\n        result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n    };\n}","\nimport { checks } from './checks';\n\nexport const checkbox = function( value, fieldEl ){\n    const dataChecksEl = fieldEl.closest('form').querySelector('[name=\"' + fieldEl.name + '\"][data-checks]');\n    return dataChecksEl ? checks(dataChecksEl) : { result: fieldEl.checked };\n}\n","\nexport const checks = function( fieldEl ){\n    const attrValue = JSON.parse( fieldEl.getAttribute('data-checks') ),\n          checkedElLength = fieldEl.closest('form').querySelectorAll('[name=\"' + fieldEl.name + '\"]:checked').length,\n          isMinOk = checkedElLength >= attrValue[0],\n          isMaxOk = checkedElLength <= attrValue[1],\n          obj = { result: isMinOk && isMaxOk };\n\n    if( !obj.result ){\n        obj.errors = { checks: true };\n        if( !isMinOk ){ obj.errors.minChecks = true; }\n        if( !isMaxOk ){ obj.errors.maxChecks = true; }\n    }\n\n    return obj;\n}\n","\nexport const equalTo = function( value, fieldEl ){\n    const checkFromEl = fieldEl.closest('form').querySelector( '[name=\"' + fieldEl.getAttribute('data-equal-to') + '\"]' );\n    return { result: value === checkFromEl.value };\n}\n","\nexport const exactLength = function( value, fieldEl ){\n    const valueLength = value.length,\n          exactLength = fieldEl.getAttribute('data-exact-length') * 1,\n          obj = { result: valueLength === exactLength };\n\n    if( !obj.result ){\n        obj.errors = {};\n        if( valueLength < exactLength ){ obj.errors.minlength = true; }\n        else { obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nexport const file = function( value, fieldEl, fieldOptions ){\n    const maxFileSize = (fieldEl.getAttribute('data-max-file-size') || fieldOptions.maxFileSize) * 1,\n          MIMEtype = fieldEl.accept ? new RegExp(fieldEl.accept.replace( '*', '[^\\\\/,]+' )) : null,\n          filesList = Array.from(fieldEl.files),\n          obj = { result: true };\n\n    filesList.forEach(file => {\n        const exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize,\n              isAcceptedFileType = MIMEtype !== null ? MIMEtype.test(file.type) : true;\n\n        if( exceedMaxFileSize || !isAcceptedFileType ){\n            obj.result = false;\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {};\n            }\n            if( exceedMaxFileSize ){ obj.errors.maxFileSize = true; }\n            if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true; }\n\n        }\n    });\n\n    return obj;\n}\n","\nexport const length = function( value, fieldEl ){\n    const valueL = value.length,\n          attrValue = JSON.parse( fieldEl.getAttribute('data-length') ),\n          isMinlengthOk = valueL >= attrValue[0],\n          isMaxlengthOk = valueL <= attrValue[1],\n          obj = { result: isMinlengthOk && isMaxlengthOk };\n\n    if( !obj.result ){\n        obj.errors = { stringLength: true };\n        if( !isMinlengthOk ){ obj.errors.minlength = true; }\n        if( !isMaxlengthOk ){ obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const max = function( value, fieldEl ){\n    let maxVal = fieldEl.max;\n    const dateFormat = fieldEl.getAttribute('data-date-format');\n    \n    if( fieldEl.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat );\n        maxVal = maxVal.split('-').join('');\n    }\n\n    value = value * 1;\n    maxVal = maxVal * 1;\n    \n    return { result: value <= maxVal };\n}\n","\nexport const maxlength = function( value, fieldEl ){\n    return { result: value.length <= fieldEl.maxLength * 1 };\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const min = function( value, fieldEl ){\n    let minVal = fieldEl.min;\n    const dateFormat = fieldEl.getAttribute('data-date-format');\n    \n    if( fieldEl.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat );\n        minVal = minVal.split('-').join('');\n    }\n\n    value = value * 1;\n    minVal = minVal * 1;\n    \n    return { result: value >= minVal };\n}\n","\nexport const minlength = function( value, fieldEl ){\n    return { result: value.length >= fieldEl.minLength * 1 };\n}\n","\nexport const pattern = function( value, fieldEl ){\n    return { result: new RegExp(fieldEl.pattern).test(value) };\n}\n","\nexport const radio = function( value, fieldEl ){\n    const fieldChecked = fieldEl.closest('form').querySelector( '[name=\"'+ fieldEl.name +'\"]:checked' ),\n          isValid = fieldChecked !== null && fieldChecked.value.trim().length > 0;\n\n    return { result: isValid };\n}\n","\nimport {    getJSONobjectFromFieldAttribute,\n            getValidateFieldDefault,\n            isDOMNode,\n            mergeObjects,\n            removeClass,\n            runFunctionsSequence \n        }           from './helpers';\nimport { isValid }  from './isValid';\n\nexport function checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    if( !isDOMNode(fieldEl) ){\n        const obj = getValidateFieldDefault({fieldEl});\n        return Promise.resolve(obj);\n    }\n\n    const formEl = fieldEl.closest('form'),\n          isValidValue = fieldEl.value.trim().length > 0,\n          dataFieldOptions = getJSONobjectFromFieldAttribute( fieldEl, 'data-field-options' );\n\n    fieldOptions = mergeObjects( fieldOptions, dataFieldOptions );\n\n     // HANDLE FIELDS radio/data-require-more\n     if( fieldEl.type === 'radio' ){\n        const checkedEl = fieldEl.checked ? fieldEl : formEl.querySelector('[name=\"'+ fieldEl.name +'\"]:checked'),\n              reqMoreIsChecked = checkedEl && checkedEl.matches('[data-require-more]'),\n              findReqMoreEl = reqMoreIsChecked ? checkedEl : formEl.querySelector('[data-require-more][name=\"'+ fieldEl.name +'\"]'),\n              findReqFromEl = findReqMoreEl ? formEl.querySelector('[data-required-from=\"#'+ findReqMoreEl.id +'\"]') : null;\n        \n        if( checkedEl && findReqFromEl ){\n            findReqFromEl.required = findReqMoreEl.required && findReqMoreEl.checked;\n            if( !reqMoreIsChecked ){\n                findReqFromEl.value = '';\n            } else if( fieldOptions.focusOnRelated ) {\n                findReqFromEl.focus();\n            }\n        }\n    }\n\n    // HANDLE FIELDS data-required-from\n    if( fieldEl.matches('[data-required-from]') && isValidValue ){\n        const reqMoreEl = formEl.querySelector( fieldEl.getAttribute('data-required-from') );\n        reqMoreEl.checked = true;\n        fieldEl.required = reqMoreEl.required;\n    }\n\n    const needsValidation = fieldEl.required || (fieldEl.matches('[data-validate-if-filled]') && isValidValue);\n\n    return runFunctionsSequence({\n            functionsList: fieldOptions.beforeValidation,\n            data: { fieldEl, fieldOptions }\n        })\n        .then(data => {\n            const dataObj = data.pop();\n            return new Promise(resolve => {\n                if( !needsValidation ){\n                    dataObj.result = true;\n                }\n                resolve( needsValidation ? isValid(fieldEl, fieldOptions, validationRules, validationErrors) : dataObj );\n            });\n        })\n        .then(data => {\n            const containerEl = fieldOptions.questionContainer && data.fieldEl.closest( fieldOptions.questionContainer );\n            if( containerEl ){\n                removeClass( containerEl, fieldOptions.cssClasses.pending );\n            }\n            return data;\n        })\n        ;\n\n}\n","\nexport const getJSONobjectFromFieldAttribute = ( fieldEl, attrName ) => {\n    const customAttrEl = fieldEl.closest('['+ attrName +']');\n    return (customAttrEl && JSON.parse(customAttrEl.getAttribute(attrName))) || {};\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const runFunctionsSequence = ( { functionsList = [], data = {}, stopConditionFn = () => false } = {} ) => {\n    return functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1]);\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res);\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result);\n                    return res;\n                });\n        });\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList);\n}\n","\nimport { getValidateFieldDefault, mergeObjects, toCamelCase } from './helpers';\n\nexport function isValid( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    const fieldValue = fieldEl.value,\n          obj = getValidateFieldDefault({result: fieldValue.trim().length > 0, fieldEl}),\n          isRadioOrCheckbox = /^(radio|checkbox)$/.test(fieldEl.type),\n          hasSelectedInput = fieldEl.closest('form').querySelectorAll('[name=\"'+ fieldEl.name +'\"]:checked').length > 0;\n\n    if( (!isRadioOrCheckbox && !obj.result) || (isRadioOrCheckbox && !hasSelectedInput) ){\n        obj.result = false;\n        obj.errors = { empty: true };\n        return Promise.resolve(obj);\n    }\n\n    // COLLECT VALIDATION METHOD NAMES ( USED TO RUN VALIDATIONS AND GET ERRORS )\n    const validationMethods = Array.from(fieldEl.attributes).reduce((accList, attr) => {\n        const attrName = toCamelCase( attr.name.replace('data-', '') ),\n              attrValue = toCamelCase( attr.value ),\n              isAttrValueWithFn = (attrName === 'type' || attrName === 'subtype') && validationRules[attrValue],\n              isAttrNameWithFn = validationRules[attrName];\n\n        if( isAttrValueWithFn || isAttrNameWithFn ){\n            accList.push( isAttrValueWithFn ? attrValue : attrName );\n        }\n        return accList;\n    }, []);\n\n    return new Promise(resolve => {\n\n        // RUN VALIDATIONS\n        const validationsResult = validationMethods.reduce((accPromise, methodName) => {\n            return accPromise.then(accObj => {\n                return new Promise(resolveVal => {\n                    // RUN VALIDATION INSIDE A PROMISE IS USEFUL FOR ASYNC VALIDATIONS\n                    resolveVal( validationRules[methodName](fieldValue, fieldEl, fieldOptions) );\n                }).then(valObj => {\n                    // ADD CUSTOM ERROR-KEY FOR EACH VALIDATION RULE\n                    if( !valObj.result ){\n                        const errorObj = {};\n                        if( typeof valObj.errors === 'undefined' || typeof valObj.errors[methodName] === 'undefined' ){\n                            errorObj[methodName] = true;\n                        }\n                        valObj.errors = mergeObjects({}, valObj.errors, errorObj);\n                    }\n                    valObj = valObj.result ? {} : valObj;\n                    return mergeObjects(accObj, valObj);\n                });\n            });\n        }, Promise.resolve(obj));\n        resolve(validationsResult);\n\n    }).then(data => {\n\n        // GET ERRORS\n        if( !data.result ){\n            data.errors = validationMethods.reduce((accObj, methodName) => {\n                const errors = (validationErrors[methodName] && validationErrors[methodName](fieldValue, fieldEl)) || {};\n                return mergeObjects(accObj, errors);\n            }, data.errors);\n            data.errors.rule = true;\n        }\n        return data;\n\n    });\n\n}\n","\nexport const removeClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.remove( className );\n    });\n}\n","\nimport { fieldsStringSelector, getUniqueFields, getValidateFieldDefault, getValidateFormDefault, mergeObjects } from './helpers';\nimport { checkFieldValidity } from './checkFieldValidity';\n\nexport function checkFormValidity( formEl, fieldOptions, validationRules, validationErrors, fieldToSkip = null ){\n\n    fieldOptions = mergeObjects( {}, fieldOptions, {focusOnRelated: false} );\n    const fieldsList = getUniqueFields( formEl.querySelectorAll(fieldsStringSelector) );\n\n    return Promise.all( fieldsList.map(fieldEl => {\n\n        if( fieldToSkip && fieldEl === fieldToSkip ){\n            const obj = getValidateFieldDefault({fieldEl, result: true});\n            return Promise.resolve(obj);\n        }\n        return checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors );\n\n    }) ).then(fields => {\n\n        const areAllFieldsValid = fields.filter(fieldObj => !fieldObj.result).length === 0;\n        return getValidateFormDefault({result: areAllFieldsValid, fields});\n\n    });\n\n}\n","\nexport const getUniqueFields = nodeList => {\n\n    let currentFieldName = '',\n        currentFieldType = '';\n\n    return Array.from( nodeList ).filter(fieldEl => {\n        const name = fieldEl.name,\n              type = fieldEl.type;\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false;\n        }\n        \n        if( !fieldEl.matches('[data-required-from]') ){\n            currentFieldName = name;\n            currentFieldType = type;\n        }\n        return true;\n    });\n    \n}\n","\nexport const fieldsStringSelector = 'input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"hidden\"]), select, textarea'\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const getValidateFormDefault = obj => {\n    return mergeObjects({}, { result: true, fields: [] }, obj);\n}\n","\nimport { version }              from './modules/version';\nimport { checkFormEl, isNodeList, mergeObjects } from './modules/helpers';\nimport { options }              from './modules-lite/options';\nimport { validationRules }      from './modules/validationRules';\nimport { checkFieldValidity }   from './modules/checkFieldValidity';\nimport { checkFormValidity }    from './modules/checkFormValidity';\n\nclass Form {\n\n    constructor( formEl, optionsObj ){\n        const argsL = arguments.length,\n              checkFormElem = checkFormEl(formEl);\n\n        if( argsL === 0 || (argsL > 0 && !formEl) ){\n            throw new Error('First argument \"formEl\" is missing or falsy!');\n        }\n        if( isNodeList(formEl) ){\n            throw new Error('First argument \"formEl\" must be a single DOM node or a form CSS selector, not a NodeList!');\n        }\n        if( !checkFormElem.result ){\n            throw new Error('First argument \"formEl\" is not a DOM node nor a form CSS selector!');\n        }\n\n        const self = this;\n\n        self.formEl = checkFormElem.element;\n        self.formEl.formjs = self;\n        self.options = mergeObjects({}, Form.prototype.options, optionsObj);\n\n        // BINDING CONTEXT FOR FUTURE EXECUTION\n        self.options.fieldOptions.beforeValidation = self.options.fieldOptions.beforeValidation.map(cbFn => cbFn.bind(self));\n\n        self.formEl.noValidate = true;\n    }\n\n    destroy(){\n        delete this.formEl.formjs;\n    }\n\n    validateField( fieldEl, fieldOptions ){\n        const self = this;\n        fieldEl = (typeof fieldEl === 'string' ? self.formEl.querySelector(fieldEl) : fieldEl);\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions);\n        return checkFieldValidity(fieldEl, fieldOptions, self.validationRules, self.validationErrors);\n    }\n\n    validateForm( fieldOptions ){\n        const self = this;\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions);\n        return checkFormValidity(self.formEl, fieldOptions, self.validationRules, self.validationErrors);\n    }\n    \n    static addValidationErrors( errorsObj ){\n        Form.prototype.validationErrors = mergeObjects({}, Form.prototype.validationErrors, errorsObj);\n    }\n\n    static addValidationRules( rulesObj ){\n        Form.prototype.validationRules = mergeObjects({}, Form.prototype.validationRules, rulesObj);\n    }\n    \n    static setOptions( optionsObj ){\n        Form.prototype.options = mergeObjects({}, Form.prototype.options, optionsObj);\n    }\n\n}\n\nForm.prototype.options = options;\nForm.prototype.validationErrors = {};\nForm.prototype.validationRules = validationRules;\nForm.prototype.version = version;\n\nexport default Form;\n","\nimport { isDOMNode } from './isDOMNode';\n\nexport const checkFormEl = formEl => {\n    const isString = typeof formEl,\n          isValidNodeSelector = isString === 'string' && isDOMNode(document.querySelector(formEl)),\n          isFormSelector = isValidNodeSelector && document.querySelector(formEl).tagName.toLowerCase() === 'form',\n          obj = {\n            result: isDOMNode(formEl) || isFormSelector,\n            element: (isString === 'string' ? document.querySelector(formEl) : formEl)\n          };\n\n    return obj;\n}\n","\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList );\n}\n","\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [],\n        focusOnRelated:         true,\n        maxFileSize:            10\n    }\n    \n}\n"],"names":["isDOMNode","node","Element","prototype","isPrototypeOf","isPlainObject","object","Object","toString","call","mergeObjects","out","Array","from","arguments","slice","filter","arg","forEach","keys","key","isArray","concat","push","formatMap","YYYY-MM-DD","dateArray","MM-DD-YYYY","DD-MM-YYYY","reverse","getDateAsNumber","dateString","dateFormat","splitChar","string","separator","match","length","getSplitChar","indexOf","replace","split","join","getValidateFieldDefault","obj","result","fieldEl","toCamelCase","all","letter","toUpperCase","validationRules","date","test","email","number","checkbox","value","dataChecksEl","closest","querySelector","name","attrValue","JSON","parse","getAttribute","checkedElLength","querySelectorAll","isMinOk","isMaxOk","errors","checks","minChecks","maxChecks","checked","equalTo","exactLength","valueLength","minlength","maxlength","file","fieldOptions","maxFileSize","MIMEtype","accept","RegExp","filesList","files","exceedMaxFileSize","size","isAcceptedFileType","type","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","stringLength","max","maxVal","maxLength","min","minVal","minLength","pattern","radio","fieldChecked","trim","checkFieldValidity","validationErrors","Promise","resolve","formEl","isValidValue","dataFieldOptions","attrName","customAttrEl","getJSONobjectFromFieldAttribute","checkedEl","reqMoreIsChecked","matches","findReqMoreEl","findReqFromEl","id","required","focusOnRelated","focus","reqMoreEl","needsValidation","functionsList","data","stopConditionFn","reduce","acc","promiseFn","then","res","dataNew","dataList","runFunctionsSequence","beforeValidation","dataObj","pop","fieldValue","isRadioOrCheckbox","hasSelectedInput","empty","validationMethods","attributes","accList","attr","isAttrValueWithFn","isAttrNameWithFn","accPromise","methodName","accObj","resolveVal","valObj","errorObj","rule","isValid","containerEl","questionContainer","element","cssClasses","pending","className","classList","remove","checkFormValidity","fieldToSkip","fieldsList","nodeList","currentFieldName","currentFieldType","getUniqueFields","map","fields","areAllFieldsValid","fieldObj","Form","[object Object]","optionsObj","argsL","checkFormElem","isString","isFormSelector","document","tagName","toLowerCase","checkFormEl","Error","NodeList","self","this","formjs","options","cbFn","bind","noValidate","errorsObj","rulesObj","version"],"mappings":"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"}