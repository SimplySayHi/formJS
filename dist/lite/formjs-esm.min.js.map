{"version":3,"file":"formjs-esm.min.js","sources":["../../src/modules/version.js","../../src/modules/helpers/isNodeList.js","../../src/modules/helpers/isDOMNode.js","../../src/modules/helpers/checkFormEl.js","../../src/modules/helpers/mergeObjects.js","../../src/modules/helpers/getSplitChar.js","../../src/modules/helpers/getValidateFieldDefault.js","../../src/modules/helpers/toCamelCase.js","../../src/modules/validationRules.js","../../src/modules/checkFieldValidity.js","../../src/modules/helpers/runFunctionsSequence.js","../../src/modules/isValid.js","../../src/modules/checkFormValidity.js","../../src/modules/helpers/getValidateFormDefault.js","../../src/modules/helpers/getUniqueFields.js","../../src/modules/helpers/fieldsStringSelector.js","../../src/index-lite.js","../../src/modules-lite/constructor.js","../../src/modules-lite/options.js"],"sourcesContent":["\nexport const version = '4.0.2';\n","\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList );\n}\n","\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node );\n}\n","\nimport { isDOMNode } from './isDOMNode';\n\nexport const checkFormEl = formEl => {\n    let isString = typeof formEl,\n        isValidNodeSelector = isString === 'string' && isDOMNode(document.querySelector(formEl)),\n        isFormSelector = isValidNodeSelector && document.querySelector(formEl).tagName.toLowerCase() === 'form',\n        obj = {\n            result: isDOMNode(formEl) || isFormSelector,\n            element: (isString === 'string' ? document.querySelector(formEl) : formEl)\n        };\n\n    return obj;\n}\n","\nexport const mergeObjects = function( out = {} ){\n    for(let i=1; i<arguments.length; i++){\n        let obj = arguments[i];\n\n        if(!obj){ continue; }\n\n        for(let key in obj){\n            let isArray = Object.prototype.toString.call(obj[key]) === \"[object Array]\";\n            let isObject = Object.prototype.toString.call(obj[key]) === \"[object Object]\";\n\n            // COPY ONLY ENUMERABLE PROPERTIES\n            if( obj.hasOwnProperty(key) ){\n                if( isArray ){\n\n                    if( typeof out[key] === 'undefined' ){\n                        out[key] = [];\n                    }\n                    out[key] = out[key].concat( obj[key].slice(0) );\n\n                } else if( isObject ){\n\n                    out[key] = mergeObjects(out[key], obj[key]);\n\n                } else {\n\n                    // * STRING | NUMBER | BOOLEAN | FUNCTION\n                    if( Array.isArray(out[key]) ){\n                        // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                        out[key].push(obj[key]);\n                    } else {\n                        out[key] = obj[key];\n                    }\n\n                }\n            }\n        }\n    }\n\n    return out;\n}\n","\nexport const getSplitChar = string => {\n    let splitChar = '.';\n\n    if( string.indexOf(splitChar) === -1 ){\n        if( string.indexOf('-') >= 0 ){\n            splitChar = '-';\n        } else if( string.indexOf('/') >= 0 ){\n            splitChar = '/';\n        }\n    }\n\n    return splitChar;\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const getValidateFieldDefault = obj => {\n    return mergeObjects({}, { result: false, fieldEl: null }, obj);\n}\n","\nexport const toCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase(); });\n}\n","\nimport { getSplitChar } from './helpers';\n\nexport const validationRules = {\n    \n    date: function( string ){\n        // DATE AS ISO 8601 DATE FORMAT     YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n\n        let date = /^((((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13578]|1[02])[ \\/\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13456789]|1[012])[ \\/\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.]02[ \\/\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ \\/\\-.]02[ \\/\\-.]29))$/g.test( string ),\n            obj = {\n                result: date\n            };\n\n        return obj;\n    },\n    \n    email: function( string ){\n        // https://regex101.com/r/cdlyJy/3\n        let obj = {\n            result: /^[a-zA-Z_-]([\\w.-]?[a-zA-Z0-9])*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?){2,})+$/.test( string )\n        };\n\n        return obj;\n    },\n    \n    number: function( string ){\n        // ALL NUMBERS ( INTEGERS AND FLOATING )\n        // VALID NUMBERS: 123 | 123.456 | .123\n        let obj = {\n            result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n        };\n\n        return obj;\n    }\n    \n}\n\nexport const validationRulesAttributes = {\n\n    checkbox: function( data ){\n        let formEl = data.fieldEl.closest('form'),\n            dataChecksEl = formEl.querySelector('[name=\"' + data.fieldEl.name + '\"][data-checks]'),\n            obj = { result: data.fieldEl.checked };\n\n        if( dataChecksEl !== null ){\n            obj = this.checks({ attrValue: dataChecksEl.getAttribute('data-checks'), fieldEl: dataChecksEl});\n        }\n\n        return obj;\n    },\n\n    checks: function( data ){\n        try {\n            let attrValue = JSON.parse(data.attrValue),\n                fieldEl = data.fieldEl,\n                formEl = fieldEl.closest('form'),\n                checkedElLength = formEl.querySelectorAll('[name=\"' + fieldEl.name + '\"]:checked').length,\n                isMinOk = checkedElLength >= attrValue[0],\n                isMaxOk = checkedElLength <= attrValue[1],\n                obj = {\n                    result: isMinOk && isMaxOk\n                };\n\n            if( !obj.result ){\n\n                obj.errors = { checks: true };\n                if( !isMinOk ){ obj.errors.minChecks = true; }\n                if( !isMaxOk ){ obj.errors.maxChecks = true; }\n\n            }\n\n            return obj;\n        } catch(e){\n            throw new Error('\"data-checks\" attribute is not a valid array!');\n        }\n    },\n\n    equalTo: function( data ){\n        let fieldEl = data.fieldEl,\n            formEl = fieldEl.closest('form'),\n            checkFromEl = formEl.querySelector( '[name=\"' + fieldEl.getAttribute('data-equal-to') + '\"]' ),\n            obj = {\n                result: fieldEl.value === checkFromEl.value\n            };\n\n        if( !obj.result ){\n            \n            obj.errors = { equalTo: true };\n        }\n\n        return obj;\n    },\n    \n    exactLength: function( data ){\n        let valueLength = data.fieldEl.value.length,\n            exactLength = (data.attrValue * 1),\n            obj = {\n                result: valueLength === exactLength\n            };\n\n        if( !obj.result ){\n\n            obj.errors = { exactLength: true };\n            if( valueLength < exactLength ){ obj.errors.minlength = true; }\n            else { obj.errors.maxlength = true; }\n\n        }\n\n        return obj;\n    },\n\n    file: function( data ){\n        let fieldEl = data.fieldEl,\n            maxFileSize = (fieldEl.getAttribute('data-max-file-size') || data.fieldOptions.maxFileSize) * 1,\n            MIMEtype = (fieldEl.accept ? new RegExp(fieldEl.accept.replace( '*', '[^\\\\/,]+' )) : null),\n            filesList = Array.from(fieldEl.files),\n            obj = { result: true };\n\n        filesList.forEach(function( file ){\n            let exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize,\n                isAcceptedFileType = (MIMEtype !== null ? MIMEtype.test(file.type) : true);\n\n            if( exceedMaxFileSize || !isAcceptedFileType ){\n                obj.result = false;\n                if( typeof obj.errors === 'undefined' ){\n                    obj.errors = {};\n                }\n                obj.errors.file = true;\n                if( exceedMaxFileSize ){ obj.errors.maxFileSize = true; }\n                if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true; }\n\n            }\n        });\n\n        return obj;\n    },\n\n    length: function( data ){\n        try {\n            let valueL = data.fieldEl.value.length,\n                attrValue = JSON.parse(data.attrValue),\n                isMinlengthOk = valueL >= attrValue[0],\n                isMaxlengthOk = valueL <= attrValue[1],\n                obj = { result: isMinlengthOk && isMaxlengthOk };\n\n            if( !obj.result ){\n\n                obj.errors = { stringLength: true };\n                if( !isMinlengthOk ){ obj.errors.minlength = true; }\n                if( !isMaxlengthOk ){ obj.errors.maxlength = true; }\n\n            }\n\n            return obj;\n        } catch(e){\n            throw new Error('\"data-length\" attribute is not a valid array!');\n        }\n    },\n    \n    max: function( data ){\n        let fieldEl = data.fieldEl,\n            isDate = (fieldEl.matches('[type=\"date\"]') || fieldEl.matches('[data-subtype=\"date\"]') || fieldEl.matches('[data-subtype=\"dateDDMMYYYY\"]')),\n            value = data.fieldEl.value,\n            maxVal = data.attrValue;\n        \n        if( isDate ){\n\n            let splitChar = getSplitChar( value );\n\n            if( value.indexOf(splitChar) === 2 ){\n                // DD MM YYYY\n                value = value.split( splitChar ).reverse();\n            } else {\n                // YYYY MM DD\n                value = value.split( splitChar );\n            }\n\n            value = value.join('');\n            maxVal = maxVal.split('-').join('');\n\n        }\n\n        value = value * 1;\n        maxVal = maxVal * 1;\n\n        let obj = {\n                result: value <= maxVal\n            };\n\n        if( !obj.result ){\n            \n            obj.errors = { max: true };\n        }\n        \n        return obj;\n    },\n    \n    maxlength: function( data ){\n        const obj = {\n            result: data.fieldEl.value.length <= (data.attrValue * 1)\n        };\n\n        if( !obj.result ){\n\n            obj.errors = { maxlength: true };\n        }\n\n        return obj;\n    },\n    \n    min: function( data ){\n        let fieldEl = data.fieldEl,\n            isDate = (fieldEl.matches('[type=\"date\"]') || fieldEl.matches('[data-subtype=\"date\"]') || fieldEl.matches('[data-subtype=\"dateDDMMYYYY\"]')),\n            value = data.fieldEl.value,\n            minVal = data.attrValue;\n        \n        if( isDate ){\n\n            let splitChar = getSplitChar( value );\n\n            if( value.indexOf(splitChar) === 2 ){\n                // DD MM YYYY\n                value = value.split( splitChar ).reverse();\n            } else {\n                // YYYY MM DD\n                value = value.split( splitChar );\n            }\n\n            value = value.join('');\n            minVal = minVal.split('-').join('');\n\n        }\n\n        value = value * 1;\n        minVal = minVal * 1;\n\n        let obj = {\n                result: value >= minVal\n            };\n\n        if( !obj.result ){\n            \n            obj.errors = { min: true };\n        }\n        \n        return obj;\n    },\n\n    minlength: function( data ){\n        const obj = {\n            result: data.fieldEl.value.length >= (data.attrValue * 1)\n        };\n\n        if( !obj.result ){\n\n            obj.errors = { minlength: true };\n        }\n\n        return obj;\n    },\n\n    pattern: function( data ){\n        let fieldEl = data.fieldEl,\n            fieldPattern = fieldEl.pattern,\n            fieldRegex = new RegExp( fieldPattern ),\n            obj = {\n                result: fieldRegex.test( fieldEl.value )\n            };\n\n        if( !obj.result ){\n\n            obj.errors = { pattern: true };\n        }\n\n        return obj;\n    },\n\n    radio: function( data ){\n        let fieldEl = data.fieldEl,\n            fieldChecked = fieldEl.closest('form').querySelector( '[name=\"'+ fieldEl.name +'\"]:checked' ),\n            isValid = fieldChecked !== null && fieldChecked.value.trim().length > 0,\n            obj = { result: isValid };\n\n        return obj;\n    },\n\n    requiredFrom: function( data ){\n        let fieldEl = data.fieldEl,\n            formEl = fieldEl.closest('form'),\n            isValidValue = fieldEl.value.trim().length > 0,\n            reqMoreEl = formEl.querySelector( fieldEl.getAttribute('data-required-from') ),\n            checkedEl = formEl.querySelector( '[name=\"'+ reqMoreEl.name +'\"]:checked' ),\n            obj = { result: checkedEl !== null };\n\n        if( reqMoreEl.checked && reqMoreEl.required ){\n            obj.result = isValidValue;\n        }\n\n        if( !obj.result ){\n            obj.errors = { requiredFrom: true };\n        }\n        \n        return obj;\n    }\n    \n}\n","\nimport { getValidateFieldDefault, isDOMNode, runFunctionsSequence } from './helpers';\nimport { isValid } from './isValid';\n\nexport function checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    if( !isDOMNode(fieldEl) ){\n        const obj = getValidateFieldDefault({fieldEl});\n        return Promise.resolve(obj);\n    }\n\n    const isValidValue =      fieldEl.value.trim().length > 0,\n          isRequired =        fieldEl.required,\n          isReqFrom =         fieldEl.matches('[data-required-from]'),\n          isValidateIfFilled =fieldEl.matches('[data-validate-if-filled]'),\n          rfsObject = {\n            functionsList: fieldOptions.beforeValidation,\n            data: {fieldEl}\n        };\n\n    return runFunctionsSequence(rfsObject)\n        .then(data => {\n\n            let dataObj = data.pop();\n            return new Promise(resolve => {\n                if(\n                    (!isRequired && !isValidateIfFilled && !isReqFrom) ||   // IT IS A NORMAL FORM FIELD\n                    (isValidateIfFilled && !isValidValue) ||                // IT IS data-validate-if-filled AND EMPTY\n                    (isReqFrom && !isRequired )                             // IT IS data-required-from AND NOT required\n                ){\n\n                    dataObj.result = true;\n                    resolve( dataObj );\n                \n                } else {\n\n                    resolve( isValid( fieldEl, fieldOptions, validationRules, validationErrors ) );\n                    \n                }\n\n            });\n\n        });\n\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const runFunctionsSequence = ( { functionsList = [], data = {}, stopConditionFn = function(){return false} } = {} ) => {\n    return functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1]);\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res);\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result);\n                    return res;\n                });\n        });\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList);\n}\n","\nimport { getValidateFieldDefault, mergeObjects, toCamelCase } from './helpers';\nimport { validationRulesAttributes } from './validationRules';\n\nexport function isValid( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    const fieldType = ( fieldEl.matches('[data-subtype]') ? toCamelCase( fieldEl.getAttribute('data-subtype') ) : fieldEl.type ),\n          fieldValue = fieldEl.value,\n          isValidValue = fieldValue.trim().length > 0,\n          // ALPHABETICAL REVERSE ORDER\n          fieldAttributes = Array.from(fieldEl.attributes).sort((a,b) => { return a.name < b.name });\n\n    const attrValidations = [];\n    let attrValidationsResult = isValidValue,\n        obj = getValidateFieldDefault({result: isValidValue, fieldEl});\n\n    if( !obj.result ){\n        obj.errors = { empty: true };\n        return Promise.resolve(obj);\n    }\n\n    // COLLECT SPECIFIC VALIDATIONS FOR validationRulesAttributes\n    fieldAttributes.forEach(attr => {\n        // FOR data-* ATTRIBUTES -> REMOVE \"data-\" AND TRANSFORM TO CAMELCASE\n        const attrName = toCamelCase( attr.name.replace('data-', '') ),\n              attrValue = attr.value,\n              isAttrValueWithFn = attrName === 'type' && typeof validationRulesAttributes[attrValue] === 'function',\n              isAttrNameWithFn = typeof validationRulesAttributes[attrName] === 'function';\n\n        if( isAttrValueWithFn || isAttrNameWithFn ){\n\n            const extraValObj = {\n                    attrName: (isAttrValueWithFn ? attrValue : attrName),\n                    attrValue: attrValue,\n                    fieldEl,\n                    fieldOptions\n                };\n\n            if( isAttrValueWithFn || attrName === 'requiredFrom' ){\n                // THESE VALIDATIONS MUST RUN BEFORE ALL OTHERS\n                attrValidations.unshift( extraValObj );\n            } else {\n                attrValidations.push( extraValObj );\n            }\n\n        }\n    });\n\n    return new Promise(resolve => {\n\n        // RUN SPECIFIC VALIDATIONS FOR validationRulesAttributes\n        attrValidations.forEach(item => {\n            const extraVal = validationRulesAttributes[item.attrName]( item );\n            if( !extraVal.result ){\n                obj = mergeObjects({}, obj, extraVal);\n                attrValidationsResult = false;\n            }\n        });\n\n        // RUN VALIDATIONS FOR validationRules\n        if( typeof validationRules[fieldType] === 'function' ){\n            resolve( validationRules[fieldType](fieldValue, fieldEl) );\n        } else {\n            resolve( obj );\n        }\n\n    }).then(data => {\n\n        obj = mergeObjects( {}, obj, data, {fieldEl} );\n        obj.result = obj.result && attrValidationsResult;\n\n        if( !obj.result ){\n            const fieldErrors = (typeof validationErrors[fieldType] === 'function' ? validationErrors[fieldType](fieldValue, fieldEl) : {});\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {};\n            }\n            obj.errors.rule = true;\n            obj.errors = mergeObjects({}, obj.errors, fieldErrors);\n        }\n        \n        return obj;\n\n    });\n\n}\n","\nimport { fieldsStringSelector, getUniqueFields, getValidateFieldDefault, getValidateFormDefault, mergeObjects } from './helpers';\nimport { checkFieldValidity } from './checkFieldValidity';\n\nexport function checkFormValidity( formEl, fieldOptions, validationRules, validationErrors, fieldToSkip = null ){\n\n    fieldOptions = mergeObjects( {}, fieldOptions, {focusOnRelated: false} );\n\n    const obj = getValidateFormDefault(),\n          fieldsList = getUniqueFields( formEl.querySelectorAll(fieldsStringSelector) );\n\n    return Promise.all( fieldsList.map(fieldEl => {\n\n        if( fieldToSkip && fieldEl === fieldToSkip ){\n            const obj2 = getValidateFieldDefault({fieldEl, result: true});\n            return Promise.resolve(obj2);\n        }\n        \n        return checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors );\n\n    }) ).then(list => {\n\n        let areAllFieldsValid = list.filter(fieldObj => !fieldObj.result).length === 0;\n        obj.result = areAllFieldsValid;\n        obj.fields = list;\n\n        return obj;\n\n    });\n\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const getValidateFormDefault = obj => {\n    return mergeObjects({}, { result: true, fields: [] }, obj);\n}\n","\nexport const getUniqueFields = nodeList => {\n\n    let currentFieldName = '',\n        currentFieldType = '';\n\n    return Array.from( nodeList ).filter(fieldEl => {\n        const name = fieldEl.name,\n              type = fieldEl.type;\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false;\n        }\n        \n        if( !fieldEl.matches('[data-required-from]') ){\n            currentFieldName = name;\n            currentFieldType = type;\n        }\n        return true;\n    });\n    \n}\n","\nexport const fieldsStringSelector = 'input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"hidden\"]), select, textarea'\n","\nimport { version }              from './modules/version';\nimport { mergeObjects }         from './modules/helpers';\nimport { options }              from './modules-lite/options';\nimport { validationRules }      from './modules/validationRules';\nimport { constructorFn }        from './modules-lite/constructor';\nimport { checkFieldValidity }   from './modules/checkFieldValidity';\nimport { checkFormValidity }    from './modules/checkFormValidity';\n\nclass Form {\n\n    constructor( formEl, optionsObj ){\n        constructorFn(this, formEl, optionsObj);\n    }\n\n    destroy(){\n        delete this.formEl.formjs;\n    }\n\n    validateField( fieldEl, fieldOptions ){\n        fieldEl = (typeof fieldEl === 'string' ? this.formEl.querySelector(fieldEl) : fieldEl);\n        fieldOptions = mergeObjects({}, this.options.fieldOptions, fieldOptions);\n        return checkFieldValidity(fieldEl, fieldOptions, this.validationRules, this.validationErrors);\n    }\n\n    validateForm( fieldOptions ){\n        fieldOptions = mergeObjects({}, this.options.fieldOptions, fieldOptions);\n        return checkFormValidity(this.formEl, fieldOptions, this.validationRules, this.validationErrors);\n    }\n    \n    static addValidationErrors( errorsObj ){\n        this.prototype.validationErrors = mergeObjects({}, this.prototype.validationErrors, errorsObj);\n    }\n\n    static addValidationRules( rulesObj ){\n        this.prototype.validationRules = mergeObjects({}, this.prototype.validationRules, rulesObj);\n    }\n    \n    static setOptions( optionsObj ){\n        this.prototype.options = mergeObjects({}, this.prototype.options, optionsObj);\n    }\n\n}\n\nForm.prototype.options = options;\nForm.prototype.validationErrors = {};\nForm.prototype.validationRules = validationRules;\nForm.prototype.version = version;\n\nexport default Form;\n","\nimport { checkFormEl, isNodeList, mergeObjects }   from '../modules/helpers';\n\nexport function constructorFn( self, formEl, optionsObj ){\n\n    let argsL = arguments.length,\n        checkFormElem = checkFormEl(formEl);\n\n    if( argsL === 0 || (argsL > 0 && !formEl) ){\n        throw new Error('First argument \"formEl\" is missing or falsy!');\n    }\n    if( isNodeList(formEl) ){\n        throw new Error('First argument \"formEl\" must be a single DOM node or a form CSS selector, not a NodeList!');\n    }\n    if( !checkFormElem.result ){\n        throw new Error('First argument \"formEl\" is not a DOM node nor a form CSS selector!');\n    }\n\n    self.formEl = checkFormElem.element;\n    self.formEl.formjs = self;\n    self.options = mergeObjects({}, self.constructor.prototype.options, optionsObj);\n\n    // BINDING CONTEXT FOR FUTURE EXECUTION\n    self.options.fieldOptions.beforeValidation = self.options.fieldOptions.beforeValidation.map(cbFn => cbFn.bind(self));\n\n    self.formEl.noValidate = true;\n    \n}\n","\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [],\n        maxFileSize:            10\n    }\n    \n}\n"],"names":["isNodeList","nodeList","NodeList","prototype","isPrototypeOf","isDOMNode","node","Element","checkFormEl","formEl","isString","isFormSelector","document","querySelector","tagName","toLowerCase","result","element","mergeObjects","out","i","arguments","length","obj","key","isArray","Object","toString","call","isObject","hasOwnProperty","concat","slice","Array","push","getSplitChar","string","splitChar","indexOf","getValidateFieldDefault","fieldEl","toCamelCase","replace","all","letter","toUpperCase","validationRulesAttributes","checkbox","data","dataChecksEl","closest","name","checked","this","checks","attrValue","getAttribute","JSON","parse","checkedElLength","querySelectorAll","isMinOk","isMaxOk","errors","minChecks","maxChecks","e","Error","equalTo","checkFromEl","value","exactLength","valueLength","minlength","maxlength","file","maxFileSize","fieldOptions","MIMEtype","accept","RegExp","filesList","from","files","forEach","exceedMaxFileSize","size","isAcceptedFileType","test","type","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","stringLength","max","isDate","matches","maxVal","split","reverse","join","min","minVal","pattern","fieldPattern","radio","fieldChecked","trim","requiredFrom","isValidValue","reqMoreEl","required","checkFieldValidity","validationRules","validationErrors","Promise","resolve","isRequired","isReqFrom","isValidateIfFilled","functionsList","stopConditionFn","reduce","acc","promiseFn","then","res","dataNew","dataList","runFunctionsSequence","beforeValidation","dataObj","pop","fieldType","fieldValue","fieldAttributes","attributes","sort","a","b","attrValidations","attrValidationsResult","attr","attrName","isAttrValueWithFn","isAttrNameWithFn","extraValObj","unshift","item","extraVal","fieldErrors","rule","empty","isValid","checkFormValidity","fieldToSkip","focusOnRelated","fields","getValidateFormDefault","fieldsList","currentFieldName","currentFieldType","filter","getUniqueFields","map","obj2","list","areAllFieldsValid","fieldObj","Form","[object Object]","optionsObj","self","argsL","checkFormElem","formjs","options","constructor","cbFn","bind","noValidate","constructorFn","errorsObj","rulesObj","date","email","number","version"],"mappings":"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"}