{"version":3,"file":"formjs-esm.min.js","sources":["../../src/modules/version.js","../../src/modules/helpers/isNodeList.js","../../src/modules/helpers/isDOMNode.js","../../src/modules/helpers/checkFormEl.js","../../src/modules/helpers/mergeObjects.js","../../src/modules/helpers/getDateAsNumber.js","../../src/modules/helpers/getSplitChar.js","../../src/modules/helpers/getValidateFieldDefault.js","../../src/modules/helpers/toCamelCase.js","../../src/modules/validationRules.js","../../src/modules/validationRules/date.js","../../src/modules/validationRules/email.js","../../src/modules/validationRules/number.js","../../src/modules/validationRules/checks.js","../../src/modules/validationRulesAttributes.js","../../src/modules/validationRules/checkbox.js","../../src/modules/validationRules/equalTo.js","../../src/modules/validationRules/exactLength.js","../../src/modules/validationRules/file.js","../../src/modules/validationRules/length.js","../../src/modules/validationRules/max.js","../../src/modules/validationRules/maxlength.js","../../src/modules/validationRules/min.js","../../src/modules/validationRules/minlength.js","../../src/modules/validationRules/pattern.js","../../src/modules/validationRules/radio.js","../../src/modules/validationRules/requiredFrom.js","../../src/modules/checkFieldValidity.js","../../src/modules/helpers/runFunctionsSequence.js","../../src/modules/isValid.js","../../src/modules/checkFormValidity.js","../../src/modules/helpers/getValidateFormDefault.js","../../src/modules/helpers/getUniqueFields.js","../../src/modules/helpers/fieldsStringSelector.js","../../src/index-lite.js","../../src/modules-lite/constructor.js","../../src/modules-lite/options.js"],"sourcesContent":["\nexport const version = '4.1.0';\n","\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList );\n}\n","\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node );\n}\n","\nimport { isDOMNode } from './isDOMNode';\n\nexport const checkFormEl = formEl => {\n    let isString = typeof formEl,\n        isValidNodeSelector = isString === 'string' && isDOMNode(document.querySelector(formEl)),\n        isFormSelector = isValidNodeSelector && document.querySelector(formEl).tagName.toLowerCase() === 'form',\n        obj = {\n            result: isDOMNode(formEl) || isFormSelector,\n            element: (isString === 'string' ? document.querySelector(formEl) : formEl)\n        };\n\n    return obj;\n}\n","\nexport const mergeObjects = function( out = {} ){\n    for(let i=1; i<arguments.length; i++){\n        let obj = arguments[i];\n\n        if(!obj){ continue; }\n\n        for(let key in obj){\n            let isArray = Object.prototype.toString.call(obj[key]) === \"[object Array]\";\n            let isObject = Object.prototype.toString.call(obj[key]) === \"[object Object]\";\n\n            // COPY ONLY ENUMERABLE PROPERTIES\n            if( obj.hasOwnProperty(key) ){\n                if( isArray ){\n\n                    if( typeof out[key] === 'undefined' ){\n                        out[key] = [];\n                    }\n                    out[key] = out[key].concat( obj[key].slice(0) );\n\n                } else if( isObject ){\n\n                    out[key] = mergeObjects(out[key], obj[key]);\n\n                } else {\n\n                    // * STRING | NUMBER | BOOLEAN | FUNCTION\n                    if( Array.isArray(out[key]) ){\n                        // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                        out[key].push(obj[key]);\n                    } else {\n                        out[key] = obj[key];\n                    }\n\n                }\n            }\n        }\n    }\n\n    return out;\n}\n","\nimport { getSplitChar } from './getSplitChar';\n\nconst formatMap = {\n    'YYYY-MM-DD': function(dateArray){\n        return dateArray;\n    },\n    'MM-DD-YYYY': function(dateArray){\n        return [dateArray[2], dateArray[0], dateArray[1]];\n    },\n    'DD-MM-YYYY': function(dateArray){\n        return dateArray.reverse();\n    }\n};\n\nexport const getDateAsNumber = ( dateString, dateFormat ) => {\n    dateFormat = dateFormat || 'YYYY-MM-DD';\n    const splitChar = getSplitChar(dateString);\n\n    if( dateFormat.indexOf(splitChar) < 0 ){\n        return;\n    }\n\n    dateFormat = dateFormat.replace(/[^YMD]/g, '-');\n    dateString = dateString.split(splitChar);\n    dateString = formatMap[dateFormat](dateString).join('');\n    \n    return dateString;\n}\n","\nexport const getSplitChar = string => {\n    // MATCH ANY NON-DIGIT CHAR\n    const separator = string.match(/\\D/);\n    return (separator && separator.length > 0) ? separator[0] : null;\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const getValidateFieldDefault = obj => {\n    return mergeObjects({}, { result: false, fieldEl: null }, obj);\n}\n","\nexport const toCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase(); });\n}\n","\nimport { date }         from './validationRules/date';\nimport { email }        from './validationRules/email';\nimport { number }       from './validationRules/number';\n\nexport const validationRules = {\n    date,\n    email,\n    number\n}\n","\n/*\n    DATE AS ISO 8601 DATE FORMAT:\n    YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n*/\n\nexport const date = function( string ){\n    let date = /^((((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13578]|1[02])[ \\/\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13456789]|1[012])[ \\/\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.]02[ \\/\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ \\/\\-.]02[ \\/\\-.]29))$/g.test( string ),\n        obj = {\n            result: date\n        };\n\n    return obj;\n}\n","\n// https://regex101.com/r/cdlyJy/3\n\nexport const email = function( string ){\n    let obj = {\n        result: /^[a-zA-Z_-]([\\w.-]?[a-zA-Z0-9])*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?){2,})+$/.test( string )\n    };\n\n    return obj;\n}\n","\n/*\n    ALL NUMBERS ( INTEGERS AND FLOATING )\n    VALID NUMBERS: 123 | 123.456 | .123\n*/\n\nexport const number = function( string ){\n    let obj = {\n        result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n    };\n\n    return obj;\n}","\nexport const checks = function( fieldEl ){\n    let attrValue = JSON.parse( fieldEl.getAttribute('data-checks') ),\n        checkedElLength = fieldEl.closest('form').querySelectorAll('[name=\"' + fieldEl.name + '\"]:checked').length,\n        isMinOk = checkedElLength >= attrValue[0],\n        isMaxOk = checkedElLength <= attrValue[1],\n        obj = { result: isMinOk && isMaxOk };\n\n    if( !obj.result ){\n        obj.errors = { checks: true };\n        if( !isMinOk ){ obj.errors.minChecks = true; }\n        if( !isMaxOk ){ obj.errors.maxChecks = true; }\n    }\n\n    return obj;\n}\n","\nimport { checkbox }     from './validationRules/checkbox';\nimport { equalTo }      from './validationRules/equalTo';\nimport { exactLength }  from './validationRules/exactLength';\nimport { file }         from './validationRules/file';\nimport { length }       from './validationRules/length';\nimport { max }          from './validationRules/max';\nimport { maxlength }    from './validationRules/maxlength';\nimport { min }          from './validationRules/min';\nimport { minlength }    from './validationRules/minlength';\nimport { pattern }      from './validationRules/pattern';\nimport { radio }        from './validationRules/radio';\nimport { requiredFrom } from './validationRules/requiredFrom';\n\nexport const validationRulesAttributes = {\n    checkbox,\n    equalTo,\n    exactLength,\n    file,\n    length,\n    max,\n    maxlength,\n    min,\n    minlength,\n    pattern,\n    radio,\n    requiredFrom,\n}\n","\nimport { checks } from './checks';\n\nexport const checkbox = function( fieldEl ){\n    let dataChecksEl = fieldEl.closest('form').querySelector('[name=\"' + fieldEl.name + '\"][data-checks]');\n    return dataChecksEl ? checks(dataChecksEl): {result: fieldEl.checked};\n}\n","\nexport const equalTo = function( fieldEl ){\n    let checkFromEl = fieldEl.closest('form').querySelector( '[name=\"' + fieldEl.getAttribute('data-equal-to') + '\"]' ),\n        obj = { result: fieldEl.value === checkFromEl.value };\n\n    if( !obj.result ){\n        obj.errors = { equalTo: true };\n    }\n\n    return obj;\n}\n","\nexport const exactLength = function( fieldEl ){\n    let valueLength = fieldEl.value.length,\n        exactLength = fieldEl.getAttribute('data-exact-length') * 1,\n        obj = { result: valueLength === exactLength };\n\n    if( !obj.result ){\n        obj.errors = { exactLength: true };\n        if( valueLength < exactLength ){ obj.errors.minlength = true; }\n        else { obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nexport const file = function( fieldEl, fieldOptions ){\n    let maxFileSize = (fieldEl.getAttribute('data-max-file-size') || fieldOptions.maxFileSize) * 1,\n        MIMEtype = (fieldEl.accept ? new RegExp(fieldEl.accept.replace( '*', '[^\\\\/,]+' )) : null),\n        filesList = Array.from(fieldEl.files),\n        obj = { result: true };\n\n    filesList.forEach(function( file ){\n        let exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize,\n            isAcceptedFileType = (MIMEtype !== null ? MIMEtype.test(file.type) : true);\n\n        if( exceedMaxFileSize || !isAcceptedFileType ){\n            obj.result = false;\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {};\n            }\n            obj.errors.file = true;\n            if( exceedMaxFileSize ){ obj.errors.maxFileSize = true; }\n            if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true; }\n\n        }\n    });\n\n    return obj;\n}\n","\nexport const length = function( fieldEl ){\n    let valueL = fieldEl.value.length,\n        attrValue = JSON.parse( fieldEl.getAttribute('data-length') ),\n        isMinlengthOk = valueL >= attrValue[0],\n        isMaxlengthOk = valueL <= attrValue[1],\n        obj = { result: isMinlengthOk && isMaxlengthOk };\n\n    if( !obj.result ){\n        obj.errors = { stringLength: true };\n        if( !isMinlengthOk ){ obj.errors.minlength = true; }\n        if( !isMaxlengthOk ){ obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const max = function( fieldEl ){\n    let value = fieldEl.value,\n        maxVal = fieldEl.max,\n        dateFormat = fieldEl.getAttribute('data-date-format');\n    \n    if( fieldEl.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat );\n        maxVal = maxVal.split('-').join('');\n    }\n\n    value = value * 1;\n    maxVal = maxVal * 1;\n\n    let obj = { result: value <= maxVal };\n\n    if( !obj.result ){\n        obj.errors = { max: true };\n    }\n    \n    return obj;\n}\n","\nexport const maxlength = function( fieldEl ){\n    const obj = { result: fieldEl.value.length <= fieldEl.maxLength * 1 };\n\n    if( !obj.result ){\n        obj.errors = { maxlength: true };\n    }\n\n    return obj;\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const min = function( fieldEl ){\n    let value = fieldEl.value,\n        minVal = fieldEl.min,\n        dateFormat = fieldEl.getAttribute('data-date-format');\n    \n    if( fieldEl.type === 'date' || fieldEl.getAttribute('data-date-format') ){\n        value = getDateAsNumber( value, dateFormat );\n        minVal = minVal.split('-').join('');\n    }\n\n    value = value * 1;\n    minVal = minVal * 1;\n\n    let obj = { result: value >= minVal };\n\n    if( !obj.result ){\n        obj.errors = { min: true };\n    }\n    \n    return obj;\n}\n","\nexport const minlength = function( fieldEl ){\n    const obj = { result: fieldEl.value.length >= fieldEl.minLength * 1 };\n\n    if( !obj.result ){\n        obj.errors = { minlength: true };\n    }\n\n    return obj;\n}\n","\nexport const pattern = function( fieldEl ){\n    let fieldPattern = fieldEl.pattern,\n        fieldRegex = new RegExp( fieldPattern ),\n        obj = { result: fieldRegex.test( fieldEl.value ) };\n\n    if( !obj.result ){\n        obj.errors = { pattern: true };\n    }\n\n    return obj;\n}\n","\nexport const radio = function( fieldEl ){\n    let fieldChecked = fieldEl.closest('form').querySelector( '[name=\"'+ fieldEl.name +'\"]:checked' ),\n        isValid = fieldChecked !== null && fieldChecked.value.trim().length > 0;\n\n    return { result: isValid };\n}\n","\nexport const requiredFrom = function( fieldEl ){\n    return {\n        result: fieldEl.value.trim().length > 0\n    };\n}\n","\nimport { getValidateFieldDefault, isDOMNode, runFunctionsSequence } from './helpers';\nimport { isValid } from './isValid';\n\nexport function checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    if( !isDOMNode(fieldEl) ){\n        const obj = getValidateFieldDefault({fieldEl});\n        return Promise.resolve(obj);\n    }\n\n    const formEl = fieldEl.closest('form'),\n          isValidValue = fieldEl.value.trim().length > 0;\n\n     // HANDLE FIELDS radio/data-require-more\n     if( fieldEl.type === 'radio' ){\n        const checkedEl = fieldEl.checked ? fieldEl : formEl.querySelector('[name=\"'+ fieldEl.name +'\"]:checked'),\n              reqMoreIsChecked = checkedEl && checkedEl.matches('[data-require-more]'),\n              findReqMoreEl = reqMoreIsChecked ? checkedEl : formEl.querySelector('[data-require-more][name=\"'+ fieldEl.name +'\"]'),\n              findReqFromEl = findReqMoreEl ? formEl.querySelector('[data-required-from=\"#'+ findReqMoreEl.id +'\"]') : null;\n        \n        if( checkedEl && findReqFromEl ){\n            findReqFromEl.required = findReqMoreEl.required && findReqMoreEl.checked;\n            if( !reqMoreIsChecked ){\n                findReqFromEl.value = '';\n            } else if( fieldOptions.focusOnRelated ) {\n                findReqFromEl.focus();\n            }\n        }\n    }\n\n    // HANDLE FIELDS data-required-from\n    if( fieldEl.matches('[data-required-from]') && isValidValue ){\n        const reqMoreEl = formEl.querySelector( fieldEl.getAttribute('data-required-from') );\n        reqMoreEl.checked = true;\n        fieldEl.required = reqMoreEl.required;\n    }\n\n    const needsValidation = fieldEl.required || (fieldEl.matches('[data-validate-if-filled]') && isValidValue);\n\n    return runFunctionsSequence({\n            functionsList: fieldOptions.beforeValidation,\n            data: {fieldEl}\n        })\n        .then(data => {\n            let dataObj = data.pop();\n            return new Promise(resolve => {\n                if( !needsValidation ){\n                    dataObj.result = true;\n                }\n                resolve( needsValidation ? isValid(fieldEl, fieldOptions, validationRules, validationErrors) : dataObj );\n            });\n        });\n\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const runFunctionsSequence = ( { functionsList = [], data = {}, stopConditionFn = () => false } = {} ) => {\n    return functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1]);\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res);\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result);\n                    return res;\n                });\n        });\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList);\n}\n","\nimport { getValidateFieldDefault, mergeObjects, toCamelCase } from './helpers';\nimport { validationRulesAttributes } from './validationRulesAttributes';\n\nexport function isValid( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    const fieldType = fieldEl.matches('[data-subtype]') ? toCamelCase(fieldEl.getAttribute('data-subtype')) : fieldEl.type,\n          fieldValue = fieldEl.value,\n          isValidValue = fieldValue.trim().length > 0;\n\n    let obj = getValidateFieldDefault({result: isValidValue, fieldEl});\n\n    if( !obj.result ){\n        obj.errors = { empty: true };\n        return Promise.resolve(obj);\n    }\n\n    let attrValidationsResult;\n\n    return new Promise(resolve => {\n\n        // RUN SPECIFIC VALIDATIONS FOR validationRulesAttributes\n        attrValidationsResult = Array.from(fieldEl.attributes).reduce((valResult, attr) => {\n            // FOR data-* ATTRIBUTES -> REMOVE \"data-\" AND TRANSFORM TO CAMELCASE\n            const attrName = toCamelCase( attr.name.replace('data-', '') ),\n                  attrValue = attr.value,\n                  isAttrValueWithFn = attrName === 'type' && typeof validationRulesAttributes[attrValue] === 'function',\n                  isAttrNameWithFn = typeof validationRulesAttributes[attrName] === 'function';\n\n            if( isAttrValueWithFn || isAttrNameWithFn ){\n                const method = isAttrValueWithFn ? attrValue : attrName;\n                const extraVal = validationRulesAttributes[method]( fieldEl, fieldOptions );\n                if( !extraVal.result ){\n                    obj = mergeObjects({}, obj, extraVal);\n                    return false;\n                }\n            }\n            return valResult;\n        }, isValidValue);\n\n        // RUN VALIDATION FOR validationRules\n        if( typeof validationRules[fieldType] === 'function' ){\n            resolve( validationRules[fieldType](fieldValue, fieldEl) );\n        } else {\n            resolve( obj );\n        }\n\n    }).then(data => {\n\n        obj = mergeObjects( {}, obj, data );\n        obj.result = obj.result && attrValidationsResult;\n\n        if( !obj.result ){\n            const fieldErrors = (typeof validationErrors[fieldType] === 'function' ? validationErrors[fieldType](fieldValue, fieldEl) : {});\n            obj.errors = mergeObjects({}, obj.errors || {}, fieldErrors);\n            obj.errors.rule = true;\n        }\n        \n        return obj;\n\n    });\n\n}\n","\nimport { fieldsStringSelector, getUniqueFields, getValidateFieldDefault, getValidateFormDefault, mergeObjects } from './helpers';\nimport { checkFieldValidity } from './checkFieldValidity';\n\nexport function checkFormValidity( formEl, fieldOptions, validationRules, validationErrors, fieldToSkip = null ){\n\n    fieldOptions = mergeObjects( {}, fieldOptions, {focusOnRelated: false} );\n\n    const obj = getValidateFormDefault(),\n          fieldsList = getUniqueFields( formEl.querySelectorAll(fieldsStringSelector) );\n\n    return Promise.all( fieldsList.map(fieldEl => {\n\n        if( fieldToSkip && fieldEl === fieldToSkip ){\n            const obj2 = getValidateFieldDefault({fieldEl, result: true});\n            return Promise.resolve(obj2);\n        }\n        \n        return checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors );\n\n    }) ).then(list => {\n\n        let areAllFieldsValid = list.filter(fieldObj => !fieldObj.result).length === 0;\n        obj.result = areAllFieldsValid;\n        obj.fields = list;\n\n        return obj;\n\n    });\n\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const getValidateFormDefault = obj => {\n    return mergeObjects({}, { result: true, fields: [] }, obj);\n}\n","\nexport const getUniqueFields = nodeList => {\n\n    let currentFieldName = '',\n        currentFieldType = '';\n\n    return Array.from( nodeList ).filter(fieldEl => {\n        const name = fieldEl.name,\n              type = fieldEl.type;\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false;\n        }\n        \n        if( !fieldEl.matches('[data-required-from]') ){\n            currentFieldName = name;\n            currentFieldType = type;\n        }\n        return true;\n    });\n    \n}\n","\nexport const fieldsStringSelector = 'input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"hidden\"]), select, textarea'\n","\nimport { version }              from './modules/version';\nimport { mergeObjects }         from './modules/helpers';\nimport { options }              from './modules-lite/options';\nimport { validationRules }      from './modules/validationRules';\nimport { constructorFn }        from './modules-lite/constructor';\nimport { checkFieldValidity }   from './modules/checkFieldValidity';\nimport { checkFormValidity }    from './modules/checkFormValidity';\n\nclass Form {\n\n    constructor( formEl, optionsObj ){\n        constructorFn(this, formEl, optionsObj);\n    }\n\n    destroy(){\n        delete this.formEl.formjs;\n    }\n\n    validateField( fieldEl, fieldOptions ){\n        fieldEl = (typeof fieldEl === 'string' ? this.formEl.querySelector(fieldEl) : fieldEl);\n        fieldOptions = mergeObjects({}, this.options.fieldOptions, fieldOptions);\n        return checkFieldValidity(fieldEl, fieldOptions, this.validationRules, this.validationErrors);\n    }\n\n    validateForm( fieldOptions ){\n        fieldOptions = mergeObjects({}, this.options.fieldOptions, fieldOptions);\n        return checkFormValidity(this.formEl, fieldOptions, this.validationRules, this.validationErrors);\n    }\n    \n    static addValidationErrors( errorsObj ){\n        this.prototype.validationErrors = mergeObjects({}, this.prototype.validationErrors, errorsObj);\n    }\n\n    static addValidationRules( rulesObj ){\n        this.prototype.validationRules = mergeObjects({}, this.prototype.validationRules, rulesObj);\n    }\n    \n    static setOptions( optionsObj ){\n        this.prototype.options = mergeObjects({}, this.prototype.options, optionsObj);\n    }\n\n}\n\nForm.prototype.options = options;\nForm.prototype.validationErrors = {};\nForm.prototype.validationRules = validationRules;\nForm.prototype.version = version;\n\nexport default Form;\n","\nimport { checkFormEl, isNodeList, mergeObjects }   from '../modules/helpers';\n\nexport function constructorFn( self, formEl, optionsObj ){\n\n    let argsL = arguments.length,\n        checkFormElem = checkFormEl(formEl);\n\n    if( argsL === 0 || (argsL > 0 && !formEl) ){\n        throw new Error('First argument \"formEl\" is missing or falsy!');\n    }\n    if( isNodeList(formEl) ){\n        throw new Error('First argument \"formEl\" must be a single DOM node or a form CSS selector, not a NodeList!');\n    }\n    if( !checkFormElem.result ){\n        throw new Error('First argument \"formEl\" is not a DOM node nor a form CSS selector!');\n    }\n\n    self.formEl = checkFormElem.element;\n    self.formEl.formjs = self;\n    self.options = mergeObjects({}, self.constructor.prototype.options, optionsObj);\n\n    // BINDING CONTEXT FOR FUTURE EXECUTION\n    self.options.fieldOptions.beforeValidation = self.options.fieldOptions.beforeValidation.map(cbFn => cbFn.bind(self));\n\n    self.formEl.noValidate = true;\n    \n}\n","\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [],\n        focusOnRelated:         true,\n        maxFileSize:            10\n    }\n    \n}\n"],"names":["isNodeList","nodeList","NodeList","prototype","isPrototypeOf","isDOMNode","node","Element","checkFormEl","formEl","isString","isFormSelector","document","querySelector","tagName","toLowerCase","result","element","mergeObjects","out","i","arguments","length","obj","key","isArray","Object","toString","call","isObject","hasOwnProperty","concat","slice","Array","push","formatMap","YYYY-MM-DD","dateArray","MM-DD-YYYY","DD-MM-YYYY","reverse","getDateAsNumber","dateString","dateFormat","splitChar","string","separator","match","getSplitChar","indexOf","replace","split","join","getValidateFieldDefault","fieldEl","toCamelCase","all","letter","toUpperCase","validationRules","date","test","email","number","validationRulesAttributes","checkbox","dataChecksEl","closest","name","attrValue","JSON","parse","getAttribute","checkedElLength","querySelectorAll","isMinOk","isMaxOk","errors","checks","minChecks","maxChecks","checked","equalTo","checkFromEl","value","exactLength","valueLength","minlength","maxlength","file","fieldOptions","maxFileSize","MIMEtype","accept","RegExp","filesList","from","files","forEach","exceedMaxFileSize","size","isAcceptedFileType","type","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","stringLength","max","maxVal","maxLength","min","minVal","minLength","pattern","fieldPattern","radio","fieldChecked","trim","requiredFrom","checkFieldValidity","validationErrors","Promise","resolve","isValidValue","checkedEl","reqMoreIsChecked","matches","findReqMoreEl","findReqFromEl","id","required","focusOnRelated","focus","reqMoreEl","needsValidation","functionsList","data","stopConditionFn","reduce","acc","promiseFn","then","res","dataNew","dataList","runFunctionsSequence","beforeValidation","dataObj","pop","fieldType","fieldValue","attrValidationsResult","attributes","valResult","attr","attrName","isAttrValueWithFn","isAttrNameWithFn","extraVal","fieldErrors","rule","empty","isValid","checkFormValidity","fieldToSkip","fields","getValidateFormDefault","fieldsList","currentFieldName","currentFieldType","filter","getUniqueFields","map","obj2","list","areAllFieldsValid","fieldObj","Form","[object Object]","optionsObj","self","argsL","checkFormElem","Error","formjs","options","constructor","cbFn","bind","noValidate","constructorFn","this","errorsObj","rulesObj","version"],"mappings":";AACO,MCAMA,EAAaC,GACfC,SAASC,UAAUC,cAAeH,GCDhCI,EAAYC,GACdC,QAAQJ,UAAUC,cAAeE,GCC/BE,EAAcC,IACvB,IAAIC,SAAkBD,EAElBE,EADmC,WAAbD,GAAyBL,EAAUO,SAASC,cAAcJ,KACiB,SAAzDG,SAASC,cAAcJ,GAAQK,QAAQC,cAMnF,MALU,CACFC,OAAQX,EAAUI,IAAWE,EAC7BM,QAAuB,WAAbP,EAAwBE,SAASC,cAAcJ,GAAUA,ICRlES,EAAe,SAAUC,EAAM,IACxC,IAAI,IAAIC,EAAE,EAAGA,EAAEC,UAAUC,OAAQF,IAAI,CACjC,IAAIG,EAAMF,UAAUD,GAEpB,GAAIG,EAEJ,IAAI,IAAIC,KAAOD,EAAI,CACf,IAAIE,EAAuD,mBAA7CC,OAAOvB,UAAUwB,SAASC,KAAKL,EAAIC,IAC7CK,EAAwD,oBAA7CH,OAAOvB,UAAUwB,SAASC,KAAKL,EAAIC,IAG9CD,EAAIO,eAAeN,KACfC,QAEwB,IAAbN,EAAIK,KACXL,EAAIK,GAAO,IAEfL,EAAIK,GAAOL,EAAIK,GAAKO,OAAQR,EAAIC,GAAKQ,MAAM,KAEpCH,EAEPV,EAAIK,GAAON,EAAaC,EAAIK,GAAMD,EAAIC,IAKlCS,MAAMR,QAAQN,EAAIK,IAElBL,EAAIK,GAAKU,KAAKX,EAAIC,IAElBL,EAAIK,GAAOD,EAAIC,KAQnC,OAAOL,GCpCLgB,EAAY,CACdC,aAAc,SAASC,GACnB,OAAOA,GAEXC,aAAc,SAASD,GACnB,MAAO,CAACA,EAAU,GAAIA,EAAU,GAAIA,EAAU,KAElDE,aAAc,SAASF,GACnB,OAAOA,EAAUG,YAIZC,EAAkB,CAAEC,EAAYC,KACzCA,EAAaA,GAAc,aAC3B,MAAMC,EChBkBC,CAAAA,IAExB,MAAMC,EAAYD,EAAOE,MAAM,MAC/B,OAAQD,GAAaA,EAAUxB,OAAS,EAAKwB,EAAU,GAAK,MDa1CE,CAAaN,GAE/B,KAAIC,EAAWM,QAAQL,GAAa,GAQpC,OAJAD,EAAaA,EAAWO,QAAQ,UAAW,KAC3CR,EAAaA,EAAWS,MAAMP,GAC9BF,EAAaP,EAAUQ,GAAYD,GAAYU,KAAK,KEtB3CC,EAA0B9B,GAC5BL,EAAa,GAAI,CAAEF,QAAQ,EAAOsC,QAAS,MAAQ/B,GCHjDgC,EAAcV,GAChBA,EAAOK,QAAQ,aAAc,CAACM,EAAKC,IAAoBA,EAAOC,eCG5DC,EAAkB,CAC3BC,KCAgB,SAAUf,GAM1B,MAJU,CACF7B,OAFG,iUAAiU6C,KAAMhB,KDAlViB,MEJiB,SAAUjB,GAK3B,MAJU,CACN7B,OAAQ,4IAA4I6C,KAAMhB,KFG9JkB,OGFkB,SAAUlB,GAK5B,MAJU,CACN7B,OAAQ,0BAA0B6C,KAAMhB,MCPzC,MCaMmB,EAA4B,CACrCC,SCZoB,SAAUX,GAC9B,IAAIY,EAAeZ,EAAQa,QAAQ,QAAQtD,cAAc,UAAYyC,EAAQc,KAAO,mBACpF,OAAOF,EFJW,SAAUZ,GAC5B,IAAIe,EAAYC,KAAKC,MAAOjB,EAAQkB,aAAa,gBAC7CC,EAAkBnB,EAAQa,QAAQ,QAAQO,iBAAiB,UAAYpB,EAAQc,KAAO,cAAc9C,OACpGqD,EAAUF,GAAmBJ,EAAU,GACvCO,EAAUH,GAAmBJ,EAAU,GACvC9C,EAAM,CAAEP,OAAQ2D,GAAWC,GAQ/B,OANKrD,EAAIP,SACLO,EAAIsD,OAAS,CAAEC,QAAQ,GAClBH,IAAWpD,EAAIsD,OAAOE,WAAY,GAClCH,IAAWrD,EAAIsD,OAAOG,WAAY,IAGpCzD,EETeuD,CAAOZ,GAAe,CAAClD,OAAQsC,EAAQ2B,UDW7DC,QEfmB,SAAU5B,GAC7B,IAAI6B,EAAc7B,EAAQa,QAAQ,QAAQtD,cAAe,UAAYyC,EAAQkB,aAAa,iBAAmB,MACzGjD,EAAM,CAAEP,OAAQsC,EAAQ8B,QAAUD,EAAYC,OAMlD,OAJK7D,EAAIP,SACLO,EAAIsD,OAAS,CAAEK,SAAS,IAGrB3D,GFQP8D,YGhBuB,SAAU/B,GACjC,IAAIgC,EAAchC,EAAQ8B,MAAM9D,OAC5B+D,EAA0D,EAA5C/B,EAAQkB,aAAa,qBACnCjD,EAAM,CAAEP,OAAQsE,IAAgBD,GAQpC,OANK9D,EAAIP,SACLO,EAAIsD,OAAS,CAAEQ,aAAa,GACxBC,EAAcD,EAAe9D,EAAIsD,OAAOU,WAAY,EACjDhE,EAAIsD,OAAOW,WAAY,GAG3BjE,GHMPkE,KIjBgB,SAAUnC,EAASoC,GACnC,IAAIC,EAAyF,GAA1ErC,EAAQkB,aAAa,uBAAyBkB,EAAaC,aAC1EC,EAAYtC,EAAQuC,OAAS,IAAIC,OAAOxC,EAAQuC,OAAO3C,QAAS,IAAK,aAAgB,KACrF6C,EAAY9D,MAAM+D,KAAK1C,EAAQ2C,OAC/B1E,EAAM,CAAEP,QAAQ,GAkBpB,OAhBA+E,EAAUG,SAAQ,SAAUT,GACxB,IAAIU,EAAoBR,EAAc,GAAMF,EAAKW,KAAK,KAAK,KAAQT,EAC/DU,EAAmC,OAAbT,GAAoBA,EAAS/B,KAAK4B,EAAKa,OAE7DH,GAAsBE,IACtB9E,EAAIP,QAAS,OACa,IAAfO,EAAIsD,SACXtD,EAAIsD,OAAS,IAEjBtD,EAAIsD,OAAOY,MAAO,EACdU,IAAqB5E,EAAIsD,OAAOc,aAAc,GAC7CU,IAAsB9E,EAAIsD,OAAO0B,kBAAmB,OAK1DhF,GJJPD,OKlBkB,SAAUgC,GAC5B,IAAIkD,EAASlD,EAAQ8B,MAAM9D,OACvB+C,EAAYC,KAAKC,MAAOjB,EAAQkB,aAAa,gBAC7CiC,EAAgBD,GAAUnC,EAAU,GACpCqC,EAAgBF,GAAUnC,EAAU,GACpC9C,EAAM,CAAEP,OAAQyF,GAAiBC,GAQrC,OANKnF,EAAIP,SACLO,EAAIsD,OAAS,CAAE8B,cAAc,GACxBF,IAAiBlF,EAAIsD,OAAOU,WAAY,GACxCmB,IAAiBnF,EAAIsD,OAAOW,WAAY,IAG1CjE,GLMPqF,IMjBe,SAAUtD,GACzB,IAAI8B,EAAQ9B,EAAQ8B,MAChByB,EAASvD,EAAQsD,IACjBjE,EAAaW,EAAQkB,aAAa,qBAEjB,SAAjBlB,EAAQgD,MAAmB3D,KAC3ByC,EAAQ3C,EAAiB2C,EAAOzC,GAChCkE,EAASA,EAAO1D,MAAM,KAAKC,KAAK,KAGpCgC,GAAgB,EAChByB,GAAkB,EAElB,IAAItF,EAAM,CAAEP,OAAQoE,GAASyB,GAM7B,OAJKtF,EAAIP,SACLO,EAAIsD,OAAS,CAAE+B,KAAK,IAGjBrF,GNDPiE,UOpBqB,SAAUlC,GAC/B,MAAM/B,EAAM,CAAEP,OAAQsC,EAAQ8B,MAAM9D,QAA8B,EAApBgC,EAAQwD,WAMtD,OAJKvF,EAAIP,SACLO,EAAIsD,OAAS,CAAEW,WAAW,IAGvBjE,GPcPwF,IQnBe,SAAUzD,GACzB,IAAI8B,EAAQ9B,EAAQ8B,MAChB4B,EAAS1D,EAAQyD,IACjBpE,EAAaW,EAAQkB,aAAa,qBAEjB,SAAjBlB,EAAQgD,MAAmBhD,EAAQkB,aAAa,uBAChDY,EAAQ3C,EAAiB2C,EAAOzC,GAChCqE,EAASA,EAAO7D,MAAM,KAAKC,KAAK,KAGpCgC,GAAgB,EAChB4B,GAAkB,EAElB,IAAIzF,EAAM,CAAEP,OAAQoE,GAAS4B,GAM7B,OAJKzF,EAAIP,SACLO,EAAIsD,OAAS,CAAEkC,KAAK,IAGjBxF,GRCPgE,UStBqB,SAAUjC,GAC/B,MAAM/B,EAAM,CAAEP,OAAQsC,EAAQ8B,MAAM9D,QAA8B,EAApBgC,EAAQ2D,WAMtD,OAJK1F,EAAIP,SACLO,EAAIsD,OAAS,CAAEU,WAAW,IAGvBhE,GTgBP2F,QUvBmB,SAAU5D,GAC7B,IAAI6D,EAAe7D,EAAQ4D,QAEvB3F,EAAM,CAAEP,OADK,IAAI8E,OAAQqB,GACEtD,KAAMP,EAAQ8B,QAM7C,OAJK7D,EAAIP,SACLO,EAAIsD,OAAS,CAAEqC,SAAS,IAGrB3F,GVeP6F,MWxBiB,SAAU9D,GAC3B,IAAI+D,EAAe/D,EAAQa,QAAQ,QAAQtD,cAAe,UAAWyC,EAAQc,KAAM,cAGnF,MAAO,CAAEpD,OAFsB,OAAjBqG,GAAyBA,EAAajC,MAAMkC,OAAOhG,OAAS,IXuB1EiG,aYzBwB,SAAUjE,GAClC,MAAO,CACHtC,OAAQsC,EAAQ8B,MAAMkC,OAAOhG,OAAS,KCCvC,SAASkG,EAAoBlE,EAASoC,EAAc/B,EAAiB8D,GAExE,IAAKpH,EAAUiD,GAAU,CACrB,MAAM/B,EAAM8B,EAAwB,CAACC,QAAAA,IACrC,OAAOoE,QAAQC,QAAQpG,GAG3B,MAAMd,EAAS6C,EAAQa,QAAQ,QACzByD,EAAetE,EAAQ8B,MAAMkC,OAAOhG,OAAS,EAGlD,GAAqB,UAAjBgC,EAAQgD,KAAkB,CAC3B,MAAMuB,EAAYvE,EAAQ2B,QAAU3B,EAAU7C,EAAOI,cAAc,UAAWyC,EAAQc,KAAM,cACtF0D,EAAmBD,GAAaA,EAAUE,QAAQ,uBAClDC,EAAgBF,EAAmBD,EAAYpH,EAAOI,cAAc,6BAA8ByC,EAAQc,KAAM,MAChH6D,EAAgBD,EAAgBvH,EAAOI,cAAc,yBAA0BmH,EAAcE,GAAI,MAAQ,KAE3GL,GAAaI,IACbA,EAAcE,SAAWH,EAAcG,UAAYH,EAAc/C,QAC5D6C,EAEMpC,EAAa0C,gBACpBH,EAAcI,QAFdJ,EAAc7C,MAAQ,IAQlC,GAAI9B,EAAQyE,QAAQ,yBAA2BH,EAAc,CACzD,MAAMU,EAAY7H,EAAOI,cAAeyC,EAAQkB,aAAa,uBAC7D8D,EAAUrD,SAAU,EACpB3B,EAAQ6E,SAAWG,EAAUH,SAGjC,MAAMI,EAAkBjF,EAAQ6E,UAAa7E,EAAQyE,QAAQ,8BAAgCH,EAE7F,MCrCgC,GAAIY,cAAAA,EAAgB,GAAIC,KAAAA,EAAO,GAAIC,gBAAAA,EAAkB,MAAM,IAAU,KAC9FF,EAAcG,OAAO,CAACC,EAAKC,IACvBD,EAAIE,KAAKC,IACZ,IAAIC,EAAU9H,EAAa,GAAI6H,EAAIA,EAAIzH,OAAS,IAChD,OAAIoH,EAAgBM,GACTtB,QAAQC,QAAQoB,GAEpB,IAAIrB,QAAQC,IAAaA,EAAQkB,EAAUG,MAC7CF,KAAK,CAAC9H,EAASgI,KACZD,EAAI7G,KAAKlB,GACF+H,MAGpBrB,QAAQC,QAAQ,CAACc,KACfK,KAAKG,GAAYA,EAAS3H,OAAS,EAAI2H,EAASjH,MAAM,GAAKiH,GDuBzDC,CAAqB,CACpBV,cAAe9C,EAAayD,iBAC5BV,KAAM,CAACnF,QAAAA,KAEVwF,KAAKL,IACF,IAAIW,EAAUX,EAAKY,MACnB,OAAO,IAAI3B,QAAQC,IACVY,IACDa,EAAQpI,QAAS,GAErB2G,EAASY,EE9ClB,SAAkBjF,EAASoC,EAAc/B,EAAiB8D,GAE7D,MAAM6B,EAAYhG,EAAQyE,QAAQ,kBAAoBxE,EAAYD,EAAQkB,aAAa,iBAAmBlB,EAAQgD,KAC5GiD,EAAajG,EAAQ8B,MACrBwC,EAAe2B,EAAWjC,OAAOhG,OAAS,EAEhD,IAOIkI,EAPAjI,EAAM8B,EAAwB,CAACrC,OAAQ4G,EAActE,QAAAA,IAEzD,OAAK/B,EAAIP,OAOF,IAAI0G,QAAQC,IAGf6B,EAAwBvH,MAAM+D,KAAK1C,EAAQmG,YAAYd,OAAO,CAACe,EAAWC,KAEtE,MAAMC,EAAWrG,EAAaoG,EAAKvF,KAAKlB,QAAQ,QAAS,KACnDmB,EAAYsF,EAAKvE,MACjByE,EAAiC,SAAbD,GAAuE,mBAAzC5F,EAA0BK,GAC5EyF,EAAkE,mBAAxC9F,EAA0B4F,GAE1D,GAAIC,GAAqBC,EAAkB,CACvC,MACMC,EAAW/F,EADF6F,EAAoBxF,EAAYuF,GACKtG,EAASoC,GAC7D,IAAKqE,EAAS/I,OAEV,OADAO,EAAML,EAAa,GAAIK,EAAKwI,IACrB,EAGf,OAAOL,GACR9B,GAGuC,mBAA/BjE,EAAgB2F,GACvB3B,EAAShE,EAAgB2F,GAAWC,EAAYjG,IAEhDqE,EAASpG,KAGduH,KAAKL,IAKJ,GAHAlH,EAAML,EAAc,GAAIK,EAAKkH,GAC7BlH,EAAIP,OAASO,EAAIP,QAAUwI,GAEtBjI,EAAIP,OAAQ,CACb,MAAMgJ,EAAsD,mBAAhCvC,EAAiB6B,GAA4B7B,EAAiB6B,GAAWC,EAAYjG,GAAW,GAC5H/B,EAAIsD,OAAS3D,EAAa,GAAIK,EAAIsD,QAAU,GAAImF,GAChDzI,EAAIsD,OAAOoF,MAAO,EAGtB,OAAO1I,KA7CPA,EAAIsD,OAAS,CAAEqF,OAAO,GACfxC,QAAQC,QAAQpG,IFoCY4I,CAAQ7G,EAASoC,EAAc/B,EAAiB8D,GAAoB2B,OG9CxG,SAASgB,EAAmB3J,EAAQiF,EAAc/B,EAAiB8D,EAAkB4C,EAAc,MAEtG3E,EAAexE,EAAc,GAAIwE,EAAc,CAAC0C,gBAAgB,IAEhE,MAAM7G,ECL4BA,CAAAA,GAC3BL,EAAa,GAAI,CAAEF,QAAQ,EAAMsJ,OAAQ,IAAM/I,GDI1CgJ,GACNC,EERqBvK,CAAAA,IAE3B,IAAIwK,EAAmB,GACnBC,EAAmB,GAEvB,OAAOzI,MAAM+D,KAAM/F,GAAW0K,OAAOrH,IACjC,MAAMc,EAAOd,EAAQc,KACfkC,EAAOhD,EAAQgD,KAErB,OAAIlC,IAASqG,GAAoBnE,IAASoE,KAIrCpH,EAAQyE,QAAQ,0BACjB0C,EAAmBrG,EACnBsG,EAAmBpE,IAEhB,MFTQsE,CAAiBnK,EAAOiE,iBGRX,+GHUhC,OAAOgD,QAAQlE,IAAKgH,EAAWK,IAAIvH,IAE/B,GAAI+G,GAAe/G,IAAY+G,EAAa,CACxC,MAAMS,EAAOzH,EAAwB,CAACC,QAAAA,EAAStC,QAAQ,IACvD,OAAO0G,QAAQC,QAAQmD,GAG3B,OAAOtD,EAAoBlE,EAASoC,EAAc/B,EAAiB8D,MAElEqB,KAAKiC,IAEN,IAAIC,EAAyE,IAArDD,EAAKJ,OAAOM,IAAaA,EAASjK,QAAQM,OAIlE,OAHAC,EAAIP,OAASgK,EACbzJ,EAAI+I,OAASS,EAENxJ,IIjBf,MAAM2J,EAEFC,YAAa1K,EAAQ2K,ICRlB,SAAwBC,EAAM5K,EAAQ2K,GAEzC,IAAIE,EAAQjK,UAAUC,OAClBiK,EAAgB/K,EAAYC,GAEhC,GAAc,IAAV6K,GAAgBA,EAAQ,IAAM7K,EAC9B,MAAM,IAAI+K,MAAM,gDAEpB,GAAIxL,EAAWS,GACX,MAAM,IAAI+K,MAAM,6FAEpB,IAAKD,EAAcvK,OACf,MAAM,IAAIwK,MAAM,sEAGpBH,EAAK5K,OAAS8K,EAActK,QAC5BoK,EAAK5K,OAAOgL,OAASJ,EACrBA,EAAKK,QAAUxK,EAAa,GAAImK,EAAKM,YAAYxL,UAAUuL,QAASN,GAGpEC,EAAKK,QAAQhG,aAAayD,iBAAmBkC,EAAKK,QAAQhG,aAAayD,iBAAiB0B,IAAIe,GAAQA,EAAKC,KAAKR,IAE9GA,EAAK5K,OAAOqL,YAAa,EDbrBC,CAAcC,KAAMvL,EAAQ2K,GAGhCD,iBACWa,KAAKvL,OAAOgL,OAGvBN,cAAe7H,EAASoC,GAGpB,OAAO8B,EAFPlE,EAA8B,iBAAZA,EAAuB0I,KAAKvL,OAAOI,cAAcyC,GAAWA,EAC9EoC,EAAexE,EAAa,GAAI8K,KAAKN,QAAQhG,aAAcA,GACVsG,KAAKrI,gBAAiBqI,KAAKvE,kBAGhF0D,aAAczF,GAEV,OADAA,EAAexE,EAAa,GAAI8K,KAAKN,QAAQhG,aAAcA,GACpD0E,EAAkB4B,KAAKvL,OAAQiF,EAAcsG,KAAKrI,gBAAiBqI,KAAKvE,kBAGnF0D,2BAA4Bc,GACxBD,KAAK7L,UAAUsH,iBAAmBvG,EAAa,GAAI8K,KAAK7L,UAAUsH,iBAAkBwE,GAGxFd,0BAA2Be,GACvBF,KAAK7L,UAAUwD,gBAAkBzC,EAAa,GAAI8K,KAAK7L,UAAUwD,gBAAiBuI,GAGtFf,kBAAmBC,GACfY,KAAK7L,UAAUuL,QAAUxK,EAAa,GAAI8K,KAAK7L,UAAUuL,QAASN,IAK1EF,EAAK/K,UAAUuL,QE3CQ,CAEnBhG,aAAc,CACVyD,iBAAwB,GACxBf,gBAAwB,EACxBzC,YAAwB,KFuChCuF,EAAK/K,UAAUsH,iBAAmB,GAClCyD,EAAK/K,UAAUwD,gBAAkBA,EACjCuH,EAAK/K,UAAUgM,QlC9CQ"}