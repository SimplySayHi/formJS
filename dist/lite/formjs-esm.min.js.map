{"version":3,"file":"formjs-esm.min.js","sources":["../../src/modules/version.js","../../src/modules/helpers/isNodeList.js","../../src/modules/helpers/isDOMNode.js","../../src/modules/helpers/checkFormEl.js","../../src/modules/helpers/mergeObjects.js","../../src/modules/helpers/finalizeFieldPromise.js","../../src/modules/helpers/finalizeFormPromise.js","../../src/modules/helpers/getDateAsNumber.js","../../src/modules/helpers/getSplitChar.js","../../src/modules/helpers/mergeValidateFieldDefault.js","../../src/modules/helpers/toCamelCase.js","../../src/modules/validationRules.js","../../src/modules/validationRules/date.js","../../src/modules/validationRules/email.js","../../src/modules/validationRules/number.js","../../src/modules/validationRules/checkbox.js","../../src/modules/validationRules/checks.js","../../src/modules/validationRules/equalTo.js","../../src/modules/validationRules/exactLength.js","../../src/modules/validationRules/file.js","../../src/modules/validationRules/length.js","../../src/modules/validationRules/max.js","../../src/modules/validationRules/maxlength.js","../../src/modules/validationRules/min.js","../../src/modules/validationRules/minlength.js","../../src/modules/validationRules/pattern.js","../../src/modules/validationRules/radio.js","../../src/modules/checkFieldValidity.js","../../src/modules/helpers/runFunctionsSequence.js","../../src/modules/isValid.js","../../src/modules/checkFormValidity.js","../../src/modules/helpers/getUniqueFields.js","../../src/modules/helpers/fieldsStringSelector.js","../../src/modules/helpers/mergeValidateFormDefault.js","../../src/index-lite.js","../../src/modules-lite/constructor.js","../../src/modules-lite/options.js"],"sourcesContent":["\nexport const version = '5.0.0';\n","\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList );\n}\n","\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node );\n}\n","\nimport { isDOMNode } from './isDOMNode';\n\nexport const checkFormEl = formEl => {\n    let isString = typeof formEl,\n        isValidNodeSelector = isString === 'string' && isDOMNode(document.querySelector(formEl)),\n        isFormSelector = isValidNodeSelector && document.querySelector(formEl).tagName.toLowerCase() === 'form',\n        obj = {\n            result: isDOMNode(formEl) || isFormSelector,\n            element: (isString === 'string' ? document.querySelector(formEl) : formEl)\n        };\n\n    return obj;\n}\n","\nexport const mergeObjects = function( out = {} ){\n    for(let i=1; i<arguments.length; i++){\n        let obj = arguments[i];\n\n        if(!obj){ continue; }\n\n        for(let key in obj){\n            let isArray = Object.prototype.toString.call(obj[key]) === \"[object Array]\";\n            let isObject = Object.prototype.toString.call(obj[key]) === \"[object Object]\";\n\n            // COPY ONLY ENUMERABLE PROPERTIES\n            if( obj.hasOwnProperty(key) ){\n                if( isArray ){\n\n                    if( typeof out[key] === 'undefined' ){\n                        out[key] = [];\n                    }\n                    out[key] = out[key].concat( obj[key].slice(0) );\n\n                } else if( isObject ){\n\n                    out[key] = mergeObjects(out[key], obj[key]);\n\n                } else {\n\n                    // * STRING | NUMBER | BOOLEAN | FUNCTION\n                    if( Array.isArray(out[key]) ){\n                        // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                        out[key].push(obj[key]);\n                    } else {\n                        out[key] = obj[key];\n                    }\n\n                }\n            }\n        }\n    }\n\n    return out;\n}\n","\nexport const finalizeFieldPromise = obj => {\n    if( obj.result ){\n        return Promise.resolve();\n    }\n    return Promise.reject(obj.errors);\n}\n","\nexport const finalizeFormPromise = obj => {\n    if( obj.result ){\n        return Promise.resolve(obj.fields);\n    }\n    return Promise.reject(obj.fields);\n}\n","\nimport { getSplitChar } from './getSplitChar';\n\nconst formatMap = {\n    'YYYY-MM-DD': function(dateArray){\n        return dateArray;\n    },\n    'MM-DD-YYYY': function(dateArray){\n        return [dateArray[2], dateArray[0], dateArray[1]];\n    },\n    'DD-MM-YYYY': function(dateArray){\n        return dateArray.reverse();\n    }\n};\n\nexport const getDateAsNumber = ( dateString, dateFormat ) => {\n    dateFormat = dateFormat || 'YYYY-MM-DD';\n    const splitChar = getSplitChar(dateString);\n\n    if( dateFormat.indexOf(splitChar) < 0 ){\n        return;\n    }\n\n    dateFormat = dateFormat.replace(/[^YMD]/g, '-');\n    dateString = dateString.split(splitChar);\n    dateString = formatMap[dateFormat](dateString).join('');\n    \n    return dateString;\n}\n","\nexport const getSplitChar = string => {\n    // MATCH ANY NON-DIGIT CHAR\n    const separator = string.match(/\\D/);\n    return (separator && separator.length > 0) ? separator[0] : null;\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const mergeValidateFieldDefault = obj => {\n    return mergeObjects({}, { result: false, fieldEl: null }, obj);\n}\n","\nexport const toCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase(); });\n}\n","\nimport { date }         from './validationRules/date';\nimport { email }        from './validationRules/email';\nimport { number }       from './validationRules/number';\n\nimport { checkbox }     from './validationRules/checkbox';\nimport { equalTo }      from './validationRules/equalTo';\nimport { exactLength }  from './validationRules/exactLength';\nimport { file }         from './validationRules/file';\nimport { length }       from './validationRules/length';\nimport { max }          from './validationRules/max';\nimport { maxlength }    from './validationRules/maxlength';\nimport { min }          from './validationRules/min';\nimport { minlength }    from './validationRules/minlength';\nimport { pattern }      from './validationRules/pattern';\nimport { radio }        from './validationRules/radio';\n\nexport const validationRules = {\n    date,\n    email,\n    number,\n\n    checkbox,\n    equalTo,\n    exactLength,\n    file,\n    length,\n    max,\n    maxlength,\n    min,\n    minlength,\n    pattern,\n    radio\n}\n","\n/*\n    DATE AS ISO 8601 DATE FORMAT:\n    YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n*/\n\nexport const date = function( string ){\n    return {\n        result: /^((((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13578]|1[02])[ \\/\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13456789]|1[012])[ \\/\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.]02[ \\/\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ \\/\\-.]02[ \\/\\-.]29))$/g.test( string )\n    };\n}\n","\n// https://regex101.com/r/cdlyJy/3\n\nexport const email = function( string ){\n    return {\n        result: /^[a-zA-Z_-]([\\w.-]?[a-zA-Z0-9])*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?){2,})+$/.test( string )\n    };\n}\n","\n/*\n    ALL NUMBERS ( INTEGERS AND FLOATING )\n    VALID NUMBERS: 123 | 123.456 | .123\n*/\n\nexport const number = function( string ){\n    return {\n        result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n    };\n}","\nimport { checks } from './checks';\n\nexport const checkbox = function( value, fieldEl ){\n    const dataChecksEl = fieldEl.closest('form').querySelector('[name=\"' + fieldEl.name + '\"][data-checks]');\n    return dataChecksEl ? checks(dataChecksEl) : { result: fieldEl.checked };\n}\n","\nexport const checks = function( fieldEl ){\n    const attrValue = JSON.parse( fieldEl.getAttribute('data-checks') ),\n          checkedElLength = fieldEl.closest('form').querySelectorAll('[name=\"' + fieldEl.name + '\"]:checked').length,\n          isMinOk = checkedElLength >= attrValue[0],\n          isMaxOk = checkedElLength <= attrValue[1],\n          obj = { result: isMinOk && isMaxOk };\n\n    if( !obj.result ){\n        obj.errors = { checks: true };\n        if( !isMinOk ){ obj.errors.minChecks = true; }\n        if( !isMaxOk ){ obj.errors.maxChecks = true; }\n    }\n\n    return obj;\n}\n","\nexport const equalTo = function( value, fieldEl ){\n    const checkFromEl = fieldEl.closest('form').querySelector( '[name=\"' + fieldEl.getAttribute('data-equal-to') + '\"]' );\n    return { result: value === checkFromEl.value };\n}\n","\nexport const exactLength = function( value, fieldEl ){\n    const valueLength = value.length,\n          exactLength = fieldEl.getAttribute('data-exact-length') * 1,\n          obj = { result: valueLength === exactLength };\n\n    if( !obj.result ){\n        obj.errors = {};\n        if( valueLength < exactLength ){ obj.errors.minlength = true; }\n        else { obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nexport const file = function( value, fieldEl ){\n    const maxFileSize = (fieldEl.getAttribute('data-max-file-size') || 0) * 1,\n          MIMEtype = fieldEl.accept ? new RegExp(fieldEl.accept.replace( '*', '[^\\\\/,]+' )) : null,\n          filesList = Array.from(fieldEl.files),\n          obj = { result: true };\n\n    filesList.forEach(file => {\n        const exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize,\n              isAcceptedFileType = MIMEtype !== null ? MIMEtype.test(file.type) : true;\n\n        if( exceedMaxFileSize || !isAcceptedFileType ){\n            obj.result = false;\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {};\n            }\n            if( exceedMaxFileSize ){ obj.errors.maxFileSize = true; }\n            if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true; }\n\n        }\n    });\n\n    return obj;\n}\n","\nexport const length = function( value, fieldEl ){\n    const valueL = value.length,\n          attrValue = JSON.parse( fieldEl.getAttribute('data-length') ),\n          isMinlengthOk = valueL >= attrValue[0],\n          isMaxlengthOk = valueL <= attrValue[1],\n          obj = { result: isMinlengthOk && isMaxlengthOk };\n\n    if( !obj.result ){\n        obj.errors = {};\n        if( !isMinlengthOk ){ obj.errors.minlength = true; }\n        if( !isMaxlengthOk ){ obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const max = function( value, fieldEl ){\n    let maxVal = fieldEl.max;\n    const dateFormat = fieldEl.getAttribute('data-date-format');\n    \n    if( fieldEl.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat );\n        maxVal = maxVal.split('-').join('');\n    }\n\n    value = value * 1;\n    maxVal = maxVal * 1;\n    \n    return { result: value <= maxVal };\n}\n","\nexport const maxlength = function( value, fieldEl ){\n    return { result: value.length <= fieldEl.maxLength * 1 };\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const min = function( value, fieldEl ){\n    let minVal = fieldEl.min;\n    const dateFormat = fieldEl.getAttribute('data-date-format');\n    \n    if( fieldEl.type === 'date' || fieldEl.getAttribute('data-date-format') ){\n        value = getDateAsNumber( value, dateFormat );\n        minVal = minVal.split('-').join('');\n    }\n\n    value = value * 1;\n    minVal = minVal * 1;\n    \n    return { result: value >= minVal };\n}\n","\nexport const minlength = function( value, fieldEl ){\n    return { result: value.length >= fieldEl.minLength * 1 };\n}\n","\nexport const pattern = function( value, fieldEl ){\n    return { result: new RegExp(fieldEl.pattern).test(value) };\n}\n","\nexport const radio = function( value, fieldEl ){\n    const fieldChecked = fieldEl.closest('form').querySelector( '[name=\"'+ fieldEl.name +'\"]:checked' ),\n          isValid = fieldChecked !== null && fieldChecked.value.trim().length > 0;\n\n    return { result: isValid };\n}\n","\nimport { mergeValidateFieldDefault, isDOMNode, runFunctionsSequence } from './helpers';\nimport { isValid } from './isValid';\n\nexport function checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    if( !isDOMNode(fieldEl) ){\n        const obj = mergeValidateFieldDefault({fieldEl});\n        return Promise.resolve(obj);\n    }\n\n    const formEl = fieldEl.closest('form'),\n          isValidValue = fieldEl.value.trim().length > 0;\n\n    // HANDLE FIELD data-required-from WHEN CHANGING ITS RELATED RADIO\n    if( fieldEl.type === 'radio' ){\n        const checkedEl = fieldEl.checked ? fieldEl : formEl.querySelector('[name=\"'+ fieldEl.name +'\"]:checked'),\n              reqMoreIsChecked = checkedEl && checkedEl.matches('[data-require-more]'),\n              findReqMoreEl = reqMoreIsChecked ? checkedEl : formEl.querySelector('[data-require-more][name=\"'+ fieldEl.name +'\"]'),\n              findReqFromEl = findReqMoreEl ? formEl.querySelector('[data-required-from=\"#'+ findReqMoreEl.id +'\"]') : null;\n        \n        if( checkedEl && findReqFromEl ){\n            findReqFromEl.required = findReqMoreEl.required && findReqMoreEl.checked;\n            if( !reqMoreIsChecked ){\n                findReqFromEl.value = '';\n            } else if( fieldOptions.focusOnRelated ) {\n                findReqFromEl.focus();\n            }\n        }\n    }\n\n    // HANDLE FIELD data-require-more & data-required-from WHEN *-from IT'S FILLED\n    if( fieldEl.matches('[data-required-from]') && isValidValue ){\n        const reqMoreEl = formEl.querySelector( fieldEl.getAttribute('data-required-from') );\n        reqMoreEl.checked = true;\n        fieldEl.required = reqMoreEl.required;\n    }\n\n    const needsValidation = fieldEl.required || (fieldEl.matches('[data-validate-if-filled]') && isValidValue);\n\n    return runFunctionsSequence({\n            functionsList: fieldOptions.beforeValidation,\n            data: {fieldEl}\n        })\n        .then(data => {\n            const dataObj = data.pop();\n            return new Promise(resolve => {\n                if( !needsValidation ){\n                    dataObj.result = true;\n                }\n                resolve( needsValidation ? isValid(fieldEl, validationRules, validationErrors) : dataObj );\n            });\n        });\n\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const runFunctionsSequence = ( { functionsList = [], data = {}, stopConditionFn = () => false } = {} ) => {\n    return functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1]);\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res);\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result);\n                    return res;\n                });\n        });\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList);\n}\n","\nimport { mergeValidateFieldDefault, mergeObjects, toCamelCase } from './helpers';\n\nexport function isValid( fieldEl, validationRules, validationErrors ){\n\n    const fieldValue = fieldEl.value,\n          obj = mergeValidateFieldDefault({result: fieldValue.trim().length > 0, fieldEl}),\n          isRadioOrCheckbox = /^(radio|checkbox)$/.test(fieldEl.type),\n          hasSelectedInput = fieldEl.closest('form').querySelectorAll('[name=\"'+ fieldEl.name +'\"]:checked').length > 0;\n\n    if( (!isRadioOrCheckbox && !obj.result) || (isRadioOrCheckbox && !hasSelectedInput) ){\n        obj.result = false;\n        obj.errors = { empty: true };\n        return Promise.resolve(obj);\n    }\n\n    // COLLECT VALIDATION METHOD NAMES ( USED TO RUN VALIDATIONS AND GET ERRORS )\n    const validationMethods = Array.from(fieldEl.attributes).reduce((accList, attr) => {\n        const attrName = toCamelCase( attr.name.replace('data-', '') ),\n              attrValue = toCamelCase( attr.value ),\n              isAttrValueWithFn = (attrName === 'type' || attrName === 'subtype') && validationRules[attrValue],\n              isAttrNameWithFn = validationRules[attrName];\n\n        if( isAttrValueWithFn || isAttrNameWithFn ){\n            accList.push( isAttrValueWithFn ? attrValue : attrName );\n        }\n        return accList;\n    }, []);\n\n    return new Promise(resolve => {\n\n        // RUN VALIDATIONS\n        const validationsResult = validationMethods.reduce((accPromise, methodName) => {\n            return accPromise.then(accObj => {\n                return new Promise(resolveVal => {\n                    // RUN VALIDATION INSIDE A PROMISE IS USEFUL FOR ASYNC VALIDATIONS\n                    resolveVal( validationRules[methodName](fieldValue, fieldEl) );\n                }).then(valObj => {\n                    // ADD CUSTOM ERROR-KEY FOR EACH VALIDATION RULE\n                    if( !valObj.result ){\n                        const errorObj = {};\n                        if( typeof valObj.errors === 'undefined' || typeof valObj.errors[methodName] === 'undefined' ){\n                            errorObj[methodName] = true;\n                        }\n                        valObj.errors = mergeObjects({}, valObj.errors, errorObj);\n                    }\n                    valObj = valObj.result ? {} : valObj;\n                    return mergeObjects(accObj, valObj);\n                });\n            });\n        }, Promise.resolve(obj));\n        resolve(validationsResult);\n\n    }).then(data => {\n\n        // GET ERRORS\n        if( !data.result ){\n            data.errors = validationMethods.reduce((accObj, methodName) => {\n                const errors = (validationErrors[methodName] && validationErrors[methodName](fieldValue, fieldEl)) || {};\n                return mergeObjects(accObj, errors);\n            }, data.errors);\n        }\n        return data;\n\n    });\n\n}\n","\nimport { fieldsStringSelector, getUniqueFields, mergeValidateFieldDefault, mergeValidateFormDefault, mergeObjects } from './helpers';\nimport { checkFieldValidity } from './checkFieldValidity';\n\nexport function checkFormValidity( formEl, fieldOptions, validationRules, validationErrors, fieldToSkip = null ){\n\n    fieldOptions = mergeObjects( {}, fieldOptions, {focusOnRelated: false} );\n    const fieldsList = getUniqueFields( formEl.querySelectorAll(fieldsStringSelector) );\n\n    return Promise.all( fieldsList.map(fieldEl => {\n\n        if( fieldToSkip && fieldEl === fieldToSkip ){\n            const obj = mergeValidateFieldDefault({fieldEl, result: true});\n            return Promise.resolve(obj);\n        }\n        return checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors );\n\n    }) ).then(fields => {\n\n        const areAllFieldsValid = fields.filter(fieldObj => !fieldObj.result).length === 0;\n        return mergeValidateFormDefault({result: areAllFieldsValid, fields});\n\n    });\n\n}\n","\nexport const getUniqueFields = nodeList => {\n\n    let currentFieldName = '',\n        currentFieldType = '';\n\n    return Array.from( nodeList ).filter(fieldEl => {\n        const name = fieldEl.name,\n              type = fieldEl.type;\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false;\n        }\n        \n        if( !fieldEl.matches('[data-required-from]') ){\n            currentFieldName = name;\n            currentFieldType = type;\n        }\n        return true;\n    });\n    \n}\n","\nexport const fieldsStringSelector = 'input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"hidden\"]), select, textarea'\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const mergeValidateFormDefault = obj => {\n    return mergeObjects({}, { result: true, fields: [] }, obj);\n}\n","\nimport { version }              from './modules/version';\nimport { finalizeFieldPromise, finalizeFormPromise, mergeObjects } from './modules/helpers';\nimport { options }              from './modules-lite/options';\nimport { validationRules }      from './modules/validationRules';\nimport { constructorFn }        from './modules-lite/constructor';\nimport { checkFieldValidity }   from './modules/checkFieldValidity';\nimport { checkFormValidity }    from './modules/checkFormValidity';\n\nclass Form {\n\n    constructor( formEl, optionsObj ){\n        constructorFn(this, formEl, optionsObj);\n    }\n\n    destroy(){\n        delete this.formEl.formjs;\n    }\n\n    validateField( fieldEl, fieldOptions ){\n        fieldEl = (typeof fieldEl === 'string' ? this.formEl.querySelector(fieldEl) : fieldEl);\n        fieldOptions = mergeObjects({}, this.options.fieldOptions, fieldOptions);\n        return checkFieldValidity(fieldEl, fieldOptions, this.validationRules, this.validationErrors)\n            .then(finalizeFieldPromise);\n    }\n\n    validateForm( fieldOptions ){\n        fieldOptions = mergeObjects({}, this.options.fieldOptions, fieldOptions);\n        return checkFormValidity(this.formEl, fieldOptions, this.validationRules, this.validationErrors)\n            .then(finalizeFormPromise);\n    }\n    \n    static addValidationErrors( errorsObj ){\n        this.prototype.validationErrors = mergeObjects({}, this.prototype.validationErrors, errorsObj);\n    }\n\n    static addValidationRules( rulesObj ){\n        this.prototype.validationRules = mergeObjects({}, this.prototype.validationRules, rulesObj);\n    }\n    \n    static setOptions( optionsObj ){\n        this.prototype.options = mergeObjects({}, this.prototype.options, optionsObj);\n    }\n\n}\n\nForm.prototype.options = options;\nForm.prototype.validationErrors = {};\nForm.prototype.validationRules = validationRules;\nForm.prototype.version = version;\n\nexport default Form;\n","\nimport { checkFormEl, isNodeList, mergeObjects } from '../modules/helpers';\n\nexport function constructorFn( self, formEl, optionsObj ){\n\n    const argsL = arguments.length,\n          checkFormElem = checkFormEl(formEl);\n\n    if( argsL === 0 || (argsL > 0 && !formEl) ){\n        throw new Error('First argument \"formEl\" is missing or falsy!');\n    }\n    if( isNodeList(formEl) ){\n        throw new Error('First argument \"formEl\" must be a single DOM node or a form CSS selector, not a NodeList!');\n    }\n    if( !checkFormElem.result ){\n        throw new Error('First argument \"formEl\" is not a DOM node nor a form CSS selector!');\n    }\n\n    self.formEl = checkFormElem.element;\n    self.formEl.formjs = self;\n    self.options = mergeObjects({}, self.constructor.prototype.options, optionsObj);\n\n    // BINDING CONTEXT FOR FUTURE EXECUTION\n    self.options.fieldOptions.beforeValidation = self.options.fieldOptions.beforeValidation.map(cbFn => cbFn.bind(self));\n\n    self.formEl.noValidate = true;\n    \n}\n","\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [],\n        focusOnRelated:         true\n    }\n    \n}\n"],"names":["isNodeList","nodeList","NodeList","prototype","isPrototypeOf","isDOMNode","node","Element","checkFormEl","formEl","isString","isFormSelector","document","querySelector","tagName","toLowerCase","result","element","mergeObjects","out","i","arguments","length","obj","key","isArray","Object","toString","call","isObject","hasOwnProperty","concat","slice","Array","push","finalizeFieldPromise","Promise","resolve","reject","errors","finalizeFormPromise","fields","formatMap","YYYY-MM-DD","dateArray","MM-DD-YYYY","DD-MM-YYYY","reverse","getDateAsNumber","dateString","dateFormat","splitChar","string","separator","match","getSplitChar","indexOf","replace","split","join","mergeValidateFieldDefault","fieldEl","toCamelCase","all","letter","toUpperCase","validationRules","date","test","email","number","checkbox","value","dataChecksEl","closest","name","attrValue","JSON","parse","getAttribute","checkedElLength","querySelectorAll","isMinOk","isMaxOk","checks","minChecks","maxChecks","checked","equalTo","exactLength","valueLength","minlength","maxlength","file","maxFileSize","MIMEtype","accept","RegExp","filesList","from","files","forEach","exceedMaxFileSize","size","isAcceptedFileType","type","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","max","maxVal","maxLength","min","minVal","minLength","pattern","radio","fieldChecked","trim","checkFieldValidity","fieldOptions","validationErrors","isValidValue","checkedEl","reqMoreIsChecked","matches","findReqMoreEl","findReqFromEl","id","required","focusOnRelated","focus","reqMoreEl","needsValidation","functionsList","data","stopConditionFn","reduce","acc","promiseFn","then","res","dataNew","dataList","runFunctionsSequence","beforeValidation","dataObj","pop","fieldValue","isRadioOrCheckbox","hasSelectedInput","empty","validationMethods","attributes","accList","attr","attrName","isAttrValueWithFn","isAttrNameWithFn","accPromise","methodName","accObj","resolveVal","valObj","errorObj","isValid","checkFormValidity","fieldToSkip","fieldsList","currentFieldName","currentFieldType","filter","getUniqueFields","map","areAllFieldsValid","fieldObj","Form","[object Object]","optionsObj","self","argsL","checkFormElem","Error","formjs","options","constructor","cbFn","bind","noValidate","constructorFn","this","errorsObj","rulesObj","version"],"mappings":"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"}