{"version":3,"file":"formjs-esm.min.js","sources":["../../src/modules/version.js","../../src/modules/helpers/isNodeList.js","../../src/modules/helpers/isDOMNode.js","../../src/modules/helpers/checkFormEl.js","../../src/modules/helpers/mergeObjects.js","../../src/modules/helpers/getSplitChar.js","../../src/modules/helpers/getValidateFieldDefault.js","../../src/modules/helpers/toCamelCase.js","../../src/modules/validationRules.js","../../src/modules/validationRules/date.js","../../src/modules/validationRules/email.js","../../src/modules/validationRules/number.js","../../src/modules/validationRules/checkbox.js","../../src/modules/validationRulesAttributes.js","../../src/modules/validationRules/checks.js","../../src/modules/validationRules/equalTo.js","../../src/modules/validationRules/exactLength.js","../../src/modules/validationRules/file.js","../../src/modules/validationRules/length.js","../../src/modules/validationRules/max.js","../../src/modules/validationRules/maxlength.js","../../src/modules/validationRules/min.js","../../src/modules/validationRules/minlength.js","../../src/modules/validationRules/pattern.js","../../src/modules/validationRules/radio.js","../../src/modules/validationRules/requiredFrom.js","../../src/modules/checkFieldValidity.js","../../src/modules/helpers/runFunctionsSequence.js","../../src/modules/isValid.js","../../src/modules/checkFormValidity.js","../../src/modules/helpers/getValidateFormDefault.js","../../src/modules/helpers/getUniqueFields.js","../../src/modules/helpers/fieldsStringSelector.js","../../src/index-lite.js","../../src/modules-lite/constructor.js","../../src/modules-lite/options.js"],"sourcesContent":["\nexport const version = '4.0.2';\n","\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList );\n}\n","\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node );\n}\n","\nimport { isDOMNode } from './isDOMNode';\n\nexport const checkFormEl = formEl => {\n    let isString = typeof formEl,\n        isValidNodeSelector = isString === 'string' && isDOMNode(document.querySelector(formEl)),\n        isFormSelector = isValidNodeSelector && document.querySelector(formEl).tagName.toLowerCase() === 'form',\n        obj = {\n            result: isDOMNode(formEl) || isFormSelector,\n            element: (isString === 'string' ? document.querySelector(formEl) : formEl)\n        };\n\n    return obj;\n}\n","\nexport const mergeObjects = function( out = {} ){\n    for(let i=1; i<arguments.length; i++){\n        let obj = arguments[i];\n\n        if(!obj){ continue; }\n\n        for(let key in obj){\n            let isArray = Object.prototype.toString.call(obj[key]) === \"[object Array]\";\n            let isObject = Object.prototype.toString.call(obj[key]) === \"[object Object]\";\n\n            // COPY ONLY ENUMERABLE PROPERTIES\n            if( obj.hasOwnProperty(key) ){\n                if( isArray ){\n\n                    if( typeof out[key] === 'undefined' ){\n                        out[key] = [];\n                    }\n                    out[key] = out[key].concat( obj[key].slice(0) );\n\n                } else if( isObject ){\n\n                    out[key] = mergeObjects(out[key], obj[key]);\n\n                } else {\n\n                    // * STRING | NUMBER | BOOLEAN | FUNCTION\n                    if( Array.isArray(out[key]) ){\n                        // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                        out[key].push(obj[key]);\n                    } else {\n                        out[key] = obj[key];\n                    }\n\n                }\n            }\n        }\n    }\n\n    return out;\n}\n","\nexport const getSplitChar = string => {\n    let splitChar = '.';\n\n    if( string.indexOf(splitChar) === -1 ){\n        if( string.indexOf('-') >= 0 ){\n            splitChar = '-';\n        } else if( string.indexOf('/') >= 0 ){\n            splitChar = '/';\n        }\n    }\n\n    return splitChar;\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const getValidateFieldDefault = obj => {\n    return mergeObjects({}, { result: false, fieldEl: null }, obj);\n}\n","\nexport const toCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase(); });\n}\n","\nimport { date }         from './validationRules/date';\nimport { email }        from './validationRules/email';\nimport { number }       from './validationRules/number';\n\nexport const validationRules = {\n    date,\n    email,\n    number\n}\n","\n/*\n    DATE AS ISO 8601 DATE FORMAT:\n    YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n*/\n\nexport const date = function( string ){\n    let date = /^((((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13578]|1[02])[ \\/\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13456789]|1[012])[ \\/\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.]02[ \\/\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ \\/\\-.]02[ \\/\\-.]29))$/g.test( string ),\n        obj = {\n            result: date\n        };\n\n    return obj;\n}\n","\n// https://regex101.com/r/cdlyJy/3\n\nexport const email = function( string ){\n    let obj = {\n        result: /^[a-zA-Z_-]([\\w.-]?[a-zA-Z0-9])*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?){2,})+$/.test( string )\n    };\n\n    return obj;\n}\n","\n/*\n    ALL NUMBERS ( INTEGERS AND FLOATING )\n    VALID NUMBERS: 123 | 123.456 | .123\n*/\n\nexport const number = function( string ){\n    let obj = {\n        result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n    };\n\n    return obj;\n}","\n\nexport const checkbox = function( data ){\n    let formEl = data.fieldEl.closest('form'),\n        dataChecksEl = formEl.querySelector('[name=\"' + data.fieldEl.name + '\"][data-checks]'),\n        obj = { result: data.fieldEl.checked };\n\n    if( dataChecksEl !== null ){\n        obj = this.checks({ attrValue: dataChecksEl.getAttribute('data-checks'), fieldEl: dataChecksEl});\n    }\n\n    return obj;\n}\n","\nimport { checkbox }     from './validationRules/checkbox';\nimport { checks }       from './validationRules/checks';\nimport { equalTo }      from './validationRules/equalTo';\nimport { exactLength }  from './validationRules/exactLength';\nimport { file }         from './validationRules/file';\nimport { length }       from './validationRules/length';\nimport { max }          from './validationRules/max';\nimport { maxlength }    from './validationRules/maxlength';\nimport { min }          from './validationRules/min';\nimport { minlength }    from './validationRules/minlength';\nimport { pattern }      from './validationRules/pattern';\nimport { radio }        from './validationRules/radio';\nimport { requiredFrom } from './validationRules/requiredFrom';\n\nexport const validationRulesAttributes = {\n    checkbox,\n    checks,\n    equalTo,\n    exactLength,\n    file,\n    length,\n    max,\n    maxlength,\n    min,\n    minlength,\n    pattern,\n    radio,\n    requiredFrom,\n}\n","\nexport const checks = function( data ){\n    try {\n        let attrValue = JSON.parse(data.attrValue),\n            fieldEl = data.fieldEl,\n            formEl = fieldEl.closest('form'),\n            checkedElLength = formEl.querySelectorAll('[name=\"' + fieldEl.name + '\"]:checked').length,\n            isMinOk = checkedElLength >= attrValue[0],\n            isMaxOk = checkedElLength <= attrValue[1],\n            obj = { result: isMinOk && isMaxOk };\n\n        if( !obj.result ){\n            obj.errors = { checks: true };\n            if( !isMinOk ){ obj.errors.minChecks = true; }\n            if( !isMaxOk ){ obj.errors.maxChecks = true; }\n        }\n\n        return obj;\n    } catch(e){\n        throw new Error('\"data-checks\" attribute is not a valid array!');\n    }\n}\n","\nexport const equalTo = function( data ){\n    let fieldEl = data.fieldEl,\n        formEl = fieldEl.closest('form'),\n        checkFromEl = formEl.querySelector( '[name=\"' + fieldEl.getAttribute('data-equal-to') + '\"]' ),\n        obj = { result: fieldEl.value === checkFromEl.value };\n\n    if( !obj.result ){\n        obj.errors = { equalTo: true };\n    }\n\n    return obj;\n}\n","\nexport const exactLength = function( data ){\n    let valueLength = data.fieldEl.value.length,\n        exactLength = (data.attrValue * 1),\n        obj = { result: valueLength === exactLength };\n\n    if( !obj.result ){\n        obj.errors = { exactLength: true };\n        if( valueLength < exactLength ){ obj.errors.minlength = true; }\n        else { obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nexport const file = function( data ){\n    let fieldEl = data.fieldEl,\n        maxFileSize = (fieldEl.getAttribute('data-max-file-size') || data.fieldOptions.maxFileSize) * 1,\n        MIMEtype = (fieldEl.accept ? new RegExp(fieldEl.accept.replace( '*', '[^\\\\/,]+' )) : null),\n        filesList = Array.from(fieldEl.files),\n        obj = { result: true };\n\n    filesList.forEach(function( file ){\n        let exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize,\n            isAcceptedFileType = (MIMEtype !== null ? MIMEtype.test(file.type) : true);\n\n        if( exceedMaxFileSize || !isAcceptedFileType ){\n            obj.result = false;\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {};\n            }\n            obj.errors.file = true;\n            if( exceedMaxFileSize ){ obj.errors.maxFileSize = true; }\n            if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true; }\n\n        }\n    });\n\n    return obj;\n}\n","\nexport const length = function( data ){\n    try {\n        let valueL = data.fieldEl.value.length,\n            attrValue = JSON.parse(data.attrValue),\n            isMinlengthOk = valueL >= attrValue[0],\n            isMaxlengthOk = valueL <= attrValue[1],\n            obj = { result: isMinlengthOk && isMaxlengthOk };\n\n        if( !obj.result ){\n            obj.errors = { stringLength: true };\n            if( !isMinlengthOk ){ obj.errors.minlength = true; }\n            if( !isMaxlengthOk ){ obj.errors.maxlength = true; }\n        }\n\n        return obj;\n    } catch(e){\n        throw new Error('\"data-length\" attribute is not a valid array!');\n    }\n}\n","\nimport { getSplitChar } from '../helpers';\n\nexport const max = function( data ){\n    let fieldEl = data.fieldEl,\n        isDate = (fieldEl.matches('[type=\"date\"]') || fieldEl.matches('[data-subtype=\"date\"]') || fieldEl.matches('[data-subtype=\"dateDDMMYYYY\"]')),\n        value = data.fieldEl.value,\n        maxVal = data.attrValue;\n    \n    if( isDate ){\n        let splitChar = getSplitChar( value );\n\n        if( value.indexOf(splitChar) === 2 ){\n            // DD MM YYYY\n            value = value.split( splitChar ).reverse();\n        } else {\n            // YYYY MM DD\n            value = value.split( splitChar );\n        }\n\n        value = value.join('');\n        maxVal = maxVal.split('-').join('');\n    }\n\n    value = value * 1;\n    maxVal = maxVal * 1;\n\n    let obj = { result: value <= maxVal };\n\n    if( !obj.result ){        \n        obj.errors = { max: true };\n    }\n    \n    return obj;\n}\n","\nexport const maxlength = function( data ){\n    const obj = {\n        result: data.fieldEl.value.length <= (data.attrValue * 1)\n    };\n\n    if( !obj.result ){\n        obj.errors = { maxlength: true };\n    }\n\n    return obj;\n}\n","\nimport { getSplitChar } from '../helpers';\n\nexport const min = function( data ){\n    let fieldEl = data.fieldEl,\n        isDate = (fieldEl.matches('[type=\"date\"]') || fieldEl.matches('[data-subtype=\"date\"]') || fieldEl.matches('[data-subtype=\"dateDDMMYYYY\"]')),\n        value = data.fieldEl.value,\n        minVal = data.attrValue;\n    \n    if( isDate ){\n        let splitChar = getSplitChar( value );\n\n        if( value.indexOf(splitChar) === 2 ){\n            // DD MM YYYY\n            value = value.split( splitChar ).reverse();\n        } else {\n            // YYYY MM DD\n            value = value.split( splitChar );\n        }\n\n        value = value.join('');\n        minVal = minVal.split('-').join('');\n    }\n\n    value = value * 1;\n    minVal = minVal * 1;\n\n    let obj = { result: value >= minVal };\n\n    if( !obj.result ){        \n        obj.errors = { min: true };\n    }\n    \n    return obj;\n}\n","\nexport const minlength = function( data ){\n    const obj = {\n        result: data.fieldEl.value.length >= (data.attrValue * 1)\n    };\n\n    if( !obj.result ){\n        obj.errors = { minlength: true };\n    }\n\n    return obj;\n}\n","\nexport const pattern = function( data ){\n    let fieldEl = data.fieldEl,\n        fieldPattern = fieldEl.pattern,\n        fieldRegex = new RegExp( fieldPattern ),\n        obj = { result: fieldRegex.test( fieldEl.value ) };\n\n    if( !obj.result ){\n        obj.errors = { pattern: true };\n    }\n\n    return obj;\n}\n","\nexport const radio = function( data ){\n    let fieldEl = data.fieldEl,\n        fieldChecked = fieldEl.closest('form').querySelector( '[name=\"'+ fieldEl.name +'\"]:checked' ),\n        isValid = fieldChecked !== null && fieldChecked.value.trim().length > 0,\n        obj = { result: isValid };\n\n    return obj;\n}\n","\nexport const requiredFrom = function( data ){\n    let fieldEl = data.fieldEl,\n        formEl = fieldEl.closest('form'),\n        isValidValue = fieldEl.value.trim().length > 0,\n        reqMoreEl = formEl.querySelector( fieldEl.getAttribute('data-required-from') ),\n        checkedEl = formEl.querySelector( '[name=\"'+ reqMoreEl.name +'\"]:checked' ),\n        obj = { result: checkedEl !== null };\n\n    if( reqMoreEl.checked && reqMoreEl.required ){\n        obj.result = isValidValue;\n    }\n\n    if( !obj.result ){\n        obj.errors = { requiredFrom: true };\n    }\n    \n    return obj;\n}\n","\nimport { getValidateFieldDefault, isDOMNode, runFunctionsSequence } from './helpers';\nimport { isValid } from './isValid';\n\nexport function checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    if( !isDOMNode(fieldEl) ){\n        const obj = getValidateFieldDefault({fieldEl});\n        return Promise.resolve(obj);\n    }\n\n    const isValidValue =      fieldEl.value.trim().length > 0,\n          isRequired =        fieldEl.required,\n          isReqFrom =         fieldEl.matches('[data-required-from]'),\n          isValidateIfFilled =fieldEl.matches('[data-validate-if-filled]'),\n          rfsObject = {\n            functionsList: fieldOptions.beforeValidation,\n            data: {fieldEl}\n        };\n\n    return runFunctionsSequence(rfsObject)\n        .then(data => {\n\n            let dataObj = data.pop();\n            return new Promise(resolve => {\n                if(\n                    (!isRequired && !isValidateIfFilled && !isReqFrom) ||   // IT IS A NORMAL FORM FIELD\n                    (isValidateIfFilled && !isValidValue) ||                // IT IS data-validate-if-filled AND EMPTY\n                    (isReqFrom && !isRequired )                             // IT IS data-required-from AND NOT required\n                ){\n\n                    dataObj.result = true;\n                    resolve( dataObj );\n                \n                } else {\n\n                    resolve( isValid( fieldEl, fieldOptions, validationRules, validationErrors ) );\n                    \n                }\n\n            });\n\n        });\n\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const runFunctionsSequence = ( { functionsList = [], data = {}, stopConditionFn = function(){return false} } = {} ) => {\n    return functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1]);\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res);\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result);\n                    return res;\n                });\n        });\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList);\n}\n","\nimport { getValidateFieldDefault, mergeObjects, toCamelCase } from './helpers';\nimport { validationRulesAttributes } from './validationRulesAttributes';\n\nexport function isValid( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    const fieldType = ( fieldEl.matches('[data-subtype]') ? toCamelCase( fieldEl.getAttribute('data-subtype') ) : fieldEl.type ),\n          fieldValue = fieldEl.value,\n          isValidValue = fieldValue.trim().length > 0,\n          // ALPHABETICAL REVERSE ORDER\n          fieldAttributes = Array.from(fieldEl.attributes).sort((a,b) => { return a.name < b.name });\n\n    const attrValidations = [];\n    let attrValidationsResult = isValidValue,\n        obj = getValidateFieldDefault({result: isValidValue, fieldEl});\n\n    if( !obj.result ){\n        obj.errors = { empty: true };\n        return Promise.resolve(obj);\n    }\n\n    // COLLECT SPECIFIC VALIDATIONS FOR validationRulesAttributes\n    fieldAttributes.forEach(attr => {\n        // FOR data-* ATTRIBUTES -> REMOVE \"data-\" AND TRANSFORM TO CAMELCASE\n        const attrName = toCamelCase( attr.name.replace('data-', '') ),\n              attrValue = attr.value,\n              isAttrValueWithFn = attrName === 'type' && typeof validationRulesAttributes[attrValue] === 'function',\n              isAttrNameWithFn = typeof validationRulesAttributes[attrName] === 'function';\n\n        if( isAttrValueWithFn || isAttrNameWithFn ){\n\n            const extraValObj = {\n                    attrName: (isAttrValueWithFn ? attrValue : attrName),\n                    attrValue: attrValue,\n                    fieldEl,\n                    fieldOptions\n                };\n\n            if( isAttrValueWithFn || attrName === 'requiredFrom' ){\n                // THESE VALIDATIONS MUST RUN BEFORE ALL OTHERS\n                attrValidations.unshift( extraValObj );\n            } else {\n                attrValidations.push( extraValObj );\n            }\n\n        }\n    });\n\n    return new Promise(resolve => {\n\n        // RUN SPECIFIC VALIDATIONS FOR validationRulesAttributes\n        attrValidations.forEach(item => {\n            const extraVal = validationRulesAttributes[item.attrName]( item );\n            if( !extraVal.result ){\n                obj = mergeObjects({}, obj, extraVal);\n                attrValidationsResult = false;\n            }\n        });\n\n        // RUN VALIDATIONS FOR validationRules\n        if( typeof validationRules[fieldType] === 'function' ){\n            resolve( validationRules[fieldType](fieldValue, fieldEl) );\n        } else {\n            resolve( obj );\n        }\n\n    }).then(data => {\n\n        obj = mergeObjects( {}, obj, data, {fieldEl} );\n        obj.result = obj.result && attrValidationsResult;\n\n        if( !obj.result ){\n            const fieldErrors = (typeof validationErrors[fieldType] === 'function' ? validationErrors[fieldType](fieldValue, fieldEl) : {});\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {};\n            }\n            obj.errors.rule = true;\n            obj.errors = mergeObjects({}, obj.errors, fieldErrors);\n        }\n        \n        return obj;\n\n    });\n\n}\n","\nimport { fieldsStringSelector, getUniqueFields, getValidateFieldDefault, getValidateFormDefault, mergeObjects } from './helpers';\nimport { checkFieldValidity } from './checkFieldValidity';\n\nexport function checkFormValidity( formEl, fieldOptions, validationRules, validationErrors, fieldToSkip = null ){\n\n    fieldOptions = mergeObjects( {}, fieldOptions, {focusOnRelated: false} );\n\n    const obj = getValidateFormDefault(),\n          fieldsList = getUniqueFields( formEl.querySelectorAll(fieldsStringSelector) );\n\n    return Promise.all( fieldsList.map(fieldEl => {\n\n        if( fieldToSkip && fieldEl === fieldToSkip ){\n            const obj2 = getValidateFieldDefault({fieldEl, result: true});\n            return Promise.resolve(obj2);\n        }\n        \n        return checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors );\n\n    }) ).then(list => {\n\n        let areAllFieldsValid = list.filter(fieldObj => !fieldObj.result).length === 0;\n        obj.result = areAllFieldsValid;\n        obj.fields = list;\n\n        return obj;\n\n    });\n\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const getValidateFormDefault = obj => {\n    return mergeObjects({}, { result: true, fields: [] }, obj);\n}\n","\nexport const getUniqueFields = nodeList => {\n\n    let currentFieldName = '',\n        currentFieldType = '';\n\n    return Array.from( nodeList ).filter(fieldEl => {\n        const name = fieldEl.name,\n              type = fieldEl.type;\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false;\n        }\n        \n        if( !fieldEl.matches('[data-required-from]') ){\n            currentFieldName = name;\n            currentFieldType = type;\n        }\n        return true;\n    });\n    \n}\n","\nexport const fieldsStringSelector = 'input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"hidden\"]), select, textarea'\n","\nimport { version }              from './modules/version';\nimport { mergeObjects }         from './modules/helpers';\nimport { options }              from './modules-lite/options';\nimport { validationRules }      from './modules/validationRules';\nimport { constructorFn }        from './modules-lite/constructor';\nimport { checkFieldValidity }   from './modules/checkFieldValidity';\nimport { checkFormValidity }    from './modules/checkFormValidity';\n\nclass Form {\n\n    constructor( formEl, optionsObj ){\n        constructorFn(this, formEl, optionsObj);\n    }\n\n    destroy(){\n        delete this.formEl.formjs;\n    }\n\n    validateField( fieldEl, fieldOptions ){\n        fieldEl = (typeof fieldEl === 'string' ? this.formEl.querySelector(fieldEl) : fieldEl);\n        fieldOptions = mergeObjects({}, this.options.fieldOptions, fieldOptions);\n        return checkFieldValidity(fieldEl, fieldOptions, this.validationRules, this.validationErrors);\n    }\n\n    validateForm( fieldOptions ){\n        fieldOptions = mergeObjects({}, this.options.fieldOptions, fieldOptions);\n        return checkFormValidity(this.formEl, fieldOptions, this.validationRules, this.validationErrors);\n    }\n    \n    static addValidationErrors( errorsObj ){\n        this.prototype.validationErrors = mergeObjects({}, this.prototype.validationErrors, errorsObj);\n    }\n\n    static addValidationRules( rulesObj ){\n        this.prototype.validationRules = mergeObjects({}, this.prototype.validationRules, rulesObj);\n    }\n    \n    static setOptions( optionsObj ){\n        this.prototype.options = mergeObjects({}, this.prototype.options, optionsObj);\n    }\n\n}\n\nForm.prototype.options = options;\nForm.prototype.validationErrors = {};\nForm.prototype.validationRules = validationRules;\nForm.prototype.version = version;\n\nexport default Form;\n","\nimport { checkFormEl, isNodeList, mergeObjects }   from '../modules/helpers';\n\nexport function constructorFn( self, formEl, optionsObj ){\n\n    let argsL = arguments.length,\n        checkFormElem = checkFormEl(formEl);\n\n    if( argsL === 0 || (argsL > 0 && !formEl) ){\n        throw new Error('First argument \"formEl\" is missing or falsy!');\n    }\n    if( isNodeList(formEl) ){\n        throw new Error('First argument \"formEl\" must be a single DOM node or a form CSS selector, not a NodeList!');\n    }\n    if( !checkFormElem.result ){\n        throw new Error('First argument \"formEl\" is not a DOM node nor a form CSS selector!');\n    }\n\n    self.formEl = checkFormElem.element;\n    self.formEl.formjs = self;\n    self.options = mergeObjects({}, self.constructor.prototype.options, optionsObj);\n\n    // BINDING CONTEXT FOR FUTURE EXECUTION\n    self.options.fieldOptions.beforeValidation = self.options.fieldOptions.beforeValidation.map(cbFn => cbFn.bind(self));\n\n    self.formEl.noValidate = true;\n    \n}\n","\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [],\n        maxFileSize:            10\n    }\n    \n}\n"],"names":["isNodeList","nodeList","NodeList","prototype","isPrototypeOf","isDOMNode","node","Element","checkFormEl","formEl","isString","isFormSelector","document","querySelector","tagName","toLowerCase","result","element","mergeObjects","out","i","arguments","length","obj","key","isArray","Object","toString","call","isObject","hasOwnProperty","concat","slice","Array","push","getSplitChar","string","splitChar","indexOf","getValidateFieldDefault","fieldEl","toCamelCase","replace","all","letter","toUpperCase","validationRules","date","test","email","number","validationRulesAttributes","checkbox","data","dataChecksEl","closest","name","checked","this","checks","attrValue","getAttribute","JSON","parse","checkedElLength","querySelectorAll","isMinOk","isMaxOk","errors","minChecks","maxChecks","e","Error","equalTo","checkFromEl","value","exactLength","valueLength","minlength","maxlength","file","maxFileSize","fieldOptions","MIMEtype","accept","RegExp","filesList","from","files","forEach","exceedMaxFileSize","size","isAcceptedFileType","type","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","stringLength","max","isDate","matches","maxVal","split","reverse","join","min","minVal","pattern","fieldPattern","radio","fieldChecked","trim","requiredFrom","isValidValue","reqMoreEl","required","checkFieldValidity","validationErrors","Promise","resolve","isRequired","isReqFrom","isValidateIfFilled","functionsList","stopConditionFn","reduce","acc","promiseFn","then","res","dataNew","dataList","runFunctionsSequence","beforeValidation","dataObj","pop","fieldType","fieldValue","fieldAttributes","attributes","sort","a","b","attrValidations","attrValidationsResult","attr","attrName","isAttrValueWithFn","isAttrNameWithFn","extraValObj","unshift","item","extraVal","fieldErrors","rule","empty","isValid","checkFormValidity","fieldToSkip","focusOnRelated","fields","getValidateFormDefault","fieldsList","currentFieldName","currentFieldType","filter","getUniqueFields","map","obj2","list","areAllFieldsValid","fieldObj","Form","[object Object]","optionsObj","self","argsL","checkFormElem","formjs","options","constructor","cbFn","bind","noValidate","constructorFn","errorsObj","rulesObj","version"],"mappings":"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"}