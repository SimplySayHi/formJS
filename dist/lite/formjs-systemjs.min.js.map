{"version":3,"file":"formjs-systemjs.min.js","sources":["../../src/modules/version.js","../../src/modules/helpers/isNodeList.js","../../src/modules/helpers/isDOMNode.js","../../src/modules/helpers/checkFormEl.js","../../src/modules/helpers/isPlainObject.js","../../src/modules/helpers/mergeObjects.js","../../src/modules/helpers/dispatchCustomEvent.js","../../src/modules/helpers/fieldsStringSelector.js","../../src/modules/helpers/finalizeFieldPromise.js","../../src/modules/helpers/finalizeFormPromise.js","../../src/modules/helpers/getDateAsNumber.js","../../src/modules/helpers/getSplitChar.js","../../src/modules/helpers/getUniqueFields.js","../../src/modules/helpers/mergeValidateFieldDefault.js","../../src/modules/helpers/mergeValidateFormDefault.js","../../src/modules/helpers/toCamelCase.js","../../src/modules-lite/helpers/customEvents.js","../../src/modules/validationRules.js","../../src/modules/validationRules/date.js","../../src/modules/validationRules/email.js","../../src/modules/validationRules/number.js","../../src/modules/validationRules/checkbox.js","../../src/modules/validationRules/checks.js","../../src/modules/validationRules/equalTo.js","../../src/modules/validationRules/exactLength.js","../../src/modules/validationRules/file.js","../../src/modules/validationRules/length.js","../../src/modules/validationRules/max.js","../../src/modules/validationRules/maxlength.js","../../src/modules/validationRules/min.js","../../src/modules/validationRules/minlength.js","../../src/modules/validationRules/pattern.js","../../src/modules/validationRules/radio.js","../../src/modules/checkFieldValidity.js","../../src/modules/helpers/getJSONobjectFromFieldAttribute.js","../../src/modules/helpers/runFunctionsSequence.js","../../src/modules/isValid.js","../../src/modules/helpers/removeClass.js","../../src/index-lite.js","../../src/modules/checkFormValidity.js","../../src/modules-lite/options.js"],"sourcesContent":["\nexport const version = '5.2.0';\n","\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList );\n}\n","\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node );\n}\n","\nimport { isDOMNode } from './isDOMNode';\n\nexport const checkFormEl = form => {\n    let isString = typeof form,\n        isValidNodeSelector = isString === 'string' && isDOMNode(document.querySelector(form)),\n        isFormSelector = isValidNodeSelector && document.querySelector(form).tagName.toLowerCase() === 'form',\n        obj = {\n            result: isDOMNode(form) || isFormSelector,\n            $el: (isString === 'string' ? document.querySelector(form) : form)\n        };\n\n    return obj;\n}\n","\nexport const isPlainObject = object => {\n    return Object.prototype.toString.call( object ) === '[object Object]';\n}\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const mergeObjects = function( out = {} ){\n    Array.from(arguments).slice(1).filter(arg => !!arg).forEach(arg => {\n        Object.keys(arg).forEach(key => {\n            if( Array.isArray(arg[key]) ){\n                out[key] = (out[key] || []).concat( arg[key].slice(0) );\n            } else if( isPlainObject(arg[key]) ){\n                out[key] = mergeObjects((out[key] || {}), arg[key]);\n            } else {\n                // * STRING | NUMBER | BOOLEAN | FUNCTION\n                if( Array.isArray(out[key]) ){\n                    // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                    out[key].push(arg[key]);\n                } else {\n                    out[key] = arg[key];\n                }\n            }\n        });\n    });\n\n    return out;\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const dispatchCustomEvent = ( elem, eventName, eventOptions ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions);\n    const eventObj = new CustomEvent(eventName, eventOptions);\n    elem.dispatchEvent( eventObj );\n}\n","\nexport const fieldsStringSelector = 'input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"hidden\"]), select, textarea'\n","\nexport const finalizeFieldPromise = obj => {\n    if( obj.result ){\n        return Promise.resolve();\n    }\n    return Promise.reject(obj.errors);\n}\n","\nexport const finalizeFormPromise = obj => {\n    if( obj.result ){\n        return Promise.resolve(obj.fields);\n    }\n    return Promise.reject(obj.fields);\n}\n","\nimport { getSplitChar } from './getSplitChar';\n\nconst formatMap = {\n    'YYYY-MM-DD': function(dateArray){\n        return dateArray;\n    },\n    'MM-DD-YYYY': function(dateArray){\n        return [dateArray[2], dateArray[0], dateArray[1]];\n    },\n    'DD-MM-YYYY': function(dateArray){\n        return dateArray.reverse();\n    }\n};\n\nexport const getDateAsNumber = ( dateString, dateFormat ) => {\n    dateFormat = dateFormat || 'YYYY-MM-DD';\n    const splitChar = getSplitChar(dateString);\n\n    if( dateFormat.indexOf(splitChar) < 0 ){\n        return;\n    }\n\n    dateFormat = dateFormat.replace(/[^YMD]/g, '-');\n    dateString = dateString.split(splitChar);\n    dateString = formatMap[dateFormat](dateString).join('');\n    \n    return dateString;\n}\n","\nexport const getSplitChar = string => {\n    // MATCH ANY NON-DIGIT CHAR\n    const separator = string.match(/\\D/);\n    return (separator && separator.length > 0) ? separator[0] : null;\n}\n","\nexport const getUniqueFields = $nodeList => {\n\n    let currentFieldName = '',\n        currentFieldType = '';\n\n    return Array.from( $nodeList ).filter($field => {\n        const name = $field.name,\n              type = $field.type;\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false;\n        }\n        \n        if( !$field.matches('[data-required-from]') ){\n            currentFieldName = name;\n            currentFieldType = type;\n        }\n        return true;\n    });\n    \n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const mergeValidateFieldDefault = obj => {\n    return mergeObjects({}, { result: false, $field: null }, obj);\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const mergeValidateFormDefault = obj => {\n    return mergeObjects({}, { result: true, fields: [] }, obj);\n}\n","\nexport const toCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase(); });\n}\n","\nexport const customEvents = {\n    field: {\n        validation: 'fjs.field:validation'\n    },\n    form: {\n        destroy:    'fjs.form:destroy',\n        init:       'fjs.form:init',\n        validation: 'fjs.form:validation'\n    }\n}\n","\nimport { date }         from './validationRules/date';\nimport { email }        from './validationRules/email';\nimport { number }       from './validationRules/number';\n\nimport { checkbox }     from './validationRules/checkbox';\nimport { equalTo }      from './validationRules/equalTo';\nimport { exactLength }  from './validationRules/exactLength';\nimport { file }         from './validationRules/file';\nimport { length }       from './validationRules/length';\nimport { max }          from './validationRules/max';\nimport { maxlength }    from './validationRules/maxlength';\nimport { min }          from './validationRules/min';\nimport { minlength }    from './validationRules/minlength';\nimport { pattern }      from './validationRules/pattern';\nimport { radio }        from './validationRules/radio';\n\nexport const validationRules = {\n    date,\n    email,\n    number,\n\n    checkbox,\n    equalTo,\n    exactLength,\n    file,\n    length,\n    max,\n    maxlength,\n    min,\n    minlength,\n    pattern,\n    radio\n}\n","\n/*\n    DATE AS ISO 8601 DATE FORMAT:\n    YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n*/\n\nexport const date = function( string ){\n    return {\n        result: /^((((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13578]|1[02])[ \\/\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13456789]|1[012])[ \\/\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.]02[ \\/\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ \\/\\-.]02[ \\/\\-.]29))$/g.test( string )\n    };\n}\n","\n// https://regex101.com/r/cdlyJy/3\n\nexport const email = function( string ){\n    return {\n        result: /^[a-zA-Z_-]([\\w.-]?[a-zA-Z0-9])*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?){2,})+$/.test( string )\n    };\n}\n","\n/*\n    ALL NUMBERS ( INTEGERS AND FLOATING )\n    VALID NUMBERS: 123 | 123.456 | .123\n*/\n\nexport const number = function( string ){\n    return {\n        result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n    };\n}","\nimport { checks } from './checks';\n\nexport const checkbox = function( value, $field ){\n    const $dataChecks = $field.closest('form').querySelector('[name=\"' + $field.name + '\"][data-checks]');\n    return $dataChecks ? checks($dataChecks) : { result: $field.checked };\n}\n","\nexport const checks = function( $field ){\n    const attrValue = JSON.parse( $field.getAttribute('data-checks') ),\n          checkedLength = $field.closest('form').querySelectorAll('[name=\"' + $field.name + '\"]:checked').length,\n          isMinOk = checkedLength >= attrValue[0],\n          isMaxOk = checkedLength <= attrValue[1],\n          obj = { result: isMinOk && isMaxOk };\n\n    if( !obj.result ){\n        obj.errors = { checks: true };\n        if( !isMinOk ){ obj.errors.minChecks = true; }\n        if( !isMaxOk ){ obj.errors.maxChecks = true; }\n    }\n\n    return obj;\n}\n","\nexport const equalTo = function( value, $field ){\n    const $checkFrom = $field.closest('form').querySelector( '[name=\"' + $field.getAttribute('data-equal-to') + '\"]' );\n    return { result: value === $checkFrom.value };\n}\n","\nexport const exactLength = function( value, $field ){\n    const valueLength = value.length,\n          exactLength = $field.getAttribute('data-exact-length') * 1,\n          obj = { result: valueLength === exactLength };\n\n    if( !obj.result ){\n        obj.errors = {};\n        if( valueLength < exactLength ){ obj.errors.minlength = true; }\n        else { obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nexport const file = function( value, $field, fieldOptions ){\n    const maxFileSize = ($field.getAttribute('data-max-file-size') || fieldOptions.maxFileSize) * 1,\n          MIMEtype = $field.accept ? new RegExp($field.accept.replace( '*', '[^\\\\/,]+' )) : null,\n          filesList = Array.from($field.files),\n          obj = { result: true };\n\n    filesList.forEach(file => {\n        const exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize,\n              isAcceptedFileType = MIMEtype !== null ? MIMEtype.test(file.type) : true;\n\n        if( exceedMaxFileSize || !isAcceptedFileType ){\n            obj.result = false;\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {};\n            }\n            if( exceedMaxFileSize ){ obj.errors.maxFileSize = true; }\n            if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true; }\n\n        }\n    });\n\n    return obj;\n}\n","\nexport const length = function( value, $field ){\n    const valueL = value.length,\n          attrValue = JSON.parse( $field.getAttribute('data-length') ),\n          isMinlengthOk = valueL >= attrValue[0],\n          isMaxlengthOk = valueL <= attrValue[1],\n          obj = { result: isMinlengthOk && isMaxlengthOk };\n\n    if( !obj.result ){\n        obj.errors = {};\n        if( !isMinlengthOk ){ obj.errors.minlength = true; }\n        if( !isMaxlengthOk ){ obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const max = function( value, $field ){\n    let maxVal = $field.max;\n    const dateFormat = $field.getAttribute('data-date-format');\n    \n    if( $field.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat );\n        maxVal = maxVal.split('-').join('');\n    }\n\n    value = value * 1;\n    maxVal = maxVal * 1;\n    \n    return { result: value <= maxVal };\n}\n","\nexport const maxlength = function( value, $field ){\n    return { result: value.length <= $field.maxLength * 1 };\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const min = function( value, $field ){\n    let minVal = $field.min;\n    const dateFormat = $field.getAttribute('data-date-format');\n    \n    if( $field.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat );\n        minVal = minVal.split('-').join('');\n    }\n\n    value = value * 1;\n    minVal = minVal * 1;\n    \n    return { result: value >= minVal };\n}\n","\nexport const minlength = function( value, $field ){\n    return { result: value.length >= $field.minLength * 1 };\n}\n","\nexport const pattern = function( value, $field ){\n    return { result: new RegExp($field.pattern).test(value) };\n}\n","\nexport const radio = function( value, $field ){\n    const $fieldChecked = $field.closest('form').querySelector( '[name=\"'+ $field.name +'\"]:checked' ),\n          isValid = $fieldChecked !== null && $fieldChecked.value.trim().length > 0;\n\n    return { result: isValid };\n}\n","\nimport {    getJSONobjectFromFieldAttribute,\n            isDOMNode,\n            mergeObjects,\n            mergeValidateFieldDefault,\n            removeClass,\n            runFunctionsSequence\n        }           from './helpers';\nimport { isValid }  from './isValid';\n\nexport function checkFieldValidity( $field, fieldOptions, validationRules, validationErrors ){\n\n    if( !isDOMNode($field) ){\n        const obj = mergeValidateFieldDefault({$field});\n        return Promise.resolve(obj);\n    }\n\n    const $form = $field.closest('form'),\n          isValidValue = $field.value.trim().length > 0,\n          dataFieldOptions = getJSONobjectFromFieldAttribute( $field, 'data-field-options' );\n\n    fieldOptions = mergeObjects( fieldOptions, dataFieldOptions );\n\n    // HANDLE FIELD data-required-from WHEN CHANGING ITS RELATED RADIO\n    if( $field.type === 'radio' ){\n        const $checked = $field.checked ? $field : $form.querySelector('[name=\"'+ $field.name +'\"]:checked'),\n              reqMoreIsChecked = $checked && $checked.matches('[data-require-more]'),\n              $findReqMore = reqMoreIsChecked ? $checked : $form.querySelector('[data-require-more][name=\"'+ $field.name +'\"]'),\n              $findReqFrom = $findReqMore ? $form.querySelector('[data-required-from=\"#'+ $findReqMore.id +'\"]') : null;\n        \n        if( $checked && $findReqFrom ){\n            $findReqFrom.required = $findReqMore.required && $findReqMore.checked;\n            if( !reqMoreIsChecked ){\n                $findReqFrom.value = '';\n            } else if( fieldOptions.focusOnRelated ) {\n                $findReqFrom.focus();\n            }\n        }\n    }\n\n    // HANDLE FIELD data-require-more & data-required-from WHEN *-from IT'S FILLED\n    if( $field.matches('[data-required-from]') && isValidValue ){\n        const $reqMore = $form.querySelector( $field.getAttribute('data-required-from') );\n        $reqMore.checked = true;\n        $field.required = $reqMore.required;\n    }\n\n    const needsValidation = $field.required || ($field.matches('[data-validate-if-filled]') && isValidValue);\n\n    return runFunctionsSequence({\n            functionsList: fieldOptions.beforeValidation,\n            data: { $field, fieldOptions }\n        })\n        .then(data => {\n            const dataObj = data.pop();\n            return new Promise(resolve => {\n                if( !needsValidation ){\n                    dataObj.result = true;\n                }\n                resolve( needsValidation ? isValid($field, fieldOptions, validationRules, validationErrors) : dataObj );\n            });\n        })\n        .then(data => {\n            const $container = fieldOptions.questionContainer && data.$field.closest( fieldOptions.questionContainer );\n            if( $container ){\n                removeClass( $container, fieldOptions.cssClasses.pending );\n            }\n            return data;\n        })\n        ;\n\n}\n","\nexport const getJSONobjectFromFieldAttribute = ( fieldEl, attrName ) => {\n    const customAttrEl = fieldEl.closest('['+ attrName +']');\n    return (customAttrEl && JSON.parse(customAttrEl.getAttribute(attrName))) || {};\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const runFunctionsSequence = ( { functionsList = [], data = {}, stopConditionFn = () => false } = {} ) => {\n    return functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1]);\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res);\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result);\n                    return res;\n                });\n        });\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList);\n}\n","\nimport { mergeValidateFieldDefault, mergeObjects, toCamelCase } from './helpers';\n\nexport function isValid( $field, fieldOptions, validationRules, validationErrors ){\n\n    const fieldValue = $field.value,\n          obj = mergeValidateFieldDefault({result: fieldValue.trim().length > 0, $field}),\n          isRadioOrCheckbox = /^(radio|checkbox)$/.test($field.type),\n          hasSelectedInput = $field.closest('form').querySelectorAll('[name=\"'+ $field.name +'\"]:checked').length > 0;\n\n    if( (!isRadioOrCheckbox && !obj.result) || (isRadioOrCheckbox && !hasSelectedInput) ){\n        obj.result = false;\n        obj.errors = { empty: true };\n        return Promise.resolve(obj);\n    }\n\n    // COLLECT VALIDATION METHOD NAMES ( USED TO RUN VALIDATIONS AND GET ERRORS )\n    const validationMethods = Array.from($field.attributes).reduce((accList, attr) => {\n        const attrName = toCamelCase( attr.name.replace('data-', '') ),\n              attrValue = toCamelCase( attr.value ),\n              isAttrValueWithFn = (attrName === 'type' || attrName === 'subtype') && validationRules[attrValue],\n              isAttrNameWithFn = validationRules[attrName];\n\n        if( isAttrValueWithFn || isAttrNameWithFn ){\n            accList.push( isAttrValueWithFn ? attrValue : attrName );\n        }\n        return accList;\n    }, []);\n\n    return new Promise(resolve => {\n\n        // RUN VALIDATIONS\n        const validationsResult = validationMethods.reduce((accPromise, methodName) => {\n            return accPromise.then(accObj => {\n                return new Promise(resolveVal => {\n                    // RUN VALIDATION INSIDE A PROMISE IS USEFUL FOR ASYNC VALIDATIONS\n                    resolveVal( validationRules[methodName](fieldValue, $field, fieldOptions) );\n                }).then(valObj => {\n                    // ADD CUSTOM ERROR-KEY FOR EACH VALIDATION RULE\n                    if( !valObj.result ){\n                        const errorObj = {};\n                        if( typeof valObj.errors === 'undefined' || typeof valObj.errors[methodName] === 'undefined' ){\n                            errorObj[methodName] = true;\n                        }\n                        valObj.errors = mergeObjects({}, valObj.errors, errorObj);\n                    }\n                    valObj = valObj.result ? {} : valObj;\n                    return mergeObjects(accObj, valObj);\n                });\n            });\n        }, Promise.resolve(obj));\n        resolve(validationsResult);\n\n    }).then(data => {\n\n        // GET ERRORS\n        if( !data.result ){\n            data.errors = validationMethods.reduce((accObj, methodName) => {\n                const errors = (validationErrors[methodName] && validationErrors[methodName](fieldValue, $field)) || {};\n                return mergeObjects(accObj, errors);\n            }, data.errors);\n        }\n        return data;\n\n    });\n\n}\n","\nexport const removeClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.remove( className );\n    });\n}\n","\nimport { version }              from './modules/version';\nimport { \n    checkFormEl,\n    dispatchCustomEvent,\n    finalizeFieldPromise,\n    finalizeFormPromise,\n    isNodeList,\n    mergeObjects }              from './modules/helpers';\nimport { customEvents }         from './modules-lite/helpers/customEvents';\nimport { options }              from './modules-lite/options';\nimport { validationRules }      from './modules/validationRules';\nimport { checkFieldValidity }   from './modules/checkFieldValidity';\nimport { checkFormValidity }    from './modules/checkFormValidity';\n\nclass Form {\n\n    constructor( form, optionsObj ){\n        const argsL = arguments.length,\n              checkFormElem = checkFormEl(form);\n\n        if( argsL === 0 || (argsL > 0 && !form) ){\n            throw new Error('First argument \"form\" is missing or falsy!');\n        }\n        if( isNodeList(form) ){\n            throw new Error('First argument \"form\" must be a single DOM node or a form CSS selector, not a NodeList!');\n        }\n        if( !checkFormElem.result ){\n            throw new Error('First argument \"form\" is not a DOM node nor a form CSS selector!');\n        }\n\n        const self = this;\n\n        self.$form = checkFormElem.$el;\n        self.$form.formjs = self;\n        self.options = mergeObjects({}, Form.prototype.options, optionsObj);\n\n        // BINDING CONTEXT FOR FUTURE EXECUTION\n        self.options.fieldOptions.beforeValidation = self.options.fieldOptions.beforeValidation.map(cbFn => cbFn.bind(self));\n\n        self.$form.noValidate = true;\n\n        dispatchCustomEvent( self.$form, customEvents.form.init );\n    }\n\n    destroy(){\n        delete this.$form.formjs;\n        dispatchCustomEvent( this.$form, customEvents.form.destroy );\n    }\n\n    validateField( field, fieldOptions ){\n        const self = this;\n        const $field = typeof field === 'string' ? self.$form.querySelector(field) : field;\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions);\n        return checkFieldValidity($field, fieldOptions, self.validationRules, self.validationErrors)\n            .then(obj => {\n                dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } );\n                return obj;\n            })\n            .then(finalizeFieldPromise);\n    }\n\n    validateForm( fieldOptions ){\n        const self = this;\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions);\n        return checkFormValidity(self.$form, fieldOptions, self.validationRules, self.validationErrors)\n            .then(data => {\n                dispatchCustomEvent( self.$form, customEvents.form.validation, { detail: data } );\n                return data;\n            })\n            .then(finalizeFormPromise);\n    }\n    \n    static addValidationErrors( errorsObj ){\n        Form.prototype.validationErrors = mergeObjects({}, Form.prototype.validationErrors, errorsObj);\n    }\n\n    static addValidationRules( rulesObj ){\n        Form.prototype.validationRules = mergeObjects({}, Form.prototype.validationRules, rulesObj);\n    }\n    \n    static setOptions( optionsObj ){\n        Form.prototype.options = mergeObjects({}, Form.prototype.options, optionsObj);\n    }\n\n}\n\nForm.prototype.options = options;\nForm.prototype.validationErrors = {};\nForm.prototype.validationRules = validationRules;\nForm.prototype.version = version;\n\nexport default Form;\n","\nimport { fieldsStringSelector, getUniqueFields, mergeValidateFieldDefault, mergeValidateFormDefault, mergeObjects } from './helpers';\nimport { checkFieldValidity } from './checkFieldValidity';\n\nexport function checkFormValidity( $form, fieldOptions, validationRules, validationErrors, fieldToSkip = null ){\n\n    fieldOptions = mergeObjects( {}, fieldOptions, {focusOnRelated: false} );\n    const $fieldsList = getUniqueFields( $form.querySelectorAll(fieldsStringSelector) );\n\n    return Promise.all( $fieldsList.map($field => {\n\n        if( fieldToSkip && $field === fieldToSkip ){\n            const obj = mergeValidateFieldDefault({$field, result: true});\n            return Promise.resolve(obj);\n        }\n        return checkFieldValidity( $field, fieldOptions, validationRules, validationErrors );\n\n    }) ).then(fields => {\n\n        const areAllFieldsValid = fields.filter(fieldObj => !fieldObj.result).length === 0;\n        return mergeValidateFormDefault({result: areAllFieldsValid, fields});\n\n    });\n\n}\n","\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [],\n        focusOnRelated:         true,\n        maxFileSize:            10\n    }\n    \n}\n"],"names":["isNodeList","nodeList","NodeList","prototype","isPrototypeOf","isDOMNode","node","Element","checkFormEl","form","isString","isFormSelector","document","querySelector","tagName","toLowerCase","result","$el","isPlainObject","object","Object","toString","call","mergeObjects","out","Array","from","arguments","slice","filter","arg","forEach","keys","key","isArray","concat","push","dispatchCustomEvent","elem","eventName","eventOptions","bubbles","eventObj","CustomEvent","dispatchEvent","fieldsStringSelector","finalizeFieldPromise","obj","Promise","resolve","reject","errors","finalizeFormPromise","fields","formatMap","dateArray","reverse","getDateAsNumber","dateString","dateFormat","separator","splitChar","match","length","indexOf","replace","split","join","getUniqueFields","$nodeList","currentFieldName","currentFieldType","$field","name","type","matches","mergeValidateFieldDefault","mergeValidateFormDefault","toCamelCase","string","all","letter","toUpperCase","customEvents","validation","destroy","init","validationRules","date","test","email","number","checkbox","value","$dataChecks","closest","attrValue","JSON","parse","getAttribute","checkedLength","querySelectorAll","isMinOk","isMaxOk","checks","minChecks","maxChecks","checked","equalTo","exactLength","valueLength","minlength","maxlength","file","fieldOptions","maxFileSize","MIMEtype","accept","RegExp","filesList","files","exceedMaxFileSize","size","isAcceptedFileType","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","max","maxVal","maxLength","min","minVal","minLength","pattern","radio","$fieldChecked","trim","checkFieldValidity","validationErrors","attrName","customAttrEl","$form","isValidValue","dataFieldOptions","$checked","reqMoreIsChecked","$findReqMore","$findReqFrom","id","required","focusOnRelated","focus","$reqMore","needsValidation","functionsList","data","stopConditionFn","reduce","acc","promiseFn","then","res","dataNew","dataList","runFunctionsSequence","beforeValidation","dataObj","pop","fieldValue","isRadioOrCheckbox","hasSelectedInput","empty","validationMethods","attributes","accList","attr","isAttrValueWithFn","isAttrNameWithFn","accPromise","methodName","accObj","resolveVal","valObj","errorObj","isValid","element","$container","questionContainer","cssClasses","pending","className","classList","remove","Form","optionsObj","argsL","checkFormElem","Error","self","this","formjs","options","map","cbFn","bind","noValidate","errorsObj","rulesObj","field","detail","fieldToSkip","$fieldsList","areAllFieldsValid","fieldObj","checkFormValidity","version"],"mappings":"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"}