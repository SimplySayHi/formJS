{"version":3,"file":"formjs-systemjs.min.js","sources":["../../src/modules/version.js","../../src/modules/helpers/isNodeList.js","../../src/modules/helpers/isDOMNode.js","../../src/modules/helpers/checkFormEl.js","../../src/modules/helpers/mergeObjects.js","../../src/modules/helpers/fieldsStringSelector.js","../../src/modules/helpers/finalizeFieldPromise.js","../../src/modules/helpers/finalizeFormPromise.js","../../src/modules/helpers/getDateAsNumber.js","../../src/modules/helpers/getSplitChar.js","../../src/modules/helpers/getUniqueFields.js","../../src/modules/helpers/mergeValidateFieldDefault.js","../../src/modules/helpers/mergeValidateFormDefault.js","../../src/modules/helpers/toCamelCase.js","../../src/modules/validationRules.js","../../src/modules/validationRules/date.js","../../src/modules/validationRules/email.js","../../src/modules/validationRules/number.js","../../src/modules/validationRules/checkbox.js","../../src/modules/validationRules/checks.js","../../src/modules/validationRules/equalTo.js","../../src/modules/validationRules/exactLength.js","../../src/modules/validationRules/file.js","../../src/modules/validationRules/length.js","../../src/modules/validationRules/max.js","../../src/modules/validationRules/maxlength.js","../../src/modules/validationRules/min.js","../../src/modules/validationRules/minlength.js","../../src/modules/validationRules/pattern.js","../../src/modules/validationRules/radio.js","../../src/modules/checkFieldValidity.js","../../src/modules/helpers/runFunctionsSequence.js","../../src/modules/isValid.js","../../src/index-lite.js","../../src/modules-lite/constructor.js","../../src/modules/checkFormValidity.js","../../src/modules-lite/options.js"],"sourcesContent":["\nexport const version = '5.0.0';\n","\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList );\n}\n","\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node );\n}\n","\nimport { isDOMNode } from './isDOMNode';\n\nexport const checkFormEl = formEl => {\n    let isString = typeof formEl,\n        isValidNodeSelector = isString === 'string' && isDOMNode(document.querySelector(formEl)),\n        isFormSelector = isValidNodeSelector && document.querySelector(formEl).tagName.toLowerCase() === 'form',\n        obj = {\n            result: isDOMNode(formEl) || isFormSelector,\n            element: (isString === 'string' ? document.querySelector(formEl) : formEl)\n        };\n\n    return obj;\n}\n","\nexport const mergeObjects = function( out = {} ){\n    for(let i=1; i<arguments.length; i++){\n        let obj = arguments[i];\n\n        if(!obj){ continue; }\n\n        for(let key in obj){\n            let isArray = Object.prototype.toString.call(obj[key]) === \"[object Array]\";\n            let isObject = Object.prototype.toString.call(obj[key]) === \"[object Object]\";\n\n            // COPY ONLY ENUMERABLE PROPERTIES\n            if( obj.hasOwnProperty(key) ){\n                if( isArray ){\n\n                    if( typeof out[key] === 'undefined' ){\n                        out[key] = [];\n                    }\n                    out[key] = out[key].concat( obj[key].slice(0) );\n\n                } else if( isObject ){\n\n                    out[key] = mergeObjects(out[key], obj[key]);\n\n                } else {\n\n                    // * STRING | NUMBER | BOOLEAN | FUNCTION\n                    if( Array.isArray(out[key]) ){\n                        // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                        out[key].push(obj[key]);\n                    } else {\n                        out[key] = obj[key];\n                    }\n\n                }\n            }\n        }\n    }\n\n    return out;\n}\n","\nexport const fieldsStringSelector = 'input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"hidden\"]), select, textarea'\n","\nexport const finalizeFieldPromise = obj => {\n    if( obj.result ){\n        return Promise.resolve();\n    }\n    return Promise.reject(obj.errors);\n}\n","\nexport const finalizeFormPromise = obj => {\n    if( obj.result ){\n        return Promise.resolve(obj.fields);\n    }\n    return Promise.reject(obj.fields);\n}\n","\nimport { getSplitChar } from './getSplitChar';\n\nconst formatMap = {\n    'YYYY-MM-DD': function(dateArray){\n        return dateArray;\n    },\n    'MM-DD-YYYY': function(dateArray){\n        return [dateArray[2], dateArray[0], dateArray[1]];\n    },\n    'DD-MM-YYYY': function(dateArray){\n        return dateArray.reverse();\n    }\n};\n\nexport const getDateAsNumber = ( dateString, dateFormat ) => {\n    dateFormat = dateFormat || 'YYYY-MM-DD';\n    const splitChar = getSplitChar(dateString);\n\n    if( dateFormat.indexOf(splitChar) < 0 ){\n        return;\n    }\n\n    dateFormat = dateFormat.replace(/[^YMD]/g, '-');\n    dateString = dateString.split(splitChar);\n    dateString = formatMap[dateFormat](dateString).join('');\n    \n    return dateString;\n}\n","\nexport const getSplitChar = string => {\n    // MATCH ANY NON-DIGIT CHAR\n    const separator = string.match(/\\D/);\n    return (separator && separator.length > 0) ? separator[0] : null;\n}\n","\nexport const getUniqueFields = nodeList => {\n\n    let currentFieldName = '',\n        currentFieldType = '';\n\n    return Array.from( nodeList ).filter(fieldEl => {\n        const name = fieldEl.name,\n              type = fieldEl.type;\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false;\n        }\n        \n        if( !fieldEl.matches('[data-required-from]') ){\n            currentFieldName = name;\n            currentFieldType = type;\n        }\n        return true;\n    });\n    \n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const mergeValidateFieldDefault = obj => {\n    return mergeObjects({}, { result: false, fieldEl: null }, obj);\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const mergeValidateFormDefault = obj => {\n    return mergeObjects({}, { result: true, fields: [] }, obj);\n}\n","\nexport const toCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase(); });\n}\n","\nimport { date }         from './validationRules/date';\nimport { email }        from './validationRules/email';\nimport { number }       from './validationRules/number';\n\nimport { checkbox }     from './validationRules/checkbox';\nimport { equalTo }      from './validationRules/equalTo';\nimport { exactLength }  from './validationRules/exactLength';\nimport { file }         from './validationRules/file';\nimport { length }       from './validationRules/length';\nimport { max }          from './validationRules/max';\nimport { maxlength }    from './validationRules/maxlength';\nimport { min }          from './validationRules/min';\nimport { minlength }    from './validationRules/minlength';\nimport { pattern }      from './validationRules/pattern';\nimport { radio }        from './validationRules/radio';\n\nexport const validationRules = {\n    date,\n    email,\n    number,\n\n    checkbox,\n    equalTo,\n    exactLength,\n    file,\n    length,\n    max,\n    maxlength,\n    min,\n    minlength,\n    pattern,\n    radio\n}\n","\n/*\n    DATE AS ISO 8601 DATE FORMAT:\n    YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n*/\n\nexport const date = function( string ){\n    return {\n        result: /^((((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13578]|1[02])[ \\/\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13456789]|1[012])[ \\/\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.]02[ \\/\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ \\/\\-.]02[ \\/\\-.]29))$/g.test( string )\n    };\n}\n","\n// https://regex101.com/r/cdlyJy/3\n\nexport const email = function( string ){\n    return {\n        result: /^[a-zA-Z_-]([\\w.-]?[a-zA-Z0-9])*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?){2,})+$/.test( string )\n    };\n}\n","\n/*\n    ALL NUMBERS ( INTEGERS AND FLOATING )\n    VALID NUMBERS: 123 | 123.456 | .123\n*/\n\nexport const number = function( string ){\n    return {\n        result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n    };\n}","\nimport { checks } from './checks';\n\nexport const checkbox = function( value, fieldEl ){\n    const dataChecksEl = fieldEl.closest('form').querySelector('[name=\"' + fieldEl.name + '\"][data-checks]');\n    return dataChecksEl ? checks(dataChecksEl) : { result: fieldEl.checked };\n}\n","\nexport const checks = function( fieldEl ){\n    const attrValue = JSON.parse( fieldEl.getAttribute('data-checks') ),\n          checkedElLength = fieldEl.closest('form').querySelectorAll('[name=\"' + fieldEl.name + '\"]:checked').length,\n          isMinOk = checkedElLength >= attrValue[0],\n          isMaxOk = checkedElLength <= attrValue[1],\n          obj = { result: isMinOk && isMaxOk };\n\n    if( !obj.result ){\n        obj.errors = { checks: true };\n        if( !isMinOk ){ obj.errors.minChecks = true; }\n        if( !isMaxOk ){ obj.errors.maxChecks = true; }\n    }\n\n    return obj;\n}\n","\nexport const equalTo = function( value, fieldEl ){\n    const checkFromEl = fieldEl.closest('form').querySelector( '[name=\"' + fieldEl.getAttribute('data-equal-to') + '\"]' );\n    return { result: value === checkFromEl.value };\n}\n","\nexport const exactLength = function( value, fieldEl ){\n    const valueLength = value.length,\n          exactLength = fieldEl.getAttribute('data-exact-length') * 1,\n          obj = { result: valueLength === exactLength };\n\n    if( !obj.result ){\n        obj.errors = {};\n        if( valueLength < exactLength ){ obj.errors.minlength = true; }\n        else { obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nexport const file = function( value, fieldEl ){\n    const maxFileSize = (fieldEl.getAttribute('data-max-file-size') || 0) * 1,\n          MIMEtype = fieldEl.accept ? new RegExp(fieldEl.accept.replace( '*', '[^\\\\/,]+' )) : null,\n          filesList = Array.from(fieldEl.files),\n          obj = { result: true };\n\n    filesList.forEach(file => {\n        const exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize,\n              isAcceptedFileType = MIMEtype !== null ? MIMEtype.test(file.type) : true;\n\n        if( exceedMaxFileSize || !isAcceptedFileType ){\n            obj.result = false;\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {};\n            }\n            if( exceedMaxFileSize ){ obj.errors.maxFileSize = true; }\n            if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true; }\n\n        }\n    });\n\n    return obj;\n}\n","\nexport const length = function( value, fieldEl ){\n    const valueL = value.length,\n          attrValue = JSON.parse( fieldEl.getAttribute('data-length') ),\n          isMinlengthOk = valueL >= attrValue[0],\n          isMaxlengthOk = valueL <= attrValue[1],\n          obj = { result: isMinlengthOk && isMaxlengthOk };\n\n    if( !obj.result ){\n        obj.errors = {};\n        if( !isMinlengthOk ){ obj.errors.minlength = true; }\n        if( !isMaxlengthOk ){ obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const max = function( value, fieldEl ){\n    let maxVal = fieldEl.max;\n    const dateFormat = fieldEl.getAttribute('data-date-format');\n    \n    if( fieldEl.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat );\n        maxVal = maxVal.split('-').join('');\n    }\n\n    value = value * 1;\n    maxVal = maxVal * 1;\n    \n    return { result: value <= maxVal };\n}\n","\nexport const maxlength = function( value, fieldEl ){\n    return { result: value.length <= fieldEl.maxLength * 1 };\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const min = function( value, fieldEl ){\n    let minVal = fieldEl.min;\n    const dateFormat = fieldEl.getAttribute('data-date-format');\n    \n    if( fieldEl.type === 'date' || fieldEl.getAttribute('data-date-format') ){\n        value = getDateAsNumber( value, dateFormat );\n        minVal = minVal.split('-').join('');\n    }\n\n    value = value * 1;\n    minVal = minVal * 1;\n    \n    return { result: value >= minVal };\n}\n","\nexport const minlength = function( value, fieldEl ){\n    return { result: value.length >= fieldEl.minLength * 1 };\n}\n","\nexport const pattern = function( value, fieldEl ){\n    return { result: new RegExp(fieldEl.pattern).test(value) };\n}\n","\nexport const radio = function( value, fieldEl ){\n    const fieldChecked = fieldEl.closest('form').querySelector( '[name=\"'+ fieldEl.name +'\"]:checked' ),\n          isValid = fieldChecked !== null && fieldChecked.value.trim().length > 0;\n\n    return { result: isValid };\n}\n","\nimport { mergeValidateFieldDefault, isDOMNode, runFunctionsSequence } from './helpers';\nimport { isValid } from './isValid';\n\nexport function checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    if( !isDOMNode(fieldEl) ){\n        const obj = mergeValidateFieldDefault({fieldEl});\n        return Promise.resolve(obj);\n    }\n\n    const formEl = fieldEl.closest('form'),\n          isValidValue = fieldEl.value.trim().length > 0;\n\n    // HANDLE FIELD data-required-from WHEN CHANGING ITS RELATED RADIO\n    if( fieldEl.type === 'radio' ){\n        const checkedEl = fieldEl.checked ? fieldEl : formEl.querySelector('[name=\"'+ fieldEl.name +'\"]:checked'),\n              reqMoreIsChecked = checkedEl && checkedEl.matches('[data-require-more]'),\n              findReqMoreEl = reqMoreIsChecked ? checkedEl : formEl.querySelector('[data-require-more][name=\"'+ fieldEl.name +'\"]'),\n              findReqFromEl = findReqMoreEl ? formEl.querySelector('[data-required-from=\"#'+ findReqMoreEl.id +'\"]') : null;\n        \n        if( checkedEl && findReqFromEl ){\n            findReqFromEl.required = findReqMoreEl.required && findReqMoreEl.checked;\n            if( !reqMoreIsChecked ){\n                findReqFromEl.value = '';\n            } else if( fieldOptions.focusOnRelated ) {\n                findReqFromEl.focus();\n            }\n        }\n    }\n\n    // HANDLE FIELD data-require-more & data-required-from WHEN *-from IT'S FILLED\n    if( fieldEl.matches('[data-required-from]') && isValidValue ){\n        const reqMoreEl = formEl.querySelector( fieldEl.getAttribute('data-required-from') );\n        reqMoreEl.checked = true;\n        fieldEl.required = reqMoreEl.required;\n    }\n\n    const needsValidation = fieldEl.required || (fieldEl.matches('[data-validate-if-filled]') && isValidValue);\n\n    return runFunctionsSequence({\n            functionsList: fieldOptions.beforeValidation,\n            data: {fieldEl}\n        })\n        .then(data => {\n            const dataObj = data.pop();\n            return new Promise(resolve => {\n                if( !needsValidation ){\n                    dataObj.result = true;\n                }\n                resolve( needsValidation ? isValid(fieldEl, validationRules, validationErrors) : dataObj );\n            });\n        });\n\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const runFunctionsSequence = ( { functionsList = [], data = {}, stopConditionFn = () => false } = {} ) => {\n    return functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1]);\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res);\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result);\n                    return res;\n                });\n        });\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList);\n}\n","\nimport { mergeValidateFieldDefault, mergeObjects, toCamelCase } from './helpers';\n\nexport function isValid( fieldEl, validationRules, validationErrors ){\n\n    const fieldValue = fieldEl.value,\n          obj = mergeValidateFieldDefault({result: fieldValue.trim().length > 0, fieldEl}),\n          isRadioOrCheckbox = /^(radio|checkbox)$/.test(fieldEl.type),\n          hasSelectedInput = fieldEl.closest('form').querySelectorAll('[name=\"'+ fieldEl.name +'\"]:checked').length > 0;\n\n    if( (!isRadioOrCheckbox && !obj.result) || (isRadioOrCheckbox && !hasSelectedInput) ){\n        obj.result = false;\n        obj.errors = { empty: true };\n        return Promise.resolve(obj);\n    }\n\n    // COLLECT VALIDATION METHOD NAMES ( USED TO RUN VALIDATIONS AND GET ERRORS )\n    const validationMethods = Array.from(fieldEl.attributes).reduce((accList, attr) => {\n        const attrName = toCamelCase( attr.name.replace('data-', '') ),\n              attrValue = toCamelCase( attr.value ),\n              isAttrValueWithFn = (attrName === 'type' || attrName === 'subtype') && validationRules[attrValue],\n              isAttrNameWithFn = validationRules[attrName];\n\n        if( isAttrValueWithFn || isAttrNameWithFn ){\n            accList.push( isAttrValueWithFn ? attrValue : attrName );\n        }\n        return accList;\n    }, []);\n\n    return new Promise(resolve => {\n\n        // RUN VALIDATIONS\n        const validationsResult = validationMethods.reduce((accPromise, methodName) => {\n            return accPromise.then(accObj => {\n                return new Promise(resolveVal => {\n                    // RUN VALIDATION INSIDE A PROMISE IS USEFUL FOR ASYNC VALIDATIONS\n                    resolveVal( validationRules[methodName](fieldValue, fieldEl) );\n                }).then(valObj => {\n                    // ADD CUSTOM ERROR-KEY FOR EACH VALIDATION RULE\n                    if( !valObj.result ){\n                        const errorObj = {};\n                        if( typeof valObj.errors === 'undefined' || typeof valObj.errors[methodName] === 'undefined' ){\n                            errorObj[methodName] = true;\n                        }\n                        valObj.errors = mergeObjects({}, valObj.errors, errorObj);\n                    }\n                    valObj = valObj.result ? {} : valObj;\n                    return mergeObjects(accObj, valObj);\n                });\n            });\n        }, Promise.resolve(obj));\n        resolve(validationsResult);\n\n    }).then(data => {\n\n        // GET ERRORS\n        if( !data.result ){\n            data.errors = validationMethods.reduce((accObj, methodName) => {\n                const errors = (validationErrors[methodName] && validationErrors[methodName](fieldValue, fieldEl)) || {};\n                return mergeObjects(accObj, errors);\n            }, data.errors);\n        }\n        return data;\n\n    });\n\n}\n","\nimport { version }              from './modules/version';\nimport { finalizeFieldPromise, finalizeFormPromise, mergeObjects } from './modules/helpers';\nimport { options }              from './modules-lite/options';\nimport { validationRules }      from './modules/validationRules';\nimport { constructorFn }        from './modules-lite/constructor';\nimport { checkFieldValidity }   from './modules/checkFieldValidity';\nimport { checkFormValidity }    from './modules/checkFormValidity';\n\nclass Form {\n\n    constructor( formEl, optionsObj ){\n        constructorFn(this, formEl, optionsObj);\n    }\n\n    destroy(){\n        delete this.formEl.formjs;\n    }\n\n    validateField( fieldEl, fieldOptions ){\n        fieldEl = (typeof fieldEl === 'string' ? this.formEl.querySelector(fieldEl) : fieldEl);\n        fieldOptions = mergeObjects({}, this.options.fieldOptions, fieldOptions);\n        return checkFieldValidity(fieldEl, fieldOptions, this.validationRules, this.validationErrors)\n            .then(finalizeFieldPromise);\n    }\n\n    validateForm( fieldOptions ){\n        fieldOptions = mergeObjects({}, this.options.fieldOptions, fieldOptions);\n        return checkFormValidity(this.formEl, fieldOptions, this.validationRules, this.validationErrors)\n            .then(finalizeFormPromise);\n    }\n    \n    static addValidationErrors( errorsObj ){\n        this.prototype.validationErrors = mergeObjects({}, this.prototype.validationErrors, errorsObj);\n    }\n\n    static addValidationRules( rulesObj ){\n        this.prototype.validationRules = mergeObjects({}, this.prototype.validationRules, rulesObj);\n    }\n    \n    static setOptions( optionsObj ){\n        this.prototype.options = mergeObjects({}, this.prototype.options, optionsObj);\n    }\n\n}\n\nForm.prototype.options = options;\nForm.prototype.validationErrors = {};\nForm.prototype.validationRules = validationRules;\nForm.prototype.version = version;\n\nexport default Form;\n","\nimport { checkFormEl, isNodeList, mergeObjects } from '../modules/helpers';\n\nexport function constructorFn( self, formEl, optionsObj ){\n\n    const argsL = arguments.length,\n          checkFormElem = checkFormEl(formEl);\n\n    if( argsL === 0 || (argsL > 0 && !formEl) ){\n        throw new Error('First argument \"formEl\" is missing or falsy!');\n    }\n    if( isNodeList(formEl) ){\n        throw new Error('First argument \"formEl\" must be a single DOM node or a form CSS selector, not a NodeList!');\n    }\n    if( !checkFormElem.result ){\n        throw new Error('First argument \"formEl\" is not a DOM node nor a form CSS selector!');\n    }\n\n    self.formEl = checkFormElem.element;\n    self.formEl.formjs = self;\n    self.options = mergeObjects({}, self.constructor.prototype.options, optionsObj);\n\n    // BINDING CONTEXT FOR FUTURE EXECUTION\n    self.options.fieldOptions.beforeValidation = self.options.fieldOptions.beforeValidation.map(cbFn => cbFn.bind(self));\n\n    self.formEl.noValidate = true;\n    \n}\n","\nimport { fieldsStringSelector, getUniqueFields, mergeValidateFieldDefault, mergeValidateFormDefault, mergeObjects } from './helpers';\nimport { checkFieldValidity } from './checkFieldValidity';\n\nexport function checkFormValidity( formEl, fieldOptions, validationRules, validationErrors, fieldToSkip = null ){\n\n    fieldOptions = mergeObjects( {}, fieldOptions, {focusOnRelated: false} );\n    const fieldsList = getUniqueFields( formEl.querySelectorAll(fieldsStringSelector) );\n\n    return Promise.all( fieldsList.map(fieldEl => {\n\n        if( fieldToSkip && fieldEl === fieldToSkip ){\n            const obj = mergeValidateFieldDefault({fieldEl, result: true});\n            return Promise.resolve(obj);\n        }\n        return checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors );\n\n    }) ).then(fields => {\n\n        const areAllFieldsValid = fields.filter(fieldObj => !fieldObj.result).length === 0;\n        return mergeValidateFormDefault({result: areAllFieldsValid, fields});\n\n    });\n\n}\n","\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [],\n        focusOnRelated:         true\n    }\n    \n}\n"],"names":["isNodeList","nodeList","NodeList","prototype","isPrototypeOf","isDOMNode","node","Element","checkFormEl","formEl","isString","isFormSelector","document","querySelector","tagName","toLowerCase","result","element","mergeObjects","out","i","arguments","length","obj","key","isArray","Object","toString","call","isObject","hasOwnProperty","concat","slice","Array","push","fieldsStringSelector","finalizeFieldPromise","Promise","resolve","reject","errors","finalizeFormPromise","fields","formatMap","dateArray","reverse","getDateAsNumber","dateString","dateFormat","separator","splitChar","match","indexOf","replace","split","join","getUniqueFields","currentFieldName","currentFieldType","from","filter","fieldEl","name","type","matches","mergeValidateFieldDefault","mergeValidateFormDefault","toCamelCase","string","all","letter","toUpperCase","validationRules","date","test","email","number","checkbox","value","dataChecksEl","closest","attrValue","JSON","parse","getAttribute","checkedElLength","querySelectorAll","isMinOk","isMaxOk","checks","minChecks","maxChecks","checked","equalTo","exactLength","valueLength","minlength","maxlength","file","maxFileSize","MIMEtype","accept","RegExp","filesList","files","forEach","exceedMaxFileSize","size","isAcceptedFileType","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","max","maxVal","maxLength","min","minVal","minLength","pattern","radio","fieldChecked","trim","checkFieldValidity","fieldOptions","validationErrors","isValidValue","checkedEl","reqMoreIsChecked","findReqMoreEl","findReqFromEl","id","required","focusOnRelated","focus","reqMoreEl","needsValidation","functionsList","data","stopConditionFn","reduce","acc","promiseFn","then","res","dataNew","dataList","runFunctionsSequence","beforeValidation","dataObj","pop","fieldValue","isRadioOrCheckbox","hasSelectedInput","empty","validationMethods","attributes","accList","attr","attrName","isAttrValueWithFn","isAttrNameWithFn","accPromise","methodName","accObj","resolveVal","valObj","errorObj","isValid","Form","optionsObj","self","argsL","checkFormElem","Error","formjs","options","constructor","map","cbFn","bind","noValidate","constructorFn","this","errorsObj","rulesObj","fieldToSkip","fieldsList","areAllFieldsValid","fieldObj","checkFormValidity","version"],"mappings":"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"}