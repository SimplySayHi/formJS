{"version":3,"file":"formjs-systemjs.min.js","sources":["../../src/modules/version.js","../../src/modules/helpers/isNodeList.js","../../src/modules/helpers/isDOMNode.js","../../src/modules/helpers/checkFormEl.js","../../src/modules/helpers/mergeObjects.js","../../src/modules/helpers/fieldsStringSelector.js","../../src/modules/helpers/getDateAsNumber.js","../../src/modules/helpers/getSplitChar.js","../../src/modules/helpers/getUniqueFields.js","../../src/modules/helpers/getValidateFieldDefault.js","../../src/modules/helpers/getValidateFormDefault.js","../../src/modules/helpers/toCamelCase.js","../../src/modules/validationRules.js","../../src/modules/validationRules/date.js","../../src/modules/validationRules/email.js","../../src/modules/validationRules/number.js","../../src/modules/validationRules/checks.js","../../src/modules/validationRulesAttributes.js","../../src/modules/validationRules/checkbox.js","../../src/modules/validationRules/equalTo.js","../../src/modules/validationRules/exactLength.js","../../src/modules/validationRules/file.js","../../src/modules/validationRules/length.js","../../src/modules/validationRules/max.js","../../src/modules/validationRules/maxlength.js","../../src/modules/validationRules/min.js","../../src/modules/validationRules/minlength.js","../../src/modules/validationRules/pattern.js","../../src/modules/validationRules/radio.js","../../src/modules/validationRules/requiredFrom.js","../../src/modules/checkFieldValidity.js","../../src/modules/helpers/runFunctionsSequence.js","../../src/modules/isValid.js","../../src/index-lite.js","../../src/modules-lite/constructor.js","../../src/modules/checkFormValidity.js","../../src/modules-lite/options.js"],"sourcesContent":["\nexport const version = '4.1.0';\n","\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList );\n}\n","\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node );\n}\n","\nimport { isDOMNode } from './isDOMNode';\n\nexport const checkFormEl = formEl => {\n    let isString = typeof formEl,\n        isValidNodeSelector = isString === 'string' && isDOMNode(document.querySelector(formEl)),\n        isFormSelector = isValidNodeSelector && document.querySelector(formEl).tagName.toLowerCase() === 'form',\n        obj = {\n            result: isDOMNode(formEl) || isFormSelector,\n            element: (isString === 'string' ? document.querySelector(formEl) : formEl)\n        };\n\n    return obj;\n}\n","\nexport const mergeObjects = function( out = {} ){\n    for(let i=1; i<arguments.length; i++){\n        let obj = arguments[i];\n\n        if(!obj){ continue; }\n\n        for(let key in obj){\n            let isArray = Object.prototype.toString.call(obj[key]) === \"[object Array]\";\n            let isObject = Object.prototype.toString.call(obj[key]) === \"[object Object]\";\n\n            // COPY ONLY ENUMERABLE PROPERTIES\n            if( obj.hasOwnProperty(key) ){\n                if( isArray ){\n\n                    if( typeof out[key] === 'undefined' ){\n                        out[key] = [];\n                    }\n                    out[key] = out[key].concat( obj[key].slice(0) );\n\n                } else if( isObject ){\n\n                    out[key] = mergeObjects(out[key], obj[key]);\n\n                } else {\n\n                    // * STRING | NUMBER | BOOLEAN | FUNCTION\n                    if( Array.isArray(out[key]) ){\n                        // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                        out[key].push(obj[key]);\n                    } else {\n                        out[key] = obj[key];\n                    }\n\n                }\n            }\n        }\n    }\n\n    return out;\n}\n","\nexport const fieldsStringSelector = 'input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"hidden\"]), select, textarea'\n","\nimport { getSplitChar } from './getSplitChar';\n\nconst formatMap = {\n    'YYYY-MM-DD': function(dateArray){\n        return dateArray;\n    },\n    'MM-DD-YYYY': function(dateArray){\n        return [dateArray[2], dateArray[0], dateArray[1]];\n    },\n    'DD-MM-YYYY': function(dateArray){\n        return dateArray.reverse();\n    }\n};\n\nexport const getDateAsNumber = ( dateString, dateFormat ) => {\n    dateFormat = dateFormat || 'YYYY-MM-DD';\n    const splitChar = getSplitChar(dateString);\n\n    if( dateFormat.indexOf(splitChar) < 0 ){\n        return;\n    }\n\n    dateFormat = dateFormat.replace(/[^YMD]/g, '-');\n    dateString = dateString.split(splitChar);\n    dateString = formatMap[dateFormat](dateString).join('');\n    \n    return dateString;\n}\n","\nexport const getSplitChar = string => {\n    // MATCH ANY NON-DIGIT CHAR\n    const separator = string.match(/\\D/);\n    return (separator && separator.length > 0) ? separator[0] : null;\n}\n","\nexport const getUniqueFields = nodeList => {\n\n    let currentFieldName = '',\n        currentFieldType = '';\n\n    return Array.from( nodeList ).filter(fieldEl => {\n        const name = fieldEl.name,\n              type = fieldEl.type;\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false;\n        }\n        \n        if( !fieldEl.matches('[data-required-from]') ){\n            currentFieldName = name;\n            currentFieldType = type;\n        }\n        return true;\n    });\n    \n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const getValidateFieldDefault = obj => {\n    return mergeObjects({}, { result: false, fieldEl: null }, obj);\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const getValidateFormDefault = obj => {\n    return mergeObjects({}, { result: true, fields: [] }, obj);\n}\n","\nexport const toCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase(); });\n}\n","\nimport { date }         from './validationRules/date';\nimport { email }        from './validationRules/email';\nimport { number }       from './validationRules/number';\n\nexport const validationRules = {\n    date,\n    email,\n    number\n}\n","\n/*\n    DATE AS ISO 8601 DATE FORMAT:\n    YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n*/\n\nexport const date = function( string ){\n    let date = /^((((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13578]|1[02])[ \\/\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13456789]|1[012])[ \\/\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.]02[ \\/\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ \\/\\-.]02[ \\/\\-.]29))$/g.test( string ),\n        obj = {\n            result: date\n        };\n\n    return obj;\n}\n","\n// https://regex101.com/r/cdlyJy/3\n\nexport const email = function( string ){\n    let obj = {\n        result: /^[a-zA-Z_-]([\\w.-]?[a-zA-Z0-9])*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?){2,})+$/.test( string )\n    };\n\n    return obj;\n}\n","\n/*\n    ALL NUMBERS ( INTEGERS AND FLOATING )\n    VALID NUMBERS: 123 | 123.456 | .123\n*/\n\nexport const number = function( string ){\n    let obj = {\n        result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n    };\n\n    return obj;\n}","\nexport const checks = function( fieldEl ){\n    let attrValue = JSON.parse( fieldEl.getAttribute('data-checks') ),\n        checkedElLength = fieldEl.closest('form').querySelectorAll('[name=\"' + fieldEl.name + '\"]:checked').length,\n        isMinOk = checkedElLength >= attrValue[0],\n        isMaxOk = checkedElLength <= attrValue[1],\n        obj = { result: isMinOk && isMaxOk };\n\n    if( !obj.result ){\n        obj.errors = { checks: true };\n        if( !isMinOk ){ obj.errors.minChecks = true; }\n        if( !isMaxOk ){ obj.errors.maxChecks = true; }\n    }\n\n    return obj;\n}\n","\nimport { checkbox }     from './validationRules/checkbox';\nimport { equalTo }      from './validationRules/equalTo';\nimport { exactLength }  from './validationRules/exactLength';\nimport { file }         from './validationRules/file';\nimport { length }       from './validationRules/length';\nimport { max }          from './validationRules/max';\nimport { maxlength }    from './validationRules/maxlength';\nimport { min }          from './validationRules/min';\nimport { minlength }    from './validationRules/minlength';\nimport { pattern }      from './validationRules/pattern';\nimport { radio }        from './validationRules/radio';\nimport { requiredFrom } from './validationRules/requiredFrom';\n\nexport const validationRulesAttributes = {\n    checkbox,\n    equalTo,\n    exactLength,\n    file,\n    length,\n    max,\n    maxlength,\n    min,\n    minlength,\n    pattern,\n    radio,\n    requiredFrom,\n}\n","\nimport { checks } from './checks';\n\nexport const checkbox = function( fieldEl ){\n    let dataChecksEl = fieldEl.closest('form').querySelector('[name=\"' + fieldEl.name + '\"][data-checks]');\n    return dataChecksEl ? checks(dataChecksEl): {result: fieldEl.checked};\n}\n","\nexport const equalTo = function( fieldEl ){\n    let checkFromEl = fieldEl.closest('form').querySelector( '[name=\"' + fieldEl.getAttribute('data-equal-to') + '\"]' ),\n        obj = { result: fieldEl.value === checkFromEl.value };\n\n    if( !obj.result ){\n        obj.errors = { equalTo: true };\n    }\n\n    return obj;\n}\n","\nexport const exactLength = function( fieldEl ){\n    let valueLength = fieldEl.value.length,\n        exactLength = fieldEl.getAttribute('data-exact-length') * 1,\n        obj = { result: valueLength === exactLength };\n\n    if( !obj.result ){\n        obj.errors = { exactLength: true };\n        if( valueLength < exactLength ){ obj.errors.minlength = true; }\n        else { obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nexport const file = function( fieldEl, fieldOptions ){\n    let maxFileSize = (fieldEl.getAttribute('data-max-file-size') || fieldOptions.maxFileSize) * 1,\n        MIMEtype = (fieldEl.accept ? new RegExp(fieldEl.accept.replace( '*', '[^\\\\/,]+' )) : null),\n        filesList = Array.from(fieldEl.files),\n        obj = { result: true };\n\n    filesList.forEach(function( file ){\n        let exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize,\n            isAcceptedFileType = (MIMEtype !== null ? MIMEtype.test(file.type) : true);\n\n        if( exceedMaxFileSize || !isAcceptedFileType ){\n            obj.result = false;\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {};\n            }\n            obj.errors.file = true;\n            if( exceedMaxFileSize ){ obj.errors.maxFileSize = true; }\n            if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true; }\n\n        }\n    });\n\n    return obj;\n}\n","\nexport const length = function( fieldEl ){\n    let valueL = fieldEl.value.length,\n        attrValue = JSON.parse( fieldEl.getAttribute('data-length') ),\n        isMinlengthOk = valueL >= attrValue[0],\n        isMaxlengthOk = valueL <= attrValue[1],\n        obj = { result: isMinlengthOk && isMaxlengthOk };\n\n    if( !obj.result ){\n        obj.errors = { stringLength: true };\n        if( !isMinlengthOk ){ obj.errors.minlength = true; }\n        if( !isMaxlengthOk ){ obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const max = function( fieldEl ){\n    let value = fieldEl.value,\n        maxVal = fieldEl.max,\n        dateFormat = fieldEl.getAttribute('data-date-format');\n    \n    if( fieldEl.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat );\n        maxVal = maxVal.split('-').join('');\n    }\n\n    value = value * 1;\n    maxVal = maxVal * 1;\n\n    let obj = { result: value <= maxVal };\n\n    if( !obj.result ){\n        obj.errors = { max: true };\n    }\n    \n    return obj;\n}\n","\nexport const maxlength = function( fieldEl ){\n    const obj = { result: fieldEl.value.length <= fieldEl.maxLength * 1 };\n\n    if( !obj.result ){\n        obj.errors = { maxlength: true };\n    }\n\n    return obj;\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const min = function( fieldEl ){\n    let value = fieldEl.value,\n        minVal = fieldEl.min,\n        dateFormat = fieldEl.getAttribute('data-date-format');\n    \n    if( fieldEl.type === 'date' || fieldEl.getAttribute('data-date-format') ){\n        value = getDateAsNumber( value, dateFormat );\n        minVal = minVal.split('-').join('');\n    }\n\n    value = value * 1;\n    minVal = minVal * 1;\n\n    let obj = { result: value >= minVal };\n\n    if( !obj.result ){\n        obj.errors = { min: true };\n    }\n    \n    return obj;\n}\n","\nexport const minlength = function( fieldEl ){\n    const obj = { result: fieldEl.value.length >= fieldEl.minLength * 1 };\n\n    if( !obj.result ){\n        obj.errors = { minlength: true };\n    }\n\n    return obj;\n}\n","\nexport const pattern = function( fieldEl ){\n    let fieldPattern = fieldEl.pattern,\n        fieldRegex = new RegExp( fieldPattern ),\n        obj = { result: fieldRegex.test( fieldEl.value ) };\n\n    if( !obj.result ){\n        obj.errors = { pattern: true };\n    }\n\n    return obj;\n}\n","\nexport const radio = function( fieldEl ){\n    let fieldChecked = fieldEl.closest('form').querySelector( '[name=\"'+ fieldEl.name +'\"]:checked' ),\n        isValid = fieldChecked !== null && fieldChecked.value.trim().length > 0;\n\n    return { result: isValid };\n}\n","\nexport const requiredFrom = function( fieldEl ){\n    return {\n        result: fieldEl.value.trim().length > 0\n    };\n}\n","\nimport { getValidateFieldDefault, isDOMNode, runFunctionsSequence } from './helpers';\nimport { isValid } from './isValid';\n\nexport function checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    if( !isDOMNode(fieldEl) ){\n        const obj = getValidateFieldDefault({fieldEl});\n        return Promise.resolve(obj);\n    }\n\n    const formEl = fieldEl.closest('form'),\n          isValidValue = fieldEl.value.trim().length > 0;\n\n     // HANDLE FIELDS radio/data-require-more\n     if( fieldEl.type === 'radio' ){\n        const checkedEl = fieldEl.checked ? fieldEl : formEl.querySelector('[name=\"'+ fieldEl.name +'\"]:checked'),\n              reqMoreIsChecked = checkedEl && checkedEl.matches('[data-require-more]'),\n              findReqMoreEl = reqMoreIsChecked ? checkedEl : formEl.querySelector('[data-require-more][name=\"'+ fieldEl.name +'\"]'),\n              findReqFromEl = findReqMoreEl ? formEl.querySelector('[data-required-from=\"#'+ findReqMoreEl.id +'\"]') : null;\n        \n        if( checkedEl && findReqFromEl ){\n            findReqFromEl.required = findReqMoreEl.required && findReqMoreEl.checked;\n            if( !reqMoreIsChecked ){\n                findReqFromEl.value = '';\n            } else if( fieldOptions.focusOnRelated ) {\n                findReqFromEl.focus();\n            }\n        }\n    }\n\n    // HANDLE FIELDS data-required-from\n    if( fieldEl.matches('[data-required-from]') && isValidValue ){\n        const reqMoreEl = formEl.querySelector( fieldEl.getAttribute('data-required-from') );\n        reqMoreEl.checked = true;\n        fieldEl.required = reqMoreEl.required;\n    }\n\n    const needsValidation = fieldEl.required || (fieldEl.matches('[data-validate-if-filled]') && isValidValue);\n\n    return runFunctionsSequence({\n            functionsList: fieldOptions.beforeValidation,\n            data: {fieldEl}\n        })\n        .then(data => {\n            let dataObj = data.pop();\n            return new Promise(resolve => {\n                if( !needsValidation ){\n                    dataObj.result = true;\n                }\n                resolve( needsValidation ? isValid(fieldEl, fieldOptions, validationRules, validationErrors) : dataObj );\n            });\n        });\n\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const runFunctionsSequence = ( { functionsList = [], data = {}, stopConditionFn = () => false } = {} ) => {\n    return functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1]);\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res);\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result);\n                    return res;\n                });\n        });\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList);\n}\n","\nimport { getValidateFieldDefault, mergeObjects, toCamelCase } from './helpers';\nimport { validationRulesAttributes } from './validationRulesAttributes';\n\nexport function isValid( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    const fieldType = fieldEl.matches('[data-subtype]') ? toCamelCase(fieldEl.getAttribute('data-subtype')) : fieldEl.type,\n          fieldValue = fieldEl.value,\n          isValidValue = fieldValue.trim().length > 0;\n\n    let obj = getValidateFieldDefault({result: isValidValue, fieldEl});\n\n    if( !obj.result ){\n        obj.errors = { empty: true };\n        return Promise.resolve(obj);\n    }\n\n    let attrValidationsResult;\n\n    return new Promise(resolve => {\n\n        // RUN SPECIFIC VALIDATIONS FOR validationRulesAttributes\n        attrValidationsResult = Array.from(fieldEl.attributes).reduce((valResult, attr) => {\n            // FOR data-* ATTRIBUTES -> REMOVE \"data-\" AND TRANSFORM TO CAMELCASE\n            const attrName = toCamelCase( attr.name.replace('data-', '') ),\n                  attrValue = attr.value,\n                  isAttrValueWithFn = attrName === 'type' && typeof validationRulesAttributes[attrValue] === 'function',\n                  isAttrNameWithFn = typeof validationRulesAttributes[attrName] === 'function';\n\n            if( isAttrValueWithFn || isAttrNameWithFn ){\n                const method = isAttrValueWithFn ? attrValue : attrName;\n                const extraVal = validationRulesAttributes[method]( fieldEl, fieldOptions );\n                if( !extraVal.result ){\n                    obj = mergeObjects({}, obj, extraVal);\n                    return false;\n                }\n            }\n            return valResult;\n        }, isValidValue);\n\n        // RUN VALIDATION FOR validationRules\n        if( typeof validationRules[fieldType] === 'function' ){\n            resolve( validationRules[fieldType](fieldValue, fieldEl) );\n        } else {\n            resolve( obj );\n        }\n\n    }).then(data => {\n\n        obj = mergeObjects( {}, obj, data );\n        obj.result = obj.result && attrValidationsResult;\n\n        if( !obj.result ){\n            const fieldErrors = (typeof validationErrors[fieldType] === 'function' ? validationErrors[fieldType](fieldValue, fieldEl) : {});\n            obj.errors = mergeObjects({}, obj.errors || {}, fieldErrors);\n            obj.errors.rule = true;\n        }\n        \n        return obj;\n\n    });\n\n}\n","\nimport { version }              from './modules/version';\nimport { mergeObjects }         from './modules/helpers';\nimport { options }              from './modules-lite/options';\nimport { validationRules }      from './modules/validationRules';\nimport { constructorFn }        from './modules-lite/constructor';\nimport { checkFieldValidity }   from './modules/checkFieldValidity';\nimport { checkFormValidity }    from './modules/checkFormValidity';\n\nclass Form {\n\n    constructor( formEl, optionsObj ){\n        constructorFn(this, formEl, optionsObj);\n    }\n\n    destroy(){\n        delete this.formEl.formjs;\n    }\n\n    validateField( fieldEl, fieldOptions ){\n        fieldEl = (typeof fieldEl === 'string' ? this.formEl.querySelector(fieldEl) : fieldEl);\n        fieldOptions = mergeObjects({}, this.options.fieldOptions, fieldOptions);\n        return checkFieldValidity(fieldEl, fieldOptions, this.validationRules, this.validationErrors);\n    }\n\n    validateForm( fieldOptions ){\n        fieldOptions = mergeObjects({}, this.options.fieldOptions, fieldOptions);\n        return checkFormValidity(this.formEl, fieldOptions, this.validationRules, this.validationErrors);\n    }\n    \n    static addValidationErrors( errorsObj ){\n        this.prototype.validationErrors = mergeObjects({}, this.prototype.validationErrors, errorsObj);\n    }\n\n    static addValidationRules( rulesObj ){\n        this.prototype.validationRules = mergeObjects({}, this.prototype.validationRules, rulesObj);\n    }\n    \n    static setOptions( optionsObj ){\n        this.prototype.options = mergeObjects({}, this.prototype.options, optionsObj);\n    }\n\n}\n\nForm.prototype.options = options;\nForm.prototype.validationErrors = {};\nForm.prototype.validationRules = validationRules;\nForm.prototype.version = version;\n\nexport default Form;\n","\nimport { checkFormEl, isNodeList, mergeObjects }   from '../modules/helpers';\n\nexport function constructorFn( self, formEl, optionsObj ){\n\n    let argsL = arguments.length,\n        checkFormElem = checkFormEl(formEl);\n\n    if( argsL === 0 || (argsL > 0 && !formEl) ){\n        throw new Error('First argument \"formEl\" is missing or falsy!');\n    }\n    if( isNodeList(formEl) ){\n        throw new Error('First argument \"formEl\" must be a single DOM node or a form CSS selector, not a NodeList!');\n    }\n    if( !checkFormElem.result ){\n        throw new Error('First argument \"formEl\" is not a DOM node nor a form CSS selector!');\n    }\n\n    self.formEl = checkFormElem.element;\n    self.formEl.formjs = self;\n    self.options = mergeObjects({}, self.constructor.prototype.options, optionsObj);\n\n    // BINDING CONTEXT FOR FUTURE EXECUTION\n    self.options.fieldOptions.beforeValidation = self.options.fieldOptions.beforeValidation.map(cbFn => cbFn.bind(self));\n\n    self.formEl.noValidate = true;\n    \n}\n","\nimport { fieldsStringSelector, getUniqueFields, getValidateFieldDefault, getValidateFormDefault, mergeObjects } from './helpers';\nimport { checkFieldValidity } from './checkFieldValidity';\n\nexport function checkFormValidity( formEl, fieldOptions, validationRules, validationErrors, fieldToSkip = null ){\n\n    fieldOptions = mergeObjects( {}, fieldOptions, {focusOnRelated: false} );\n\n    const obj = getValidateFormDefault(),\n          fieldsList = getUniqueFields( formEl.querySelectorAll(fieldsStringSelector) );\n\n    return Promise.all( fieldsList.map(fieldEl => {\n\n        if( fieldToSkip && fieldEl === fieldToSkip ){\n            const obj2 = getValidateFieldDefault({fieldEl, result: true});\n            return Promise.resolve(obj2);\n        }\n        \n        return checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors );\n\n    }) ).then(list => {\n\n        let areAllFieldsValid = list.filter(fieldObj => !fieldObj.result).length === 0;\n        obj.result = areAllFieldsValid;\n        obj.fields = list;\n\n        return obj;\n\n    });\n\n}\n","\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [],\n        focusOnRelated:         true,\n        maxFileSize:            10\n    }\n    \n}\n"],"names":["isNodeList","nodeList","NodeList","prototype","isPrototypeOf","isDOMNode","node","Element","checkFormEl","formEl","isString","isFormSelector","document","querySelector","tagName","toLowerCase","result","element","mergeObjects","out","i","arguments","length","obj","key","isArray","Object","toString","call","isObject","hasOwnProperty","concat","slice","Array","push","fieldsStringSelector","formatMap","dateArray","reverse","getDateAsNumber","dateString","dateFormat","separator","splitChar","match","indexOf","replace","split","join","getUniqueFields","currentFieldName","currentFieldType","from","filter","fieldEl","name","type","matches","getValidateFieldDefault","getValidateFormDefault","fields","toCamelCase","string","all","letter","toUpperCase","validationRules","date","test","email","number","validationRulesAttributes","checkbox","dataChecksEl","closest","attrValue","JSON","parse","getAttribute","checkedElLength","querySelectorAll","isMinOk","isMaxOk","errors","checks","minChecks","maxChecks","checked","equalTo","checkFromEl","value","exactLength","valueLength","minlength","maxlength","file","fieldOptions","maxFileSize","MIMEtype","accept","RegExp","filesList","files","forEach","exceedMaxFileSize","size","isAcceptedFileType","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","stringLength","max","maxVal","maxLength","min","minVal","minLength","pattern","fieldPattern","radio","fieldChecked","trim","requiredFrom","checkFieldValidity","validationErrors","Promise","resolve","isValidValue","checkedEl","reqMoreIsChecked","findReqMoreEl","findReqFromEl","id","required","focusOnRelated","focus","reqMoreEl","needsValidation","functionsList","data","stopConditionFn","reduce","acc","promiseFn","then","res","dataNew","dataList","runFunctionsSequence","beforeValidation","dataObj","pop","attrValidationsResult","fieldType","fieldValue","attributes","valResult","attr","attrName","isAttrValueWithFn","isAttrNameWithFn","extraVal","fieldErrors","rule","empty","isValid","Form","optionsObj","self","argsL","checkFormElem","Error","formjs","options","constructor","map","cbFn","bind","noValidate","constructorFn","this","errorsObj","rulesObj","fieldToSkip","fieldsList","obj2","list","areAllFieldsValid","fieldObj","checkFormValidity","version"],"mappings":"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"}