{"version":3,"file":"formjs-systemjs.min.js","sources":["../../src/modules/helpers/isNodeList.js","../../src/modules/helpers/isDOMNode.js","../../src/modules/helpers/checkFormEl.js","../../src/modules/helpers/isPlainObject.js","../../src/modules/helpers/mergeObjects.js","../../src/modules/helpers/dispatchCustomEvent.js","../../src/modules/helpers/finalizeFieldPromise.js","../../src/modules/helpers/finalizeFormPromise.js","../../src/modules/helpers/getDateAsNumber.js","../../src/modules/helpers/getSplitChar.js","../../src/modules/helpers/getUniqueFields.js","../../src/modules/helpers/mergeValidateFieldDefault.js","../../src/modules/helpers/mergeValidateFormDefault.js","../../src/modules/helpers/toCamelCase.js","../../src/modules-lite/helpers/customEvents.js","../../src/modules/validationRules.js","../../src/modules/validationRules/date.js","../../src/modules/validationRules/email.js","../../src/modules/validationRules/number.js","../../src/modules/validationRules/checkbox.js","../../src/modules/validationRules/checks.js","../../src/modules/validationRules/equalTo.js","../../src/modules/validationRules/exactLength.js","../../src/modules/validationRules/file.js","../../src/modules/validationRules/length.js","../../src/modules/validationRules/max.js","../../src/modules/validationRules/maxlength.js","../../src/modules/validationRules/min.js","../../src/modules/validationRules/minlength.js","../../src/modules/validationRules/pattern.js","../../src/modules/validationRules/radio.js","../../src/modules/checkFieldValidity.js","../../src/modules/helpers/getJSONobjectFromFieldAttribute.js","../../src/modules/helpers/runFunctionsSequence.js","../../src/modules/isValid.js","../../src/index-lite.js","../../src/modules/checkFieldsValidity.js","../../src/modules/helpers/fieldsStringSelector.js","../../src/modules-lite/options.js"],"sourcesContent":["/* eslint-disable no-prototype-builtins */\n\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList );\n}\n","/* eslint-disable no-prototype-builtins */\n\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node );\n}\n","\nimport { isDOMNode } from './isDOMNode';\n\nexport const checkFormEl = form => {\n    let isString = typeof form,\n        isValidNodeSelector = isString === 'string' && isDOMNode(document.querySelector(form)),\n        isFormSelector = isValidNodeSelector && document.querySelector(form).tagName.toLowerCase() === 'form',\n        obj = {\n            result: isDOMNode(form) || isFormSelector,\n            $el: (isString === 'string' ? document.querySelector(form) : form)\n        };\n\n    return obj;\n}\n","\nexport const isPlainObject = object => {\n    return Object.prototype.toString.call( object ) === '[object Object]';\n}\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const mergeObjects = function( out = {} ){\n    Array.from(arguments).slice(1).filter(arg => !!arg).forEach(arg => {\n        Object.keys(arg).forEach(key => {\n            if( Array.isArray(arg[key]) ){\n                out[key] = (out[key] || []).concat( arg[key].slice(0) );\n            } else if( isPlainObject(arg[key]) ){\n                out[key] = mergeObjects((out[key] || {}), arg[key]);\n            } else {\n                // * STRING | NUMBER | BOOLEAN | FUNCTION\n                if( Array.isArray(out[key]) ){\n                    // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                    out[key].push(arg[key]);\n                } else {\n                    out[key] = arg[key];\n                }\n            }\n        });\n    });\n\n    return out;\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const dispatchCustomEvent = ( elem, eventName, eventOptions ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions);\n    const eventObj = new CustomEvent(eventName, eventOptions);\n    elem.dispatchEvent( eventObj );\n}\n","\nexport const finalizeFieldPromise = ({errors, result}) => {\n    if( result ){\n        return Promise.resolve();\n    }\n    return Promise.reject(errors);\n}\n","\nexport const finalizeFormPromise = ({fields, result}) => {\n    if( result ){\n        return Promise.resolve(fields);\n    }\n    return Promise.reject(fields);\n}\n","\nimport { getSplitChar } from './getSplitChar';\n\nconst formatMap = {\n    'YYYY-MM-DD': function(dateArray){\n        return dateArray;\n    },\n    'MM-DD-YYYY': function(dateArray){\n        return [dateArray[2], dateArray[0], dateArray[1]];\n    },\n    'DD-MM-YYYY': function(dateArray){\n        return dateArray.reverse();\n    }\n};\n\nexport const getDateAsNumber = ( dateString, dateFormat ) => {\n    dateFormat = dateFormat || 'YYYY-MM-DD';\n    const splitChar = getSplitChar(dateString);\n\n    if( !dateFormat.includes(splitChar) ){\n        return;\n    }\n\n    dateFormat = dateFormat.replace(/[^YMD]/g, '-');\n    dateString = dateString.split(splitChar);\n    dateString = formatMap[dateFormat](dateString).join('');\n    \n    return dateString;\n}\n","\nexport const getSplitChar = string => {\n    // MATCH ANY NON-DIGIT CHAR\n    const separator = string.match(/\\D/);\n    return (separator && separator.length > 0) ? separator[0] : null;\n}\n","\nexport const getUniqueFields = $nodeList => {\n\n    let currentFieldName = '',\n        currentFieldType = '';\n\n    return Array.from( $nodeList ).filter($field => {\n        const name = $field.name,\n              type = $field.type;\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false;\n        }\n        \n        if( !$field.matches('[data-required-from]') ){\n            currentFieldName = name;\n            currentFieldType = type;\n        }\n        return true;\n    });\n    \n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const mergeValidateFieldDefault = obj => {\n    return mergeObjects({}, { result: false, $field: null }, obj);\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const mergeValidateFormDefault = obj => {\n    return mergeObjects({}, { result: true, fields: [] }, obj);\n}\n","\nexport const toCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase(); });\n}\n","\nexport const customEvents = {\n    field: {\n        validation: 'fjs.field:validation'\n    },\n    form: {\n        destroy:    'fjs.form:destroy',\n        init:       'fjs.form:init',\n        validation: 'fjs.form:validation'\n    }\n}\n","\nimport { date }         from './validationRules/date';\nimport { email }        from './validationRules/email';\nimport { number }       from './validationRules/number';\n\nimport { checkbox }     from './validationRules/checkbox';\nimport { equalTo }      from './validationRules/equalTo';\nimport { exactLength }  from './validationRules/exactLength';\nimport { file }         from './validationRules/file';\nimport { length }       from './validationRules/length';\nimport { max }          from './validationRules/max';\nimport { maxlength }    from './validationRules/maxlength';\nimport { min }          from './validationRules/min';\nimport { minlength }    from './validationRules/minlength';\nimport { pattern }      from './validationRules/pattern';\nimport { radio }        from './validationRules/radio';\n\nexport const validationRules = {\n    date,\n    email,\n    number,\n\n    checkbox,\n    equalTo,\n    exactLength,\n    file,\n    length,\n    max,\n    maxlength,\n    min,\n    minlength,\n    pattern,\n    radio\n}\n","\n/*\n    DATE AS ISO 8601 DATE FORMAT:\n    YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n*/\n\nexport const date = function( string ){\n    return {\n        result: /^((((19|[2-9]\\d)\\d{2})[ /\\-.](0[13578]|1[02])[ /\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ /\\-.](0[13456789]|1[012])[ /\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ /\\-.]02[ /\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ /\\-.]02[ /\\-.]29))$/g.test( string )\n    };\n}\n","\n// https://regex101.com/r/cdlyJy/3\n\nexport const email = function( string ){\n    return {\n        result: /^[a-zA-Z_-]([\\w.-]?[a-zA-Z0-9])*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?){2,})+$/.test( string )\n    };\n}\n","\n/*\n    ALL NUMBERS ( INTEGERS AND FLOATING )\n    VALID NUMBERS: 123 | 123.456 | .123\n*/\n\nexport const number = function( string ){\n    return {\n        result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n    };\n}","\nimport { checks } from './checks';\n\nexport const checkbox = function( value, $field ){\n    const $dataChecks = $field.closest('form').querySelector('[name=\"' + $field.name + '\"][data-checks]');\n    return $dataChecks ? checks($dataChecks) : { result: $field.checked };\n}\n","\nexport const checks = function( $field ){\n    const attrValue = JSON.parse( $field.getAttribute('data-checks') ),\n          checkedLength = $field.closest('form').querySelectorAll('[name=\"' + $field.name + '\"]:checked').length,\n          isMinOk = checkedLength >= attrValue[0],\n          isMaxOk = checkedLength <= attrValue[1],\n          obj = { result: isMinOk && isMaxOk };\n\n    if( !obj.result ){\n        obj.errors = { checks: true };\n        if( !isMinOk ){ obj.errors.minChecks = true; }\n        if( !isMaxOk ){ obj.errors.maxChecks = true; }\n    }\n\n    return obj;\n}\n","\nexport const equalTo = function( value, $field ){\n    const $checkFrom = $field.closest('form').querySelector( '[name=\"' + $field.getAttribute('data-equal-to') + '\"]' );\n    return { result: value === $checkFrom.value };\n}\n","\nexport const exactLength = function( value, $field ){\n    const valueLength = value.length,\n          exactLength = $field.getAttribute('data-exact-length') * 1,\n          obj = { result: valueLength === exactLength };\n\n    if( !obj.result ){\n        obj.errors = {};\n        if( valueLength < exactLength ){ obj.errors.minlength = true; }\n        else { obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nexport const file = function( value, $field, fieldOptions ){\n    const maxFileSize = ($field.getAttribute('data-max-file-size') || fieldOptions.maxFileSize) * 1,\n          MIMEtype = $field.accept ? new RegExp($field.accept.replace( '*', '[^\\\\/,]+' )) : null,\n          filesList = Array.from($field.files),\n          obj = { result: true };\n\n    filesList.forEach(file => {\n        const exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize,\n              isAcceptedFileType = MIMEtype !== null ? MIMEtype.test(file.type) : true;\n\n        if( exceedMaxFileSize || !isAcceptedFileType ){\n            obj.result = false;\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {};\n            }\n            if( exceedMaxFileSize ){ obj.errors.maxFileSize = true; }\n            if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true; }\n\n        }\n    });\n\n    return obj;\n}\n","\nexport const length = function( value, $field ){\n    const valueL = value.length,\n          attrValue = JSON.parse( $field.getAttribute('data-length') ),\n          isMinlengthOk = valueL >= attrValue[0],\n          isMaxlengthOk = valueL <= attrValue[1],\n          obj = { result: isMinlengthOk && isMaxlengthOk };\n\n    if( !obj.result ){\n        obj.errors = {};\n        if( !isMinlengthOk ){ obj.errors.minlength = true; }\n        if( !isMaxlengthOk ){ obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const max = function( value, $field ){\n    let maxVal = $field.max;\n    const dateFormat = $field.getAttribute('data-date-format');\n    \n    if( $field.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat );\n        maxVal = maxVal.split('-').join('');\n    }\n\n    value = value * 1;\n    maxVal = maxVal * 1;\n    \n    return { result: value <= maxVal };\n}\n","\nexport const maxlength = function( value, $field ){\n    return { result: value.length <= $field.maxLength * 1 };\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const min = function( value, $field ){\n    let minVal = $field.min;\n    const dateFormat = $field.getAttribute('data-date-format');\n    \n    if( $field.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat );\n        minVal = minVal.split('-').join('');\n    }\n\n    value = value * 1;\n    minVal = minVal * 1;\n    \n    return { result: value >= minVal };\n}\n","\nexport const minlength = function( value, $field ){\n    return { result: value.length >= $field.minLength * 1 };\n}\n","\nexport const pattern = function( value, $field ){\n    return { result: new RegExp($field.pattern).test(value) };\n}\n","\nexport const radio = function( value, $field ){\n    const $fieldChecked = $field.closest('form').querySelector( '[name=\"'+ $field.name +'\"]:checked' ),\n          isValid = $fieldChecked !== null && $fieldChecked.value.trim().length > 0;\n\n    return { result: isValid };\n}\n","\nimport {    getJSONobjectFromFieldAttribute,\n            isDOMNode,\n            mergeObjects,\n            mergeValidateFieldDefault,\n            runFunctionsSequence\n        }           from './helpers';\nimport { isValid }  from './isValid';\n\nexport function checkFieldValidity( $field, fieldOptions, validationRules, validationErrors ){\n\n    if( !isDOMNode($field) ){\n        const obj = mergeValidateFieldDefault({$field});\n        return Promise.resolve(obj);\n    }\n\n    const $form = $field.closest('form'),\n          isValidValue = $field.value.trim().length > 0,\n          dataFieldOptions = getJSONobjectFromFieldAttribute( $field, 'data-field-options' );\n\n    fieldOptions = mergeObjects( fieldOptions, dataFieldOptions );\n\n    // HANDLE FIELD data-required-from WHEN CHANGING ITS RELATED RADIO\n    if( $field.type === 'radio' ){\n        const $checked = $field.checked ? $field : $form.querySelector('[name=\"'+ $field.name +'\"]:checked'),\n              reqMoreIsChecked = $checked && $checked.matches('[data-require-more]'),\n              $findReqMore = reqMoreIsChecked ? $checked : $form.querySelector('[data-require-more][name=\"'+ $field.name +'\"]'),\n              $findReqFrom = $findReqMore ? $form.querySelector('[data-required-from=\"#'+ $findReqMore.id +'\"]') : null;\n        \n        if( $checked && $findReqFrom ){\n            $findReqFrom.required = $findReqMore.required && $findReqMore.checked;\n            if( !reqMoreIsChecked ){\n                $findReqFrom.value = '';\n            } else if( fieldOptions.focusOnRelated ) {\n                $findReqFrom.focus();\n            }\n        }\n    }\n\n    // HANDLE FIELD data-require-more & data-required-from WHEN *-from IT'S FILLED\n    if( $field.matches('[data-required-from]') && isValidValue ){\n        const $reqMore = $form.querySelector( $field.getAttribute('data-required-from') );\n        $reqMore.checked = true;\n        $field.required = $reqMore.required;\n    }\n\n    const needsValidation = $field.required || ($field.matches('[data-validate-if-filled]') && isValidValue);\n\n    return runFunctionsSequence({\n            functionsList: fieldOptions.beforeValidation,\n            data: { $field, fieldOptions }\n        })\n        .then(data => {\n            const dataObj = data.pop();\n            return new Promise(resolve => {\n                if( !needsValidation ){\n                    dataObj.result = true;\n                }\n                resolve( needsValidation ? isValid($field, fieldOptions, validationRules, validationErrors) : dataObj );\n            });\n        });\n\n}\n","\nexport const getJSONobjectFromFieldAttribute = ( fieldEl, attrName ) => {\n    const customAttrEl = fieldEl.closest('['+ attrName +']');\n    return (customAttrEl && JSON.parse(customAttrEl.getAttribute(attrName))) || {};\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const runFunctionsSequence = ( { functionsList = [], data = {}, stopConditionFn = () => false } = {} ) => {\n    return functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1]);\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res);\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result);\n                    return res;\n                });\n        });\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList);\n}\n","\nimport { mergeValidateFieldDefault, mergeObjects, toCamelCase } from './helpers';\n\nexport function isValid( $field, fieldOptions, validationRules, validationErrors ){\n\n    const fieldValue = $field.value,\n          obj = mergeValidateFieldDefault({result: fieldValue.trim().length > 0, $field}),\n          isRadioOrCheckbox = /^(radio|checkbox)$/.test($field.type),\n          hasSelectedInput = $field.closest('form').querySelectorAll('[name=\"'+ $field.name +'\"]:checked').length > 0;\n\n    if( (!isRadioOrCheckbox && !obj.result) || (isRadioOrCheckbox && !hasSelectedInput) ){\n        obj.result = false;\n        obj.errors = { empty: true };\n        return Promise.resolve(obj);\n    }\n\n    // COLLECT VALIDATION METHOD NAMES ( USED TO RUN VALIDATIONS AND GET ERRORS )\n    const validationMethods = Array.from($field.attributes).reduce((accList, attr) => {\n        const attrName = toCamelCase( attr.name.replace('data-', '') ),\n              attrValue = toCamelCase( attr.value ),\n              isAttrValueWithFn = (attrName === 'type' || attrName === 'subtype') && validationRules[attrValue],\n              isAttrNameWithFn = validationRules[attrName];\n\n        if( isAttrValueWithFn || isAttrNameWithFn ){\n            accList.push( isAttrValueWithFn ? attrValue : attrName );\n        }\n        return accList;\n    }, []);\n\n    return new Promise(resolve => {\n\n        // RUN VALIDATIONS\n        const validationsResult = validationMethods.reduce((accPromise, methodName) => {\n            return accPromise.then(accObj => {\n                return new Promise(resolveVal => {\n                    // RUN VALIDATION INSIDE A PROMISE IS USEFUL FOR ASYNC VALIDATIONS\n                    resolveVal( validationRules[methodName](fieldValue, $field, fieldOptions) );\n                }).then(valObj => {\n                    // ADD CUSTOM ERROR-KEY FOR EACH VALIDATION RULE\n                    if( !valObj.result ){\n                        const errorObj = {};\n                        if( typeof valObj.errors === 'undefined' || typeof valObj.errors[methodName] === 'undefined' ){\n                            errorObj[methodName] = true;\n                        }\n                        valObj.errors = mergeObjects({}, valObj.errors, errorObj);\n                    }\n                    valObj = valObj.result ? {} : valObj;\n                    return mergeObjects(accObj, valObj);\n                });\n            });\n        }, Promise.resolve(obj));\n        resolve(validationsResult);\n\n    }).then(data => {\n\n        // GET ERRORS\n        if( !data.result ){\n            data.errors = validationMethods.reduce((accObj, methodName) => {\n                const errors = (validationErrors[methodName] && validationErrors[methodName](fieldValue, $field)) || {};\n                return mergeObjects(accObj, errors);\n            }, data.errors);\n        }\n        return data;\n\n    });\n\n}\n","\nimport { version }              from '../package.json';\nimport { \n    checkFormEl,\n    dispatchCustomEvent,\n    fieldsStringSelector,\n    finalizeFieldPromise,\n    finalizeFormPromise,\n    isNodeList,\n    mergeObjects }              from './modules/helpers';\nimport { customEvents }         from './modules-lite/helpers/customEvents';\nimport { options }              from './modules-lite/options';\nimport { validationRules }      from './modules/validationRules';\nimport { checkFieldValidity }   from './modules/checkFieldValidity';\nimport { checkFieldsValidity }  from './modules/checkFieldsValidity';\n\nclass Form {\n\n    constructor( form, optionsObj ){\n        const argsL = arguments.length,\n              checkFormElem = checkFormEl(form);\n\n        if( argsL === 0 || (argsL > 0 && !form) ){\n            throw new Error('First argument \"form\" is missing or falsy!');\n        }\n        if( isNodeList(form) ){\n            throw new Error('First argument \"form\" must be a single DOM node or a form CSS selector, not a NodeList!');\n        }\n        if( !checkFormElem.result ){\n            throw new Error('First argument \"form\" is not a DOM node nor a form CSS selector!');\n        }\n\n        const self = this;\n\n        self.$form = checkFormElem.$el;\n        self.$form.formjs = self;\n        self.options = mergeObjects({}, Form.prototype.options, optionsObj);\n\n        // BINDING CONTEXT FOR FUTURE EXECUTION\n        self.options.fieldOptions.beforeValidation = self.options.fieldOptions.beforeValidation.map(cbFn => cbFn.bind(self));\n\n        self.$form.noValidate = true;\n\n        dispatchCustomEvent( self.$form, customEvents.form.init );\n    }\n\n    destroy(){\n        delete this.$form.formjs;\n        dispatchCustomEvent( this.$form, customEvents.form.destroy );\n    }\n\n    validateField( field, fieldOptions ){\n        const self = this;\n        const $field = typeof field === 'string' ? self.$form.querySelector(field) : field;\n        \n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions);\n        \n        return checkFieldValidity($field, fieldOptions, self.validationRules, self.validationErrors)\n            .then(obj => {\n                dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } );\n                return obj;\n            })\n            .then(finalizeFieldPromise);\n    }\n\n    validateForm( fieldOptions ){\n        const self = this;\n        const $form = self.$form;\n        const $fields = $form.querySelectorAll(fieldsStringSelector);\n\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions);\n\n        return checkFieldsValidity($fields, fieldOptions, self.validationRules, self.validationErrors)\n            .then(data => {\n                data.fields.forEach(obj => {\n                    obj.isCheckingForm = true;\n                    dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } );\n                });\n                dispatchCustomEvent( $form, customEvents.form.validation, { detail: data } );\n                return data;\n            })\n            .then(finalizeFormPromise);\n    }\n    \n    static addValidationErrors( errorsObj ){\n        Form.prototype.validationErrors = mergeObjects({}, Form.prototype.validationErrors, errorsObj);\n    }\n\n    static addValidationRules( rulesObj ){\n        Form.prototype.validationRules = mergeObjects({}, Form.prototype.validationRules, rulesObj);\n    }\n    \n    static setOptions( optionsObj ){\n        Form.prototype.options = mergeObjects({}, Form.prototype.options, optionsObj);\n    }\n\n}\n\nForm.prototype.options = options;\nForm.prototype.validationErrors = {};\nForm.prototype.validationRules = validationRules;\nForm.prototype.version = version;\n\nexport default Form;\n","\nimport { getUniqueFields, mergeValidateFieldDefault, mergeValidateFormDefault, mergeObjects } from './helpers';\nimport { checkFieldValidity } from './checkFieldValidity';\n\nexport function checkFieldsValidity( $fields, fieldOptions, validationRules, validationErrors, fieldToSkip = null ){\n\n    fieldOptions = mergeObjects( {}, fieldOptions, {focusOnRelated: false} );\n    const $fieldsList = getUniqueFields( $fields );\n\n    return Promise.all( $fieldsList.map($field => {\n\n        if( fieldToSkip && $field === fieldToSkip ){\n            const obj = mergeValidateFieldDefault({$field, result: true});\n            return Promise.resolve(obj);\n        }\n        return checkFieldValidity( $field, fieldOptions, validationRules, validationErrors );\n\n    }) ).then(fields => {\n\n        const areAllFieldsValid = fields.every(({result}) => result);\n        return mergeValidateFormDefault({result: areAllFieldsValid, fields});\n\n    });\n\n}\n","\nexport const fieldsStringSelector = 'input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"hidden\"]), select, textarea'\n","\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [],\n        focusOnRelated:         true,\n        maxFileSize:            10\n    }\n    \n}\n"],"names":["isNodeList","nodeList","NodeList","prototype","isPrototypeOf","isDOMNode","node","Element","checkFormEl","form","isString","isFormSelector","document","querySelector","tagName","toLowerCase","result","$el","isPlainObject","object","Object","toString","call","mergeObjects","out","arguments","length","undefined","Array","from","slice","filter","arg","forEach","keys","key","isArray","concat","push","dispatchCustomEvent","elem","eventName","eventOptions","bubbles","eventObj","CustomEvent","dispatchEvent","finalizeFieldPromise","_ref","errors","Promise","resolve","reject","finalizeFormPromise","fields","formatMap","YYYY-MM-DD","dateArray","MM-DD-YYYY","DD-MM-YYYY","reverse","getDateAsNumber","dateString","dateFormat","separator","splitChar","match","includes","replace","split","join","getUniqueFields","$nodeList","currentFieldName","currentFieldType","$field","name","type","matches","mergeValidateFieldDefault","obj","mergeValidateFormDefault","toCamelCase","string","all","letter","toUpperCase","customEvents","validation","destroy","init","validationRules","date","test","email","number","checkbox","value","$dataChecks","closest","attrValue","JSON","parse","getAttribute","checkedLength","querySelectorAll","isMinOk","isMaxOk","checks","minChecks","maxChecks","checked","equalTo","exactLength","valueLength","minlength","maxlength","file","fieldOptions","maxFileSize","MIMEtype","accept","RegExp","filesList","files","exceedMaxFileSize","size","isAcceptedFileType","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","max","maxVal","maxLength","min","minVal","minLength","pattern","radio","$fieldChecked","trim","checkFieldValidity","validationErrors","attrName","customAttrEl","$form","isValidValue","dataFieldOptions","$checked","reqMoreIsChecked","$findReqMore","$findReqFrom","id","required","focusOnRelated","focus","$reqMore","needsValidation","_ref$functionsList","functionsList","_ref$data","data","_ref$stopConditionFn","stopConditionFn","reduce","acc","promiseFn","then","res","dataNew","dataList","runFunctionsSequence","beforeValidation","dataObj","pop","fieldValue","isRadioOrCheckbox","hasSelectedInput","empty","validationMethods","attributes","accList","attr","isAttrValueWithFn","isAttrNameWithFn","accPromise","methodName","accObj","resolveVal","valObj","errorObj","isValid","Form","exports","optionsObj","_classCallCheck","this","argsL","checkFormElem","Error","self","formjs","options","map","cbFn","bind","noValidate","errorsObj","rulesObj","field","detail","$fields","fieldToSkip","$fieldsList","areAllFieldsValid","every","checkFieldsValidity","isCheckingForm","version"],"mappings":"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"}