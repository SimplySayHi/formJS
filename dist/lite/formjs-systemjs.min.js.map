{"version":3,"file":"formjs-systemjs.min.js","sources":["../../src/modules/version.js","../../src/modules/helpers/isNodeList.js","../../src/modules/helpers/isDOMNode.js","../../src/modules/helpers/checkFormEl.js","../../src/modules/helpers/mergeObjects.js","../../src/modules/helpers/fieldsStringSelector.js","../../src/modules/helpers/getSplitChar.js","../../src/modules/helpers/getUniqueFields.js","../../src/modules/helpers/getValidateFieldDefault.js","../../src/modules/helpers/getValidateFormDefault.js","../../src/modules/helpers/toCamelCase.js","../../src/modules/validationRules.js","../../src/modules/validationRules/date.js","../../src/modules/validationRules/email.js","../../src/modules/validationRules/number.js","../../src/modules/validationRules/checks.js","../../src/modules/validationRulesAttributes.js","../../src/modules/validationRules/checkbox.js","../../src/modules/validationRules/equalTo.js","../../src/modules/validationRules/exactLength.js","../../src/modules/validationRules/file.js","../../src/modules/validationRules/length.js","../../src/modules/validationRules/max.js","../../src/modules/validationRules/maxlength.js","../../src/modules/validationRules/min.js","../../src/modules/validationRules/minlength.js","../../src/modules/validationRules/pattern.js","../../src/modules/validationRules/radio.js","../../src/modules/validationRules/requiredFrom.js","../../src/modules/checkFieldValidity.js","../../src/modules/helpers/runFunctionsSequence.js","../../src/modules/isValid.js","../../src/index-lite.js","../../src/modules-lite/constructor.js","../../src/modules/checkFormValidity.js","../../src/modules-lite/options.js"],"sourcesContent":["\nexport const version = '4.0.2';\n","\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList );\n}\n","\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node );\n}\n","\nimport { isDOMNode } from './isDOMNode';\n\nexport const checkFormEl = formEl => {\n    let isString = typeof formEl,\n        isValidNodeSelector = isString === 'string' && isDOMNode(document.querySelector(formEl)),\n        isFormSelector = isValidNodeSelector && document.querySelector(formEl).tagName.toLowerCase() === 'form',\n        obj = {\n            result: isDOMNode(formEl) || isFormSelector,\n            element: (isString === 'string' ? document.querySelector(formEl) : formEl)\n        };\n\n    return obj;\n}\n","\nexport const mergeObjects = function( out = {} ){\n    for(let i=1; i<arguments.length; i++){\n        let obj = arguments[i];\n\n        if(!obj){ continue; }\n\n        for(let key in obj){\n            let isArray = Object.prototype.toString.call(obj[key]) === \"[object Array]\";\n            let isObject = Object.prototype.toString.call(obj[key]) === \"[object Object]\";\n\n            // COPY ONLY ENUMERABLE PROPERTIES\n            if( obj.hasOwnProperty(key) ){\n                if( isArray ){\n\n                    if( typeof out[key] === 'undefined' ){\n                        out[key] = [];\n                    }\n                    out[key] = out[key].concat( obj[key].slice(0) );\n\n                } else if( isObject ){\n\n                    out[key] = mergeObjects(out[key], obj[key]);\n\n                } else {\n\n                    // * STRING | NUMBER | BOOLEAN | FUNCTION\n                    if( Array.isArray(out[key]) ){\n                        // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                        out[key].push(obj[key]);\n                    } else {\n                        out[key] = obj[key];\n                    }\n\n                }\n            }\n        }\n    }\n\n    return out;\n}\n","\nexport const fieldsStringSelector = 'input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"hidden\"]), select, textarea'\n","\nexport const getSplitChar = string => {\n    // MATCH ANY NON-DIGIT CHAR\n    const separator = string.match(/\\D/);\n    return (separator && separator.length > 0) ? separator[0] : null;\n}\n","\nexport const getUniqueFields = nodeList => {\n\n    let currentFieldName = '',\n        currentFieldType = '';\n\n    return Array.from( nodeList ).filter(fieldEl => {\n        const name = fieldEl.name,\n              type = fieldEl.type;\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false;\n        }\n        \n        if( !fieldEl.matches('[data-required-from]') ){\n            currentFieldName = name;\n            currentFieldType = type;\n        }\n        return true;\n    });\n    \n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const getValidateFieldDefault = obj => {\n    return mergeObjects({}, { result: false, fieldEl: null }, obj);\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const getValidateFormDefault = obj => {\n    return mergeObjects({}, { result: true, fields: [] }, obj);\n}\n","\nexport const toCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase(); });\n}\n","\nimport { date }         from './validationRules/date';\nimport { email }        from './validationRules/email';\nimport { number }       from './validationRules/number';\n\nexport const validationRules = {\n    date,\n    email,\n    number\n}\n","\n/*\n    DATE AS ISO 8601 DATE FORMAT:\n    YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n*/\n\nexport const date = function( string ){\n    let date = /^((((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13578]|1[02])[ \\/\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13456789]|1[012])[ \\/\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.]02[ \\/\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ \\/\\-.]02[ \\/\\-.]29))$/g.test( string ),\n        obj = {\n            result: date\n        };\n\n    return obj;\n}\n","\n// https://regex101.com/r/cdlyJy/3\n\nexport const email = function( string ){\n    let obj = {\n        result: /^[a-zA-Z_-]([\\w.-]?[a-zA-Z0-9])*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?){2,})+$/.test( string )\n    };\n\n    return obj;\n}\n","\n/*\n    ALL NUMBERS ( INTEGERS AND FLOATING )\n    VALID NUMBERS: 123 | 123.456 | .123\n*/\n\nexport const number = function( string ){\n    let obj = {\n        result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n    };\n\n    return obj;\n}","\nexport const checks = function( fieldEl ){\n    try {\n        let attrValue = JSON.parse( fieldEl.getAttribute('data-checks') ),\n            checkedElLength = fieldEl.closest('form').querySelectorAll('[name=\"' + fieldEl.name + '\"]:checked').length,\n            isMinOk = checkedElLength >= attrValue[0],\n            isMaxOk = checkedElLength <= attrValue[1],\n            obj = { result: isMinOk && isMaxOk };\n\n        if( !obj.result ){\n            obj.errors = { checks: true };\n            if( !isMinOk ){ obj.errors.minChecks = true; }\n            if( !isMaxOk ){ obj.errors.maxChecks = true; }\n        }\n\n        return obj;\n    } catch(e){\n        throw new Error('\"data-checks\" attribute is not a valid array!');\n    }\n}\n","\nimport { checkbox }     from './validationRules/checkbox';\nimport { equalTo }      from './validationRules/equalTo';\nimport { exactLength }  from './validationRules/exactLength';\nimport { file }         from './validationRules/file';\nimport { length }       from './validationRules/length';\nimport { max }          from './validationRules/max';\nimport { maxlength }    from './validationRules/maxlength';\nimport { min }          from './validationRules/min';\nimport { minlength }    from './validationRules/minlength';\nimport { pattern }      from './validationRules/pattern';\nimport { radio }        from './validationRules/radio';\nimport { requiredFrom } from './validationRules/requiredFrom';\n\nexport const validationRulesAttributes = {\n    checkbox,\n    equalTo,\n    exactLength,\n    file,\n    length,\n    max,\n    maxlength,\n    min,\n    minlength,\n    pattern,\n    radio,\n    requiredFrom,\n}\n","\nimport { checks } from './checks';\n\nexport const checkbox = function( fieldEl ){\n    let dataChecksEl = fieldEl.closest('form').querySelector('[name=\"' + fieldEl.name + '\"][data-checks]');\n    return dataChecksEl ? checks(dataChecksEl): {result: fieldEl.checked};\n}\n","\nexport const equalTo = function( fieldEl ){\n    let checkFromEl = fieldEl.closest('form').querySelector( '[name=\"' + fieldEl.getAttribute('data-equal-to') + '\"]' ),\n        obj = { result: !!checkFromEl && fieldEl.value === checkFromEl.value };\n\n    if( !obj.result ){\n        obj.errors = { equalTo: true };\n    }\n\n    return obj;\n}\n","\nexport const exactLength = function( fieldEl ){\n    try {\n        let valueLength = fieldEl.value.length,\n            exactLength = fieldEl.getAttribute('data-exact-length') * 1,\n            obj = { result: !Number.isNaN(exactLength) && valueLength === exactLength };\n\n        if( !obj.result ){\n            obj.errors = { exactLength: true };\n            if( valueLength < exactLength ){ obj.errors.minlength = true; }\n            else { obj.errors.maxlength = true; }\n        }\n\n        return obj;\n    }catch(e){\n        throw new Error('\"data-exact-length\" attribute is not a number!');\n    }\n}\n","\nexport const file = function( fieldEl, fieldOptions ){\n    let maxFileSize = (fieldEl.getAttribute('data-max-file-size') || fieldOptions.maxFileSize) * 1,\n        MIMEtype = (fieldEl.accept ? new RegExp(fieldEl.accept.replace( '*', '[^\\\\/,]+' )) : null),\n        filesList = Array.from(fieldEl.files),\n        obj = { result: true };\n\n    filesList.forEach(function( file ){\n        let exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize,\n            isAcceptedFileType = (MIMEtype !== null ? MIMEtype.test(file.type) : true);\n\n        if( exceedMaxFileSize || !isAcceptedFileType ){\n            obj.result = false;\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {};\n            }\n            obj.errors.file = true;\n            if( exceedMaxFileSize ){ obj.errors.maxFileSize = true; }\n            if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true; }\n\n        }\n    });\n\n    return obj;\n}\n","\nexport const length = function( fieldEl ){\n    try {\n        let valueL = fieldEl.value.length,\n            attrValue = JSON.parse( fieldEl.getAttribute('data-length') ),\n            isMinlengthOk = valueL >= attrValue[0],\n            isMaxlengthOk = valueL <= attrValue[1],\n            obj = { result: isMinlengthOk && isMaxlengthOk };\n\n        if( !obj.result ){\n            obj.errors = { stringLength: true };\n            if( !isMinlengthOk ){ obj.errors.minlength = true; }\n            if( !isMaxlengthOk ){ obj.errors.maxlength = true; }\n        }\n\n        return obj;\n    } catch(e){\n        throw new Error('\"data-length\" attribute is not a valid array!');\n    }\n}\n","\nimport { getSplitChar } from '../helpers';\n\nexport const max = function( fieldEl ){\n    let value = fieldEl.value,\n        maxVal = fieldEl.max;\n    \n    //  if( fieldEl.type === 'date' || fieldEl.getAttribute('data-date-format') ){\n    if( fieldEl.type === 'date' ){\n        let splitChar = getSplitChar( value );\n        value = value.split( splitChar ).join('');\n        maxVal = maxVal.split('-').join('');\n    }\n\n    value = value * 1;\n    maxVal = maxVal * 1;\n\n    let obj = { result: value <= maxVal };\n\n    if( !obj.result ){\n        obj.errors = { max: true };\n    }\n    \n    return obj;\n}\n","\nexport const maxlength = function( fieldEl ){\n    try {\n        const obj = { result: fieldEl.value.length <= fieldEl.maxLength * 1 };\n\n        if( !obj.result ){\n            obj.errors = { maxlength: true };\n        }\n\n        return obj;\n    }catch(e){\n        throw new Error('\"maxlength\" is not a number!');\n    }\n}\n","\nimport { getSplitChar } from '../helpers';\n\nexport const min = function( fieldEl ){\n    let value = fieldEl.value,\n        minVal = fieldEl.min;\n    \n    //  if( fieldEl.type === 'date' || fieldEl.getAttribute('data-date-format') ){\n    if( fieldEl.type === 'date' ){\n        let splitChar = getSplitChar( value );\n        value = value.split( splitChar ).join('');\n        minVal = minVal.split('-').join('');\n    }\n\n    value = value * 1;\n    minVal = minVal * 1;\n\n    let obj = { result: value >= minVal };\n\n    if( !obj.result ){\n        obj.errors = { min: true };\n    }\n    \n    return obj;\n}\n","\nexport const minlength = function( fieldEl ){\n    try {\n        const obj = { result: fieldEl.value.length >= fieldEl.minLength * 1 };\n\n        if( !obj.result ){\n            obj.errors = { minlength: true };\n        }\n\n        return obj;\n    }catch(e){\n        throw new Error('\"minlength\" is not a number!');\n    }\n}\n","\nexport const pattern = function( fieldEl ){\n    try {\n        let fieldPattern = fieldEl.pattern,\n            fieldRegex = new RegExp( fieldPattern ),\n            obj = { result: fieldRegex.test( fieldEl.value ) };\n\n        if( !obj.result ){\n            obj.errors = { pattern: true };\n        }\n\n        return obj;\n    }catch(e){\n        throw new Error('\"pattern\" is not a valid RegExp!');\n    }\n}\n","\nexport const radio = function( fieldEl ){\n    let fieldChecked = fieldEl.closest('form').querySelector( '[name=\"'+ fieldEl.name +'\"]:checked' ),\n        isValid = fieldChecked !== null && fieldChecked.value.trim().length > 0;\n\n    return { result: isValid };\n}\n","\nexport const requiredFrom = function( fieldEl ){\n    let formEl = fieldEl.closest('form'),\n        isValidValue = fieldEl.value.trim().length > 0,\n        reqMoreEl = formEl.querySelector( fieldEl.getAttribute('data-required-from') ),\n        checkedEl = formEl.querySelector( '[name=\"'+ reqMoreEl.name +'\"]:checked' ),\n        obj = { result: checkedEl !== null };\n\n    if( reqMoreEl.checked && reqMoreEl.required ){\n        obj.result = isValidValue;\n    }\n\n    if( !obj.result ){\n        obj.errors = { requiredFrom: true };\n    }\n    \n    return obj;\n}\n","\nimport { getValidateFieldDefault, isDOMNode, runFunctionsSequence } from './helpers';\nimport { isValid } from './isValid';\n\nexport function checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    if( !isDOMNode(fieldEl) ){\n        const obj = getValidateFieldDefault({fieldEl});\n        return Promise.resolve(obj);\n    }\n\n    const formEl = fieldEl.closest('form'),\n          isValidValue = fieldEl.value.trim().length > 0;\n\n     // HANDLE FIELDS radio/data-require-more\n     if( fieldEl.type === 'radio' ){\n        const checkedEl = fieldEl.checked ? fieldEl : formEl.querySelector('[name=\"'+ fieldEl.name +'\"]:checked'),\n              reqMoreIsChecked = checkedEl.matches('[data-require-more]'),\n              findReqMoreEl = reqMoreIsChecked ? checkedEl : formEl.querySelector('[data-require-more][name=\"'+ fieldEl.name +'\"]'),\n              findReqFromEl = findReqMoreEl ? formEl.querySelector('[data-required-from=\"#'+ findReqMoreEl.id +'\"]') : null;\n        \n        if( checkedEl && findReqFromEl ){\n            findReqFromEl.required = findReqMoreEl.required && findReqMoreEl.checked;\n            if( !reqMoreIsChecked ){\n                findReqFromEl.value = '';\n            } else if( fieldOptions.focusOnRelated ) {\n                findReqFromEl.focus();\n            }\n        }\n    }\n\n    // HANDLE FIELDS data-required-from\n    if( fieldEl.matches('[data-required-from]') && isValidValue ){\n        const reqMoreEl = formEl.querySelector( fieldEl.getAttribute('data-required-from') );\n        reqMoreEl.checked = true;\n        fieldEl.required = reqMoreEl.required;\n    }\n\n    const needsValidation = fieldEl.required || (fieldEl.matches('[data-validate-if-filled]') && isValidValue);\n\n    return runFunctionsSequence({\n            functionsList: fieldOptions.beforeValidation,\n            data: {fieldEl}\n        })\n        .then(data => {\n            let dataObj = data.pop();\n            return new Promise(resolve => {\n                if( !needsValidation ){\n                    dataObj.result = true;\n                }\n                resolve( needsValidation ? isValid(fieldEl, fieldOptions, validationRules, validationErrors) : dataObj );\n            });\n        });\n\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const runFunctionsSequence = ( { functionsList = [], data = {}, stopConditionFn = () => false } = {} ) => {\n    return functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1]);\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res);\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result);\n                    return res;\n                });\n        });\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList);\n}\n","\nimport { getValidateFieldDefault, mergeObjects, toCamelCase } from './helpers';\nimport { validationRulesAttributes } from './validationRulesAttributes';\n\nexport function isValid( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    const fieldType = fieldEl.matches('[data-subtype]') ? toCamelCase(fieldEl.getAttribute('data-subtype')) : fieldEl.type,\n          fieldValue = fieldEl.value,\n          isValidValue = fieldValue.trim().length > 0;\n\n    let obj = getValidateFieldDefault({result: isValidValue, fieldEl});\n\n    if( !obj.result ){\n        obj.errors = { empty: true };\n        return Promise.resolve(obj);\n    }\n\n    let attrValidationsResult;\n\n    return new Promise(resolve => {\n\n        // RUN SPECIFIC VALIDATIONS FOR validationRulesAttributes\n        attrValidationsResult = Array.from(fieldEl.attributes).reduce((valResult, attr) => {\n            // FOR data-* ATTRIBUTES -> REMOVE \"data-\" AND TRANSFORM TO CAMELCASE\n            const attrName = toCamelCase( attr.name.replace('data-', '') ),\n                  attrValue = attr.value,\n                  isAttrValueWithFn = attrName === 'type' && typeof validationRulesAttributes[attrValue] === 'function',\n                  isAttrNameWithFn = typeof validationRulesAttributes[attrName] === 'function';\n\n            if( isAttrValueWithFn || isAttrNameWithFn ){\n                const method = isAttrValueWithFn ? attrValue : attrName;\n                const extraVal = validationRulesAttributes[method]( fieldEl, fieldOptions );\n                if( !extraVal.result ){\n                    obj = mergeObjects({}, obj, extraVal);\n                    return false;\n                }\n            }\n            return valResult;\n        }, isValidValue);\n\n        // RUN VALIDATION FOR validationRules\n        if( typeof validationRules[fieldType] === 'function' ){\n            resolve( validationRules[fieldType](fieldValue, fieldEl) );\n        } else {\n            resolve( obj );\n        }\n\n    }).then(data => {\n\n        obj = mergeObjects( {}, obj, data );\n        obj.result = obj.result && attrValidationsResult;\n\n        if( !obj.result ){\n            const fieldErrors = (typeof validationErrors[fieldType] === 'function' ? validationErrors[fieldType](fieldValue, fieldEl) : {});\n            obj.errors = mergeObjects({}, obj.errors || {}, fieldErrors);\n            obj.errors.rule = true;\n        }\n        \n        return obj;\n\n    });\n\n}\n","\nimport { version }              from './modules/version';\nimport { mergeObjects }         from './modules/helpers';\nimport { options }              from './modules-lite/options';\nimport { validationRules }      from './modules/validationRules';\nimport { constructorFn }        from './modules-lite/constructor';\nimport { checkFieldValidity }   from './modules/checkFieldValidity';\nimport { checkFormValidity }    from './modules/checkFormValidity';\n\nclass Form {\n\n    constructor( formEl, optionsObj ){\n        constructorFn(this, formEl, optionsObj);\n    }\n\n    destroy(){\n        delete this.formEl.formjs;\n    }\n\n    validateField( fieldEl, fieldOptions ){\n        fieldEl = (typeof fieldEl === 'string' ? this.formEl.querySelector(fieldEl) : fieldEl);\n        fieldOptions = mergeObjects({}, this.options.fieldOptions, fieldOptions);\n        return checkFieldValidity(fieldEl, fieldOptions, this.validationRules, this.validationErrors);\n    }\n\n    validateForm( fieldOptions ){\n        fieldOptions = mergeObjects({}, this.options.fieldOptions, fieldOptions);\n        return checkFormValidity(this.formEl, fieldOptions, this.validationRules, this.validationErrors);\n    }\n    \n    static addValidationErrors( errorsObj ){\n        this.prototype.validationErrors = mergeObjects({}, this.prototype.validationErrors, errorsObj);\n    }\n\n    static addValidationRules( rulesObj ){\n        this.prototype.validationRules = mergeObjects({}, this.prototype.validationRules, rulesObj);\n    }\n    \n    static setOptions( optionsObj ){\n        this.prototype.options = mergeObjects({}, this.prototype.options, optionsObj);\n    }\n\n}\n\nForm.prototype.options = options;\nForm.prototype.validationErrors = {};\nForm.prototype.validationRules = validationRules;\nForm.prototype.version = version;\n\nexport default Form;\n","\nimport { checkFormEl, isNodeList, mergeObjects }   from '../modules/helpers';\n\nexport function constructorFn( self, formEl, optionsObj ){\n\n    let argsL = arguments.length,\n        checkFormElem = checkFormEl(formEl);\n\n    if( argsL === 0 || (argsL > 0 && !formEl) ){\n        throw new Error('First argument \"formEl\" is missing or falsy!');\n    }\n    if( isNodeList(formEl) ){\n        throw new Error('First argument \"formEl\" must be a single DOM node or a form CSS selector, not a NodeList!');\n    }\n    if( !checkFormElem.result ){\n        throw new Error('First argument \"formEl\" is not a DOM node nor a form CSS selector!');\n    }\n\n    self.formEl = checkFormElem.element;\n    self.formEl.formjs = self;\n    self.options = mergeObjects({}, self.constructor.prototype.options, optionsObj);\n\n    // BINDING CONTEXT FOR FUTURE EXECUTION\n    self.options.fieldOptions.beforeValidation = self.options.fieldOptions.beforeValidation.map(cbFn => cbFn.bind(self));\n\n    self.formEl.noValidate = true;\n    \n}\n","\nimport { fieldsStringSelector, getUniqueFields, getValidateFieldDefault, getValidateFormDefault, mergeObjects } from './helpers';\nimport { checkFieldValidity } from './checkFieldValidity';\n\nexport function checkFormValidity( formEl, fieldOptions, validationRules, validationErrors, fieldToSkip = null ){\n\n    fieldOptions = mergeObjects( {}, fieldOptions, {focusOnRelated: false} );\n\n    const obj = getValidateFormDefault(),\n          fieldsList = getUniqueFields( formEl.querySelectorAll(fieldsStringSelector) );\n\n    return Promise.all( fieldsList.map(fieldEl => {\n\n        if( fieldToSkip && fieldEl === fieldToSkip ){\n            const obj2 = getValidateFieldDefault({fieldEl, result: true});\n            return Promise.resolve(obj2);\n        }\n        \n        return checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors );\n\n    }) ).then(list => {\n\n        let areAllFieldsValid = list.filter(fieldObj => !fieldObj.result).length === 0;\n        obj.result = areAllFieldsValid;\n        obj.fields = list;\n\n        return obj;\n\n    });\n\n}\n","\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [],\n        maxFileSize:            10\n    }\n    \n}\n"],"names":["isNodeList","nodeList","NodeList","prototype","isPrototypeOf","isDOMNode","node","Element","checkFormEl","formEl","isString","isFormSelector","document","querySelector","tagName","toLowerCase","result","element","mergeObjects","out","i","arguments","length","obj","key","isArray","Object","toString","call","isObject","hasOwnProperty","concat","slice","Array","push","fieldsStringSelector","getSplitChar","string","separator","match","getUniqueFields","currentFieldName","currentFieldType","from","filter","fieldEl","name","type","matches","getValidateFieldDefault","getValidateFormDefault","fields","toCamelCase","replace","all","letter","toUpperCase","validationRules","date","test","email","number","validationRulesAttributes","checkbox","dataChecksEl","closest","attrValue","JSON","parse","getAttribute","checkedElLength","querySelectorAll","isMinOk","isMaxOk","errors","checks","minChecks","maxChecks","e","Error","checked","equalTo","checkFromEl","value","exactLength","valueLength","Number","isNaN","minlength","maxlength","file","fieldOptions","maxFileSize","MIMEtype","accept","RegExp","filesList","files","forEach","exceedMaxFileSize","size","isAcceptedFileType","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","stringLength","max","maxVal","splitChar","split","join","maxLength","min","minVal","minLength","pattern","fieldPattern","radio","fieldChecked","trim","requiredFrom","isValidValue","reqMoreEl","required","checkFieldValidity","validationErrors","Promise","resolve","checkedEl","reqMoreIsChecked","findReqMoreEl","findReqFromEl","id","focusOnRelated","focus","needsValidation","functionsList","data","stopConditionFn","reduce","acc","promiseFn","then","res","dataNew","dataList","runFunctionsSequence","beforeValidation","dataObj","pop","attrValidationsResult","fieldType","fieldValue","attributes","valResult","attr","attrName","isAttrValueWithFn","isAttrNameWithFn","extraVal","fieldErrors","rule","empty","isValid","Form","optionsObj","self","argsL","checkFormElem","formjs","options","constructor","map","cbFn","bind","noValidate","constructorFn","this","errorsObj","rulesObj","fieldToSkip","fieldsList","obj2","list","areAllFieldsValid","fieldObj","checkFormValidity","version"],"mappings":"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"}