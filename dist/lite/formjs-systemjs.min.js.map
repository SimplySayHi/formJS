{"version":3,"file":"formjs-systemjs.min.js","sources":["../../src/modules/version.js","../../src/modules/helpers/isNodeList.js","../../src/modules/helpers/isDOMNode.js","../../src/modules/helpers/checkFormEl.js","../../src/modules/helpers/mergeObjects.js","../../src/modules/helpers/fieldsStringSelector.js","../../src/modules/helpers/getSplitChar.js","../../src/modules/helpers/getUniqueFields.js","../../src/modules/helpers/getValidateFieldDefault.js","../../src/modules/helpers/getValidateFormDefault.js","../../src/modules/helpers/toCamelCase.js","../../src/modules/validationRules.js","../../src/modules/validationRules/date.js","../../src/modules/validationRules/email.js","../../src/modules/validationRules/number.js","../../src/modules/validationRules/checkbox.js","../../src/modules/validationRulesAttributes.js","../../src/modules/validationRules/checks.js","../../src/modules/validationRules/equalTo.js","../../src/modules/validationRules/exactLength.js","../../src/modules/validationRules/file.js","../../src/modules/validationRules/length.js","../../src/modules/validationRules/max.js","../../src/modules/validationRules/maxlength.js","../../src/modules/validationRules/min.js","../../src/modules/validationRules/minlength.js","../../src/modules/validationRules/pattern.js","../../src/modules/validationRules/radio.js","../../src/modules/validationRules/requiredFrom.js","../../src/modules/checkFieldValidity.js","../../src/modules/helpers/runFunctionsSequence.js","../../src/modules/isValid.js","../../src/index-lite.js","../../src/modules-lite/constructor.js","../../src/modules/checkFormValidity.js","../../src/modules-lite/options.js"],"sourcesContent":["\nexport const version = '4.0.2';\n","\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList );\n}\n","\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node );\n}\n","\nimport { isDOMNode } from './isDOMNode';\n\nexport const checkFormEl = formEl => {\n    let isString = typeof formEl,\n        isValidNodeSelector = isString === 'string' && isDOMNode(document.querySelector(formEl)),\n        isFormSelector = isValidNodeSelector && document.querySelector(formEl).tagName.toLowerCase() === 'form',\n        obj = {\n            result: isDOMNode(formEl) || isFormSelector,\n            element: (isString === 'string' ? document.querySelector(formEl) : formEl)\n        };\n\n    return obj;\n}\n","\nexport const mergeObjects = function( out = {} ){\n    for(let i=1; i<arguments.length; i++){\n        let obj = arguments[i];\n\n        if(!obj){ continue; }\n\n        for(let key in obj){\n            let isArray = Object.prototype.toString.call(obj[key]) === \"[object Array]\";\n            let isObject = Object.prototype.toString.call(obj[key]) === \"[object Object]\";\n\n            // COPY ONLY ENUMERABLE PROPERTIES\n            if( obj.hasOwnProperty(key) ){\n                if( isArray ){\n\n                    if( typeof out[key] === 'undefined' ){\n                        out[key] = [];\n                    }\n                    out[key] = out[key].concat( obj[key].slice(0) );\n\n                } else if( isObject ){\n\n                    out[key] = mergeObjects(out[key], obj[key]);\n\n                } else {\n\n                    // * STRING | NUMBER | BOOLEAN | FUNCTION\n                    if( Array.isArray(out[key]) ){\n                        // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                        out[key].push(obj[key]);\n                    } else {\n                        out[key] = obj[key];\n                    }\n\n                }\n            }\n        }\n    }\n\n    return out;\n}\n","\nexport const fieldsStringSelector = 'input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"hidden\"]), select, textarea'\n","\nexport const getSplitChar = string => {\n    let splitChar = '.';\n\n    if( string.indexOf(splitChar) === -1 ){\n        if( string.indexOf('-') >= 0 ){\n            splitChar = '-';\n        } else if( string.indexOf('/') >= 0 ){\n            splitChar = '/';\n        }\n    }\n\n    return splitChar;\n}\n","\nexport const getUniqueFields = nodeList => {\n\n    let currentFieldName = '',\n        currentFieldType = '';\n\n    return Array.from( nodeList ).filter(fieldEl => {\n        const name = fieldEl.name,\n              type = fieldEl.type;\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false;\n        }\n        \n        if( !fieldEl.matches('[data-required-from]') ){\n            currentFieldName = name;\n            currentFieldType = type;\n        }\n        return true;\n    });\n    \n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const getValidateFieldDefault = obj => {\n    return mergeObjects({}, { result: false, fieldEl: null }, obj);\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const getValidateFormDefault = obj => {\n    return mergeObjects({}, { result: true, fields: [] }, obj);\n}\n","\nexport const toCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase(); });\n}\n","\nimport { date }         from './validationRules/date';\nimport { email }        from './validationRules/email';\nimport { number }       from './validationRules/number';\n\nexport const validationRules = {\n    date,\n    email,\n    number\n}\n","\n/*\n    DATE AS ISO 8601 DATE FORMAT:\n    YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n*/\n\nexport const date = function( string ){\n    let date = /^((((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13578]|1[02])[ \\/\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13456789]|1[012])[ \\/\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.]02[ \\/\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ \\/\\-.]02[ \\/\\-.]29))$/g.test( string ),\n        obj = {\n            result: date\n        };\n\n    return obj;\n}\n","\n// https://regex101.com/r/cdlyJy/3\n\nexport const email = function( string ){\n    let obj = {\n        result: /^[a-zA-Z_-]([\\w.-]?[a-zA-Z0-9])*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?){2,})+$/.test( string )\n    };\n\n    return obj;\n}\n","\n/*\n    ALL NUMBERS ( INTEGERS AND FLOATING )\n    VALID NUMBERS: 123 | 123.456 | .123\n*/\n\nexport const number = function( string ){\n    let obj = {\n        result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n    };\n\n    return obj;\n}","\n\nexport const checkbox = function( data ){\n    let formEl = data.fieldEl.closest('form'),\n        dataChecksEl = formEl.querySelector('[name=\"' + data.fieldEl.name + '\"][data-checks]'),\n        obj = { result: data.fieldEl.checked };\n\n    if( dataChecksEl !== null ){\n        obj = this.checks({ attrValue: dataChecksEl.getAttribute('data-checks'), fieldEl: dataChecksEl});\n    }\n\n    return obj;\n}\n","\nimport { checkbox }     from './validationRules/checkbox';\nimport { checks }       from './validationRules/checks';\nimport { equalTo }      from './validationRules/equalTo';\nimport { exactLength }  from './validationRules/exactLength';\nimport { file }         from './validationRules/file';\nimport { length }       from './validationRules/length';\nimport { max }          from './validationRules/max';\nimport { maxlength }    from './validationRules/maxlength';\nimport { min }          from './validationRules/min';\nimport { minlength }    from './validationRules/minlength';\nimport { pattern }      from './validationRules/pattern';\nimport { radio }        from './validationRules/radio';\nimport { requiredFrom } from './validationRules/requiredFrom';\n\nexport const validationRulesAttributes = {\n    checkbox,\n    checks,\n    equalTo,\n    exactLength,\n    file,\n    length,\n    max,\n    maxlength,\n    min,\n    minlength,\n    pattern,\n    radio,\n    requiredFrom,\n}\n","\nexport const checks = function( data ){\n    try {\n        let attrValue = JSON.parse(data.attrValue),\n            fieldEl = data.fieldEl,\n            formEl = fieldEl.closest('form'),\n            checkedElLength = formEl.querySelectorAll('[name=\"' + fieldEl.name + '\"]:checked').length,\n            isMinOk = checkedElLength >= attrValue[0],\n            isMaxOk = checkedElLength <= attrValue[1],\n            obj = { result: isMinOk && isMaxOk };\n\n        if( !obj.result ){\n            obj.errors = { checks: true };\n            if( !isMinOk ){ obj.errors.minChecks = true; }\n            if( !isMaxOk ){ obj.errors.maxChecks = true; }\n        }\n\n        return obj;\n    } catch(e){\n        throw new Error('\"data-checks\" attribute is not a valid array!');\n    }\n}\n","\nexport const equalTo = function( data ){\n    let fieldEl = data.fieldEl,\n        formEl = fieldEl.closest('form'),\n        checkFromEl = formEl.querySelector( '[name=\"' + fieldEl.getAttribute('data-equal-to') + '\"]' ),\n        obj = { result: fieldEl.value === checkFromEl.value };\n\n    if( !obj.result ){\n        obj.errors = { equalTo: true };\n    }\n\n    return obj;\n}\n","\nexport const exactLength = function( data ){\n    let valueLength = data.fieldEl.value.length,\n        exactLength = (data.attrValue * 1),\n        obj = { result: valueLength === exactLength };\n\n    if( !obj.result ){\n        obj.errors = { exactLength: true };\n        if( valueLength < exactLength ){ obj.errors.minlength = true; }\n        else { obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nexport const file = function( data ){\n    let fieldEl = data.fieldEl,\n        maxFileSize = (fieldEl.getAttribute('data-max-file-size') || data.fieldOptions.maxFileSize) * 1,\n        MIMEtype = (fieldEl.accept ? new RegExp(fieldEl.accept.replace( '*', '[^\\\\/,]+' )) : null),\n        filesList = Array.from(fieldEl.files),\n        obj = { result: true };\n\n    filesList.forEach(function( file ){\n        let exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize,\n            isAcceptedFileType = (MIMEtype !== null ? MIMEtype.test(file.type) : true);\n\n        if( exceedMaxFileSize || !isAcceptedFileType ){\n            obj.result = false;\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {};\n            }\n            obj.errors.file = true;\n            if( exceedMaxFileSize ){ obj.errors.maxFileSize = true; }\n            if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true; }\n\n        }\n    });\n\n    return obj;\n}\n","\nexport const length = function( data ){\n    try {\n        let valueL = data.fieldEl.value.length,\n            attrValue = JSON.parse(data.attrValue),\n            isMinlengthOk = valueL >= attrValue[0],\n            isMaxlengthOk = valueL <= attrValue[1],\n            obj = { result: isMinlengthOk && isMaxlengthOk };\n\n        if( !obj.result ){\n            obj.errors = { stringLength: true };\n            if( !isMinlengthOk ){ obj.errors.minlength = true; }\n            if( !isMaxlengthOk ){ obj.errors.maxlength = true; }\n        }\n\n        return obj;\n    } catch(e){\n        throw new Error('\"data-length\" attribute is not a valid array!');\n    }\n}\n","\nimport { getSplitChar } from '../helpers';\n\nexport const max = function( data ){\n    let fieldEl = data.fieldEl,\n        isDate = (fieldEl.matches('[type=\"date\"]') || fieldEl.matches('[data-subtype=\"date\"]') || fieldEl.matches('[data-subtype=\"dateDDMMYYYY\"]')),\n        value = data.fieldEl.value,\n        maxVal = data.attrValue;\n    \n    if( isDate ){\n        let splitChar = getSplitChar( value );\n\n        if( value.indexOf(splitChar) === 2 ){\n            // DD MM YYYY\n            value = value.split( splitChar ).reverse();\n        } else {\n            // YYYY MM DD\n            value = value.split( splitChar );\n        }\n\n        value = value.join('');\n        maxVal = maxVal.split('-').join('');\n    }\n\n    value = value * 1;\n    maxVal = maxVal * 1;\n\n    let obj = { result: value <= maxVal };\n\n    if( !obj.result ){        \n        obj.errors = { max: true };\n    }\n    \n    return obj;\n}\n","\nexport const maxlength = function( data ){\n    const obj = {\n        result: data.fieldEl.value.length <= (data.attrValue * 1)\n    };\n\n    if( !obj.result ){\n        obj.errors = { maxlength: true };\n    }\n\n    return obj;\n}\n","\nimport { getSplitChar } from '../helpers';\n\nexport const min = function( data ){\n    let fieldEl = data.fieldEl,\n        isDate = (fieldEl.matches('[type=\"date\"]') || fieldEl.matches('[data-subtype=\"date\"]') || fieldEl.matches('[data-subtype=\"dateDDMMYYYY\"]')),\n        value = data.fieldEl.value,\n        minVal = data.attrValue;\n    \n    if( isDate ){\n        let splitChar = getSplitChar( value );\n\n        if( value.indexOf(splitChar) === 2 ){\n            // DD MM YYYY\n            value = value.split( splitChar ).reverse();\n        } else {\n            // YYYY MM DD\n            value = value.split( splitChar );\n        }\n\n        value = value.join('');\n        minVal = minVal.split('-').join('');\n    }\n\n    value = value * 1;\n    minVal = minVal * 1;\n\n    let obj = { result: value >= minVal };\n\n    if( !obj.result ){        \n        obj.errors = { min: true };\n    }\n    \n    return obj;\n}\n","\nexport const minlength = function( data ){\n    const obj = {\n        result: data.fieldEl.value.length >= (data.attrValue * 1)\n    };\n\n    if( !obj.result ){\n        obj.errors = { minlength: true };\n    }\n\n    return obj;\n}\n","\nexport const pattern = function( data ){\n    let fieldEl = data.fieldEl,\n        fieldPattern = fieldEl.pattern,\n        fieldRegex = new RegExp( fieldPattern ),\n        obj = { result: fieldRegex.test( fieldEl.value ) };\n\n    if( !obj.result ){\n        obj.errors = { pattern: true };\n    }\n\n    return obj;\n}\n","\nexport const radio = function( data ){\n    let fieldEl = data.fieldEl,\n        fieldChecked = fieldEl.closest('form').querySelector( '[name=\"'+ fieldEl.name +'\"]:checked' ),\n        isValid = fieldChecked !== null && fieldChecked.value.trim().length > 0,\n        obj = { result: isValid };\n\n    return obj;\n}\n","\nexport const requiredFrom = function( data ){\n    let fieldEl = data.fieldEl,\n        formEl = fieldEl.closest('form'),\n        isValidValue = fieldEl.value.trim().length > 0,\n        reqMoreEl = formEl.querySelector( fieldEl.getAttribute('data-required-from') ),\n        checkedEl = formEl.querySelector( '[name=\"'+ reqMoreEl.name +'\"]:checked' ),\n        obj = { result: checkedEl !== null };\n\n    if( reqMoreEl.checked && reqMoreEl.required ){\n        obj.result = isValidValue;\n    }\n\n    if( !obj.result ){\n        obj.errors = { requiredFrom: true };\n    }\n    \n    return obj;\n}\n","\nimport { getValidateFieldDefault, isDOMNode, runFunctionsSequence } from './helpers';\nimport { isValid } from './isValid';\n\nexport function checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    if( !isDOMNode(fieldEl) ){\n        const obj = getValidateFieldDefault({fieldEl});\n        return Promise.resolve(obj);\n    }\n\n    const isValidValue =      fieldEl.value.trim().length > 0,\n          isRequired =        fieldEl.required,\n          isReqFrom =         fieldEl.matches('[data-required-from]'),\n          isValidateIfFilled =fieldEl.matches('[data-validate-if-filled]'),\n          rfsObject = {\n            functionsList: fieldOptions.beforeValidation,\n            data: {fieldEl}\n        };\n\n    return runFunctionsSequence(rfsObject)\n        .then(data => {\n\n            let dataObj = data.pop();\n            return new Promise(resolve => {\n                if(\n                    (!isRequired && !isValidateIfFilled && !isReqFrom) ||   // IT IS A NORMAL FORM FIELD\n                    (isValidateIfFilled && !isValidValue) ||                // IT IS data-validate-if-filled AND EMPTY\n                    (isReqFrom && !isRequired )                             // IT IS data-required-from AND NOT required\n                ){\n\n                    dataObj.result = true;\n                    resolve( dataObj );\n                \n                } else {\n\n                    resolve( isValid( fieldEl, fieldOptions, validationRules, validationErrors ) );\n                    \n                }\n\n            });\n\n        });\n\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const runFunctionsSequence = ( { functionsList = [], data = {}, stopConditionFn = function(){return false} } = {} ) => {\n    return functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1]);\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res);\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result);\n                    return res;\n                });\n        });\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList);\n}\n","\nimport { getValidateFieldDefault, mergeObjects, toCamelCase } from './helpers';\nimport { validationRulesAttributes } from './validationRulesAttributes';\n\nexport function isValid( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    const fieldType = ( fieldEl.matches('[data-subtype]') ? toCamelCase( fieldEl.getAttribute('data-subtype') ) : fieldEl.type ),\n          fieldValue = fieldEl.value,\n          isValidValue = fieldValue.trim().length > 0,\n          // ALPHABETICAL REVERSE ORDER\n          fieldAttributes = Array.from(fieldEl.attributes).sort((a,b) => { return a.name < b.name });\n\n    const attrValidations = [];\n    let attrValidationsResult = isValidValue,\n        obj = getValidateFieldDefault({result: isValidValue, fieldEl});\n\n    if( !obj.result ){\n        obj.errors = { empty: true };\n        return Promise.resolve(obj);\n    }\n\n    // COLLECT SPECIFIC VALIDATIONS FOR validationRulesAttributes\n    fieldAttributes.forEach(attr => {\n        // FOR data-* ATTRIBUTES -> REMOVE \"data-\" AND TRANSFORM TO CAMELCASE\n        const attrName = toCamelCase( attr.name.replace('data-', '') ),\n              attrValue = attr.value,\n              isAttrValueWithFn = attrName === 'type' && typeof validationRulesAttributes[attrValue] === 'function',\n              isAttrNameWithFn = typeof validationRulesAttributes[attrName] === 'function';\n\n        if( isAttrValueWithFn || isAttrNameWithFn ){\n\n            const extraValObj = {\n                    attrName: (isAttrValueWithFn ? attrValue : attrName),\n                    attrValue: attrValue,\n                    fieldEl,\n                    fieldOptions\n                };\n\n            if( isAttrValueWithFn || attrName === 'requiredFrom' ){\n                // THESE VALIDATIONS MUST RUN BEFORE ALL OTHERS\n                attrValidations.unshift( extraValObj );\n            } else {\n                attrValidations.push( extraValObj );\n            }\n\n        }\n    });\n\n    return new Promise(resolve => {\n\n        // RUN SPECIFIC VALIDATIONS FOR validationRulesAttributes\n        attrValidations.forEach(item => {\n            const extraVal = validationRulesAttributes[item.attrName]( item );\n            if( !extraVal.result ){\n                obj = mergeObjects({}, obj, extraVal);\n                attrValidationsResult = false;\n            }\n        });\n\n        // RUN VALIDATIONS FOR validationRules\n        if( typeof validationRules[fieldType] === 'function' ){\n            resolve( validationRules[fieldType](fieldValue, fieldEl) );\n        } else {\n            resolve( obj );\n        }\n\n    }).then(data => {\n\n        obj = mergeObjects( {}, obj, data, {fieldEl} );\n        obj.result = obj.result && attrValidationsResult;\n\n        if( !obj.result ){\n            const fieldErrors = (typeof validationErrors[fieldType] === 'function' ? validationErrors[fieldType](fieldValue, fieldEl) : {});\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {};\n            }\n            obj.errors.rule = true;\n            obj.errors = mergeObjects({}, obj.errors, fieldErrors);\n        }\n        \n        return obj;\n\n    });\n\n}\n","\nimport { version }              from './modules/version';\nimport { mergeObjects }         from './modules/helpers';\nimport { options }              from './modules-lite/options';\nimport { validationRules }      from './modules/validationRules';\nimport { constructorFn }        from './modules-lite/constructor';\nimport { checkFieldValidity }   from './modules/checkFieldValidity';\nimport { checkFormValidity }    from './modules/checkFormValidity';\n\nclass Form {\n\n    constructor( formEl, optionsObj ){\n        constructorFn(this, formEl, optionsObj);\n    }\n\n    destroy(){\n        delete this.formEl.formjs;\n    }\n\n    validateField( fieldEl, fieldOptions ){\n        fieldEl = (typeof fieldEl === 'string' ? this.formEl.querySelector(fieldEl) : fieldEl);\n        fieldOptions = mergeObjects({}, this.options.fieldOptions, fieldOptions);\n        return checkFieldValidity(fieldEl, fieldOptions, this.validationRules, this.validationErrors);\n    }\n\n    validateForm( fieldOptions ){\n        fieldOptions = mergeObjects({}, this.options.fieldOptions, fieldOptions);\n        return checkFormValidity(this.formEl, fieldOptions, this.validationRules, this.validationErrors);\n    }\n    \n    static addValidationErrors( errorsObj ){\n        this.prototype.validationErrors = mergeObjects({}, this.prototype.validationErrors, errorsObj);\n    }\n\n    static addValidationRules( rulesObj ){\n        this.prototype.validationRules = mergeObjects({}, this.prototype.validationRules, rulesObj);\n    }\n    \n    static setOptions( optionsObj ){\n        this.prototype.options = mergeObjects({}, this.prototype.options, optionsObj);\n    }\n\n}\n\nForm.prototype.options = options;\nForm.prototype.validationErrors = {};\nForm.prototype.validationRules = validationRules;\nForm.prototype.version = version;\n\nexport default Form;\n","\nimport { checkFormEl, isNodeList, mergeObjects }   from '../modules/helpers';\n\nexport function constructorFn( self, formEl, optionsObj ){\n\n    let argsL = arguments.length,\n        checkFormElem = checkFormEl(formEl);\n\n    if( argsL === 0 || (argsL > 0 && !formEl) ){\n        throw new Error('First argument \"formEl\" is missing or falsy!');\n    }\n    if( isNodeList(formEl) ){\n        throw new Error('First argument \"formEl\" must be a single DOM node or a form CSS selector, not a NodeList!');\n    }\n    if( !checkFormElem.result ){\n        throw new Error('First argument \"formEl\" is not a DOM node nor a form CSS selector!');\n    }\n\n    self.formEl = checkFormElem.element;\n    self.formEl.formjs = self;\n    self.options = mergeObjects({}, self.constructor.prototype.options, optionsObj);\n\n    // BINDING CONTEXT FOR FUTURE EXECUTION\n    self.options.fieldOptions.beforeValidation = self.options.fieldOptions.beforeValidation.map(cbFn => cbFn.bind(self));\n\n    self.formEl.noValidate = true;\n    \n}\n","\nimport { fieldsStringSelector, getUniqueFields, getValidateFieldDefault, getValidateFormDefault, mergeObjects } from './helpers';\nimport { checkFieldValidity } from './checkFieldValidity';\n\nexport function checkFormValidity( formEl, fieldOptions, validationRules, validationErrors, fieldToSkip = null ){\n\n    fieldOptions = mergeObjects( {}, fieldOptions, {focusOnRelated: false} );\n\n    const obj = getValidateFormDefault(),\n          fieldsList = getUniqueFields( formEl.querySelectorAll(fieldsStringSelector) );\n\n    return Promise.all( fieldsList.map(fieldEl => {\n\n        if( fieldToSkip && fieldEl === fieldToSkip ){\n            const obj2 = getValidateFieldDefault({fieldEl, result: true});\n            return Promise.resolve(obj2);\n        }\n        \n        return checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors );\n\n    }) ).then(list => {\n\n        let areAllFieldsValid = list.filter(fieldObj => !fieldObj.result).length === 0;\n        obj.result = areAllFieldsValid;\n        obj.fields = list;\n\n        return obj;\n\n    });\n\n}\n","\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [],\n        maxFileSize:            10\n    }\n    \n}\n"],"names":["isNodeList","nodeList","NodeList","prototype","isPrototypeOf","isDOMNode","node","Element","checkFormEl","formEl","isString","isFormSelector","document","querySelector","tagName","toLowerCase","result","element","mergeObjects","out","i","arguments","length","obj","key","isArray","Object","toString","call","isObject","hasOwnProperty","concat","slice","Array","push","fieldsStringSelector","getSplitChar","string","splitChar","indexOf","getUniqueFields","currentFieldName","currentFieldType","from","filter","fieldEl","name","type","matches","getValidateFieldDefault","getValidateFormDefault","fields","toCamelCase","replace","all","letter","toUpperCase","validationRules","date","test","email","number","validationRulesAttributes","checkbox","data","dataChecksEl","closest","checked","this","checks","attrValue","getAttribute","JSON","parse","checkedElLength","querySelectorAll","isMinOk","isMaxOk","errors","minChecks","maxChecks","e","Error","equalTo","checkFromEl","value","exactLength","valueLength","minlength","maxlength","file","maxFileSize","fieldOptions","MIMEtype","accept","RegExp","filesList","files","forEach","exceedMaxFileSize","size","isAcceptedFileType","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","stringLength","max","isDate","maxVal","split","reverse","join","min","minVal","pattern","fieldPattern","radio","fieldChecked","trim","requiredFrom","isValidValue","reqMoreEl","required","checkFieldValidity","validationErrors","Promise","resolve","isRequired","isReqFrom","isValidateIfFilled","functionsList","stopConditionFn","reduce","acc","promiseFn","then","res","dataNew","dataList","runFunctionsSequence","beforeValidation","dataObj","pop","fieldType","fieldValue","fieldAttributes","attributes","sort","a","b","attrValidations","attrValidationsResult","attr","attrName","isAttrValueWithFn","isAttrNameWithFn","extraValObj","unshift","item","extraVal","fieldErrors","rule","empty","isValid","Form","optionsObj","self","argsL","checkFormElem","formjs","options","constructor","map","cbFn","bind","noValidate","constructorFn","errorsObj","rulesObj","fieldToSkip","focusOnRelated","fieldsList","obj2","list","areAllFieldsValid","fieldObj","checkFormValidity","version"],"mappings":"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"}