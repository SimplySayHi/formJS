{"version":3,"file":"formjs-systemjs.min.js","sources":["../../src/modules/helpers/isNodeList.js","../../src/modules/helpers/isDOMNode.js","../../src/modules/helpers/isPlainObject.js","../../src/modules/helpers/mergeObjects.js","../../src/modules/helpers/dispatchCustomEvent.js","../../src/modules/helpers/getDateAsNumber.js","../../src/modules/helpers/getSplitChar.js","../../src/modules/helpers/mergeValidateFieldDefault.js","../../src/modules/helpers/toCamelCase.js","../../src/modules-lite/helpers/customEvents.js","../../src/modules/validationRules.js","../../src/modules/validationRules/date.js","../../src/modules/validationRules/email.js","../../src/modules/validationRules/number.js","../../src/modules/validationRules/checkbox.js","../../src/modules/validationRules/checks.js","../../src/modules/validationRules/equalTo.js","../../src/modules/validationRules/exactLength.js","../../src/modules/validationRules/file.js","../../src/modules/validationRules/length.js","../../src/modules/validationRules/max.js","../../src/modules/validationRules/maxlength.js","../../src/modules/validationRules/min.js","../../src/modules/validationRules/minlength.js","../../src/modules/validationRules/pattern.js","../../src/modules/validationRules/radio.js","../../src/modules/checkFieldValidity.js","../../src/modules/helpers/getJSONobjectFromFieldAttribute.js","../../src/modules/helpers/runFunctionsSequence.js","../../src/modules/isValid.js","../../src/modules/helpers/removeClass.js","../../src/modules/checkFieldsValidity.js","../../src/modules/helpers/getUniqueFields.js","../../src/modules/helpers/mergeValidateFormDefault.js","../../src/index-lite.js","../../src/modules/helpers/checkFormEl.js","../../src/modules/helpers/finalizeFieldPromise.js","../../src/modules/helpers/fieldsStringSelector.js","../../src/modules/helpers/finalizeFormPromise.js","../../src/modules-lite/options.js"],"sourcesContent":["\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList )\n}\n","\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node )\n}\n","\nexport const isPlainObject = object => {\n    return Object.prototype.toString.call( object ) === '[object Object]'\n}\n","\nimport { isPlainObject } from './isPlainObject'\n\nexport const mergeObjects = function( out = {} ){\n    Array.from(arguments).slice(1).filter(arg => !!arg).forEach(arg => {\n        Object.keys(arg).forEach(key => {\n            if( Array.isArray(arg[key]) ){\n                out[key] = (out[key] || []).concat( arg[key].slice(0) )\n            } else if( isPlainObject(arg[key]) ){\n                out[key] = mergeObjects((out[key] || {}), arg[key])\n            } else {\n                // * STRING | NUMBER | BOOLEAN | FUNCTION\n                if( Array.isArray(out[key]) ){\n                    // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                    out[key].push(arg[key])\n                } else {\n                    out[key] = arg[key]\n                }\n            }\n        })\n    })\n\n    return out\n}\n","\nimport { mergeObjects } from './mergeObjects'\n\nexport const dispatchCustomEvent = ( elem, eventName, eventOptions ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions)\n    const eventObj = new CustomEvent(eventName, eventOptions)\n    elem.dispatchEvent( eventObj )\n}\n","\nimport { getSplitChar } from './getSplitChar'\n\nconst formatMap = {\n    'YYYY-MM-DD': function(dateArray){\n        return dateArray\n    },\n    'MM-DD-YYYY': function(dateArray){\n        return [dateArray[2], dateArray[0], dateArray[1]]\n    },\n    'DD-MM-YYYY': function(dateArray){\n        return dateArray.reverse()\n    }\n}\n\nexport const getDateAsNumber = ( dateString, dateFormat ) => {\n    dateFormat = dateFormat || 'YYYY-MM-DD'\n    const splitChar = getSplitChar(dateString)\n\n    if( dateFormat.indexOf(splitChar) < 0 ){\n        return\n    }\n\n    dateFormat = dateFormat.replace(/[^YMD]/g, '-')\n    dateString = dateString.split(splitChar)\n    dateString = formatMap[dateFormat](dateString).join('')\n    \n    return dateString\n}\n","\nexport const getSplitChar = string => {\n    // MATCH ANY NON-DIGIT CHAR\n    const separator = string.match(/\\D/)\n    return (separator && separator.length > 0) ? separator[0] : null\n}\n","\nimport { mergeObjects } from './mergeObjects'\n\nexport const mergeValidateFieldDefault = obj => {\n    return mergeObjects({}, { result: false, $field: null }, obj)\n}\n","\nexport const toCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase() })\n}\n","\nexport const customEvents = {\n    field: {\n        validation: 'fjs.field:validation'\n    },\n    form: {\n        destroy:    'fjs.form:destroy',\n        init:       'fjs.form:init',\n        validation: 'fjs.form:validation'\n    }\n}\n","\nimport { date }         from './validationRules/date'\nimport { email }        from './validationRules/email'\nimport { number }       from './validationRules/number'\n\nimport { checkbox }     from './validationRules/checkbox'\nimport { equalTo }      from './validationRules/equalTo'\nimport { exactLength }  from './validationRules/exactLength'\nimport { file }         from './validationRules/file'\nimport { length }       from './validationRules/length'\nimport { max }          from './validationRules/max'\nimport { maxlength }    from './validationRules/maxlength'\nimport { min }          from './validationRules/min'\nimport { minlength }    from './validationRules/minlength'\nimport { pattern }      from './validationRules/pattern'\nimport { radio }        from './validationRules/radio'\n\nexport const validationRules = {\n    date,\n    email,\n    number,\n\n    checkbox,\n    equalTo,\n    exactLength,\n    file,\n    length,\n    max,\n    maxlength,\n    min,\n    minlength,\n    pattern,\n    radio\n}\n","\n/*\n    DATE AS ISO 8601 DATE FORMAT:\n    YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n*/\n\nexport const date = function( string ){\n    return {\n        result: /^((((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13578]|1[02])[ \\/\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13456789]|1[012])[ \\/\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.]02[ \\/\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ \\/\\-.]02[ \\/\\-.]29))$/g.test( string )\n    }\n}\n","\n// https://regex101.com/r/cdlyJy/3\n\nexport const email = function( string ){\n    return {\n        result: /^[a-zA-Z_-]([\\w.-]?[a-zA-Z0-9])*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?){2,})+$/.test( string )\n    }\n}\n","\n/*\n    ALL NUMBERS ( INTEGERS AND FLOATING )\n    VALID NUMBERS: 123 | 123.456 | .123\n*/\n\nexport const number = function( string ){\n    return {\n        result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n    }\n}","\nimport { checks } from './checks'\n\nexport const checkbox = function( value, $field ){\n    const $dataChecks = $field.form.querySelector(`[name=\"${$field.name}\"][data-checks]`)\n    return $dataChecks ? checks($dataChecks) : { result: $field.checked }\n}\n","\nexport const checks = function( $field ){\n    const attrValue = JSON.parse( $field.dataset.checks )\n    const checkedLength = $field.form.querySelectorAll(`[name=\"${$field.name}\"]:checked`).length\n    const isMinOk = checkedLength >= attrValue[0]\n    const isMaxOk = checkedLength <= attrValue[1]\n    const obj = { result: isMinOk && isMaxOk }\n\n    if( !obj.result ){\n        obj.errors = { checks: true }\n        if( !isMinOk ){ obj.errors.minChecks = true }\n        if( !isMaxOk ){ obj.errors.maxChecks = true }\n    }\n\n    return obj\n}\n","\nexport const equalTo = function( value, $field ){\n    const $checkFrom = $field.form.querySelector( `[name=\"${$field.dataset.equalTo}\"]` )\n    return { result: value === $checkFrom.value }\n}\n","\nexport const exactLength = function( value, $field ){\n    const valueLength = value.length\n    const exactLength = $field.dataset.exactLength * 1\n    const obj = { result: valueLength === exactLength }\n\n    if( !obj.result ){\n        obj.errors = {}\n        if( valueLength < exactLength ){ obj.errors.minlength = true }\n        else { obj.errors.maxlength = true }\n    }\n\n    return obj\n}\n","\nexport const file = function( value, $field, fieldOptions ){\n    const maxFileSize = ($field.getAttribute('data-max-file-size') || fieldOptions.maxFileSize) * 1\n    const MIMEtype = $field.accept ? new RegExp($field.accept.replace( '*', '[^\\\\/,]+' )) : null\n    const filesList = Array.from($field.files)\n    const obj = { result: true }\n\n    filesList.forEach(file => {\n        const exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize\n        const isAcceptedFileType = MIMEtype !== null ? MIMEtype.test(file.type) : true\n\n        if( exceedMaxFileSize || !isAcceptedFileType ){\n            obj.result = false\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {}\n            }\n            if( exceedMaxFileSize ){ obj.errors.maxFileSize = true }\n            if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true }\n\n        }\n    })\n\n    return obj\n}\n","\nexport const length = function( value, $field ){\n    const valueL = value.length\n    const attrValue = JSON.parse( $field.dataset.length )\n    const isMinlengthOk = valueL >= attrValue[0]\n    const isMaxlengthOk = valueL <= attrValue[1]\n    const obj = { result: isMinlengthOk && isMaxlengthOk }\n\n    if( !obj.result ){\n        obj.errors = {}\n        if( !isMinlengthOk ){ obj.errors.minlength = true }\n        if( !isMaxlengthOk ){ obj.errors.maxlength = true }\n    }\n\n    return obj\n}\n","\nimport { getDateAsNumber } from '../helpers'\n\nexport const max = function( value, $field ){\n    let maxVal = $field.max\n    const dateFormat = $field.dataset.dateFormat\n    \n    if( $field.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat )\n        maxVal = maxVal.split('-').join('')\n    }\n\n    value = value * 1\n    maxVal = maxVal * 1\n    \n    return { result: value <= maxVal }\n}\n","\nexport const maxlength = function( value, $field ){\n    return { result: value.length <= $field.maxLength * 1 }\n}\n","\nimport { getDateAsNumber } from '../helpers'\n\nexport const min = function( value, $field ){\n    let minVal = $field.min\n    const dateFormat = $field.dataset.dateFormat\n    \n    if( $field.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat )\n        minVal = minVal.split('-').join('')\n    }\n\n    value = value * 1\n    minVal = minVal * 1\n    \n    return { result: value >= minVal }\n}\n","\nexport const minlength = function( value, $field ){\n    return { result: value.length >= $field.minLength * 1 }\n}\n","\nexport const pattern = function( value, $field ){\n    return { result: new RegExp($field.pattern).test(value) }\n}\n","\nexport const radio = function( value, $field ){\n    const $fieldChecked = $field.form.querySelector( `[name=\"${$field.name}\"]:checked` )\n    const isValid = $fieldChecked !== null && $fieldChecked.value.trim().length > 0\n\n    return { result: isValid }\n}\n","\nimport {    \n    getJSONobjectFromFieldAttribute,\n    isDOMNode,\n    mergeObjects,\n    mergeValidateFieldDefault,\n    removeClass,\n    runFunctionsSequence\n}                   from './helpers'\nimport { isValid }  from './isValid'\n\nexport async function checkFieldValidity( $field, fieldOptions, validationRules, validationErrors ){\n\n    if( !isDOMNode($field) ){\n        const obj = mergeValidateFieldDefault({$field})\n        return Promise.resolve(obj)\n    }\n\n    const $form = $field.form\n    const isValidValue = $field.value.trim().length > 0\n    const dataFieldOptions = getJSONobjectFromFieldAttribute( $field, 'data-field-options' )\n\n    fieldOptions = mergeObjects( fieldOptions, dataFieldOptions )\n\n    // HANDLE FIELD data-required-from WHEN CHANGING ITS RELATED RADIO\n    if( $field.type === 'radio' ){\n        const $checked = $field.checked ? $field : $form.querySelector(`[name=\"${$field.name}\"]:checked`)\n        const reqMoreIsChecked = $checked && $checked.matches('[data-require-more]')\n        const $findReqMore = reqMoreIsChecked ? $checked : $form.querySelector(`[data-require-more][name=\"${$field.name}\"]`)\n        const $findReqFrom = $findReqMore ? $form.querySelector(`[data-required-from=\"#${$findReqMore.id}\"]`) : null\n        \n        if( $checked && $findReqFrom ){\n            $findReqFrom.required = $findReqMore.required && $findReqMore.checked\n            if( !reqMoreIsChecked ){\n                $findReqFrom.value = ''\n            } else if( fieldOptions.focusOnRelated ) {\n                $findReqFrom.focus()\n            }\n        }\n    }\n\n    // HANDLE FIELD data-require-more & data-required-from WHEN *-from IT'S FILLED\n    if( $field.matches('[data-required-from]') && isValidValue ){\n        const $reqMore = $form.querySelector( $field.dataset.requiredFrom )\n        $reqMore.checked = true\n        $field.required = $reqMore.required\n    }\n\n    const dataBeforeValidation = await runFunctionsSequence({\n        functionsList: fieldOptions.beforeValidation,\n        data: { $field, fieldOptions }\n    })\n\n    const dataObj = dataBeforeValidation.pop()\n    const needsValidation = $field.required || ($field.matches('[data-validate-if-filled]') && isValidValue)\n\n    if( !needsValidation ){\n        dataObj.result = true\n    }\n    \n    const validationResult = needsValidation ? await isValid($field, fieldOptions, validationRules, validationErrors) : dataObj\n\n    const $container = fieldOptions.questionContainer && validationResult.$field.closest( fieldOptions.questionContainer )\n    if( $container ){\n        removeClass( $container, fieldOptions.cssClasses.pending )\n    }\n    \n    return validationResult\n\n}\n","\nexport const getJSONobjectFromFieldAttribute = ( $field, attrName ) => {\n    const $customAttr = $field.closest(`[${attrName}]`)\n    return ($customAttr && JSON.parse($customAttr.getAttribute(attrName))) || {}\n}\n","\nimport { mergeObjects } from './mergeObjects'\n\nexport const runFunctionsSequence = ( { functionsList = [], data = {}, stopConditionFn = () => false } = {} ) => {\n    return functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1])\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res)\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result)\n                    return res\n                })\n        })\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList)\n}\n","\nimport { mergeValidateFieldDefault, mergeObjects, toCamelCase } from './helpers'\n\nexport async function isValid( $field, fieldOptions, validationRules, validationErrors ){\n\n    const fieldValue = $field.value\n    const obj = mergeValidateFieldDefault({result: fieldValue.trim().length > 0, $field})\n    const isCheckboxOrRadio = ['checkbox', 'radio'].includes($field.type)\n    const hasSelectedInput = $field.form.querySelectorAll(`[name=\"${$field.name}\"]:checked`).length > 0\n\n    if( (!isCheckboxOrRadio && !obj.result) || (isCheckboxOrRadio && !hasSelectedInput) ){\n        obj.result = false\n        obj.errors = { empty: true }\n        return Promise.resolve(obj)\n    }\n\n    // COLLECT VALIDATION METHOD NAMES ( USED TO RUN VALIDATIONS AND GET ERRORS )\n    const validationMethods = Array.from($field.attributes).reduce((accList, attr) => {\n        const attrName = toCamelCase( attr.name.replace('data-', '') )\n        const attrValue = toCamelCase( attr.value )\n        const isAttrValueWithFn = ['type', 'subtype'].includes(attrName) && validationRules[attrValue]\n        const isAttrNameWithFn = validationRules[attrName]\n\n        if( isAttrValueWithFn || isAttrNameWithFn ){\n            accList.push( isAttrValueWithFn ? attrValue : attrName )\n        }\n        return accList\n    }, [])\n\n    const validity = await new Promise(resolve => {\n\n        // RUN VALIDATIONS\n        const validationsResult = validationMethods.reduce((accPromise, methodName) => {\n            return accPromise.then(accObj => {\n                return new Promise(resolveVal => {\n                    // RUN VALIDATION INSIDE A PROMISE IS USEFUL FOR ASYNC VALIDATIONS\n                    resolveVal( validationRules[methodName](fieldValue, $field, fieldOptions) )\n                }).then(valObj => {\n                    // ADD CUSTOM ERROR-KEY FOR EACH VALIDATION RULE\n                    if( !valObj.result ){\n                        const errorObj = {}\n                        if( typeof valObj.errors === 'undefined' || typeof valObj.errors[methodName] === 'undefined' ){\n                            errorObj[methodName] = true\n                        }\n                        valObj.errors = mergeObjects({}, valObj.errors, errorObj)\n                    }\n                    valObj = valObj.result ? {} : valObj\n                    return mergeObjects(accObj, valObj)\n                })\n            })\n        }, Promise.resolve(obj))\n        resolve(validationsResult)\n\n    })\n\n    if( !validity.result ){\n        validity.errors = validationMethods.reduce((accObj, methodName) => {\n            const errors = (validationErrors[methodName] && validationErrors[methodName](fieldValue, $field)) || {}\n            return mergeObjects(accObj, errors)\n        }, validity.errors)\n    }\n\n    return validity\n\n}\n","\nexport const removeClass = ( element, cssClasses ) => {\n    element.classList.remove( ...cssClasses.split(' ') )\n}\n","\nimport { getUniqueFields, mergeValidateFieldDefault, mergeValidateFormDefault, mergeObjects } from './helpers'\nimport { checkFieldValidity } from './checkFieldValidity'\n\nexport async function checkFieldsValidity( $fields, fieldOptions, validationRules, validationErrors, fieldToSkip = null ){\n\n    fieldOptions = mergeObjects( {}, fieldOptions, {focusOnRelated: false} )\n    const $fieldsList = getUniqueFields( $fields )\n\n    const fieldsValidity = await Promise.all( $fieldsList.map($field => {\n\n        if( fieldToSkip && $field === fieldToSkip ){\n            const obj = mergeValidateFieldDefault({$field, result: true})\n            return Promise.resolve(obj)\n        }\n        \n        return checkFieldValidity( $field, fieldOptions, validationRules, validationErrors )\n\n    }) )\n\n    const areAllFieldsValid = fieldsValidity.every(({result}) => result)\n\n    return mergeValidateFormDefault({result: areAllFieldsValid, fields:fieldsValidity})\n\n}\n","\nexport const getUniqueFields = $nodeList => {\n\n    let currentFieldName = ''\n    let currentFieldType = ''\n\n    return Array.from( $nodeList ).filter($field => {\n        const name = $field.name\n        const type = $field.type\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false\n        }\n        \n        if( !$field.matches('[data-required-from]') ){\n            currentFieldName = name\n            currentFieldType = type\n        }\n        \n        return true\n    })\n    \n}\n","\nimport { mergeObjects } from './mergeObjects'\n\nexport const mergeValidateFormDefault = obj => {\n    return mergeObjects({}, { result: true, fields: [] }, obj)\n}\n","\nimport { version }              from '../package.json'\nimport { \n    checkFormEl,\n    dispatchCustomEvent,\n    fieldsStringSelector,\n    finalizeFieldPromise,\n    finalizeFormPromise,\n    isNodeList,\n    mergeObjects }              from './modules/helpers'\nimport { customEvents }         from './modules-lite/helpers/customEvents'\nimport { options }              from './modules-lite/options'\nimport { validationRules }      from './modules/validationRules'\nimport { checkFieldValidity }   from './modules/checkFieldValidity'\nimport { checkFieldsValidity }  from './modules/checkFieldsValidity'\n\nclass Form {\n\n    constructor( form, optionsObj ){\n        const argsL = arguments.length\n        const checkFormElem = checkFormEl(form)\n\n        if( argsL === 0 || (argsL > 0 && !form) ){\n            throw new Error('First argument \"form\" is missing or falsy!')\n        }\n        if( isNodeList(form) ){\n            throw new Error('First argument \"form\" must be a single DOM node or a form CSS selector, not a NodeList!')\n        }\n        if( !checkFormElem.result ){\n            throw new Error('First argument \"form\" is not a DOM node nor a form CSS selector!')\n        }\n\n        const self = this\n\n        self.$form = checkFormElem.$el\n        self.$form.formjs = self\n        self.options = mergeObjects({}, Form.prototype.options, optionsObj)\n\n        // BINDING CONTEXT FOR FUTURE EXECUTION\n        self.options.fieldOptions.beforeValidation = self.options.fieldOptions.beforeValidation.map(cbFn => cbFn.bind(self))\n\n        self.$form.noValidate = true\n\n        dispatchCustomEvent( self.$form, customEvents.form.init )\n    }\n\n    destroy(){\n        delete this.$form.formjs\n        dispatchCustomEvent( this.$form, customEvents.form.destroy )\n    }\n\n    async validateField( field, fieldOptions ){\n        const self = this\n        const $field = typeof field === 'string' ? self.$form.querySelector(field) : field\n        \n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions)\n        \n        const fieldValidity = await checkFieldValidity($field, fieldOptions, self.validationRules, self.validationErrors)\n\n        dispatchCustomEvent( fieldValidity.$field, customEvents.field.validation, { detail: fieldValidity } )\n\n        return finalizeFieldPromise(fieldValidity)\n    }\n\n    async validateForm( fieldOptions ){\n        const self = this\n        const $form = self.$form\n        const $fields = $form.querySelectorAll(fieldsStringSelector)\n\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions)\n\n        const formVaidity = await checkFieldsValidity($fields, fieldOptions, self.validationRules, self.validationErrors)\n\n        formVaidity.fields.forEach(obj => {\n            obj.isCheckingForm = true\n            dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } )\n        })\n\n        dispatchCustomEvent( $form, customEvents.form.validation, { detail: formVaidity } )\n\n        return finalizeFormPromise(formVaidity)\n    }\n    \n    static addValidationErrors( errorsObj ){\n        Form.prototype.validationErrors = mergeObjects({}, Form.prototype.validationErrors, errorsObj)\n    }\n\n    static addValidationRules( rulesObj ){\n        Form.prototype.validationRules = mergeObjects({}, Form.prototype.validationRules, rulesObj)\n    }\n    \n    static setOptions( optionsObj ){\n        Form.prototype.options = mergeObjects({}, Form.prototype.options, optionsObj)\n    }\n\n}\n\nForm.prototype.options = options\nForm.prototype.validationErrors = {}\nForm.prototype.validationRules = validationRules\nForm.prototype.version = version\n\nexport default Form\n","\nimport { isDOMNode } from './isDOMNode'\n\nexport const checkFormEl = form => {\n    const typeofForm = typeof form\n    const isValidNodeSelector = typeofForm === 'string' && isDOMNode(document.querySelector(form))\n    const isFormSelector = isValidNodeSelector && document.querySelector(form).tagName.toLowerCase() === 'form'\n    \n    return {\n        result: isDOMNode(form) || isFormSelector,\n        $el: (typeofForm === 'string' ? document.querySelector(form) : form)\n    }\n}\n","\nexport const finalizeFieldPromise = ({errors, result}) => {\n    if( result ){\n        return Promise.resolve()\n    }\n    return Promise.reject(errors)\n}\n","\nexport const fieldsStringSelector = 'input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"hidden\"]), select, textarea'\n","\nexport const finalizeFormPromise = ({fields, result}) => {\n    if( result ){\n        return Promise.resolve(fields)\n    }\n    return Promise.reject(fields)\n}\n","\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [],\n        focusOnRelated:         true,\n        maxFileSize:            10\n    }\n    \n}\n"],"names":["isDOMNode","node","Element","prototype","isPrototypeOf","isPlainObject","object","Object","toString","call","mergeObjects","out","Array","from","arguments","slice","filter","arg","forEach","keys","key","isArray","concat","push","dispatchCustomEvent","elem","eventName","eventOptions","bubbles","eventObj","CustomEvent","dispatchEvent","formatMap","YYYY-MM-DD","dateArray","MM-DD-YYYY","DD-MM-YYYY","reverse","getDateAsNumber","dateString","dateFormat","splitChar","string","separator","match","length","getSplitChar","indexOf","replace","split","join","mergeValidateFieldDefault","obj","result","$field","toCamelCase","all","letter","toUpperCase","customEvents","validation","destroy","init","validationRules","date","test","email","number","checkbox","value","$dataChecks","form","querySelector","name","attrValue","JSON","parse","dataset","checks","checkedLength","querySelectorAll","isMinOk","isMaxOk","errors","minChecks","maxChecks","checked","equalTo","exactLength","valueLength","minlength","maxlength","file","fieldOptions","maxFileSize","getAttribute","MIMEtype","accept","RegExp","filesList","files","exceedMaxFileSize","size","isAcceptedFileType","type","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","max","maxVal","maxLength","min","minVal","minLength","pattern","radio","$fieldChecked","trim","async","checkFieldValidity","validationErrors","Promise","resolve","$form","isValidValue","dataFieldOptions","attrName","$customAttr","closest","getJSONobjectFromFieldAttribute","$checked","reqMoreIsChecked","matches","$findReqMore","$findReqFrom","id","required","focusOnRelated","focus","$reqMore","requiredFrom","dataObj","functionsList","data","stopConditionFn","reduce","acc","promiseFn","then","res","dataNew","dataList","runFunctionsSequence","beforeValidation","pop","needsValidation","validationResult","fieldValue","isCheckboxOrRadio","includes","hasSelectedInput","empty","validationMethods","attributes","accList","attr","isAttrValueWithFn","isAttrNameWithFn","validity","accPromise","methodName","accObj","resolveVal","valObj","errorObj","isValid","$container","questionContainer","element","cssClasses","pending","classList","remove","checkFieldsValidity","$fields","fieldToSkip","$fieldsList","$nodeList","currentFieldName","currentFieldType","getUniqueFields","fieldsValidity","map","areAllFieldsValid","every","fields","Form","constructor","optionsObj","argsL","checkFormElem","typeofForm","isFormSelector","document","tagName","toLowerCase","$el","checkFormEl","Error","nodeList","NodeList","self","this","formjs","options","cbFn","bind","noValidate","[object Object]","field","fieldValidity","detail","reject","finalizeFieldPromise","formVaidity","isCheckingForm","finalizeFormPromise","errorsObj","rulesObj","exports","version"],"mappings":";uEACO,MCAMA,EAAYC,GACdC,QAAQC,UAAUC,cAAeH,GCD/BI,EAAgBC,GAC2B,oBAA7CC,OAAOJ,UAAUK,SAASC,KAAMH,GCC9BI,EAAe,SAAUC,EAAM,IAmBxC,OAlBAC,MAAMC,KAAKC,WAAWC,MAAM,GAAGC,OAAOC,KAASA,GAAKC,QAAQD,IACxDV,OAAOY,KAAKF,GAAKC,QAAQE,IACjBR,MAAMS,QAAQJ,EAAIG,IAClBT,EAAIS,IAAQT,EAAIS,IAAQ,IAAIE,OAAQL,EAAIG,GAAKL,MAAM,IAC5CV,EAAcY,EAAIG,IACzBT,EAAIS,GAAOV,EAAcC,EAAIS,IAAQ,GAAKH,EAAIG,IAG1CR,MAAMS,QAAQV,EAAIS,IAElBT,EAAIS,GAAKG,KAAKN,EAAIG,IAElBT,EAAIS,GAAOH,EAAIG,OAMxBT,GCnBEa,EAAsB,CAAEC,EAAMC,EAAWC,KAClDA,EAAejB,EAAa,GAAI,CAAEkB,SAAS,GAAQD,GACnD,MAAME,EAAW,IAAIC,YAAYJ,EAAWC,GAC5CF,EAAKM,cAAeF,ICHlBG,EAAY,CACdC,aAAc,SAASC,GACnB,OAAOA,GAEXC,aAAc,SAASD,GACnB,MAAO,CAACA,EAAU,GAAIA,EAAU,GAAIA,EAAU,KAElDE,aAAc,SAASF,GACnB,OAAOA,EAAUG,YAIZC,EAAkB,CAAEC,EAAYC,KACzCA,EAAaA,GAAc,aAC3B,MAAMC,EChBkBC,CAAAA,IAExB,MAAMC,EAAYD,EAAOE,MAAM,MAC/B,OAAQD,GAAaA,EAAUE,OAAS,EAAKF,EAAU,GAAK,MDa1CG,CAAaP,GAE/B,KAAIC,EAAWO,QAAQN,GAAa,GAQpC,OAJAD,EAAaA,EAAWQ,QAAQ,UAAW,KAC3CT,EAAaA,EAAWU,MAAMR,GAC9BF,EAAaP,EAAUQ,GAAYD,GAAYW,KAAK,KEtB3CC,EAA4BC,GAC9B1C,EAAa,GAAI,CAAE2C,QAAQ,EAAOC,OAAQ,MAAQF,GCHhDG,EAAcb,GAChBA,EAAOM,QAAQ,aAAc,CAACQ,EAAKC,IAAoBA,EAAOC,eCD5DC,EACF,CACHC,WAAY,wBAFPD,EAIH,CACFE,QAAY,mBACZC,KAAY,gBACZF,WAAY,uBCSPG,EAAkB,CAC3BC,KCZgB,SAAUtB,GAC1B,MAAO,CACHW,OAAQ,iUAAiUY,KAAMvB,KDWnVwB,MEhBiB,SAAUxB,GAC3B,MAAO,CACHW,OAAQ,4IAA4IY,KAAMvB,KFe9JyB,OGdkB,SAAUzB,GAC5B,MAAO,CACHW,OAAQ,0BAA0BY,KAAMvB,KHc5C0B,SInBoB,SAAUC,EAAOf,GACrC,MAAMgB,EAAchB,EAAOiB,KAAKC,cAAe,UAASlB,EAAOmB,uBAC/D,OAAOH,ECJW,SAAUhB,GAC5B,MAAMoB,EAAYC,KAAKC,MAAOtB,EAAOuB,QAAQC,QACvCC,EAAgBzB,EAAOiB,KAAKS,iBAAkB,UAAS1B,EAAOmB,kBAAkB5B,OAChFoC,EAAUF,GAAiBL,EAAU,GACrCQ,EAAUH,GAAiBL,EAAU,GACrCtB,EAAM,CAAEC,OAAQ4B,GAAWC,GAQjC,OANK9B,EAAIC,SACLD,EAAI+B,OAAS,CAAEL,QAAQ,GAClBG,IAAW7B,EAAI+B,OAAOC,WAAY,GAClCF,IAAW9B,EAAI+B,OAAOE,WAAY,IAGpCjC,EDTc0B,CAAOR,GAAe,CAAEjB,OAAQC,EAAOgC,UJkB5DC,QMtBmB,SAAUlB,EAAOf,GAEpC,MAAO,CAAED,OAAQgB,IADEf,EAAOiB,KAAKC,cAAgB,UAASlB,EAAOuB,QAAQU,aACjClB,QNqBtCmB,YOvBuB,SAAUnB,EAAOf,GACxC,MAAMmC,EAAcpB,EAAMxB,OACpB2C,EAA2C,EAA7BlC,EAAOuB,QAAQW,YAC7BpC,EAAM,CAAEC,OAAQoC,IAAgBD,GAQtC,OANKpC,EAAIC,SACLD,EAAI+B,OAAS,GACTM,EAAcD,EAAepC,EAAI+B,OAAOO,WAAY,EACjDtC,EAAI+B,OAAOQ,WAAY,GAG3BvC,GPaPwC,KQxBgB,SAAUvB,EAAOf,EAAQuC,GACzC,MAAMC,EAAwF,GAAzExC,EAAOyC,aAAa,uBAAyBF,EAAaC,aACzEE,EAAW1C,EAAO2C,OAAS,IAAIC,OAAO5C,EAAO2C,OAAOjD,QAAS,IAAK,aAAgB,KAClFmD,EAAYvF,MAAMC,KAAKyC,EAAO8C,OAC9BhD,EAAM,CAAEC,QAAQ,GAiBtB,OAfA8C,EAAUjF,QAAQ0E,IACd,MAAMS,EAAoBP,EAAc,GAAMF,EAAKU,KAAK,KAAK,KAAQR,EAC/DS,EAAkC,OAAbP,GAAoBA,EAAS/B,KAAK2B,EAAKY,OAE9DH,GAAsBE,IACtBnD,EAAIC,QAAS,OACa,IAAfD,EAAI+B,SACX/B,EAAI+B,OAAS,IAEbkB,IAAqBjD,EAAI+B,OAAOW,aAAc,GAC7CS,IAAsBnD,EAAI+B,OAAOsB,kBAAmB,MAK1DrD,GRIPP,OSzBkB,SAAUwB,EAAOf,GACnC,MAAMoD,EAASrC,EAAMxB,OACf6B,EAAYC,KAAKC,MAAOtB,EAAOuB,QAAQhC,QACvC8D,EAAgBD,GAAUhC,EAAU,GACpCkC,EAAgBF,GAAUhC,EAAU,GACpCtB,EAAM,CAAEC,OAAQsD,GAAiBC,GAQvC,OANKxD,EAAIC,SACLD,EAAI+B,OAAS,GACRwB,IAAiBvD,EAAI+B,OAAOO,WAAY,GACxCkB,IAAiBxD,EAAI+B,OAAOQ,WAAY,IAG1CvC,GTaPyD,IUxBe,SAAUxC,EAAOf,GAChC,IAAIwD,EAASxD,EAAOuD,IACpB,MAAMrE,EAAac,EAAOuB,QAAQrC,WAUlC,OARoB,SAAhBc,EAAOkD,MAAmBhE,KAC1B6B,EAAQ/B,EAAiB+B,EAAO7B,GAChCsE,EAASA,EAAO7D,MAAM,KAAKC,KAAK,KAIpC4D,GAAkB,EAEX,CAAEzD,QAHTgB,GAAgB,IAGUyC,IVa1BnB,UW3BqB,SAAUtB,EAAOf,GACtC,MAAO,CAAED,OAAQgB,EAAMxB,QAA6B,EAAnBS,EAAOyD,YX2BxCC,IY1Be,SAAU3C,EAAOf,GAChC,IAAI2D,EAAS3D,EAAO0D,IACpB,MAAMxE,EAAac,EAAOuB,QAAQrC,WAUlC,OARoB,SAAhBc,EAAOkD,MAAmBhE,KAC1B6B,EAAQ/B,EAAiB+B,EAAO7B,GAChCyE,EAASA,EAAOhE,MAAM,KAAKC,KAAK,KAIpC+D,GAAkB,EAEX,CAAE5D,QAHTgB,GAAgB,IAGU4C,IZe1BvB,Ua7BqB,SAAUrB,EAAOf,GACtC,MAAO,CAAED,OAAQgB,EAAMxB,QAA6B,EAAnBS,EAAO4D,Yb6BxCC,Qc9BmB,SAAU9C,EAAOf,GACpC,MAAO,CAAED,OAAQ,IAAI6C,OAAO5C,EAAO6D,SAASlD,KAAKI,Kd8BjD+C,Me/BiB,SAAU/C,EAAOf,GAClC,MAAM+D,EAAgB/D,EAAOiB,KAAKC,cAAgB,UAASlB,EAAOmB,kBAGlE,MAAO,CAAEpB,OAFyB,OAAlBgE,GAA0BA,EAAchD,MAAMiD,OAAOzE,OAAS,KCQ3E0E,eAAeC,EAAoBlE,EAAQuC,EAAc9B,EAAiB0D,GAE7E,IAAKzH,EAAUsD,GAAS,CACpB,MAAMF,EAAMD,EAA0B,CAACG,OAAAA,IACvC,OAAOoE,QAAQC,QAAQvE,GAG3B,MAAMwE,EAAQtE,EAAOiB,KACfsD,EAAevE,EAAOe,MAAMiD,OAAOzE,OAAS,EAC5CiF,ECnBqC,EAAExE,EAAQyE,KACrD,MAAMC,EAAc1E,EAAO2E,QAAS,IAAGF,MACvC,OAAQC,GAAerD,KAAKC,MAAMoD,EAAYjC,aAAagC,KAAe,IDiBjDG,CAAiC5E,EAAQ,sBAKlE,GAHAuC,EAAenF,EAAcmF,EAAciC,GAGvB,UAAhBxE,EAAOkD,KAAkB,CACzB,MAAM2B,EAAW7E,EAAOgC,QAAUhC,EAASsE,EAAMpD,cAAe,UAASlB,EAAOmB,kBAC1E2D,EAAmBD,GAAYA,EAASE,QAAQ,uBAChDC,EAAeF,EAAmBD,EAAWP,EAAMpD,cAAe,6BAA4BlB,EAAOmB,UACrG8D,EAAeD,EAAeV,EAAMpD,cAAe,yBAAwB8D,EAAaE,QAAU,KAEpGL,GAAYI,IACZA,EAAaE,SAAWH,EAAaG,UAAYH,EAAahD,QACzD8C,EAEMvC,EAAa6C,gBACpBH,EAAaI,QAFbJ,EAAalE,MAAQ,IAQjC,GAAIf,EAAO+E,QAAQ,yBAA2BR,EAAc,CACxD,MAAMe,EAAWhB,EAAMpD,cAAelB,EAAOuB,QAAQgE,cACrDD,EAAStD,SAAU,EACnBhC,EAAOmF,SAAWG,EAASH,SAG/B,MAKMK,QElD0B,GAAIC,cAAAA,EAAgB,GAAIC,KAAAA,EAAO,GAAIC,gBAAAA,EAAkB,MAAM,IAAU,KAC9FF,EAAcG,OAAO,CAACC,EAAKC,IACvBD,EAAIE,KAAKC,IACZ,IAAIC,EAAU7I,EAAa,GAAI4I,EAAIA,EAAIzG,OAAS,IAChD,OAAIoG,EAAgBM,GACT7B,QAAQC,QAAQ2B,GAEpB,IAAI5B,QAAQC,IAAaA,EAAQyB,EAAUG,MAC7CF,KAAK,CAAChG,EAASkG,KACZD,EAAI/H,KAAK8B,GACFiG,MAGpB5B,QAAQC,QAAQ,CAACqB,KACfK,KAAKG,GAAYA,EAAS3G,OAAS,EAAI2G,EAASzI,MAAM,GAAKyI,GF+B7BC,CAAqB,CACpDV,cAAelD,EAAa6D,iBAC5BV,KAAM,CAAE1F,OAAAA,EAAQuC,aAAAA,MAGiB8D,MAC/BC,EAAkBtG,EAAOmF,UAAanF,EAAO+E,QAAQ,8BAAgCR,EAEtF+B,IACDd,EAAQzF,QAAS,GAGrB,MAAMwG,EAAmBD,QGzDtBrC,eAAwBjE,EAAQuC,EAAc9B,EAAiB0D,GAElE,MAAMqC,EAAaxG,EAAOe,MACpBjB,EAAMD,EAA0B,CAACE,OAAQyG,EAAWxC,OAAOzE,OAAS,EAAGS,OAAAA,IACvEyG,EAAoB,CAAC,WAAY,SAASC,SAAS1G,EAAOkD,MAC1DyD,EAAmB3G,EAAOiB,KAAKS,iBAAkB,UAAS1B,EAAOmB,kBAAkB5B,OAAS,EAElG,IAAMkH,IAAsB3G,EAAIC,QAAY0G,IAAsBE,EAG9D,OAFA7G,EAAIC,QAAS,EACbD,EAAI+B,OAAS,CAAE+E,OAAO,GACfxC,QAAQC,QAAQvE,GAI3B,MAAM+G,EAAoBvJ,MAAMC,KAAKyC,EAAO8G,YAAYlB,OAAO,CAACmB,EAASC,KACrE,MAAMvC,EAAWxE,EAAa+G,EAAK7F,KAAKzB,QAAQ,QAAS,KACnD0B,EAAYnB,EAAa+G,EAAKjG,OAC9BkG,EAAoB,CAAC,OAAQ,WAAWP,SAASjC,IAAahE,EAAgBW,GAC9E8F,EAAmBzG,EAAgBgE,GAKzC,OAHIwC,GAAqBC,IACrBH,EAAQ9I,KAAMgJ,EAAoB7F,EAAYqD,GAE3CsC,GACR,IAEGI,QAAiB,IAAI/C,QAAQC,IAsB/BA,EAnB0BwC,EAAkBjB,OAAO,CAACwB,EAAYC,IACrDD,EAAWrB,KAAKuB,GACZ,IAAIlD,QAAQmD,IAEfA,EAAY9G,EAAgB4G,GAAYb,EAAYxG,EAAQuC,MAC7DwD,KAAKyB,IAEJ,IAAKA,EAAOzH,OAAQ,CAChB,MAAM0H,EAAW,QACY,IAAlBD,EAAO3F,aAA+D,IAA9B2F,EAAO3F,OAAOwF,KAC7DI,EAASJ,IAAc,GAE3BG,EAAO3F,OAASzE,EAAa,GAAIoK,EAAO3F,OAAQ4F,GAGpD,OADAD,EAASA,EAAOzH,OAAS,GAAKyH,EACvBpK,EAAakK,EAAQE,MAGrCpD,QAAQC,QAAQvE,OAYvB,OAPKqH,EAASpH,SACVoH,EAAStF,OAASgF,EAAkBjB,OAAO,CAAC0B,EAAQD,KAChD,MAAMxF,EAAUsC,EAAiBkD,IAAelD,EAAiBkD,GAAYb,EAAYxG,IAAY,GACrG,OAAO5C,EAAakK,EAAQzF,IAC7BsF,EAAStF,SAGTsF,EHF0CO,CAAQ1H,EAAQuC,EAAc9B,EAAiB0D,GAAoBqB,EAE9GmC,EAAapF,EAAaqF,mBAAqBrB,EAAiBvG,OAAO2E,QAASpC,EAAaqF,mBI7D5E,IAAEC,EAASC,EJkElC,OAJIH,II9DqBE,EJ+DRF,EI/DiBG,EJ+DLvF,EAAauF,WAAWC,QI9DrDF,EAAQG,UAAUC,UAAWH,EAAWnI,MAAM,OJiEvC4G,EK/DJtC,eAAeiE,EAAqBC,EAAS5F,EAAc9B,EAAiB0D,EAAkBiE,EAAc,MAE/G7F,EAAenF,EAAc,GAAImF,EAAc,CAAC6C,gBAAgB,IAChE,MAAMiD,ECNqBC,CAAAA,IAE3B,IAAIC,EAAmB,GACnBC,EAAmB,GAEvB,OAAOlL,MAAMC,KAAM+K,GAAY5K,OAAOsC,IAClC,MAAMmB,EAAOnB,EAAOmB,KACd+B,EAAOlD,EAAOkD,KAEpB,OAAI/B,IAASoH,GAAoBrF,IAASsF,KAIrCxI,EAAO+E,QAAQ,0BAChBwD,EAAmBpH,EACnBqH,EAAmBtF,IAGhB,MDZSuF,CAAiBN,GAE/BO,QAAuBtE,QAAQlE,IAAKmI,EAAYM,IAAI3I,IAEtD,GAAIoI,GAAepI,IAAWoI,EAAa,CACvC,MAAMtI,EAAMD,EAA0B,CAACG,OAAAA,EAAQD,QAAQ,IACvD,OAAOqE,QAAQC,QAAQvE,GAG3B,OAAOoE,EAAoBlE,EAAQuC,EAAc9B,EAAiB0D,MAIhEyE,EAAoBF,EAAeG,MAAM,EAAE9I,OAAAA,KAAYA,GAE7D,OElBO3C,EAAa,GAAI,CAAE2C,QAAQ,EAAM+I,OAAQ,IFkBhB,CAAC/I,OAAQ6I,EAAmBE,OAAOJ,IGNvE,MAAMK,EAEFC,YAAa/H,EAAMgI,GACf,MAAMC,EAAQ1L,UAAU+B,OAClB4J,ECjBalI,CAAAA,IACvB,MAAMmI,SAAoBnI,EAEpBoI,EADqC,WAAfD,GAA2B1M,EAAU4M,SAASpI,cAAcD,KACa,SAAvDqI,SAASpI,cAAcD,GAAMsI,QAAQC,cAEnF,MAAO,CACHzJ,OAAQrD,EAAUuE,IAASoI,EAC3BI,IAAqB,WAAfL,EAA0BE,SAASpI,cAAcD,GAAQA,IDUzCyI,CAAYzI,GAElC,GAAc,IAAViI,GAAgBA,EAAQ,IAAMjI,EAC9B,MAAM,IAAI0I,MAAM,8CAEpB,GlCxBkBC,EkCwBH3I,ElCvBZ4I,SAAShN,UAAUC,cAAe8M,GkCwBjC,MAAM,IAAID,MAAM,2FlCzBFC,IAAAA,EkC2BlB,IAAKT,EAAcpJ,OACf,MAAM,IAAI4J,MAAM,oEAGpB,MAAMG,EAAOC,KAEbD,EAAKxF,MAAQ6E,EAAcM,IAC3BK,EAAKxF,MAAM0F,OAASF,EACpBA,EAAKG,QAAU7M,EAAa,GAAI2L,EAAKlM,UAAUoN,QAAShB,GAGxDa,EAAKG,QAAQ1H,aAAa6D,iBAAmB0D,EAAKG,QAAQ1H,aAAa6D,iBAAiBuC,IAAIuB,GAAQA,EAAKC,KAAKL,IAE9GA,EAAKxF,MAAM8F,YAAa,EAExBlM,EAAqB4L,EAAKxF,MAAOjE,EAAkBG,MAGvDD,iBACWwJ,KAAKzF,MAAM0F,OAClB9L,EAAqB6L,KAAKzF,MAAOjE,EAAkBE,SAGpC8J,oBAAEC,EAAO/H,GACxB,MAAMuH,EAAOC,KACP/J,EAA0B,iBAAVsK,EAAqBR,EAAKxF,MAAMpD,cAAcoJ,GAASA,EAE7E/H,EAAenF,EAAa,GAAI0M,EAAKG,QAAQ1H,aAAcA,GAE3D,MAAMgI,QAAsBrG,EAAmBlE,EAAQuC,EAAcuH,EAAKrJ,gBAAiBqJ,EAAK3F,kBAIhG,OAFAjG,EAAqBqM,EAAcvK,OAAQK,EAAmBC,WAAY,CAAEkK,OAAQD,IE1DxD,GAAE1I,OAAAA,EAAQ9B,OAAAA,KACtCA,EACOqE,QAAQC,UAEZD,QAAQqG,OAAO5I,GFwDX6I,CAAqBH,GAGdF,mBAAE9H,GAChB,MAAMuH,EAAOC,KACPzF,EAAQwF,EAAKxF,MACb6D,EAAU7D,EAAM5C,iBGlEM,8GHoE5Ba,EAAenF,EAAa,GAAI0M,EAAKG,QAAQ1H,aAAcA,GAE3D,MAAMoI,QAAoBzC,EAAoBC,EAAS5F,EAAcuH,EAAKrJ,gBAAiBqJ,EAAK3F,kBAShG,OAPAwG,EAAY7B,OAAOlL,QAAQkC,IACvBA,EAAI8K,gBAAiB,EACrB1M,EAAqB4B,EAAIE,OAAQK,EAAmBC,WAAY,CAAEkK,OAAQ1K,MAG9E5B,EAAqBoG,EAAOjE,EAAkBC,WAAY,CAAEkK,OAAQG,II7EzC,GAAE7B,OAAAA,EAAQ/I,OAAAA,KACrCA,EACOqE,QAAQC,QAAQyE,GAEpB1E,QAAQqG,OAAO3B,GJ2EX+B,CAAoBF,GAGLN,2BAAES,GACxB/B,EAAKlM,UAAUsH,iBAAmB/G,EAAa,GAAI2L,EAAKlM,UAAUsH,iBAAkB2G,GAG/DT,0BAAEU,GACvBhC,EAAKlM,UAAU4D,gBAAkBrD,EAAa,GAAI2L,EAAKlM,UAAU4D,gBAAiBsK,GAGrEV,kBAAEpB,GACfF,EAAKlM,UAAUoN,QAAU7M,EAAa,GAAI2L,EAAKlM,UAAUoN,QAAShB,IA5E/D+B,EAAA,UAAAjC,GAiFXA,EAAKlM,UAAUoN,QKhGQ,CAEnB1H,aAAc,CACV6D,iBAAwB,GACxBhB,gBAAwB,EACxB5C,YAAwB,KL4FhCuG,EAAKlM,UAAUsH,iBAAmB,GAClC4E,EAAKlM,UAAU4D,gBAAkBA,EACjCsI,EAAKlM,UAAUoO"}