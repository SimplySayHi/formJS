{"version":3,"file":"formjs.min.js","sources":["../../src/modules/helpers/isNodeList.js","../../src/modules/helpers/removeClass.js","../../src/modules/helpers/isDOMNode.js","../../src/modules/helpers/mergeObjects.js","../../src/modules/helpers/isPlainObject.js","../../src/modules/helpers/dispatchCustomEvent.js","../../src/modules/helpers/getDateAsNumber.js","../../src/modules/helpers/getSplitChar.js","../../src/modules/helpers/getJSONobjectFromFieldAttribute.js","../../src/modules/helpers/mergeValidateFieldDefault.js","../../src/modules/helpers/runFunctionsSequence.js","../../src/modules/helpers/toCamelCase.js","../../src/modules-lite/helpers/customEvents.js","../../src/modules/validationRules.js","../../src/modules/validationRules/date.js","../../src/modules/validationRules/email.js","../../src/modules/validationRules/number.js","../../src/modules/validationRules/checkbox.js","../../src/modules/validationRules/checks.js","../../src/modules/validationRules/equalTo.js","../../src/modules/validationRules/exactLength.js","../../src/modules/validationRules/file.js","../../src/modules/validationRules/length.js","../../src/modules/validationRules/max.js","../../src/modules/validationRules/maxlength.js","../../src/modules/validationRules/min.js","../../src/modules/validationRules/minlength.js","../../src/modules/validationRules/pattern.js","../../src/modules/validationRules/radio.js","../../src/modules/checkFieldValidity.js","../../src/modules/isValid.js","../../src/modules/checkFieldsValidity.js","../../src/modules/helpers/getUniqueFields.js","../../src/modules/helpers/mergeValidateFormDefault.js","../../src/index-lite.js","../../src/modules/helpers/checkFormEl.js","../../src/modules/helpers/finalizeFieldPromise.js","../../src/modules/helpers/fieldsStringSelector.js","../../src/modules/helpers/finalizeFormPromise.js","../../src/modules-lite/options.js"],"sourcesContent":["\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList )\n}\n","\nexport const removeClass = ( element, cssClasses ) => {\n    element.classList.remove( ...cssClasses.split(' ') )\n}\n","\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node )\n}\n","\nimport { isPlainObject } from './isPlainObject'\n\nexport const mergeObjects = function( out = {} ){\n    Array.from(arguments).slice(1).filter(arg => !!arg).forEach(arg => {\n        Object.keys(arg).forEach(key => {\n            if( Array.isArray(arg[key]) ){\n                out[key] = (out[key] || []).concat( arg[key].slice(0) )\n            } else if( isPlainObject(arg[key]) ){\n                out[key] = mergeObjects((out[key] || {}), arg[key])\n            } else {\n                // * STRING | NUMBER | BOOLEAN | FUNCTION\n                if( Array.isArray(out[key]) ){\n                    // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                    out[key].push(arg[key])\n                } else {\n                    out[key] = arg[key]\n                }\n            }\n        })\n    })\n\n    return out\n}\n","\nexport const isPlainObject = object => {\n    return Object.prototype.toString.call( object ) === '[object Object]'\n}\n","\nimport { mergeObjects } from './mergeObjects'\n\nexport const dispatchCustomEvent = ( elem, eventName, eventOptions ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions)\n    const eventObj = new CustomEvent(eventName, eventOptions)\n    elem.dispatchEvent( eventObj )\n}\n","\nimport { getSplitChar } from './getSplitChar'\n\nconst formatMap = {\n    'YYYY-MM-DD': function(dateArray){\n        return dateArray\n    },\n    'MM-DD-YYYY': function(dateArray){\n        return [dateArray[2], dateArray[0], dateArray[1]]\n    },\n    'DD-MM-YYYY': function(dateArray){\n        return dateArray.reverse()\n    }\n}\n\nexport const getDateAsNumber = ( dateString, dateFormat ) => {\n    dateFormat = dateFormat || 'YYYY-MM-DD'\n    const splitChar = getSplitChar(dateString)\n\n    if( dateFormat.indexOf(splitChar) < 0 ){\n        return\n    }\n\n    dateFormat = dateFormat.replace(/[^YMD]/g, '-')\n    dateString = dateString.split(splitChar)\n    dateString = formatMap[dateFormat](dateString).join('')\n    \n    return dateString\n}\n","\nexport const getSplitChar = string => {\n    // MATCH ANY NON-DIGIT CHAR\n    const separator = string.match(/\\D/)\n    return (separator && separator.length > 0) ? separator[0] : null\n}\n","\nexport const getJSONobjectFromFieldAttribute = ( $field, attrName ) => {\n    const $customAttr = $field.closest(`[${attrName}]`)\n    return ($customAttr && JSON.parse($customAttr.getAttribute(attrName))) || {}\n}\n","\nimport { mergeObjects } from './mergeObjects'\n\nexport const mergeValidateFieldDefault = obj => {\n    return mergeObjects({}, { result: false, $field: null }, obj)\n}\n","\nimport { mergeObjects } from './mergeObjects'\n\nexport const runFunctionsSequence = ( { functionsList = [], data = {}, stopConditionFn = () => false } = {} ) => {\n    return functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1])\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res)\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result)\n                    return res\n                })\n        })\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList)\n}\n","\nexport const toCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase() })\n}\n","\nexport const customEvents = {\n    field: {\n        validation: 'fjs.field:validation'\n    },\n    form: {\n        destroy:    'fjs.form:destroy',\n        init:       'fjs.form:init',\n        validation: 'fjs.form:validation'\n    }\n}\n","\nimport { date }         from './validationRules/date'\nimport { email }        from './validationRules/email'\nimport { number }       from './validationRules/number'\n\nimport { checkbox }     from './validationRules/checkbox'\nimport { equalTo }      from './validationRules/equalTo'\nimport { exactLength }  from './validationRules/exactLength'\nimport { file }         from './validationRules/file'\nimport { length }       from './validationRules/length'\nimport { max }          from './validationRules/max'\nimport { maxlength }    from './validationRules/maxlength'\nimport { min }          from './validationRules/min'\nimport { minlength }    from './validationRules/minlength'\nimport { pattern }      from './validationRules/pattern'\nimport { radio }        from './validationRules/radio'\n\nexport const validationRules = {\n    date,\n    email,\n    number,\n\n    checkbox,\n    equalTo,\n    exactLength,\n    file,\n    length,\n    max,\n    maxlength,\n    min,\n    minlength,\n    pattern,\n    radio\n}\n","\n/*\n    DATE AS ISO 8601 DATE FORMAT:\n    YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n*/\n\nexport const date = function( string ){\n    return {\n        result: /^((((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13578]|1[02])[ \\/\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13456789]|1[012])[ \\/\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.]02[ \\/\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ \\/\\-.]02[ \\/\\-.]29))$/g.test( string )\n    }\n}\n","\n// https://regex101.com/r/cdlyJy/3\n\nexport const email = function( string ){\n    return {\n        result: /^[a-zA-Z_-]([\\w.-]?[a-zA-Z0-9])*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?){2,})+$/.test( string )\n    }\n}\n","\n/*\n    ALL NUMBERS ( INTEGERS AND FLOATING )\n    VALID NUMBERS: 123 | 123.456 | .123\n*/\n\nexport const number = function( string ){\n    return {\n        result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n    }\n}","\nimport { checks } from './checks'\n\nexport const checkbox = function( value, $field ){\n    const $dataChecks = $field.form.querySelector(`[name=\"${$field.name}\"][data-checks]`)\n    return $dataChecks ? checks($dataChecks) : { result: $field.checked }\n}\n","\nexport const checks = function( $field ){\n    const attrValue = JSON.parse( $field.dataset.checks )\n    const checkedLength = $field.form.querySelectorAll(`[name=\"${$field.name}\"]:checked`).length\n    const isMinOk = checkedLength >= attrValue[0]\n    const isMaxOk = checkedLength <= attrValue[1]\n    const obj = { result: isMinOk && isMaxOk }\n\n    if( !obj.result ){\n        obj.errors = { checks: true }\n        if( !isMinOk ){ obj.errors.minChecks = true }\n        if( !isMaxOk ){ obj.errors.maxChecks = true }\n    }\n\n    return obj\n}\n","\nexport const equalTo = function( value, $field ){\n    const $checkFrom = $field.form.querySelector( `[name=\"${$field.dataset.equalTo}\"]` )\n    return { result: value === $checkFrom.value }\n}\n","\nexport const exactLength = function( value, $field ){\n    const valueLength = value.length\n    const exactLength = $field.dataset.exactLength * 1\n    const obj = { result: valueLength === exactLength }\n\n    if( !obj.result ){\n        obj.errors = {}\n        if( valueLength < exactLength ){ obj.errors.minlength = true }\n        else { obj.errors.maxlength = true }\n    }\n\n    return obj\n}\n","\nexport const file = function( value, $field, fieldOptions ){\n    const maxFileSize = ($field.getAttribute('data-max-file-size') || fieldOptions.maxFileSize) * 1\n    const MIMEtype = $field.accept ? new RegExp($field.accept.replace( '*', '[^\\\\/,]+' )) : null\n    const filesList = Array.from($field.files)\n    const obj = { result: true }\n\n    filesList.forEach(file => {\n        const exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize\n        const isAcceptedFileType = MIMEtype !== null ? MIMEtype.test(file.type) : true\n\n        if( exceedMaxFileSize || !isAcceptedFileType ){\n            obj.result = false\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {}\n            }\n            if( exceedMaxFileSize ){ obj.errors.maxFileSize = true }\n            if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true }\n\n        }\n    })\n\n    return obj\n}\n","\nexport const length = function( value, $field ){\n    const valueL = value.length\n    const attrValue = JSON.parse( $field.dataset.length )\n    const isMinlengthOk = valueL >= attrValue[0]\n    const isMaxlengthOk = valueL <= attrValue[1]\n    const obj = { result: isMinlengthOk && isMaxlengthOk }\n\n    if( !obj.result ){\n        obj.errors = {}\n        if( !isMinlengthOk ){ obj.errors.minlength = true }\n        if( !isMaxlengthOk ){ obj.errors.maxlength = true }\n    }\n\n    return obj\n}\n","\nimport { getDateAsNumber } from '../helpers'\n\nexport const max = function( value, $field ){\n    let maxVal = $field.max\n    const dateFormat = $field.dataset.dateFormat\n    \n    if( $field.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat )\n        maxVal = maxVal.split('-').join('')\n    }\n\n    value = value * 1\n    maxVal = maxVal * 1\n    \n    return { result: value <= maxVal }\n}\n","\nexport const maxlength = function( value, $field ){\n    return { result: value.length <= $field.maxLength * 1 }\n}\n","\nimport { getDateAsNumber } from '../helpers'\n\nexport const min = function( value, $field ){\n    let minVal = $field.min\n    const dateFormat = $field.dataset.dateFormat\n    \n    if( $field.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat )\n        minVal = minVal.split('-').join('')\n    }\n\n    value = value * 1\n    minVal = minVal * 1\n    \n    return { result: value >= minVal }\n}\n","\nexport const minlength = function( value, $field ){\n    return { result: value.length >= $field.minLength * 1 }\n}\n","\nexport const pattern = function( value, $field ){\n    return { result: new RegExp($field.pattern).test(value) }\n}\n","\nexport const radio = function( value, $field ){\n    const $fieldChecked = $field.form.querySelector( `[name=\"${$field.name}\"]:checked` )\n    const isValid = $fieldChecked !== null && $fieldChecked.value.trim().length > 0\n\n    return { result: isValid }\n}\n","\nimport {    \n    getJSONobjectFromFieldAttribute,\n    isDOMNode,\n    mergeObjects,\n    mergeValidateFieldDefault,\n    removeClass,\n    runFunctionsSequence\n}                   from './helpers'\nimport { isValid }  from './isValid'\n\nexport async function checkFieldValidity( $field, fieldOptions, validationRules, validationErrors ){\n\n    if( !isDOMNode($field) ){\n        const obj = mergeValidateFieldDefault({$field})\n        return Promise.resolve(obj)\n    }\n\n    const $form = $field.form\n    const isValidValue = $field.value.trim().length > 0\n    const dataFieldOptions = getJSONobjectFromFieldAttribute( $field, 'data-field-options' )\n\n    fieldOptions = mergeObjects( fieldOptions, dataFieldOptions )\n\n    // HANDLE FIELD data-required-from WHEN CHANGING ITS RELATED RADIO\n    if( $field.type === 'radio' ){\n        const $checked = $field.checked ? $field : $form.querySelector(`[name=\"${$field.name}\"]:checked`)\n        const reqMoreIsChecked = $checked && $checked.matches('[data-require-more]')\n        const $findReqMore = reqMoreIsChecked ? $checked : $form.querySelector(`[data-require-more][name=\"${$field.name}\"]`)\n        const $findReqFrom = $findReqMore ? $form.querySelector(`[data-required-from=\"#${$findReqMore.id}\"]`) : null\n        \n        if( $checked && $findReqFrom ){\n            $findReqFrom.required = $findReqMore.required && $findReqMore.checked\n            if( !reqMoreIsChecked ){\n                $findReqFrom.value = ''\n            } else if( fieldOptions.focusOnRelated ) {\n                $findReqFrom.focus()\n            }\n        }\n    }\n\n    // HANDLE FIELD data-require-more & data-required-from WHEN *-from IT'S FILLED\n    if( $field.matches('[data-required-from]') && isValidValue ){\n        const $reqMore = $form.querySelector( $field.dataset.requiredFrom )\n        $reqMore.checked = true\n        $field.required = $reqMore.required\n    }\n\n    const dataBeforeValidation = await runFunctionsSequence({\n        functionsList: fieldOptions.beforeValidation,\n        data: { $field, fieldOptions }\n    })\n\n    const dataObj = dataBeforeValidation.pop()\n    const needsValidation = $field.required || ($field.matches('[data-validate-if-filled]') && isValidValue)\n\n    if( !needsValidation ){\n        dataObj.result = true\n    }\n    \n    const validationResult = needsValidation ? await isValid($field, fieldOptions, validationRules, validationErrors) : dataObj\n\n    const $container = fieldOptions.questionContainer && validationResult.$field.closest( fieldOptions.questionContainer )\n    if( $container ){\n        removeClass( $container, fieldOptions.cssClasses.pending )\n    }\n    \n    return validationResult\n\n}\n","\nimport { mergeValidateFieldDefault, mergeObjects, toCamelCase } from './helpers'\n\nexport async function isValid( $field, fieldOptions, validationRules, validationErrors ){\n\n    const fieldValue = $field.value\n    const obj = mergeValidateFieldDefault({result: fieldValue.trim().length > 0, $field})\n    const isCheckboxOrRadio = ['checkbox', 'radio'].includes($field.type)\n    const hasSelectedInput = $field.form.querySelectorAll(`[name=\"${$field.name}\"]:checked`).length > 0\n\n    if( (!isCheckboxOrRadio && !obj.result) || (isCheckboxOrRadio && !hasSelectedInput) ){\n        obj.result = false\n        obj.errors = { empty: true }\n        return Promise.resolve(obj)\n    }\n\n    // COLLECT VALIDATION METHOD NAMES ( USED TO RUN VALIDATIONS AND GET ERRORS )\n    const validationMethods = Array.from($field.attributes).reduce((accList, attr) => {\n        const attrName = toCamelCase( attr.name.replace('data-', '') )\n        const attrValue = toCamelCase( attr.value )\n        const isAttrValueWithFn = ['type', 'subtype'].includes(attrName) && validationRules[attrValue]\n        const isAttrNameWithFn = validationRules[attrName]\n\n        if( isAttrValueWithFn || isAttrNameWithFn ){\n            accList.push( isAttrValueWithFn ? attrValue : attrName )\n        }\n        return accList\n    }, [])\n\n    const validity = await new Promise(resolve => {\n\n        // RUN VALIDATIONS\n        const validationsResult = validationMethods.reduce((accPromise, methodName) => {\n            return accPromise.then(accObj => {\n                return new Promise(resolveVal => {\n                    // RUN VALIDATION INSIDE A PROMISE IS USEFUL FOR ASYNC VALIDATIONS\n                    resolveVal( validationRules[methodName](fieldValue, $field, fieldOptions) )\n                }).then(valObj => {\n                    // ADD CUSTOM ERROR-KEY FOR EACH VALIDATION RULE\n                    if( !valObj.result ){\n                        const errorObj = {}\n                        if( typeof valObj.errors === 'undefined' || typeof valObj.errors[methodName] === 'undefined' ){\n                            errorObj[methodName] = true\n                        }\n                        valObj.errors = mergeObjects({}, valObj.errors, errorObj)\n                    }\n                    valObj = valObj.result ? {} : valObj\n                    return mergeObjects(accObj, valObj)\n                })\n            })\n        }, Promise.resolve(obj))\n        resolve(validationsResult)\n\n    })\n\n    if( !validity.result ){\n        validity.errors = validationMethods.reduce((accObj, methodName) => {\n            const errors = (validationErrors[methodName] && validationErrors[methodName](fieldValue, $field)) || {}\n            return mergeObjects(accObj, errors)\n        }, validity.errors)\n    }\n\n    return validity\n\n}\n","\nimport { getUniqueFields, mergeValidateFieldDefault, mergeValidateFormDefault, mergeObjects } from './helpers'\nimport { checkFieldValidity } from './checkFieldValidity'\n\nexport async function checkFieldsValidity( $fields, fieldOptions, validationRules, validationErrors, fieldToSkip = null ){\n\n    fieldOptions = mergeObjects( {}, fieldOptions, {focusOnRelated: false} )\n    const $fieldsList = getUniqueFields( $fields )\n\n    const fieldsValidity = await Promise.all( $fieldsList.map($field => {\n\n        if( fieldToSkip && $field === fieldToSkip ){\n            const obj = mergeValidateFieldDefault({$field, result: true})\n            return Promise.resolve(obj)\n        }\n        \n        return checkFieldValidity( $field, fieldOptions, validationRules, validationErrors )\n\n    }) )\n\n    const areAllFieldsValid = fieldsValidity.every(({result}) => result)\n\n    return mergeValidateFormDefault({result: areAllFieldsValid, fields:fieldsValidity})\n\n}\n","\nexport const getUniqueFields = $nodeList => {\n\n    let currentFieldName = ''\n    let currentFieldType = ''\n\n    return Array.from( $nodeList ).filter($field => {\n        const name = $field.name\n        const type = $field.type\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false\n        }\n        \n        if( !$field.matches('[data-required-from]') ){\n            currentFieldName = name\n            currentFieldType = type\n        }\n        \n        return true\n    })\n    \n}\n","\nimport { mergeObjects } from './mergeObjects'\n\nexport const mergeValidateFormDefault = obj => {\n    return mergeObjects({}, { result: true, fields: [] }, obj)\n}\n","\nimport { version }              from '../package.json'\nimport { \n    checkFormEl,\n    dispatchCustomEvent,\n    fieldsStringSelector,\n    finalizeFieldPromise,\n    finalizeFormPromise,\n    isNodeList,\n    mergeObjects }              from './modules/helpers'\nimport { customEvents }         from './modules-lite/helpers/customEvents'\nimport { options }              from './modules-lite/options'\nimport { validationRules }      from './modules/validationRules'\nimport { checkFieldValidity }   from './modules/checkFieldValidity'\nimport { checkFieldsValidity }  from './modules/checkFieldsValidity'\n\nclass Form {\n\n    constructor( form, optionsObj ){\n        const argsL = arguments.length\n        const checkFormElem = checkFormEl(form)\n\n        if( argsL === 0 || (argsL > 0 && !form) ){\n            throw new Error('First argument \"form\" is missing or falsy!')\n        }\n        if( isNodeList(form) ){\n            throw new Error('First argument \"form\" must be a single DOM node or a form CSS selector, not a NodeList!')\n        }\n        if( !checkFormElem.result ){\n            throw new Error('First argument \"form\" is not a DOM node nor a form CSS selector!')\n        }\n\n        const self = this\n\n        self.$form = checkFormElem.$el\n        self.$form.formjs = self\n        self.options = mergeObjects({}, Form.prototype.options, optionsObj)\n\n        // BINDING CONTEXT FOR FUTURE EXECUTION\n        self.options.fieldOptions.beforeValidation = self.options.fieldOptions.beforeValidation.map(cbFn => cbFn.bind(self))\n\n        self.$form.noValidate = true\n\n        dispatchCustomEvent( self.$form, customEvents.form.init )\n    }\n\n    destroy(){\n        delete this.$form.formjs\n        dispatchCustomEvent( this.$form, customEvents.form.destroy )\n    }\n\n    async validateField( field, fieldOptions ){\n        const self = this\n        const $field = typeof field === 'string' ? self.$form.querySelector(field) : field\n        \n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions)\n        \n        const fieldValidity = await checkFieldValidity($field, fieldOptions, self.validationRules, self.validationErrors)\n\n        dispatchCustomEvent( fieldValidity.$field, customEvents.field.validation, { detail: fieldValidity } )\n\n        return finalizeFieldPromise(fieldValidity)\n    }\n\n    async validateForm( fieldOptions ){\n        const self = this\n        const $form = self.$form\n        const $fields = $form.querySelectorAll(fieldsStringSelector)\n\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions)\n\n        const formVaidity = await checkFieldsValidity($fields, fieldOptions, self.validationRules, self.validationErrors)\n\n        formVaidity.fields.forEach(obj => {\n            obj.isCheckingForm = true\n            dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } )\n        })\n\n        dispatchCustomEvent( $form, customEvents.form.validation, { detail: formVaidity } )\n\n        return finalizeFormPromise(formVaidity)\n    }\n    \n    static addValidationErrors( errorsObj ){\n        Form.prototype.validationErrors = mergeObjects({}, Form.prototype.validationErrors, errorsObj)\n    }\n\n    static addValidationRules( rulesObj ){\n        Form.prototype.validationRules = mergeObjects({}, Form.prototype.validationRules, rulesObj)\n    }\n    \n    static setOptions( optionsObj ){\n        Form.prototype.options = mergeObjects({}, Form.prototype.options, optionsObj)\n    }\n\n}\n\nForm.prototype.options = options\nForm.prototype.validationErrors = {}\nForm.prototype.validationRules = validationRules\nForm.prototype.version = version\n\nexport default Form\n","\nimport { isDOMNode } from './isDOMNode'\n\nexport const checkFormEl = form => {\n    const formIsString = typeof form === 'string'\n    const isValidNodeSelector = formIsString && isDOMNode(document.querySelector(form))\n    const isFormSelector = isValidNodeSelector && document.querySelector(form).tagName.toLowerCase() === 'form'\n    \n    return {\n        result: isDOMNode(form) || isFormSelector,\n        $el: (formIsString ? document.querySelector(form) : form)\n    }\n}\n","\nexport const finalizeFieldPromise = ({errors, result}) => {\n    if( result ){\n        return Promise.resolve()\n    }\n    return Promise.reject(errors)\n}\n","\nexport const fieldsStringSelector = 'input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"hidden\"]), select, textarea'\n","\nexport const finalizeFormPromise = ({fields, result}) => {\n    if( result ){\n        return Promise.resolve(fields)\n    }\n    return Promise.reject(fields)\n}\n","\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [],\n        focusOnRelated:         true,\n        maxFileSize:            10\n    }\n    \n}\n"],"names":["removeClass","element","cssClasses","classList","remove","split","isDOMNode","node","Element","prototype","isPrototypeOf","mergeObjects","out","arguments","length","undefined","Array","from","slice","filter","arg","forEach","Object","keys","key","object","isArray","concat","toString","call","push","dispatchCustomEvent","elem","eventName","eventOptions","bubbles","eventObj","CustomEvent","dispatchEvent","formatMap","dateArray","reverse","getDateAsNumber","dateString","dateFormat","splitChar","string","separator","match","getSplitChar","indexOf","replace","join","getJSONobjectFromFieldAttribute","$field","attrName","$customAttr","closest","JSON","parse","getAttribute","mergeValidateFieldDefault","obj","result","runFunctionsSequence","functionsList","data","stopConditionFn","reduce","acc","promiseFn","then","res","dataNew","Promise","resolve","dataList","toCamelCase","all","letter","toUpperCase","customEvents","validation","destroy","init","validationRules","date","test","email","number","checkbox","value","$dataChecks","form","querySelector","name","attrValue","dataset","checks","checkedLength","querySelectorAll","isMinOk","isMaxOk","errors","minChecks","maxChecks","checked","equalTo","exactLength","valueLength","minlength","maxlength","file","fieldOptions","maxFileSize","MIMEtype","accept","RegExp","filesList","files","exceedMaxFileSize","size","isAcceptedFileType","type","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","max","maxVal","maxLength","min","minVal","minLength","pattern","radio","$fieldChecked","trim","async","checkFieldValidity","validationErrors","$form","isValidValue","dataFieldOptions","$checked","reqMoreIsChecked","matches","$findReqMore","$findReqFrom","id","required","focusOnRelated","focus","$reqMore","requiredFrom","dataObj","beforeValidation","pop","needsValidation","validationResult","fieldValue","isCheckboxOrRadio","includes","hasSelectedInput","empty","validationMethods","attributes","accList","attr","isAttrValueWithFn","isAttrNameWithFn","validity","accPromise","methodName","accObj","resolveVal","valObj","errorObj","isValid","$container","questionContainer","pending","checkFieldsValidity","$fields","fieldToSkip","$fieldsList","$nodeList","currentFieldName","currentFieldType","getUniqueFields","fieldsValidity","map","areAllFieldsValid","every","_ref","fields","Form","constructor","optionsObj","argsL","checkFormElem","formIsString","isFormSelector","document","tagName","toLowerCase","$el","checkFormEl","Error","nodeList","NodeList","self","this","formjs","options","cbFn","bind","noValidate","validateField","field","fieldValidity","detail","reject","finalizeFieldPromise","validateForm","formVaidity","isCheckingForm","finalizeFormPromise","addValidationErrors","errorsObj","addValidationRules","rulesObj","setOptions","version"],"mappings":"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"}