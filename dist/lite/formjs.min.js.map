{"version":3,"file":"formjs.min.js","sources":["../../src/modules/helpers.js","../../src/modules/validationRules.js","../../src/modules/checkFieldValidity.js","../../src/modules/isValid.js","../../src/index-lite.js","../../src/modules-lite/constructor.js","../../src/modules/checkFormValidity.js","../../src/modules-lite/options.js"],"sourcesContent":["\nexport const\n\naddClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.add( className );\n    });\n},\n\ncheckDirtyField = ( fields, cssClasses ) => {\n\n    var fields = (isNodeList(fields) ? Array.from( fields ) : [fields]);\n    \n    fields.forEach(fieldEl => {\n        if( fieldEl.type !== 'checkbox' && fieldEl.type !== 'radio' ){\n            let containerEl = fieldEl.closest('[data-formjs-question]') || fieldEl;\n\n            if( fieldEl.value ){\n                \n                addClass( containerEl, cssClasses );\n                \n            } else {\n                \n                removeClass( containerEl, cssClasses );\n                \n            }\n        }\n    });\n    \n},\n\ncheckFormEl = formEl => {\n    let isString = typeof formEl,\n        isValidNodeSelector = isString === 'string' && isDOMNode(document.querySelector(formEl)),\n        isFormSelector = isValidNodeSelector && document.querySelector(formEl).tagName.toLowerCase() === 'form',\n        obj = {\n            result: isDOMNode(formEl) || isFormSelector,\n            element: (isString === 'string' ? document.querySelector(formEl) : formEl)\n        };\n\n    return obj;\n},\n\ncustomEvents = {\n    field: {\n        validation: 'fjs.field:validation'\n    },\n    form: {\n        submit:     'fjs.form:submit',\n        validation: 'fjs.form:validation'\n    }\n},\n\ndispatchCustomEvent = ( elem, eventName, data = {}, eventOptions = {} ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions);\n    const eventObj = new Event(eventName, eventOptions);\n    eventObj.data = data;\n    elem.dispatchEvent( eventObj );\n},\n\nexcludeSelector = ':not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"file\"]):not([data-exclude-data])',\n\nfieldsStringSelector = 'input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"hidden\"]), select, textarea',\n\ngetFilledFields = formEl => {\n    return getUniqueFields( formEl.querySelectorAll(fieldsStringSelector) )\n    .map(fieldEl => {\n\n        const name = fieldEl.name,\n              type = fieldEl.type,\n              isCheckboxOrRadio = (type === 'checkbox' || type === 'radio'),\n              fieldChecked = formEl.querySelector('[name=\"' + name + '\"]:checked'),\n              isReqFrom = fieldEl.matches('[data-required-from]'),\n              reqMoreEl = (isReqFrom ? formEl.querySelector(fieldEl.getAttribute('data-required-from')) : null);\n\n        return (\n            isCheckboxOrRadio ? (fieldChecked || null) :\n            (isReqFrom && reqMoreEl.checked) || (!isReqFrom && fieldEl.value) ? fieldEl : null\n        );\n\n    })\n    .filter(fieldEl => {\n        return  fieldEl !== null;\n    });\n},\n\ngetSplitChar = string => {\n    let splitChar = '.';\n\n    if( string.indexOf(splitChar) === -1 ){\n        if( string.indexOf('-') >= 0 ){\n            splitChar = '-';\n        } else if( string.indexOf('/') >= 0 ){\n            splitChar = '/';\n        }\n    }\n\n    return splitChar;\n},\n\ngetUniqueFields = nodeList => {\n\n    let currentFieldName = '',\n        currentFieldType = '';\n\n    return Array.from( nodeList ).filter(fieldEl => {\n        const name = fieldEl.name,\n              type = fieldEl.type;\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false;\n        }\n        \n        if( !fieldEl.matches('[data-required-from]') ){\n            currentFieldName = name;\n            currentFieldType = type;\n        }\n        return true;\n    });\n    \n},\n\ngetValidateFieldDefault = obj => {\n    return mergeObjects({}, { result: false, fieldEl: null }, obj);\n},\n\ngetValidateFormDefault = obj => {\n    return mergeObjects({}, { result: true, fields: [] }, obj);\n},\n\nisDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node );\n},\n\nisFieldForChangeEvent = fieldEl => {\n    return fieldEl.matches('select, [type=\"radio\"], [type=\"checkbox\"], [type=\"file\"]');\n},\n\nisNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList );\n},\n\nisPlainObject = object => {\n    return Object.prototype.toString.call( object ) === '[object Object]';\n},\n\nmergeObjects = function( out = {} ){\n    for(let i=1; i<arguments.length; i++){\n        let obj = arguments[i];\n\n        if(!obj){ continue; }\n\n        for(let key in obj){\n            let isArray = Object.prototype.toString.call(obj[key]) === \"[object Array]\";\n            let isObject = Object.prototype.toString.call(obj[key]) === \"[object Object]\";\n\n            // COPY ONLY ENUMERABLE PROPERTIES\n            if( obj.hasOwnProperty(key) ){\n                if( isArray ){\n\n                    if( typeof out[key] === 'undefined' ){\n                        out[key] = [];\n                    }\n                    out[key] = out[key].concat( obj[key].slice(0) );\n\n                } else if( isObject ){\n\n                    out[key] = mergeObjects(out[key], obj[key]);\n\n                } else {\n\n                    // * STRING | NUMBER | BOOLEAN | FUNCTION\n                    if( Array.isArray(out[key]) ){\n                        // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                        out[key].push(obj[key]);\n                    } else {\n                        out[key] = obj[key];\n                    }\n\n                }\n            }\n        }\n    }\n\n    return out;\n},\n\nremoveClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.remove( className );\n    });\n},\n\nrunFunctionsSequence = ( { functionsList = [], data = {}, stopConditionFn = function(){return false} } = {} ) => {\n    return functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1]);\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res);\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result);\n                    return res;\n                });\n        });\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList);\n},\n\nserializeObject = obj => {\n    var objToString = (\n            (obj && typeof obj === 'object' && obj.constructor === Object) ? \n            Object.keys(obj)\n                .reduce((a,k) => {\n                    a.push(k+'='+encodeURIComponent(obj[k]));\n                    return a\n                },[]).join('&') : \n            obj\n    );\n    return objToString;\n},\n\ntoCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase(); });\n}\n","\nimport { getSplitChar } from './helpers';\n\nexport const validationRules = {\n    \n    date: function( string ){\n        // DATE AS ISO 8601 DATE FORMAT     YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n\n        let date = /^((((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13578]|1[02])[ \\/\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13456789]|1[012])[ \\/\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.]02[ \\/\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ \\/\\-.]02[ \\/\\-.]29))$/g.test( string ),\n            obj = {\n                result: date\n            };\n\n        return obj;\n    },\n    \n    email: function( string ){\n        // https://regex101.com/r/cdlyJy/3\n        let obj = {\n            result: /^[a-zA-Z_-]([\\w.-]?[a-zA-Z0-9])*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?){2,})+$/.test( string )\n        };\n\n        return obj;\n    },\n    \n    number: function( string ){\n        // ALL NUMBERS ( INTEGERS AND FLOATING )\n        // VALID NUMBERS: 123 | 123.456 | .123\n        let obj = {\n            result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n        };\n\n        return obj;\n    }\n    \n}\n\nexport const validationRulesAttributes = {\n\n    checkbox: function( data ){\n        let formEl = data.fieldEl.closest('form'),\n            dataChecksEl = formEl.querySelector('[name=\"' + data.fieldEl.name + '\"][data-checks]'),\n            obj = { result: data.fieldEl.checked };\n\n        if( dataChecksEl !== null ){\n            obj = this.checks({ attrValue: dataChecksEl.getAttribute('data-checks'), fieldEl: dataChecksEl});\n        }\n\n        return obj;\n    },\n\n    checks: function( data ){\n        try {\n            let attrValue = JSON.parse(data.attrValue),\n                fieldEl = data.fieldEl,\n                formEl = fieldEl.closest('form'),\n                checkedElLength = formEl.querySelectorAll('[name=\"' + fieldEl.name + '\"]:checked').length,\n                isMinOk = checkedElLength >= attrValue[0],\n                isMaxOk = checkedElLength <= attrValue[1],\n                obj = {\n                    result: isMinOk && isMaxOk\n                };\n\n            if( !obj.result ){\n\n                obj.errors = { checks: true };\n                if( !isMinOk ){ obj.errors.minChecks = true; }\n                if( !isMaxOk ){ obj.errors.maxChecks = true; }\n\n            }\n\n            return obj;\n        } catch(e){\n            throw new Error('\"data-checks\" attribute is not a valid array!');\n        }\n    },\n\n    equalTo: function( data ){\n        let fieldEl = data.fieldEl,\n            formEl = fieldEl.closest('form'),\n            checkFromEl = formEl.querySelector( '[name=\"' + fieldEl.getAttribute('data-equal-to') + '\"]' ),\n            obj = {\n                result: fieldEl.value === checkFromEl.value\n            };\n\n        if( !obj.result ){\n            \n            obj.errors = { equalTo: true };\n        }\n\n        return obj;\n    },\n    \n    exactLength: function( data ){\n        let valueLength = data.fieldEl.value.length,\n            exactLength = (data.attrValue * 1),\n            obj = {\n                result: valueLength === exactLength\n            };\n\n        if( !obj.result ){\n\n            obj.errors = { exactLength: true };\n            if( valueLength < exactLength ){ obj.errors.minlength = true; }\n            else { obj.errors.maxlength = true; }\n\n        }\n\n        return obj;\n    },\n\n    file: function( data ){\n        let fieldEl = data.fieldEl,\n            maxFileSize = (fieldEl.getAttribute('data-max-file-size') || data.fieldOptions.maxFileSize) * 1,\n            MIMEtype = (fieldEl.accept ? new RegExp(fieldEl.accept.replace( '*', '[^\\\\/,]+' )) : null),\n            filesList = Array.from(fieldEl.files),\n            obj = { result: true };\n\n        filesList.forEach(function( file ){\n            let exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize,\n                isAcceptedFileType = (MIMEtype !== null ? MIMEtype.test(file.type) : true);\n\n            if( exceedMaxFileSize || !isAcceptedFileType ){\n                obj.result = false;\n                if( typeof obj.errors === 'undefined' ){\n                    obj.errors = {};\n                }\n                obj.errors.file = true;\n                if( exceedMaxFileSize ){ obj.errors.maxFileSize = true; }\n                if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true; }\n\n            }\n        });\n\n        return obj;\n    },\n\n    length: function( data ){\n        try {\n            let valueL = data.fieldEl.value.length,\n                attrValue = JSON.parse(data.attrValue),\n                isMinlengthOk = valueL >= attrValue[0],\n                isMaxlengthOk = valueL <= attrValue[1],\n                obj = { result: isMinlengthOk && isMaxlengthOk };\n\n            if( !obj.result ){\n\n                obj.errors = { stringLength: true };\n                if( !isMinlengthOk ){ obj.errors.minlength = true; }\n                if( !isMaxlengthOk ){ obj.errors.maxlength = true; }\n\n            }\n\n            return obj;\n        } catch(e){\n            throw new Error('\"data-length\" attribute is not a valid array!');\n        }\n    },\n    \n    max: function( data ){\n        let fieldEl = data.fieldEl,\n            isDate = (fieldEl.matches('[type=\"date\"]') || fieldEl.matches('[data-subtype=\"date\"]') || fieldEl.matches('[data-subtype=\"dateDDMMYYYY\"]')),\n            value = data.fieldEl.value,\n            maxVal = data.attrValue;\n        \n        if( isDate ){\n\n            let splitChar = getSplitChar( value );\n\n            if( value.indexOf(splitChar) === 2 ){\n                // DD MM YYYY\n                value = value.split( splitChar ).reverse();\n            } else {\n                // YYYY MM DD\n                value = value.split( splitChar );\n            }\n\n            value = value.join('');\n            maxVal = maxVal.split('-').join('');\n\n        }\n\n        value = value * 1;\n        maxVal = maxVal * 1;\n\n        let obj = {\n                result: value <= maxVal\n            };\n\n        if( !obj.result ){\n            \n            obj.errors = { max: true };\n        }\n        \n        return obj;\n    },\n    \n    maxlength: function( data ){\n        const obj = {\n            result: data.fieldEl.value.length <= (data.attrValue * 1)\n        };\n\n        if( !obj.result ){\n\n            obj.errors = { maxlength: true };\n        }\n\n        return obj;\n    },\n    \n    min: function( data ){\n        let fieldEl = data.fieldEl,\n            isDate = (fieldEl.matches('[type=\"date\"]') || fieldEl.matches('[data-subtype=\"date\"]') || fieldEl.matches('[data-subtype=\"dateDDMMYYYY\"]')),\n            value = data.fieldEl.value,\n            minVal = data.attrValue;\n        \n        if( isDate ){\n\n            let splitChar = getSplitChar( value );\n\n            if( value.indexOf(splitChar) === 2 ){\n                // DD MM YYYY\n                value = value.split( splitChar ).reverse();\n            } else {\n                // YYYY MM DD\n                value = value.split( splitChar );\n            }\n\n            value = value.join('');\n            minVal = minVal.split('-').join('');\n\n        }\n\n        value = value * 1;\n        minVal = minVal * 1;\n\n        let obj = {\n                result: value >= minVal\n            };\n\n        if( !obj.result ){\n            \n            obj.errors = { min: true };\n        }\n        \n        return obj;\n    },\n\n    minlength: function( data ){\n        const obj = {\n            result: data.fieldEl.value.length >= (data.attrValue * 1)\n        };\n\n        if( !obj.result ){\n\n            obj.errors = { minlength: true };\n        }\n\n        return obj;\n    },\n\n    pattern: function( data ){\n        let fieldEl = data.fieldEl,\n            fieldPattern = fieldEl.pattern,\n            fieldRegex = new RegExp( fieldPattern ),\n            obj = {\n                result: fieldRegex.test( fieldEl.value )\n            };\n\n        if( !obj.result ){\n\n            obj.errors = { pattern: true };\n        }\n\n        return obj;\n    },\n\n    radio: function( data ){\n        let fieldEl = data.fieldEl,\n            fieldChecked = fieldEl.closest('form').querySelector( '[name=\"'+ fieldEl.name +'\"]:checked' ),\n            isValid = fieldChecked !== null && fieldChecked.value.trim().length > 0,\n            obj = { result: isValid };\n\n        return obj;\n    },\n\n    requiredFrom: function( data ){\n        let fieldEl = data.fieldEl,\n            formEl = fieldEl.closest('form'),\n            isValidValue = fieldEl.value.trim().length > 0,\n            reqMoreEl = formEl.querySelector( fieldEl.getAttribute('data-required-from') ),\n            checkedEl = formEl.querySelector( '[name=\"'+ reqMoreEl.name +'\"]:checked' ),\n            obj = { result: checkedEl !== null };\n\n        if( reqMoreEl.checked && reqMoreEl.required ){\n            obj.result = isValidValue;\n        }\n\n        if( !obj.result ){\n            obj.errors = { requiredFrom: true };\n        }\n        \n        return obj;\n    }\n    \n}\n","\nimport { getValidateFieldDefault, isDOMNode, runFunctionsSequence } from './helpers';\nimport { isValid } from './isValid';\n\nexport function checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    if( !isDOMNode(fieldEl) ){\n        const obj = getValidateFieldDefault({fieldEl});\n        return Promise.resolve(obj);\n    }\n\n    const isValidValue =      fieldEl.value.trim().length > 0,\n          isRequired =        fieldEl.required,\n          isReqFrom =         fieldEl.matches('[data-required-from]'),\n          isValidateIfFilled =fieldEl.matches('[data-validate-if-filled]'),\n          rfsObject = {\n            functionsList: fieldOptions.beforeValidation,\n            data: {fieldEl}\n        };\n\n    return runFunctionsSequence(rfsObject)\n        .then(data => {\n\n            let dataObj = data.pop();\n            return new Promise(resolve => {\n                if(\n                    (!isRequired && !isValidateIfFilled && !isReqFrom) ||   // IT IS A NORMAL FORM FIELD\n                    (isValidateIfFilled && !isValidValue) ||                // IT IS data-validate-if-filled AND EMPTY\n                    (isReqFrom && !isRequired )                             // IT IS data-required-from AND NOT required\n                ){\n\n                    dataObj.result = true;\n                    resolve( dataObj );\n                \n                } else {\n\n                    resolve( isValid( fieldEl, fieldOptions, validationRules, validationErrors ) );\n                    \n                }\n\n            });\n\n        });\n\n}\n","\nimport { getValidateFieldDefault, mergeObjects, toCamelCase } from './helpers';\nimport { validationRulesAttributes } from './validationRules';\n\nexport function isValid( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    const fieldType = ( fieldEl.matches('[data-subtype]') ? toCamelCase( fieldEl.getAttribute('data-subtype') ) : fieldEl.type ),\n          fieldValue = fieldEl.value,\n          isValidValue = fieldValue.trim().length > 0,\n          // ALPHABETICAL REVERSE ORDER\n          fieldAttributes = Array.from(fieldEl.attributes).sort((a,b) => { return a.name < b.name });\n\n    const attrValidations = [];\n    let attrValidationsResult = isValidValue,\n        obj = getValidateFieldDefault({result: isValidValue, fieldEl});\n\n    if( !obj.result ){\n        obj.errors = { empty: true };\n        return Promise.resolve(obj);\n    }\n\n    // COLLECT SPECIFIC VALIDATIONS FOR validationRulesAttributes\n    fieldAttributes.forEach(attr => {\n        // FOR data-* ATTRIBUTES -> REMOVE \"data-\" AND TRANSFORM TO CAMELCASE\n        const attrName = toCamelCase( attr.name.replace('data-', '') ),\n              attrValue = attr.value,\n              isAttrValueWithFn = attrName === 'type' && typeof validationRulesAttributes[attrValue] === 'function',\n              isAttrNameWithFn = typeof validationRulesAttributes[attrName] === 'function';\n\n        if( isAttrValueWithFn || isAttrNameWithFn ){\n\n            const extraValObj = {\n                    attrName: (isAttrValueWithFn ? attrValue : attrName),\n                    attrValue: attrValue,\n                    fieldEl,\n                    fieldOptions\n                };\n\n            if( isAttrValueWithFn || attrName === 'requiredFrom' ){\n                // THESE VALIDATIONS MUST RUN BEFORE ALL OTHERS\n                attrValidations.unshift( extraValObj );\n            } else {\n                attrValidations.push( extraValObj );\n            }\n\n        }\n    });\n\n    return new Promise(resolve => {\n\n        // RUN SPECIFIC VALIDATIONS FOR validationRulesAttributes\n        attrValidations.forEach(item => {\n            const extraVal = validationRulesAttributes[item.attrName]( item );\n            if( !extraVal.result ){\n                obj = mergeObjects({}, obj, extraVal);\n                attrValidationsResult = false;\n            }\n        });\n\n        // RUN VALIDATIONS FOR validationRules\n        if( typeof validationRules[fieldType] === 'function' ){\n            resolve( validationRules[fieldType](fieldValue, fieldEl) );\n        } else {\n            resolve( obj );\n        }\n\n    }).then(data => {\n\n        obj = mergeObjects( {}, obj, data, {fieldEl} );\n        obj.result = obj.result && attrValidationsResult;\n\n        if( !obj.result ){\n            const fieldErrors = (typeof validationErrors[fieldType] === 'function' ? validationErrors[fieldType](fieldValue, fieldEl) : {});\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {};\n            }\n            obj.errors.rule = true;\n            obj.errors = mergeObjects({}, obj.errors, fieldErrors);\n        }\n        \n        return obj;\n\n    });\n\n}\n","\nimport { mergeObjects }         from './modules/helpers';\nimport { options }              from './modules-lite/options';\nimport { validationRules }      from './modules/validationRules';\nimport { constructorFn }        from './modules-lite/constructor';\nimport { checkFieldValidity }   from './modules/checkFieldValidity';\nimport { checkFormValidity }    from './modules/checkFormValidity';\n\nconst version = '4.0.2';\n\nclass Form {\n\n    constructor( formEl, optionsObj ){\n        constructorFn(this, formEl, optionsObj);\n    }\n\n    destroy(){\n        delete this.formEl.formjs;\n    }\n\n    validateField( fieldEl, fieldOptions ){\n        fieldEl = (typeof fieldEl === 'string' ? this.formEl.querySelector(fieldEl) : fieldEl);\n        fieldOptions = mergeObjects({}, this.options.fieldOptions, fieldOptions);\n        return checkFieldValidity(fieldEl, fieldOptions, this.validationRules, this.validationErrors);\n    }\n\n    validateForm( fieldOptions ){\n        fieldOptions = mergeObjects({}, this.options.fieldOptions, fieldOptions);\n        return checkFormValidity(this.formEl, fieldOptions, this.validationRules, this.validationErrors);\n    }\n    \n    static addValidationErrors( errorsObj ){\n        this.prototype.validationErrors = mergeObjects({}, this.prototype.validationErrors, errorsObj);\n    }\n\n    static addValidationRules( rulesObj ){\n        this.prototype.validationRules = mergeObjects({}, this.prototype.validationRules, rulesObj);\n    }\n    \n    static setOptions( optionsObj ){\n        this.prototype.options = mergeObjects({}, this.prototype.options, optionsObj);\n    }\n\n}\n\nForm.prototype.options = options;\nForm.prototype.validationErrors = {};\nForm.prototype.validationRules = validationRules;\nForm.prototype.version = version;\n\nexport default Form;\n","\nimport { checkFormEl, isNodeList, mergeObjects }   from '../modules/helpers';\n\nexport function constructorFn( self, formEl, optionsObj ){\n\n    let argsL = arguments.length,\n        checkFormElem = checkFormEl(formEl);\n\n    if( argsL === 0 || (argsL > 0 && !formEl) ){\n        throw new Error('First argument \"formEl\" is missing or falsy!');\n    }\n    if( isNodeList(formEl) ){\n        throw new Error('First argument \"formEl\" must be a single DOM node or a form CSS selector, not a NodeList!');\n    }\n    if( !checkFormElem.result ){\n        throw new Error('First argument \"formEl\" is not a DOM node nor a form CSS selector!');\n    }\n\n    self.formEl = checkFormElem.element;\n    self.formEl.formjs = self;\n    self.options = mergeObjects({}, self.constructor.prototype.options, optionsObj);\n\n    // BINDING CONTEXT FOR FUTURE EXECUTION\n    let beforeValidation = self.options.fieldOptions.beforeValidation;\n    self.options.fieldOptions.beforeValidation = ( Array.isArray(beforeValidation) ? beforeValidation.map(cbFn => cbFn.bind(self)) : beforeValidation.bind(self) );\n    \n}\n","\nimport { fieldsStringSelector, getUniqueFields, getValidateFieldDefault, getValidateFormDefault, mergeObjects } from './helpers';\nimport { checkFieldValidity } from './checkFieldValidity';\n\nexport function checkFormValidity( formEl, fieldOptions, validationRules, validationErrors, fieldToSkip = null ){\n\n    fieldOptions = mergeObjects( {}, fieldOptions, {focusOnRelated: false} );\n\n    const obj = getValidateFormDefault(),\n          fieldsList = getUniqueFields( formEl.querySelectorAll(fieldsStringSelector) );\n\n    return Promise.all( fieldsList.map(fieldEl => {\n\n        if( fieldToSkip && fieldEl === fieldToSkip ){\n            const obj2 = getValidateFieldDefault({fieldEl, result: true});\n            return Promise.resolve(obj2);\n        }\n        \n        return checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors );\n\n    }) ).then(list => {\n\n        let areAllFieldsValid = list.filter(fieldObj => !fieldObj.result).length === 0;\n        obj.result = areAllFieldsValid;\n        obj.fields = list;\n\n        return obj;\n\n    });\n\n}\n","\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [],\n        maxFileSize:            10\n    }\n    \n}\n"],"names":["checkFormEl","formEl","isString","isFormSelector","isDOMNode","document","querySelector","tagName","toLowerCase","result","element","fieldsStringSelector","getSplitChar","string","splitChar","indexOf","getUniqueFields","nodeList","currentFieldName","currentFieldType","Array","from","filter","fieldEl","name","type","matches","getValidateFieldDefault","obj","mergeObjects","getValidateFormDefault","fields","node","Element","prototype","isPrototypeOf","isNodeList","NodeList","out","i","arguments","length","key","isArray","Object","toString","call","isObject","hasOwnProperty","concat","slice","push","toCamelCase","replace","all","letter","toUpperCase","validationRulesAttributes","checkbox","data","dataChecksEl","closest","checked","this","checks","attrValue","getAttribute","JSON","parse","checkedElLength","querySelectorAll","isMinOk","isMaxOk","errors","minChecks","maxChecks","e","Error","equalTo","checkFromEl","value","exactLength","valueLength","minlength","maxlength","file","maxFileSize","fieldOptions","MIMEtype","accept","RegExp","filesList","files","forEach","exceedMaxFileSize","size","isAcceptedFileType","test","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","stringLength","max","isDate","maxVal","split","reverse","join","min","minVal","pattern","fieldPattern","radio","fieldChecked","trim","requiredFrom","isValidValue","reqMoreEl","required","checkFieldValidity","validationRules","validationErrors","Promise","resolve","isRequired","isReqFrom","isValidateIfFilled","functionsList","stopConditionFn","reduce","acc","promiseFn","then","res","dataNew","dataList","runFunctionsSequence","beforeValidation","dataObj","pop","fieldType","fieldValue","fieldAttributes","attributes","sort","a","b","attrValidations","attrValidationsResult","attr","attrName","isAttrValueWithFn","isAttrNameWithFn","extraValObj","unshift","item","extraVal","fieldErrors","rule","empty","isValid","Form","optionsObj","self","argsL","checkFormElem","formjs","options","constructor","map","cbFn","bind","constructorFn","errorsObj","rulesObj","fieldToSkip","focusOnRelated","fieldsList","obj2","list","areAllFieldsValid","fieldObj","checkFormValidity","date","email","number","version"],"mappings":"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"}