{"version":3,"file":"formjs.min.js","sources":["../../src/modules/version.js","../../src/modules/helpers/isNodeList.js","../../src/modules/helpers/isDOMNode.js","../../src/modules/helpers/checkFormEl.js","../../src/modules/helpers/mergeObjects.js","../../src/modules/helpers/fieldsStringSelector.js","../../src/modules/helpers/getDateAsNumber.js","../../src/modules/helpers/getSplitChar.js","../../src/modules/helpers/getUniqueFields.js","../../src/modules/helpers/getValidateFieldDefault.js","../../src/modules/helpers/getValidateFormDefault.js","../../src/modules/helpers/toCamelCase.js","../../src/modules/validationRules.js","../../src/modules/validationRules/date.js","../../src/modules/validationRules/email.js","../../src/modules/validationRules/number.js","../../src/modules/validationRules/checkbox.js","../../src/modules/validationRules/checks.js","../../src/modules/validationRules/equalTo.js","../../src/modules/validationRules/exactLength.js","../../src/modules/validationRules/file.js","../../src/modules/validationRules/length.js","../../src/modules/validationRules/max.js","../../src/modules/validationRules/maxlength.js","../../src/modules/validationRules/min.js","../../src/modules/validationRules/minlength.js","../../src/modules/validationRules/pattern.js","../../src/modules/validationRules/radio.js","../../src/modules/checkFieldValidity.js","../../src/modules/helpers/runFunctionsSequence.js","../../src/modules/isValid.js","../../src/index-lite.js","../../src/modules-lite/constructor.js","../../src/modules/checkFormValidity.js","../../src/modules-lite/options.js"],"sourcesContent":["\nexport const version = '4.2.0';\n","\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList );\n}\n","\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node );\n}\n","\nimport { isDOMNode } from './isDOMNode';\n\nexport const checkFormEl = formEl => {\n    const isString = typeof formEl,\n          isValidNodeSelector = isString === 'string' && isDOMNode(document.querySelector(formEl)),\n          isFormSelector = isValidNodeSelector && document.querySelector(formEl).tagName.toLowerCase() === 'form',\n          obj = {\n            result: isDOMNode(formEl) || isFormSelector,\n            element: (isString === 'string' ? document.querySelector(formEl) : formEl)\n          };\n\n    return obj;\n}\n","\nexport const mergeObjects = function( out = {} ){\n    for(let i=1; i<arguments.length; i++){\n        let obj = arguments[i];\n\n        if(!obj){ continue; }\n\n        for(let key in obj){\n            let isArray = Object.prototype.toString.call(obj[key]) === \"[object Array]\";\n            let isObject = Object.prototype.toString.call(obj[key]) === \"[object Object]\";\n\n            // COPY ONLY ENUMERABLE PROPERTIES\n            if( obj.hasOwnProperty(key) ){\n                if( isArray ){\n\n                    if( typeof out[key] === 'undefined' ){\n                        out[key] = [];\n                    }\n                    out[key] = out[key].concat( obj[key].slice(0) );\n\n                } else if( isObject ){\n\n                    out[key] = mergeObjects(out[key], obj[key]);\n\n                } else {\n\n                    // * STRING | NUMBER | BOOLEAN | FUNCTION\n                    if( Array.isArray(out[key]) ){\n                        // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                        out[key].push(obj[key]);\n                    } else {\n                        out[key] = obj[key];\n                    }\n\n                }\n            }\n        }\n    }\n\n    return out;\n}\n","\nexport const fieldsStringSelector = 'input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"hidden\"]), select, textarea'\n","\nimport { getSplitChar } from './getSplitChar';\n\nconst formatMap = {\n    'YYYY-MM-DD': function(dateArray){\n        return dateArray;\n    },\n    'MM-DD-YYYY': function(dateArray){\n        return [dateArray[2], dateArray[0], dateArray[1]];\n    },\n    'DD-MM-YYYY': function(dateArray){\n        return dateArray.reverse();\n    }\n};\n\nexport const getDateAsNumber = ( dateString, dateFormat ) => {\n    dateFormat = dateFormat || 'YYYY-MM-DD';\n    const splitChar = getSplitChar(dateString);\n\n    if( dateFormat.indexOf(splitChar) < 0 ){\n        return;\n    }\n\n    dateFormat = dateFormat.replace(/[^YMD]/g, '-');\n    dateString = dateString.split(splitChar);\n    dateString = formatMap[dateFormat](dateString).join('');\n    \n    return dateString;\n}\n","\nexport const getSplitChar = string => {\n    // MATCH ANY NON-DIGIT CHAR\n    const separator = string.match(/\\D/);\n    return (separator && separator.length > 0) ? separator[0] : null;\n}\n","\nexport const getUniqueFields = nodeList => {\n\n    let currentFieldName = '',\n        currentFieldType = '';\n\n    return Array.from( nodeList ).filter(fieldEl => {\n        const name = fieldEl.name,\n              type = fieldEl.type;\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false;\n        }\n        \n        if( !fieldEl.matches('[data-required-from]') ){\n            currentFieldName = name;\n            currentFieldType = type;\n        }\n        return true;\n    });\n    \n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const getValidateFieldDefault = obj => {\n    return mergeObjects({}, { result: false, fieldEl: null }, obj);\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const getValidateFormDefault = obj => {\n    return mergeObjects({}, { result: true, fields: [] }, obj);\n}\n","\nexport const toCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase(); });\n}\n","\nimport { date }         from './validationRules/date';\nimport { email }        from './validationRules/email';\nimport { number }       from './validationRules/number';\n\nimport { checkbox }     from './validationRules/checkbox';\nimport { equalTo }      from './validationRules/equalTo';\nimport { exactLength }  from './validationRules/exactLength';\nimport { file }         from './validationRules/file';\nimport { length }       from './validationRules/length';\nimport { max }          from './validationRules/max';\nimport { maxlength }    from './validationRules/maxlength';\nimport { min }          from './validationRules/min';\nimport { minlength }    from './validationRules/minlength';\nimport { pattern }      from './validationRules/pattern';\nimport { radio }        from './validationRules/radio';\n\nexport const validationRules = {\n    date,\n    email,\n    number,\n\n    checkbox,\n    equalTo,\n    exactLength,\n    file,\n    length,\n    max,\n    maxlength,\n    min,\n    minlength,\n    pattern,\n    radio\n}\n","\n/*\n    DATE AS ISO 8601 DATE FORMAT:\n    YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n*/\n\nexport const date = function( string ){\n    return {\n        result: /^((((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13578]|1[02])[ \\/\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13456789]|1[012])[ \\/\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.]02[ \\/\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ \\/\\-.]02[ \\/\\-.]29))$/g.test( string )\n    };\n}\n","\n// https://regex101.com/r/cdlyJy/3\n\nexport const email = function( string ){\n    return {\n        result: /^[a-zA-Z_-]([\\w.-]?[a-zA-Z0-9])*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?){2,})+$/.test( string )\n    };\n}\n","\n/*\n    ALL NUMBERS ( INTEGERS AND FLOATING )\n    VALID NUMBERS: 123 | 123.456 | .123\n*/\n\nexport const number = function( string ){\n    return {\n        result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n    };\n}","\nimport { checks } from './checks';\n\nexport const checkbox = function( value, fieldEl ){\n    const dataChecksEl = fieldEl.closest('form').querySelector('[name=\"' + fieldEl.name + '\"][data-checks]');\n    return dataChecksEl ? checks(dataChecksEl) : { result: fieldEl.checked };\n}\n","\nexport const checks = function( fieldEl ){\n    const attrValue = JSON.parse( fieldEl.getAttribute('data-checks') ),\n          checkedElLength = fieldEl.closest('form').querySelectorAll('[name=\"' + fieldEl.name + '\"]:checked').length,\n          isMinOk = checkedElLength >= attrValue[0],\n          isMaxOk = checkedElLength <= attrValue[1],\n          obj = { result: isMinOk && isMaxOk };\n\n    if( !obj.result ){\n        obj.errors = { checks: true };\n        if( !isMinOk ){ obj.errors.minChecks = true; }\n        if( !isMaxOk ){ obj.errors.maxChecks = true; }\n    }\n\n    return obj;\n}\n","\nexport const equalTo = function( value, fieldEl ){\n    const checkFromEl = fieldEl.closest('form').querySelector( '[name=\"' + fieldEl.getAttribute('data-equal-to') + '\"]' );\n    return { result: value === checkFromEl.value };\n}\n","\nexport const exactLength = function( value, fieldEl ){\n    const valueLength = value.length,\n          exactLength = fieldEl.getAttribute('data-exact-length') * 1,\n          obj = { result: valueLength === exactLength };\n\n    if( !obj.result ){\n        obj.errors = {};\n        if( valueLength < exactLength ){ obj.errors.minlength = true; }\n        else { obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nexport const file = function( value, fieldEl ){\n    const maxFileSize = (fieldEl.getAttribute('data-max-file-size') || fieldOptions.maxFileSize) * 1,\n          MIMEtype = fieldEl.accept ? new RegExp(fieldEl.accept.replace( '*', '[^\\\\/,]+' )) : null,\n          filesList = Array.from(fieldEl.files),\n          obj = { result: true };\n\n    filesList.forEach(file => {\n        const exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize,\n              isAcceptedFileType = MIMEtype !== null ? MIMEtype.test(file.type) : true;\n\n        if( exceedMaxFileSize || !isAcceptedFileType ){\n            obj.result = false;\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {};\n            }\n            if( exceedMaxFileSize ){ obj.errors.maxFileSize = true; }\n            if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true; }\n\n        }\n    });\n\n    return obj;\n}\n","\nexport const length = function( value, fieldEl ){\n    const valueL = value.length,\n          attrValue = JSON.parse( fieldEl.getAttribute('data-length') ),\n          isMinlengthOk = valueL >= attrValue[0],\n          isMaxlengthOk = valueL <= attrValue[1],\n          obj = { result: isMinlengthOk && isMaxlengthOk };\n\n    if( !obj.result ){\n        obj.errors = { stringLength: true };\n        if( !isMinlengthOk ){ obj.errors.minlength = true; }\n        if( !isMaxlengthOk ){ obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const max = function( value, fieldEl ){\n    let maxVal = fieldEl.max;\n    const dateFormat = fieldEl.getAttribute('data-date-format');\n    \n    if( fieldEl.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat );\n        maxVal = maxVal.split('-').join('');\n    }\n\n    value = value * 1;\n    maxVal = maxVal * 1;\n    \n    return { result: value <= maxVal };\n}\n","\nexport const maxlength = function( value, fieldEl ){\n    return { result: value.length <= fieldEl.maxLength * 1 };\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const min = function( value, fieldEl ){\n    let minVal = fieldEl.min;\n    const dateFormat = fieldEl.getAttribute('data-date-format');\n    \n    if( fieldEl.type === 'date' || fieldEl.getAttribute('data-date-format') ){\n        value = getDateAsNumber( value, dateFormat );\n        minVal = minVal.split('-').join('');\n    }\n\n    value = value * 1;\n    minVal = minVal * 1;\n    \n    return { result: value >= minVal };\n}\n","\nexport const minlength = function( value, fieldEl ){\n    return { result: value.length >= fieldEl.minLength * 1 };\n}\n","\nexport const pattern = function( value, fieldEl ){\n    return { result: new RegExp(fieldEl.pattern).test(value) };\n}\n","\nexport const radio = function( value, fieldEl ){\n    const fieldChecked = fieldEl.closest('form').querySelector( '[name=\"'+ fieldEl.name +'\"]:checked' ),\n          isValid = fieldChecked !== null && fieldChecked.value.trim().length > 0;\n\n    return { result: isValid };\n}\n","\nimport { getValidateFieldDefault, isDOMNode, runFunctionsSequence } from './helpers';\nimport { isValid } from './isValid';\n\nexport function checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    if( !isDOMNode(fieldEl) ){\n        const obj = getValidateFieldDefault({fieldEl});\n        return Promise.resolve(obj);\n    }\n\n    const formEl = fieldEl.closest('form'),\n          isValidValue = fieldEl.value.trim().length > 0;\n\n     // HANDLE FIELDS radio/data-require-more\n     if( fieldEl.type === 'radio' ){\n        const checkedEl = fieldEl.checked ? fieldEl : formEl.querySelector('[name=\"'+ fieldEl.name +'\"]:checked'),\n              reqMoreIsChecked = checkedEl && checkedEl.matches('[data-require-more]'),\n              findReqMoreEl = reqMoreIsChecked ? checkedEl : formEl.querySelector('[data-require-more][name=\"'+ fieldEl.name +'\"]'),\n              findReqFromEl = findReqMoreEl ? formEl.querySelector('[data-required-from=\"#'+ findReqMoreEl.id +'\"]') : null;\n        \n        if( checkedEl && findReqFromEl ){\n            findReqFromEl.required = findReqMoreEl.required && findReqMoreEl.checked;\n            if( !reqMoreIsChecked ){\n                findReqFromEl.value = '';\n            } else if( fieldOptions.focusOnRelated ) {\n                findReqFromEl.focus();\n            }\n        }\n    }\n\n    // HANDLE FIELDS data-required-from\n    if( fieldEl.matches('[data-required-from]') && isValidValue ){\n        const reqMoreEl = formEl.querySelector( fieldEl.getAttribute('data-required-from') );\n        reqMoreEl.checked = true;\n        fieldEl.required = reqMoreEl.required;\n    }\n\n    const needsValidation = fieldEl.required || (fieldEl.matches('[data-validate-if-filled]') && isValidValue);\n\n    return runFunctionsSequence({\n            functionsList: fieldOptions.beforeValidation,\n            data: {fieldEl}\n        })\n        .then(data => {\n            const dataObj = data.pop();\n            return new Promise(resolve => {\n                if( !needsValidation ){\n                    dataObj.result = true;\n                }\n                resolve( needsValidation ? isValid(fieldEl, fieldOptions, validationRules, validationErrors) : dataObj );\n            });\n        });\n\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const runFunctionsSequence = ( { functionsList = [], data = {}, stopConditionFn = () => false } = {} ) => {\n    return functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1]);\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res);\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result);\n                    return res;\n                });\n        });\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList);\n}\n","\nimport { getValidateFieldDefault, mergeObjects, toCamelCase } from './helpers';\n\nexport function isValid( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    const fieldValue = fieldEl.value,\n          obj = getValidateFieldDefault({result: fieldValue.trim().length > 0, fieldEl}),\n          isRadioOrCheckbox = /^(radio|checkbox)$/.test(fieldEl.type),\n          hasSelectedInput = fieldEl.closest('form').querySelectorAll('[name=\"'+ fieldEl.name +'\"]:checked').length > 0;\n\n    if( (!isRadioOrCheckbox && !obj.result) || (isRadioOrCheckbox && !hasSelectedInput) ){\n        obj.result = false;\n        obj.errors = { empty: true };\n        return Promise.resolve(obj);\n    }\n\n    // COLLECT VALIDATION METHOD NAMES ( USED TO RUN VALIDATIONS AND GET ERRORS )\n    const validationMethods = Array.from(fieldEl.attributes).reduce((accList, attr) => {\n        const attrName = toCamelCase( attr.name.replace('data-', '') ),\n              attrValue = toCamelCase( attr.value ),\n              isAttrValueWithFn = (attrName === 'type' || attrName === 'subtype') && validationRules[attrValue],\n              isAttrNameWithFn = validationRules[attrName];\n\n        if( isAttrValueWithFn || isAttrNameWithFn ){\n            accList.push( isAttrValueWithFn ? attrValue : attrName );\n        }\n        return accList;\n    }, []);\n\n    return new Promise(resolve => {\n\n        // RUN VALIDATIONS\n        const validationsResult = validationMethods.reduce((accPromise, methodName) => {\n            return accPromise.then(accObj => {\n                return new Promise(resolveVal => {\n                    // RUN VALIDATION INSIDE A PROMISE IS USEFUL FOR ASYNC VALIDATIONS\n                    resolveVal( validationRules[methodName](fieldValue, fieldEl, fieldOptions) );\n                }).then(valObj => {\n                    // ADD CUSTOM ERROR-KEY FOR EACH VALIDATION RULE\n                    if( !valObj.result ){\n                        const errorObj = {};\n                        if( typeof valObj.errors === 'undefined' || typeof valObj.errors[methodName] === 'undefined' ){\n                            errorObj[methodName] = true;\n                        }\n                        valObj.errors = mergeObjects({}, valObj.errors, errorObj);\n                    }\n                    valObj = valObj.result ? {} : valObj;\n                    return mergeObjects(accObj, valObj);\n                });\n            });\n        }, Promise.resolve(obj));\n        resolve(validationsResult);\n\n    }).then(data => {\n\n        // GET ERRORS\n        if( !data.result ){\n            data.errors = validationMethods.reduce((accObj, methodName) => {\n                const errors = (validationErrors[methodName] && validationErrors[methodName](fieldValue, fieldEl)) || {};\n                return mergeObjects(accObj, errors);\n            }, data.errors);\n            data.errors.rule = true;\n        }\n        return data;\n\n    });\n\n}\n","\nimport { version }              from './modules/version';\nimport { mergeObjects }         from './modules/helpers';\nimport { options }              from './modules-lite/options';\nimport { validationRules }      from './modules/validationRules';\nimport { constructorFn }        from './modules-lite/constructor';\nimport { checkFieldValidity }   from './modules/checkFieldValidity';\nimport { checkFormValidity }    from './modules/checkFormValidity';\n\nclass Form {\n\n    constructor( formEl, optionsObj ){\n        constructorFn(this, formEl, optionsObj);\n    }\n\n    destroy(){\n        delete this.formEl.formjs;\n    }\n\n    validateField( fieldEl, fieldOptions ){\n        fieldEl = (typeof fieldEl === 'string' ? this.formEl.querySelector(fieldEl) : fieldEl);\n        fieldOptions = mergeObjects({}, this.options.fieldOptions, fieldOptions);\n        return checkFieldValidity(fieldEl, fieldOptions, this.validationRules, this.validationErrors);\n    }\n\n    validateForm( fieldOptions ){\n        fieldOptions = mergeObjects({}, this.options.fieldOptions, fieldOptions);\n        return checkFormValidity(this.formEl, fieldOptions, this.validationRules, this.validationErrors);\n    }\n    \n    static addValidationErrors( errorsObj ){\n        this.prototype.validationErrors = mergeObjects({}, this.prototype.validationErrors, errorsObj);\n    }\n\n    static addValidationRules( rulesObj ){\n        this.prototype.validationRules = mergeObjects({}, this.prototype.validationRules, rulesObj);\n    }\n    \n    static setOptions( optionsObj ){\n        this.prototype.options = mergeObjects({}, this.prototype.options, optionsObj);\n    }\n\n}\n\nForm.prototype.options = options;\nForm.prototype.validationErrors = {};\nForm.prototype.validationRules = validationRules;\nForm.prototype.version = version;\n\nexport default Form;\n","\nimport { checkFormEl, isNodeList, mergeObjects }   from '../modules/helpers';\n\nexport function constructorFn( self, formEl, optionsObj ){\n\n    let argsL = arguments.length,\n        checkFormElem = checkFormEl(formEl);\n\n    if( argsL === 0 || (argsL > 0 && !formEl) ){\n        throw new Error('First argument \"formEl\" is missing or falsy!');\n    }\n    if( isNodeList(formEl) ){\n        throw new Error('First argument \"formEl\" must be a single DOM node or a form CSS selector, not a NodeList!');\n    }\n    if( !checkFormElem.result ){\n        throw new Error('First argument \"formEl\" is not a DOM node nor a form CSS selector!');\n    }\n\n    self.formEl = checkFormElem.element;\n    self.formEl.formjs = self;\n    self.options = mergeObjects({}, self.constructor.prototype.options, optionsObj);\n\n    // BINDING CONTEXT FOR FUTURE EXECUTION\n    self.options.fieldOptions.beforeValidation = self.options.fieldOptions.beforeValidation.map(cbFn => cbFn.bind(self));\n\n    self.formEl.noValidate = true;\n    \n}\n","\nimport { fieldsStringSelector, getUniqueFields, getValidateFieldDefault, getValidateFormDefault, mergeObjects } from './helpers';\nimport { checkFieldValidity } from './checkFieldValidity';\n\nexport function checkFormValidity( formEl, fieldOptions, validationRules, validationErrors, fieldToSkip = null ){\n\n    fieldOptions = mergeObjects( {}, fieldOptions, {focusOnRelated: false} );\n    const fieldsList = getUniqueFields( formEl.querySelectorAll(fieldsStringSelector) );\n\n    return Promise.all( fieldsList.map(fieldEl => {\n\n        if( fieldToSkip && fieldEl === fieldToSkip ){\n            const obj = getValidateFieldDefault({fieldEl, result: true});\n            return Promise.resolve(obj);\n        }\n        return checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors );\n\n    }) ).then(fields => {\n\n        const areAllFieldsValid = fields.filter(fieldObj => !fieldObj.result).length === 0;\n        return getValidateFormDefault({result: areAllFieldsValid, fields});\n\n    });\n\n}\n","\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [],\n        focusOnRelated:         true,\n        maxFileSize:            10\n    }\n    \n}\n"],"names":["isNodeList","nodeList","NodeList","prototype","isPrototypeOf","isDOMNode","node","Element","checkFormEl","formEl","isString","isFormSelector","document","querySelector","tagName","toLowerCase","result","element","mergeObjects","out","i","arguments","length","obj","key","isArray","Object","toString","call","isObject","hasOwnProperty","concat","slice","Array","push","fieldsStringSelector","formatMap","dateArray","reverse","getDateAsNumber","dateString","dateFormat","separator","splitChar","match","indexOf","replace","split","join","getUniqueFields","currentFieldName","currentFieldType","from","filter","fieldEl","name","type","matches","getValidateFieldDefault","getValidateFormDefault","fields","toCamelCase","string","all","letter","toUpperCase","validationRules","date","test","email","number","checkbox","value","dataChecksEl","closest","attrValue","JSON","parse","getAttribute","checkedElLength","querySelectorAll","isMinOk","isMaxOk","errors","checks","minChecks","maxChecks","checked","equalTo","exactLength","valueLength","minlength","maxlength","file","maxFileSize","fieldOptions","MIMEtype","accept","RegExp","filesList","files","forEach","exceedMaxFileSize","size","isAcceptedFileType","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","stringLength","max","maxVal","maxLength","min","minVal","minLength","pattern","radio","fieldChecked","trim","checkFieldValidity","validationErrors","Promise","resolve","isValidValue","checkedEl","reqMoreIsChecked","findReqMoreEl","findReqFromEl","id","required","focusOnRelated","focus","reqMoreEl","needsValidation","functionsList","data","stopConditionFn","reduce","acc","promiseFn","then","res","dataNew","dataList","runFunctionsSequence","beforeValidation","dataObj","pop","fieldValue","isRadioOrCheckbox","hasSelectedInput","empty","validationMethods","attributes","accList","attr","attrName","isAttrValueWithFn","isAttrNameWithFn","accPromise","methodName","accObj","resolveVal","valObj","errorObj","rule","isValid","Form","optionsObj","self","argsL","checkFormElem","Error","formjs","options","constructor","map","cbFn","bind","noValidate","constructorFn","this","errorsObj","rulesObj","fieldToSkip","fieldsList","areAllFieldsValid","fieldObj","checkFormValidity","version"],"mappings":";4aACO,ICAMA,EAAa,SAAAC,UACfC,SAASC,UAAUC,cAAeH,ICDhCI,EAAY,SAAAC,UACdC,QAAQJ,UAAUC,cAAeE,ICC/BE,EAAc,SAAAC,OACjBC,IAAkBD,GAElBE,EADmC,WAAbD,GAAyBL,EAAUO,SAASC,cAAcJ,KACiB,SAAzDG,SAASC,cAAcJ,GAAQK,QAAQC,oBACzE,CACJC,OAAQX,EAAUI,IAAWE,EAC7BM,QAAuB,WAAbP,EAAwBE,SAASC,cAAcJ,GAAUA,ICRlES,EAAe,SAAfA,YAAyBC,yDAAM,GAChCC,EAAE,EAAGA,EAAEC,UAAUC,OAAQF,IAAI,KAC7BG,EAAMF,UAAUD,MAEhBG,MAEA,IAAIC,KAAOD,EAAI,KACXE,EAAuD,mBAA7CC,OAAOvB,UAAUwB,SAASC,KAAKL,EAAIC,IAC7CK,EAAwD,oBAA7CH,OAAOvB,UAAUwB,SAASC,KAAKL,EAAIC,IAG9CD,EAAIO,eAAeN,KACfC,QAEwB,IAAbN,EAAIK,KACXL,EAAIK,GAAO,IAEfL,EAAIK,GAAOL,EAAIK,GAAKO,OAAQR,EAAIC,GAAKQ,MAAM,KAEpCH,EAEPV,EAAIK,GAAON,EAAaC,EAAIK,GAAMD,EAAIC,IAKlCS,MAAMR,QAAQN,EAAIK,IAElBL,EAAIK,GAAKU,KAAKX,EAAIC,IAElBL,EAAIK,GAAOD,EAAIC,YAQ5BL,GCtCEgB,EAAuB,6GCE9BC,EAAY,cACA,SAASC,UACZA,gBAEG,SAASA,SACZ,CAACA,EAAU,GAAIA,EAAU,GAAIA,EAAU,kBAEpC,SAASA,UACZA,EAAUC,YAIZC,EAAkB,SAAEC,EAAYC,GACzCA,EAAaA,GAAc,iBCbrBC,EDcAC,GCdAD,EDcyBF,ECdNI,MAAM,QACVF,EAAUpB,OAAS,EAAKoB,EAAU,GAAK,UDexDD,EAAWI,QAAQF,GAAa,UAIpCF,EAAaA,EAAWK,QAAQ,UAAW,KAC3CN,EAAaA,EAAWO,MAAMJ,GAC9BH,EAAaJ,EAAUK,GAAYD,GAAYQ,KAAK,KExB3CC,EAAkB,SAAAhD,OAEvBiD,EAAmB,GACnBC,EAAmB,UAEhBlB,MAAMmB,KAAMnD,GAAWoD,QAAO,SAAAC,OAC3BC,EAAOD,EAAQC,KACfC,EAAOF,EAAQE,YAEjBD,IAASL,GAAoBM,IAASL,KAIrCG,EAAQG,QAAQ,0BACjBP,EAAmBK,EACnBJ,EAAmBK,IAEhB,OCfFE,EAA0B,SAAAnC,UAC5BL,EAAa,GAAI,CAAEF,QAAQ,EAAOsC,QAAS,MAAQ/B,ICDjDoC,EAAyB,SAAApC,UAC3BL,EAAa,GAAI,CAAEF,QAAQ,EAAM4C,OAAQ,IAAMrC,ICH7CsC,EAAc,SAAAC,UAChBA,EAAOhB,QAAQ,cAAc,SAACiB,EAAKC,UAAoBA,EAAOC,kBCe5DC,EAAkB,CAC3BC,KCZgB,SAAUL,SACnB,CACH9C,OAAQ,iUAAiUoD,KAAMN,KDWnVO,MEhBiB,SAAUP,SACpB,CACH9C,OAAQ,4IAA4IoD,KAAMN,KFe9JQ,OGdkB,SAAUR,SACrB,CACH9C,OAAQ,0BAA0BoD,KAAMN,KHc5CS,SInBoB,SAAUC,EAAOlB,OAC/BmB,EAAenB,EAAQoB,QAAQ,QAAQ7D,cAAc,UAAYyC,EAAQC,KAAO,0BAC/EkB,ECJW,SAAUnB,OACtBqB,EAAYC,KAAKC,MAAOvB,EAAQwB,aAAa,gBAC7CC,EAAkBzB,EAAQoB,QAAQ,QAAQM,iBAAiB,UAAY1B,EAAQC,KAAO,cAAcjC,OACpG2D,EAAUF,GAAmBJ,EAAU,GACvCO,EAAUH,GAAmBJ,EAAU,GACvCpD,EAAM,CAAEP,OAAQiE,GAAWC,UAE5B3D,EAAIP,SACLO,EAAI4D,OAAS,CAAEC,QAAQ,GAClBH,IAAW1D,EAAI4D,OAAOE,WAAY,GAClCH,IAAW3D,EAAI4D,OAAOG,WAAY,IAGpC/D,EDTe6D,CAAOX,GAAgB,CAAEzD,OAAQsC,EAAQiC,UJkB/DC,QMtBmB,SAAUhB,EAAOlB,SAE7B,CAAEtC,OAAQwD,IADGlB,EAAQoB,QAAQ,QAAQ7D,cAAe,UAAYyC,EAAQwB,aAAa,iBAAmB,MACxEN,QNqBvCiB,YOvBuB,SAAUjB,EAAOlB,OAClCoC,EAAclB,EAAMlD,OACpBmE,EAA0D,EAA5CnC,EAAQwB,aAAa,qBACnCvD,EAAM,CAAEP,OAAQ0E,IAAgBD,UAEjClE,EAAIP,SACLO,EAAI4D,OAAS,GACTO,EAAcD,EAAelE,EAAI4D,OAAOQ,WAAY,EACjDpE,EAAI4D,OAAOS,WAAY,GAG3BrE,GPaPsE,KQxBgB,SAAUrB,EAAOlB,OAC3BwC,EAAyF,GAA1ExC,EAAQwB,aAAa,uBAAyBiB,aAAaD,aAC1EE,EAAW1C,EAAQ2C,OAAS,IAAIC,OAAO5C,EAAQ2C,OAAOnD,QAAS,IAAK,aAAgB,KACpFqD,EAAYlE,MAAMmB,KAAKE,EAAQ8C,OAC/B7E,EAAM,CAAEP,QAAQ,UAEtBmF,EAAUE,SAAQ,SAAAR,OACRS,EAAoBR,EAAc,GAAMD,EAAKU,KAAK,KAAK,KAAQT,EAC/DU,EAAkC,OAAbR,GAAoBA,EAAS5B,KAAKyB,EAAKrC,OAE9D8C,GAAsBE,IACtBjF,EAAIP,QAAS,OACa,IAAfO,EAAI4D,SACX5D,EAAI4D,OAAS,IAEbmB,IAAqB/E,EAAI4D,OAAOW,aAAc,GAC7CU,IAAsBjF,EAAI4D,OAAOsB,kBAAmB,OAK1DlF,GRIPD,OSzBkB,SAAUkD,EAAOlB,OAC7BoD,EAASlC,EAAMlD,OACfqD,EAAYC,KAAKC,MAAOvB,EAAQwB,aAAa,gBAC7C6B,EAAgBD,GAAU/B,EAAU,GACpCiC,EAAgBF,GAAU/B,EAAU,GACpCpD,EAAM,CAAEP,OAAQ2F,GAAiBC,UAElCrF,EAAIP,SACLO,EAAI4D,OAAS,CAAE0B,cAAc,GACxBF,IAAiBpF,EAAI4D,OAAOQ,WAAY,GACxCiB,IAAiBrF,EAAI4D,OAAOS,WAAY,IAG1CrE,GTaPuF,IUxBe,SAAUtC,EAAOlB,OAC5ByD,EAASzD,EAAQwD,IACfrE,EAAaa,EAAQwB,aAAa,2BAEnB,SAAjBxB,EAAQE,MAAmBf,KAC3B+B,EAAQjC,EAAiBiC,EAAO/B,GAChCsE,EAASA,EAAOhE,MAAM,KAAKC,KAAK,KAM7B,CAAEhC,QAHTwD,GAAgB,KAChBuC,GAAkB,KVelBnB,UW3BqB,SAAUpB,EAAOlB,SAC/B,CAAEtC,OAAQwD,EAAMlD,QAA8B,EAApBgC,EAAQ0D,YX2BzCC,IY1Be,SAAUzC,EAAOlB,OAC5B4D,EAAS5D,EAAQ2D,IACfxE,EAAaa,EAAQwB,aAAa,2BAEnB,SAAjBxB,EAAQE,MAAmBF,EAAQwB,aAAa,uBAChDN,EAAQjC,EAAiBiC,EAAO/B,GAChCyE,EAASA,EAAOnE,MAAM,KAAKC,KAAK,KAM7B,CAAEhC,QAHTwD,GAAgB,KAChB0C,GAAkB,KZiBlBvB,Ua7BqB,SAAUnB,EAAOlB,SAC/B,CAAEtC,OAAQwD,EAAMlD,QAA8B,EAApBgC,EAAQ6D,Yb6BzCC,Qc9BmB,SAAU5C,EAAOlB,SAC7B,CAAEtC,OAAQ,IAAIkF,OAAO5C,EAAQ8D,SAAShD,KAAKI,Kd8BlD6C,Me/BiB,SAAU7C,EAAOlB,OAC5BgE,EAAehE,EAAQoB,QAAQ,QAAQ7D,cAAe,UAAWyC,EAAQC,KAAM,oBAG9E,CAAEvC,OAFwB,OAAjBsG,GAAyBA,EAAa9C,MAAM+C,OAAOjG,OAAS,KCCzE,SAASkG,EAAoBlE,EAASyC,EAAc7B,EAAiBuD,OAEnEpH,EAAUiD,GAAU,KACf/B,EAAMmC,EAAwB,CAACJ,QAAAA,WAC9BoE,QAAQC,QAAQpG,OAGrBd,EAAS6C,EAAQoB,QAAQ,QACzBkD,EAAetE,EAAQkB,MAAM+C,OAAOjG,OAAS,KAG7B,UAAjBgC,EAAQE,KAAkB,KACrBqE,EAAYvE,EAAQiC,QAAUjC,EAAU7C,EAAOI,cAAc,UAAWyC,EAAQC,KAAM,cACtFuE,EAAmBD,GAAaA,EAAUpE,QAAQ,uBAClDsE,EAAgBD,EAAmBD,EAAYpH,EAAOI,cAAc,6BAA8ByC,EAAQC,KAAM,MAChHyE,EAAgBD,EAAgBtH,EAAOI,cAAc,yBAA0BkH,EAAcE,GAAI,MAAQ,KAE3GJ,GAAaG,IACbA,EAAcE,SAAWH,EAAcG,UAAYH,EAAcxC,QAC5DuC,EAEM/B,EAAaoC,gBACpBH,EAAcI,QAFdJ,EAAcxD,MAAQ,OAQ9BlB,EAAQG,QAAQ,yBAA2BmE,EAAc,KACnDS,EAAY5H,EAAOI,cAAeyC,EAAQwB,aAAa,uBAC7DuD,EAAU9C,SAAU,EACpBjC,EAAQ4E,SAAWG,EAAUH,aAG3BI,EAAkBhF,EAAQ4E,UAAa5E,EAAQG,QAAQ,8BAAgCmE,SCnC7D,wEAAqE,OAAjEW,cAAAA,aAAgB,SAAIC,KAAAA,aAAO,SAAIC,gBAAAA,aAAkB,kBAAM,YACpFF,EAAcG,QAAO,SAACC,EAAKC,UACvBD,EAAIE,MAAK,SAAAC,OACRC,EAAU7H,EAAa,GAAI4H,EAAIA,EAAIxH,OAAS,WAC5CmH,EAAgBM,GACTrB,QAAQC,QAAQmB,GAEpB,IAAIpB,SAAQ,SAAAC,GAAaA,EAAQiB,EAAUG,OAC7CF,MAAK,eAAC7H,yDAAS+H,SACZD,EAAI5G,KAAKlB,GACF8H,UAGpBpB,QAAQC,QAAQ,CAACa,KACfK,MAAK,SAAAG,UAAYA,EAAS1H,OAAS,EAAI0H,EAAShH,MAAM,GAAKgH,KDuBzDC,CAAqB,CACpBV,cAAexC,EAAamD,iBAC5BV,KAAM,CAAClF,QAAAA,KAEVuF,MAAK,SAAAL,OACIW,EAAUX,EAAKY,aACd,IAAI1B,SAAQ,SAAAC,GACVW,IACDa,EAAQnI,QAAS,GAErB2G,EAASW,EE/ClB,SAAkBhF,EAASyC,EAAc7B,EAAiBuD,OAEvD4B,EAAa/F,EAAQkB,MACrBjD,EAAMmC,EAAwB,CAAC1C,OAAQqI,EAAW9B,OAAOjG,OAAS,EAAGgC,QAAAA,IACrEgG,EAAoB,qBAAqBlF,KAAKd,EAAQE,MACtD+F,EAAmBjG,EAAQoB,QAAQ,QAAQM,iBAAiB,UAAW1B,EAAQC,KAAM,cAAcjC,OAAS,MAE5GgI,IAAsB/H,EAAIP,QAAYsI,IAAsBC,SAC9DhI,EAAIP,QAAS,EACbO,EAAI4D,OAAS,CAAEqE,OAAO,GACf9B,QAAQC,QAAQpG,OAIrBkI,EAAoBxH,MAAMmB,KAAKE,EAAQoG,YAAYhB,QAAO,SAACiB,EAASC,OAChEC,EAAWhG,EAAa+F,EAAKrG,KAAKT,QAAQ,QAAS,KACnD6B,EAAYd,EAAa+F,EAAKpF,OAC9BsF,GAAkC,SAAbD,GAAoC,YAAbA,IAA2B3F,EAAgBS,GACvFoF,EAAmB7F,EAAgB2F,UAErCC,GAAqBC,IACrBJ,EAAQzH,KAAM4H,EAAoBnF,EAAYkF,GAE3CF,IACR,WAEI,IAAIjC,SAAQ,SAAAC,GAsBfA,EAnB0B8B,EAAkBf,QAAO,SAACsB,EAAYC,UACrDD,EAAWnB,MAAK,SAAAqB,UACZ,IAAIxC,SAAQ,SAAAyC,GAEfA,EAAYjG,EAAgB+F,GAAYZ,EAAY/F,EAASyC,OAC9D8C,MAAK,SAAAuB,OAECA,EAAOpJ,OAAQ,KACVqJ,EAAW,QACY,IAAlBD,EAAOjF,aAA+D,IAA9BiF,EAAOjF,OAAO8E,KAC7DI,EAASJ,IAAc,GAE3BG,EAAOjF,OAASjE,EAAa,GAAIkJ,EAAOjF,OAAQkF,UAEpDD,EAASA,EAAOpJ,OAAS,GAAKoJ,EACvBlJ,EAAagJ,EAAQE,WAGrC1C,QAAQC,QAAQpG,QAGpBsH,MAAK,SAAAL,UAGCA,EAAKxH,SACNwH,EAAKrD,OAASsE,EAAkBf,QAAO,SAACwB,EAAQD,OACtC9E,EAAUsC,EAAiBwC,IAAexC,EAAiBwC,GAAYZ,EAAY/F,IAAa,UAC/FpC,EAAagJ,EAAQ/E,KAC7BqD,EAAKrD,QACRqD,EAAKrD,OAAOmF,MAAO,GAEhB9B,KFb4B+B,CAAQjH,EAASyC,EAAc7B,EAAiBuD,GAAoB0B,aGzCzGqB,wBAEW/J,EAAQgK,yGCRlB,SAAwBC,EAAMjK,EAAQgK,OAErCE,EAAQtJ,UAAUC,OAClBsJ,EAAgBpK,EAAYC,MAElB,IAAVkK,GAAgBA,EAAQ,IAAMlK,QACxB,IAAIoK,MAAM,mDAEhB7K,EAAWS,SACL,IAAIoK,MAAM,iGAEfD,EAAc5J,aACT,IAAI6J,MAAM,sEAGpBH,EAAKjK,OAASmK,EAAc3J,QAC5ByJ,EAAKjK,OAAOqK,OAASJ,EACrBA,EAAKK,QAAU7J,EAAa,GAAIwJ,EAAKM,YAAY7K,UAAU4K,QAASN,GAGpEC,EAAKK,QAAQhF,aAAamD,iBAAmBwB,EAAKK,QAAQhF,aAAamD,iBAAiB+B,KAAI,SAAAC,UAAQA,EAAKC,KAAKT,MAE9GA,EAAKjK,OAAO2K,YAAa,EDbrBC,CAAcC,KAAM7K,EAAQgK,qEAkBJc,QACnBpL,UAAUsH,iBAAmBvG,EAAa,GAAIoK,KAAKnL,UAAUsH,iBAAkB8D,8CAG7DC,QAClBrL,UAAU+D,gBAAkBhD,EAAa,GAAIoK,KAAKnL,UAAU+D,gBAAiBsH,sCAGnEf,QACVtK,UAAU4K,QAAU7J,EAAa,GAAIoK,KAAKnL,UAAU4K,QAASN,iDAvB3Da,KAAK7K,OAAOqK,6CAGRxH,EAASyC,UAGbyB,EAFPlE,EAA8B,iBAAZA,EAAuBgI,KAAK7K,OAAOI,cAAcyC,GAAWA,EAC9EyC,EAAe7E,EAAa,GAAIoK,KAAKP,QAAQhF,aAAcA,GACVuF,KAAKpH,gBAAiBoH,KAAK7D,uDAGlE1B,UACVA,EAAe7E,EAAa,GAAIoK,KAAKP,QAAQhF,aAAcA,GEtB5D,SAA4BtF,EAAQsF,EAAc7B,EAAiBuD,OAAkBgE,yDAAc,KAEtG1F,EAAe7E,EAAc,GAAI6E,EAAc,CAACoC,gBAAgB,QAC1DuD,EAAazI,EAAiBxC,EAAOuE,iBAAiB7C,WAErDuF,QAAQ3D,IAAK2H,EAAWT,KAAI,SAAA3H,MAE3BmI,GAAenI,IAAYmI,EAAa,KAClClK,EAAMmC,EAAwB,CAACJ,QAAAA,EAAStC,QAAQ,WAC/C0G,QAAQC,QAAQpG,UAEpBiG,EAAoBlE,EAASyC,EAAc7B,EAAiBuD,OAElEoB,MAAK,SAAAjF,OAEA+H,EAA2E,IAAvD/H,EAAOP,QAAO,SAAAuI,UAAaA,EAAS5K,UAAQM,cAC/DqC,EAAuB,CAAC3C,OAAQ2K,EAAmB/H,OAAAA,OFOnDiI,CAAkBP,KAAK7K,OAAQsF,EAAcuF,KAAKpH,gBAAiBoH,KAAK7D,8DAiBvF+C,EAAKrK,UAAU4K,QG3CQ,CAEnBhF,aAAc,CACVmD,iBAAwB,GACxBf,gBAAwB,EACxBrC,YAAwB,KHuChC0E,EAAKrK,UAAUsH,iBAAmB,GAClC+C,EAAKrK,UAAU+D,gBAAkBA,EACjCsG,EAAKrK,UAAU2L,Q/B9CQ"}