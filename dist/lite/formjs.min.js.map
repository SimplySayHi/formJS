{"version":3,"file":"formjs.min.js","sources":["../../src/modules/version.js","../../src/modules/helpers/isNodeList.js","../../src/modules/helpers/isDOMNode.js","../../src/modules/helpers/checkFormEl.js","../../src/modules/helpers/isPlainObject.js","../../src/modules/helpers/mergeObjects.js","../../src/modules/helpers/fieldsStringSelector.js","../../src/modules/helpers/finalizeFieldPromise.js","../../src/modules/helpers/finalizeFormPromise.js","../../src/modules/helpers/getDateAsNumber.js","../../src/modules/helpers/getSplitChar.js","../../src/modules/helpers/getUniqueFields.js","../../src/modules/helpers/mergeValidateFieldDefault.js","../../src/modules/helpers/mergeValidateFormDefault.js","../../src/modules/helpers/toCamelCase.js","../../src/modules/validationRules.js","../../src/modules/validationRules/date.js","../../src/modules/validationRules/email.js","../../src/modules/validationRules/number.js","../../src/modules/validationRules/checkbox.js","../../src/modules/validationRules/checks.js","../../src/modules/validationRules/equalTo.js","../../src/modules/validationRules/exactLength.js","../../src/modules/validationRules/file.js","../../src/modules/validationRules/length.js","../../src/modules/validationRules/max.js","../../src/modules/validationRules/maxlength.js","../../src/modules/validationRules/min.js","../../src/modules/validationRules/minlength.js","../../src/modules/validationRules/pattern.js","../../src/modules/validationRules/radio.js","../../src/modules/checkFieldValidity.js","../../src/modules/helpers/runFunctionsSequence.js","../../src/modules/isValid.js","../../src/index-lite.js","../../src/modules/checkFormValidity.js","../../src/modules-lite/options.js"],"sourcesContent":["\nexport const version = '5.0.1';\n","\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList );\n}\n","\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node );\n}\n","\nimport { isDOMNode } from './isDOMNode';\n\nexport const checkFormEl = form => {\n    let isString = typeof form,\n        isValidNodeSelector = isString === 'string' && isDOMNode(document.querySelector(form)),\n        isFormSelector = isValidNodeSelector && document.querySelector(form).tagName.toLowerCase() === 'form',\n        obj = {\n            result: isDOMNode(form) || isFormSelector,\n            $el: (isString === 'string' ? document.querySelector(form) : form)\n        };\n\n    return obj;\n}\n","\nexport const isPlainObject = object => {\n    return Object.prototype.toString.call( object ) === '[object Object]';\n}\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const mergeObjects = function( out = {} ){\n    Array.from(arguments).slice(1).filter(arg => !!arg).forEach(arg => {\n        Object.keys(arg).forEach(key => {\n            if( Array.isArray(arg[key]) ){\n                out[key] = (out[key] || []).concat( arg[key].slice(0) );\n            } else if( isPlainObject(arg[key]) ){\n                out[key] = mergeObjects((out[key] || {}), arg[key]);\n            } else {\n                // * STRING | NUMBER | BOOLEAN | FUNCTION\n                if( Array.isArray(out[key]) ){\n                    // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                    out[key].push(arg[key]);\n                } else {\n                    out[key] = arg[key];\n                }\n            }\n        });\n    });\n\n    return out;\n}\n","\nexport const fieldsStringSelector = 'input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"hidden\"]), select, textarea'\n","\nexport const finalizeFieldPromise = obj => {\n    if( obj.result ){\n        return Promise.resolve();\n    }\n    return Promise.reject(obj.errors);\n}\n","\nexport const finalizeFormPromise = obj => {\n    if( obj.result ){\n        return Promise.resolve(obj.fields);\n    }\n    return Promise.reject(obj.fields);\n}\n","\nimport { getSplitChar } from './getSplitChar';\n\nconst formatMap = {\n    'YYYY-MM-DD': function(dateArray){\n        return dateArray;\n    },\n    'MM-DD-YYYY': function(dateArray){\n        return [dateArray[2], dateArray[0], dateArray[1]];\n    },\n    'DD-MM-YYYY': function(dateArray){\n        return dateArray.reverse();\n    }\n};\n\nexport const getDateAsNumber = ( dateString, dateFormat ) => {\n    dateFormat = dateFormat || 'YYYY-MM-DD';\n    const splitChar = getSplitChar(dateString);\n\n    if( dateFormat.indexOf(splitChar) < 0 ){\n        return;\n    }\n\n    dateFormat = dateFormat.replace(/[^YMD]/g, '-');\n    dateString = dateString.split(splitChar);\n    dateString = formatMap[dateFormat](dateString).join('');\n    \n    return dateString;\n}\n","\nexport const getSplitChar = string => {\n    // MATCH ANY NON-DIGIT CHAR\n    const separator = string.match(/\\D/);\n    return (separator && separator.length > 0) ? separator[0] : null;\n}\n","\nexport const getUniqueFields = $nodeList => {\n\n    let currentFieldName = '',\n        currentFieldType = '';\n\n    return Array.from( $nodeList ).filter($field => {\n        const name = $field.name,\n              type = $field.type;\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false;\n        }\n        \n        if( !$field.matches('[data-required-from]') ){\n            currentFieldName = name;\n            currentFieldType = type;\n        }\n        return true;\n    });\n    \n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const mergeValidateFieldDefault = obj => {\n    return mergeObjects({}, { result: false, $field: null }, obj);\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const mergeValidateFormDefault = obj => {\n    return mergeObjects({}, { result: true, fields: [] }, obj);\n}\n","\nexport const toCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase(); });\n}\n","\nimport { date }         from './validationRules/date';\nimport { email }        from './validationRules/email';\nimport { number }       from './validationRules/number';\n\nimport { checkbox }     from './validationRules/checkbox';\nimport { equalTo }      from './validationRules/equalTo';\nimport { exactLength }  from './validationRules/exactLength';\nimport { file }         from './validationRules/file';\nimport { length }       from './validationRules/length';\nimport { max }          from './validationRules/max';\nimport { maxlength }    from './validationRules/maxlength';\nimport { min }          from './validationRules/min';\nimport { minlength }    from './validationRules/minlength';\nimport { pattern }      from './validationRules/pattern';\nimport { radio }        from './validationRules/radio';\n\nexport const validationRules = {\n    date,\n    email,\n    number,\n\n    checkbox,\n    equalTo,\n    exactLength,\n    file,\n    length,\n    max,\n    maxlength,\n    min,\n    minlength,\n    pattern,\n    radio\n}\n","\n/*\n    DATE AS ISO 8601 DATE FORMAT:\n    YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n*/\n\nexport const date = function( string ){\n    return {\n        result: /^((((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13578]|1[02])[ \\/\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13456789]|1[012])[ \\/\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.]02[ \\/\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ \\/\\-.]02[ \\/\\-.]29))$/g.test( string )\n    };\n}\n","\n// https://regex101.com/r/cdlyJy/3\n\nexport const email = function( string ){\n    return {\n        result: /^[a-zA-Z_-]([\\w.-]?[a-zA-Z0-9])*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?){2,})+$/.test( string )\n    };\n}\n","\n/*\n    ALL NUMBERS ( INTEGERS AND FLOATING )\n    VALID NUMBERS: 123 | 123.456 | .123\n*/\n\nexport const number = function( string ){\n    return {\n        result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n    };\n}","\nimport { checks } from './checks';\n\nexport const checkbox = function( value, $field ){\n    const $dataChecks = $field.closest('form').querySelector('[name=\"' + $field.name + '\"][data-checks]');\n    return $dataChecks ? checks($dataChecks) : { result: $field.checked };\n}\n","\nexport const checks = function( $field ){\n    const attrValue = JSON.parse( $field.getAttribute('data-checks') ),\n          checkedLength = $field.closest('form').querySelectorAll('[name=\"' + $field.name + '\"]:checked').length,\n          isMinOk = checkedLength >= attrValue[0],\n          isMaxOk = checkedLength <= attrValue[1],\n          obj = { result: isMinOk && isMaxOk };\n\n    if( !obj.result ){\n        obj.errors = { checks: true };\n        if( !isMinOk ){ obj.errors.minChecks = true; }\n        if( !isMaxOk ){ obj.errors.maxChecks = true; }\n    }\n\n    return obj;\n}\n","\nexport const equalTo = function( value, $field ){\n    const $checkFrom = $field.closest('form').querySelector( '[name=\"' + $field.getAttribute('data-equal-to') + '\"]' );\n    return { result: value === $checkFrom.value };\n}\n","\nexport const exactLength = function( value, $field ){\n    const valueLength = value.length,\n          exactLength = $field.getAttribute('data-exact-length') * 1,\n          obj = { result: valueLength === exactLength };\n\n    if( !obj.result ){\n        obj.errors = {};\n        if( valueLength < exactLength ){ obj.errors.minlength = true; }\n        else { obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nexport const file = function( value, $field ){\n    const maxFileSize = ($field.getAttribute('data-max-file-size') || 0) * 1,\n          MIMEtype = $field.accept ? new RegExp($field.accept.replace( '*', '[^\\\\/,]+' )) : null,\n          filesList = Array.from($field.files),\n          obj = { result: true };\n\n    filesList.forEach(file => {\n        const exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize,\n              isAcceptedFileType = MIMEtype !== null ? MIMEtype.test(file.type) : true;\n\n        if( exceedMaxFileSize || !isAcceptedFileType ){\n            obj.result = false;\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {};\n            }\n            if( exceedMaxFileSize ){ obj.errors.maxFileSize = true; }\n            if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true; }\n\n        }\n    });\n\n    return obj;\n}\n","\nexport const length = function( value, $field ){\n    const valueL = value.length,\n          attrValue = JSON.parse( $field.getAttribute('data-length') ),\n          isMinlengthOk = valueL >= attrValue[0],\n          isMaxlengthOk = valueL <= attrValue[1],\n          obj = { result: isMinlengthOk && isMaxlengthOk };\n\n    if( !obj.result ){\n        obj.errors = {};\n        if( !isMinlengthOk ){ obj.errors.minlength = true; }\n        if( !isMaxlengthOk ){ obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const max = function( value, $field ){\n    let maxVal = $field.max;\n    const dateFormat = $field.getAttribute('data-date-format');\n    \n    if( $field.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat );\n        maxVal = maxVal.split('-').join('');\n    }\n\n    value = value * 1;\n    maxVal = maxVal * 1;\n    \n    return { result: value <= maxVal };\n}\n","\nexport const maxlength = function( value, $field ){\n    return { result: value.length <= $field.maxLength * 1 };\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const min = function( value, $field ){\n    let minVal = $field.min;\n    const dateFormat = $field.getAttribute('data-date-format');\n    \n    if( $field.type === 'date' || $field.getAttribute('data-date-format') ){\n        value = getDateAsNumber( value, dateFormat );\n        minVal = minVal.split('-').join('');\n    }\n\n    value = value * 1;\n    minVal = minVal * 1;\n    \n    return { result: value >= minVal };\n}\n","\nexport const minlength = function( value, $field ){\n    return { result: value.length >= $field.minLength * 1 };\n}\n","\nexport const pattern = function( value, $field ){\n    return { result: new RegExp($field.pattern).test(value) };\n}\n","\nexport const radio = function( value, $field ){\n    const $fieldChecked = $field.closest('form').querySelector( '[name=\"'+ $field.name +'\"]:checked' ),\n          isValid = $fieldChecked !== null && $fieldChecked.value.trim().length > 0;\n\n    return { result: isValid };\n}\n","\nimport { mergeValidateFieldDefault, isDOMNode, runFunctionsSequence } from './helpers';\nimport { isValid } from './isValid';\n\nexport function checkFieldValidity( $field, fieldOptions, validationRules, validationErrors ){\n\n    if( !isDOMNode($field) ){\n        const obj = mergeValidateFieldDefault({$field});\n        return Promise.resolve(obj);\n    }\n\n    const $form = $field.closest('form'),\n          isValidValue = $field.value.trim().length > 0;\n\n    // HANDLE FIELD data-required-from WHEN CHANGING ITS RELATED RADIO\n    if( $field.type === 'radio' ){\n        const $checked = $field.checked ? $field : $form.querySelector('[name=\"'+ $field.name +'\"]:checked'),\n              reqMoreIsChecked = $checked && $checked.matches('[data-require-more]'),\n              $findReqMore = reqMoreIsChecked ? $checked : $form.querySelector('[data-require-more][name=\"'+ $field.name +'\"]'),\n              $findReqFrom = $findReqMore ? $form.querySelector('[data-required-from=\"#'+ $findReqMore.id +'\"]') : null;\n        \n        if( $checked && $findReqFrom ){\n            $findReqFrom.required = $findReqMore.required && $findReqMore.checked;\n            if( !reqMoreIsChecked ){\n                $findReqFrom.value = '';\n            } else if( fieldOptions.focusOnRelated ) {\n                $findReqFrom.focus();\n            }\n        }\n    }\n\n    // HANDLE FIELD data-require-more & data-required-from WHEN *-from IT'S FILLED\n    if( $field.matches('[data-required-from]') && isValidValue ){\n        const $reqMore = $form.querySelector( $field.getAttribute('data-required-from') );\n        $reqMore.checked = true;\n        $field.required = $reqMore.required;\n    }\n\n    const needsValidation = $field.required || ($field.matches('[data-validate-if-filled]') && isValidValue);\n\n    return runFunctionsSequence({\n            functionsList: fieldOptions.beforeValidation,\n            data: {$field}\n        })\n        .then(data => {\n            const dataObj = data.pop();\n            return new Promise(resolve => {\n                if( !needsValidation ){\n                    dataObj.result = true;\n                }\n                resolve( needsValidation ? isValid($field, validationRules, validationErrors) : dataObj );\n            });\n        });\n\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const runFunctionsSequence = ( { functionsList = [], data = {}, stopConditionFn = () => false } = {} ) => {\n    return functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1]);\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res);\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result);\n                    return res;\n                });\n        });\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList);\n}\n","\nimport { mergeValidateFieldDefault, mergeObjects, toCamelCase } from './helpers';\n\nexport function isValid( $field, validationRules, validationErrors ){\n\n    const fieldValue = $field.value,\n          obj = mergeValidateFieldDefault({result: fieldValue.trim().length > 0, $field}),\n          isRadioOrCheckbox = /^(radio|checkbox)$/.test($field.type),\n          hasSelectedInput = $field.closest('form').querySelectorAll('[name=\"'+ $field.name +'\"]:checked').length > 0;\n\n    if( (!isRadioOrCheckbox && !obj.result) || (isRadioOrCheckbox && !hasSelectedInput) ){\n        obj.result = false;\n        obj.errors = { empty: true };\n        return Promise.resolve(obj);\n    }\n\n    // COLLECT VALIDATION METHOD NAMES ( USED TO RUN VALIDATIONS AND GET ERRORS )\n    const validationMethods = Array.from($field.attributes).reduce((accList, attr) => {\n        const attrName = toCamelCase( attr.name.replace('data-', '') ),\n              attrValue = toCamelCase( attr.value ),\n              isAttrValueWithFn = (attrName === 'type' || attrName === 'subtype') && validationRules[attrValue],\n              isAttrNameWithFn = validationRules[attrName];\n\n        if( isAttrValueWithFn || isAttrNameWithFn ){\n            accList.push( isAttrValueWithFn ? attrValue : attrName );\n        }\n        return accList;\n    }, []);\n\n    return new Promise(resolve => {\n\n        // RUN VALIDATIONS\n        const validationsResult = validationMethods.reduce((accPromise, methodName) => {\n            return accPromise.then(accObj => {\n                return new Promise(resolveVal => {\n                    // RUN VALIDATION INSIDE A PROMISE IS USEFUL FOR ASYNC VALIDATIONS\n                    resolveVal( validationRules[methodName](fieldValue, $field) );\n                }).then(valObj => {\n                    // ADD CUSTOM ERROR-KEY FOR EACH VALIDATION RULE\n                    if( !valObj.result ){\n                        const errorObj = {};\n                        if( typeof valObj.errors === 'undefined' || typeof valObj.errors[methodName] === 'undefined' ){\n                            errorObj[methodName] = true;\n                        }\n                        valObj.errors = mergeObjects({}, valObj.errors, errorObj);\n                    }\n                    valObj = valObj.result ? {} : valObj;\n                    return mergeObjects(accObj, valObj);\n                });\n            });\n        }, Promise.resolve(obj));\n        resolve(validationsResult);\n\n    }).then(data => {\n\n        // GET ERRORS\n        if( !data.result ){\n            data.errors = validationMethods.reduce((accObj, methodName) => {\n                const errors = (validationErrors[methodName] && validationErrors[methodName](fieldValue, $field)) || {};\n                return mergeObjects(accObj, errors);\n            }, data.errors);\n        }\n        return data;\n\n    });\n\n}\n","\nimport { version }              from './modules/version';\nimport { checkFormEl, finalizeFieldPromise, finalizeFormPromise, isNodeList, mergeObjects } from './modules/helpers';\nimport { options }              from './modules-lite/options';\nimport { validationRules }      from './modules/validationRules';\nimport { checkFieldValidity }   from './modules/checkFieldValidity';\nimport { checkFormValidity }    from './modules/checkFormValidity';\n\nclass Form {\n\n    constructor( form, optionsObj ){\n        const argsL = arguments.length,\n              checkFormElem = checkFormEl(form);\n\n        if( argsL === 0 || (argsL > 0 && !form) ){\n            throw new Error('First argument \"form\" is missing or falsy!');\n        }\n        if( isNodeList(form) ){\n            throw new Error('First argument \"form\" must be a single DOM node or a form CSS selector, not a NodeList!');\n        }\n        if( !checkFormElem.result ){\n            throw new Error('First argument \"form\" is not a DOM node nor a form CSS selector!');\n        }\n\n        const self = this;\n\n        self.$form = checkFormElem.$el;\n        self.$form.formjs = self;\n        self.options = mergeObjects({}, Form.prototype.options, optionsObj);\n\n        // BINDING CONTEXT FOR FUTURE EXECUTION\n        self.options.fieldOptions.beforeValidation = self.options.fieldOptions.beforeValidation.map(cbFn => cbFn.bind(self));\n\n        self.$form.noValidate = true;\n    }\n\n    destroy(){\n        delete this.$form.formjs;\n    }\n\n    validateField( field, fieldOptions ){\n        const self = this;\n        const $field = typeof field === 'string' ? self.$form.querySelector(field) : field;\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions);\n        return checkFieldValidity($field, fieldOptions, self.validationRules, self.validationErrors)\n            .then(finalizeFieldPromise);\n    }\n\n    validateForm( fieldOptions ){\n        const self = this;\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions);\n        return checkFormValidity(self.$form, fieldOptions, self.validationRules, self.validationErrors)\n            .then(finalizeFormPromise);\n    }\n    \n    static addValidationErrors( errorsObj ){\n        Form.prototype.validationErrors = mergeObjects({}, Form.prototype.validationErrors, errorsObj);\n    }\n\n    static addValidationRules( rulesObj ){\n        Form.prototype.validationRules = mergeObjects({}, Form.prototype.validationRules, rulesObj);\n    }\n    \n    static setOptions( optionsObj ){\n        Form.prototype.options = mergeObjects({}, Form.prototype.options, optionsObj);\n    }\n\n}\n\nForm.prototype.options = options;\nForm.prototype.validationErrors = {};\nForm.prototype.validationRules = validationRules;\nForm.prototype.version = version;\n\nexport default Form;\n","\nimport { fieldsStringSelector, getUniqueFields, mergeValidateFieldDefault, mergeValidateFormDefault, mergeObjects } from './helpers';\nimport { checkFieldValidity } from './checkFieldValidity';\n\nexport function checkFormValidity( $form, fieldOptions, validationRules, validationErrors, fieldToSkip = null ){\n\n    fieldOptions = mergeObjects( {}, fieldOptions, {focusOnRelated: false} );\n    const $fieldsList = getUniqueFields( $form.querySelectorAll(fieldsStringSelector) );\n\n    return Promise.all( $fieldsList.map($field => {\n\n        if( fieldToSkip && $field === fieldToSkip ){\n            const obj = mergeValidateFieldDefault({$field, result: true});\n            return Promise.resolve(obj);\n        }\n        return checkFieldValidity( $field, fieldOptions, validationRules, validationErrors );\n\n    }) ).then(fields => {\n\n        const areAllFieldsValid = fields.filter(fieldObj => !fieldObj.result).length === 0;\n        return mergeValidateFormDefault({result: areAllFieldsValid, fields});\n\n    });\n\n}\n","\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [],\n        focusOnRelated:         true\n    }\n    \n}\n"],"names":["isNodeList","nodeList","NodeList","prototype","isPrototypeOf","isDOMNode","node","Element","checkFormEl","form","isString","isFormSelector","document","querySelector","tagName","toLowerCase","result","$el","isPlainObject","object","Object","toString","call","mergeObjects","out","Array","from","arguments","slice","filter","arg","forEach","keys","key","isArray","concat","push","fieldsStringSelector","finalizeFieldPromise","obj","Promise","resolve","reject","errors","finalizeFormPromise","fields","formatMap","dateArray","reverse","getDateAsNumber","dateString","dateFormat","separator","splitChar","match","length","indexOf","replace","split","join","getUniqueFields","$nodeList","currentFieldName","currentFieldType","$field","name","type","matches","mergeValidateFieldDefault","mergeValidateFormDefault","toCamelCase","string","all","letter","toUpperCase","validationRules","date","test","email","number","checkbox","value","$dataChecks","closest","attrValue","JSON","parse","getAttribute","checkedLength","querySelectorAll","isMinOk","isMaxOk","checks","minChecks","maxChecks","checked","equalTo","exactLength","valueLength","minlength","maxlength","file","maxFileSize","MIMEtype","accept","RegExp","filesList","files","exceedMaxFileSize","size","isAcceptedFileType","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","max","maxVal","maxLength","min","minVal","minLength","pattern","radio","$fieldChecked","trim","checkFieldValidity","fieldOptions","validationErrors","$form","isValidValue","$checked","reqMoreIsChecked","$findReqMore","$findReqFrom","id","required","focusOnRelated","focus","$reqMore","needsValidation","functionsList","data","stopConditionFn","reduce","acc","promiseFn","then","res","dataNew","dataList","runFunctionsSequence","beforeValidation","dataObj","pop","fieldValue","isRadioOrCheckbox","hasSelectedInput","empty","validationMethods","attributes","accList","attr","attrName","isAttrValueWithFn","isAttrNameWithFn","accPromise","methodName","accObj","resolveVal","valObj","errorObj","isValid","Form","optionsObj","argsL","checkFormElem","Error","self","this","formjs","options","map","cbFn","bind","noValidate","errorsObj","rulesObj","field","fieldToSkip","$fieldsList","areAllFieldsValid","fieldObj","checkFormValidity","version"],"mappings":";8sBACO,ICAMA,EAAa,SAAAC,UACfC,SAASC,UAAUC,cAAeH,ICDhCI,EAAY,SAAAC,UACdC,QAAQJ,UAAUC,cAAeE,ICC/BE,EAAc,SAAAC,OACnBC,IAAkBD,GAElBE,EADmC,WAAbD,GAAyBL,EAAUO,SAASC,cAAcJ,KACe,SAAvDG,SAASC,cAAcJ,GAAMK,QAAQC,oBACvE,CACFC,OAAQX,EAAUI,IAASE,EAC3BM,IAAmB,WAAbP,EAAwBE,SAASC,cAAcJ,GAAQA,ICR5DS,EAAgB,SAAAC,SAC2B,oBAA7CC,OAAOjB,UAAUkB,SAASC,KAAMH,ICC9BI,EAAe,SAAfA,QAAyBC,yDAAM,UACxCC,MAAMC,KAAKC,WAAWC,MAAM,GAAGC,QAAO,SAAAC,WAASA,KAAKC,SAAQ,SAAAD,GACxDV,OAAOY,KAAKF,GAAKC,SAAQ,SAAAE,GACjBR,MAAMS,QAAQJ,EAAIG,IAClBT,EAAIS,IAAQT,EAAIS,IAAQ,IAAIE,OAAQL,EAAIG,GAAKL,MAAM,IAC5CV,EAAcY,EAAIG,IACzBT,EAAIS,GAAOV,EAAcC,EAAIS,IAAQ,GAAKH,EAAIG,IAG1CR,MAAMS,QAAQV,EAAIS,IAElBT,EAAIS,GAAKG,KAAKN,EAAIG,IAElBT,EAAIS,GAAOH,EAAIG,SAMxBT,GCrBEa,EAAuB,6GCAvBC,EAAuB,SAAAC,UAC5BA,EAAIvB,OACGwB,QAAQC,UAEZD,QAAQE,OAAOH,EAAII,SCJjBC,EAAsB,SAAAL,UAC3BA,EAAIvB,OACGwB,QAAQC,QAAQF,EAAIM,QAExBL,QAAQE,OAAOH,EAAIM,SCFxBC,EAAY,cACA,SAASC,UACZA,gBAEG,SAASA,SACZ,CAACA,EAAU,GAAIA,EAAU,GAAIA,EAAU,kBAEpC,SAASA,UACZA,EAAUC,YAIZC,EAAkB,SAAEC,EAAYC,GACzCA,EAAaA,GAAc,iBCbrBC,EDcAC,GCdAD,EDcyBF,ECdNI,MAAM,QACVF,EAAUG,OAAS,EAAKH,EAAU,GAAK,UDexDD,EAAWK,QAAQH,GAAa,UAIpCF,EAAaA,EAAWM,QAAQ,UAAW,KAC3CP,EAAaA,EAAWQ,MAAML,GAC9BH,EAAaJ,EAAUK,GAAYD,GAAYS,KAAK,KExB3CC,EAAkB,SAAAC,OAEvBC,EAAmB,GACnBC,EAAmB,UAEhBtC,MAAMC,KAAMmC,GAAYhC,QAAO,SAAAmC,OAC5BC,EAAOD,EAAOC,KACdC,EAAOF,EAAOE,YAEhBD,IAASH,GAAoBI,IAASH,KAIrCC,EAAOG,QAAQ,0BAChBL,EAAmBG,EACnBF,EAAmBG,IAEhB,OCfFE,EAA4B,SAAA7B,UAC9BhB,EAAa,GAAI,CAAEP,QAAQ,EAAOgD,OAAQ,MAAQzB,ICDhD8B,EAA2B,SAAA9B,UAC7BhB,EAAa,GAAI,CAAEP,QAAQ,EAAM6B,OAAQ,IAAMN,ICH7C+B,EAAc,SAAAC,UAChBA,EAAOd,QAAQ,cAAc,SAACe,EAAKC,UAAoBA,EAAOC,kBCe5DC,EAAkB,CAC3BC,KCZgB,SAAUL,SACnB,CACHvD,OAAQ,iUAAiU6D,KAAMN,KDWnVO,MEhBiB,SAAUP,SACpB,CACHvD,OAAQ,4IAA4I6D,KAAMN,KFe9JQ,OGdkB,SAAUR,SACrB,CACHvD,OAAQ,0BAA0B6D,KAAMN,KHc5CS,SInBoB,SAAUC,EAAOjB,OAC/BkB,EAAclB,EAAOmB,QAAQ,QAAQtE,cAAc,UAAYmD,EAAOC,KAAO,0BAC5EiB,ECJW,SAAUlB,OACtBoB,EAAYC,KAAKC,MAAOtB,EAAOuB,aAAa,gBAC5CC,EAAgBxB,EAAOmB,QAAQ,QAAQM,iBAAiB,UAAYzB,EAAOC,KAAO,cAAcV,OAChGmC,EAAUF,GAAiBJ,EAAU,GACrCO,EAAUH,GAAiBJ,EAAU,GACrC7C,EAAM,CAAEvB,OAAQ0E,GAAWC,UAE5BpD,EAAIvB,SACLuB,EAAII,OAAS,CAAEiD,QAAQ,GAClBF,IAAWnD,EAAII,OAAOkD,WAAY,GAClCF,IAAWpD,EAAII,OAAOmD,WAAY,IAGpCvD,EDTcqD,CAAOV,GAAe,CAAElE,OAAQgD,EAAO+B,UJkB5DC,QMtBmB,SAAUf,EAAOjB,SAE7B,CAAEhD,OAAQiE,IADEjB,EAAOmB,QAAQ,QAAQtE,cAAe,UAAYmD,EAAOuB,aAAa,iBAAmB,MACtEN,QNqBtCgB,YOvBuB,SAAUhB,EAAOjB,OAClCkC,EAAcjB,EAAM1B,OACpB0C,EAAyD,EAA3CjC,EAAOuB,aAAa,qBAClChD,EAAM,CAAEvB,OAAQkF,IAAgBD,UAEjC1D,EAAIvB,SACLuB,EAAII,OAAS,GACTuD,EAAcD,EAAe1D,EAAII,OAAOwD,WAAY,EACjD5D,EAAII,OAAOyD,WAAY,GAG3B7D,GPaP8D,KQxBgB,SAAUpB,EAAOjB,OAC3BsC,EAAiE,GAAlDtC,EAAOuB,aAAa,uBAAyB,GAC5DgB,EAAWvC,EAAOwC,OAAS,IAAIC,OAAOzC,EAAOwC,OAAO/C,QAAS,IAAK,aAAgB,KAClFiD,EAAYjF,MAAMC,KAAKsC,EAAO2C,OAC9BpE,EAAM,CAAEvB,QAAQ,UAEtB0F,EAAU3E,SAAQ,SAAAsE,OACRO,EAAoBN,EAAc,GAAMD,EAAKQ,KAAK,KAAK,KAAQP,EAC/DQ,EAAkC,OAAbP,GAAoBA,EAAS1B,KAAKwB,EAAKnC,OAE9D0C,GAAsBE,IACtBvE,EAAIvB,QAAS,OACa,IAAfuB,EAAII,SACXJ,EAAII,OAAS,IAEbiE,IAAqBrE,EAAII,OAAO2D,aAAc,GAC7CQ,IAAsBvE,EAAII,OAAOoE,kBAAmB,OAK1DxE,GRIPgB,OSzBkB,SAAU0B,EAAOjB,OAC7BgD,EAAS/B,EAAM1B,OACf6B,EAAYC,KAAKC,MAAOtB,EAAOuB,aAAa,gBAC5C0B,EAAgBD,GAAU5B,EAAU,GACpC8B,EAAgBF,GAAU5B,EAAU,GACpC7C,EAAM,CAAEvB,OAAQiG,GAAiBC,UAElC3E,EAAIvB,SACLuB,EAAII,OAAS,GACRsE,IAAiB1E,EAAII,OAAOwD,WAAY,GACxCe,IAAiB3E,EAAII,OAAOyD,WAAY,IAG1C7D,GTaP4E,IUxBe,SAAUlC,EAAOjB,OAC5BoD,EAASpD,EAAOmD,IACdhE,EAAaa,EAAOuB,aAAa,2BAEnB,SAAhBvB,EAAOE,MAAmBf,KAC1B8B,EAAQhC,EAAiBgC,EAAO9B,GAChCiE,EAASA,EAAO1D,MAAM,KAAKC,KAAK,KAM7B,CAAE3C,QAHTiE,GAAgB,KAChBmC,GAAkB,KVelBhB,UW3BqB,SAAUnB,EAAOjB,SAC/B,CAAEhD,OAAQiE,EAAM1B,QAA6B,EAAnBS,EAAOqD,YX2BxCC,IY1Be,SAAUrC,EAAOjB,OAC5BuD,EAASvD,EAAOsD,IACdnE,EAAaa,EAAOuB,aAAa,2BAEnB,SAAhBvB,EAAOE,MAAmBF,EAAOuB,aAAa,uBAC9CN,EAAQhC,EAAiBgC,EAAO9B,GAChCoE,EAASA,EAAO7D,MAAM,KAAKC,KAAK,KAM7B,CAAE3C,QAHTiE,GAAgB,KAChBsC,GAAkB,KZiBlBpB,Ua7BqB,SAAUlB,EAAOjB,SAC/B,CAAEhD,OAAQiE,EAAM1B,QAA6B,EAAnBS,EAAOwD,Yb6BxCC,Qc9BmB,SAAUxC,EAAOjB,SAC7B,CAAEhD,OAAQ,IAAIyF,OAAOzC,EAAOyD,SAAS5C,KAAKI,Kd8BjDyC,Me/BiB,SAAUzC,EAAOjB,OAC5B2D,EAAgB3D,EAAOmB,QAAQ,QAAQtE,cAAe,UAAWmD,EAAOC,KAAM,oBAG7E,CAAEjD,OAFyB,OAAlB2G,GAA0BA,EAAc1C,MAAM2C,OAAOrE,OAAS,KCC3E,SAASsE,EAAoB7D,EAAQ8D,EAAcnD,EAAiBoD,OAElE1H,EAAU2D,GAAS,KACdzB,EAAM6B,EAA0B,CAACJ,OAAAA,WAChCxB,QAAQC,QAAQF,OAGrByF,EAAQhE,EAAOmB,QAAQ,QACvB8C,EAAejE,EAAOiB,MAAM2C,OAAOrE,OAAS,KAG9B,UAAhBS,EAAOE,KAAkB,KACnBgE,EAAWlE,EAAO+B,QAAU/B,EAASgE,EAAMnH,cAAc,UAAWmD,EAAOC,KAAM,cACjFkE,EAAmBD,GAAYA,EAAS/D,QAAQ,uBAChDiE,EAAeD,EAAmBD,EAAWF,EAAMnH,cAAc,6BAA8BmD,EAAOC,KAAM,MAC5GoE,EAAeD,EAAeJ,EAAMnH,cAAc,yBAA0BuH,EAAaE,GAAI,MAAQ,KAEvGJ,GAAYG,IACZA,EAAaE,SAAWH,EAAaG,UAAYH,EAAarC,QACzDoC,EAEML,EAAaU,gBACpBH,EAAaI,QAFbJ,EAAapD,MAAQ,OAQ7BjB,EAAOG,QAAQ,yBAA2B8D,EAAc,KAClDS,EAAWV,EAAMnH,cAAemD,EAAOuB,aAAa,uBAC1DmD,EAAS3C,SAAU,EACnB/B,EAAOuE,SAAWG,EAASH,aAGzBI,EAAkB3E,EAAOuE,UAAavE,EAAOG,QAAQ,8BAAgC8D,SCnC3D,wEAAqE,OAAjEW,cAAAA,aAAgB,SAAIC,KAAAA,aAAO,SAAIC,gBAAAA,aAAkB,kBAAM,YACpFF,EAAcG,QAAO,SAACC,EAAKC,UACvBD,EAAIE,MAAK,SAAAC,OACRC,EAAU7H,EAAa,GAAI4H,EAAIA,EAAI5F,OAAS,WAC5CuF,EAAgBM,GACT5G,QAAQC,QAAQ0G,GAEpB,IAAI3G,SAAQ,SAAAC,GAAaA,EAAQwG,EAAUG,OAC7CF,MAAK,eAAClI,yDAASoI,SACZD,EAAI/G,KAAKpB,GACFmI,UAGpB3G,QAAQC,QAAQ,CAACoG,KACfK,MAAK,SAAAG,UAAYA,EAAS9F,OAAS,EAAI8F,EAASzH,MAAM,GAAKyH,KDuBzDC,CAAqB,CACpBV,cAAed,EAAayB,iBAC5BV,KAAM,CAAC7E,OAAAA,KAEVkF,MAAK,SAAAL,OACIW,EAAUX,EAAKY,aACd,IAAIjH,SAAQ,SAAAC,GACVkG,IACDa,EAAQxI,QAAS,GAErByB,EAASkG,EE/ClB,SAAkB3E,EAAQW,EAAiBoD,OAExC2B,EAAa1F,EAAOiB,MACpB1C,EAAM6B,EAA0B,CAACpD,OAAQ0I,EAAW9B,OAAOrE,OAAS,EAAGS,OAAAA,IACvE2F,EAAoB,qBAAqB9E,KAAKb,EAAOE,MACrD0F,EAAmB5F,EAAOmB,QAAQ,QAAQM,iBAAiB,UAAWzB,EAAOC,KAAM,cAAcV,OAAS,MAE1GoG,IAAsBpH,EAAIvB,QAAY2I,IAAsBC,SAC9DrH,EAAIvB,QAAS,EACbuB,EAAII,OAAS,CAAEkH,OAAO,GACfrH,QAAQC,QAAQF,OAIrBuH,EAAoBrI,MAAMC,KAAKsC,EAAO+F,YAAYhB,QAAO,SAACiB,EAASC,OAC/DC,EAAW5F,EAAa2F,EAAKhG,KAAKR,QAAQ,QAAS,KACnD2B,EAAYd,EAAa2F,EAAKhF,OAC9BkF,GAAkC,SAAbD,GAAoC,YAAbA,IAA2BvF,EAAgBS,GACvFgF,EAAmBzF,EAAgBuF,UAErCC,GAAqBC,IACrBJ,EAAQ5H,KAAM+H,EAAoB/E,EAAY8E,GAE3CF,IACR,WAEI,IAAIxH,SAAQ,SAAAC,GAsBfA,EAnB0BqH,EAAkBf,QAAO,SAACsB,EAAYC,UACrDD,EAAWnB,MAAK,SAAAqB,UACZ,IAAI/H,SAAQ,SAAAgI,GAEfA,EAAY7F,EAAgB2F,GAAYZ,EAAY1F,OACrDkF,MAAK,SAAAuB,OAECA,EAAOzJ,OAAQ,KACV0J,EAAW,QACY,IAAlBD,EAAO9H,aAA+D,IAA9B8H,EAAO9H,OAAO2H,KAC7DI,EAASJ,IAAc,GAE3BG,EAAO9H,OAASpB,EAAa,GAAIkJ,EAAO9H,OAAQ+H,UAEpDD,EAASA,EAAOzJ,OAAS,GAAKyJ,EACvBlJ,EAAagJ,EAAQE,WAGrCjI,QAAQC,QAAQF,QAGpB2G,MAAK,SAAAL,UAGCA,EAAK7H,SACN6H,EAAKlG,OAASmH,EAAkBf,QAAO,SAACwB,EAAQD,OACtC3H,EAAUoF,EAAiBuC,IAAevC,EAAiBuC,GAAYZ,EAAY1F,IAAY,UAC9FzC,EAAagJ,EAAQ5H,KAC7BkG,EAAKlG,SAELkG,KFZ4B8B,CAAQ3G,EAAQW,EAAiBoD,GAAoByB,aG1C1FoB,wBAEWnK,EAAMoK,iBACTC,EAAQnJ,UAAU4B,OAClBwH,EAAgBvK,EAAYC,MAEpB,IAAVqK,GAAgBA,EAAQ,IAAMrK,QACxB,IAAIuK,MAAM,iDAEhBhL,EAAWS,SACL,IAAIuK,MAAM,+FAEfD,EAAc/J,aACT,IAAIgK,MAAM,wEAGdC,EAAOC,KAEbD,EAAKjD,MAAQ+C,EAAc9J,IAC3BgK,EAAKjD,MAAMmD,OAASF,EACpBA,EAAKG,QAAU7J,EAAa,GAAIqJ,EAAKzK,UAAUiL,QAASP,GAGxDI,EAAKG,QAAQtD,aAAayB,iBAAmB0B,EAAKG,QAAQtD,aAAayB,iBAAiB8B,KAAI,SAAAC,UAAQA,EAAKC,KAAKN,MAE9GA,EAAKjD,MAAMwD,YAAa,oEAsBAC,GACxBb,EAAKzK,UAAU4H,iBAAmBxG,EAAa,GAAIqJ,EAAKzK,UAAU4H,iBAAkB0D,8CAG7DC,GACvBd,EAAKzK,UAAUwE,gBAAkBpD,EAAa,GAAIqJ,EAAKzK,UAAUwE,gBAAiB+G,sCAGnEb,GACfD,EAAKzK,UAAUiL,QAAU7J,EAAa,GAAIqJ,EAAKzK,UAAUiL,QAASP,iDA3B3DK,KAAKlD,MAAMmD,6CAGPQ,EAAO7D,OACZmD,EAAOC,YAGNrD,EAFyB,iBAAV8D,EAAqBV,EAAKjD,MAAMnH,cAAc8K,GAASA,EAC7E7D,EAAevG,EAAa,GAAI0J,EAAKG,QAAQtD,aAAcA,GACXmD,EAAKtG,gBAAiBsG,EAAKlD,kBACtEmB,KAAK5G,wCAGAwF,OACJmD,EAAOC,YACbpD,EAAevG,EAAa,GAAI0J,EAAKG,QAAQtD,aAAcA,GC9C5D,SAA4BE,EAAOF,EAAcnD,EAAiBoD,OAAkB6D,yDAAc,KAErG9D,EAAevG,EAAc,GAAIuG,EAAc,CAACU,gBAAgB,QAC1DqD,EAAcjI,EAAiBoE,EAAMvC,iBAAiBpD,WAErDG,QAAQgC,IAAKqH,EAAYR,KAAI,SAAArH,MAE5B4H,GAAe5H,IAAW4H,EAAa,KACjCrJ,EAAM6B,EAA0B,CAACJ,OAAAA,EAAQhD,QAAQ,WAChDwB,QAAQC,QAAQF,UAEpBsF,EAAoB7D,EAAQ8D,EAAcnD,EAAiBoD,OAEjEmB,MAAK,SAAArG,OAEAiJ,EAA2E,IAAvDjJ,EAAOhB,QAAO,SAAAkK,UAAaA,EAAS/K,UAAQuC,cAC/Dc,EAAyB,CAACrD,OAAQ8K,EAAmBjJ,OAAAA,OD+BrDmJ,CAAkBf,EAAKjD,MAAOF,EAAcmD,EAAKtG,gBAAiBsG,EAAKlD,kBACzEmB,KAAKtG,+CAiBlBgI,EAAKzK,UAAUiL,QEpEQ,CAEnBtD,aAAc,CACVyB,iBAAwB,GACxBf,gBAAwB,IFiEhCoC,EAAKzK,UAAU4H,iBAAmB,GAClC6C,EAAKzK,UAAUwE,gBAAkBA,EACjCiG,EAAKzK,UAAU8L,QlCvEQ"}