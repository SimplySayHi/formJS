{"version":3,"file":"formjs.min.js","sources":["../../src/modules/version.js","../../src/modules/helpers/isNodeList.js","../../src/modules/helpers/isDOMNode.js","../../src/modules/helpers/checkFormEl.js","../../src/modules/helpers/isPlainObject.js","../../src/modules/helpers/mergeObjects.js","../../src/modules/helpers/fieldsStringSelector.js","../../src/modules/helpers/getDateAsNumber.js","../../src/modules/helpers/getSplitChar.js","../../src/modules/helpers/getUniqueFields.js","../../src/modules/helpers/getValidateFieldDefault.js","../../src/modules/helpers/getValidateFormDefault.js","../../src/modules/helpers/toCamelCase.js","../../src/modules/validationRules.js","../../src/modules/validationRules/date.js","../../src/modules/validationRules/email.js","../../src/modules/validationRules/number.js","../../src/modules/validationRules/checkbox.js","../../src/modules/validationRules/checks.js","../../src/modules/validationRules/equalTo.js","../../src/modules/validationRules/exactLength.js","../../src/modules/validationRules/file.js","../../src/modules/validationRules/length.js","../../src/modules/validationRules/max.js","../../src/modules/validationRules/maxlength.js","../../src/modules/validationRules/min.js","../../src/modules/validationRules/minlength.js","../../src/modules/validationRules/pattern.js","../../src/modules/validationRules/radio.js","../../src/modules/checkFieldValidity.js","../../src/modules/helpers/runFunctionsSequence.js","../../src/modules/isValid.js","../../src/index-lite.js","../../src/modules/checkFormValidity.js","../../src/modules-lite/options.js"],"sourcesContent":["\nexport const version = '4.2.2';\n","\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList );\n}\n","\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node );\n}\n","\nimport { isDOMNode } from './isDOMNode';\n\nexport const checkFormEl = formEl => {\n    const isString = typeof formEl,\n          isValidNodeSelector = isString === 'string' && isDOMNode(document.querySelector(formEl)),\n          isFormSelector = isValidNodeSelector && document.querySelector(formEl).tagName.toLowerCase() === 'form',\n          obj = {\n            result: isDOMNode(formEl) || isFormSelector,\n            element: (isString === 'string' ? document.querySelector(formEl) : formEl)\n          };\n\n    return obj;\n}\n","\nexport const isPlainObject = object => {\n    return Object.prototype.toString.call( object ) === '[object Object]';\n}\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const mergeObjects = function( out = {} ){\n    Array.from(arguments).slice(1).filter(arg => !!arg).forEach(arg => {\n        Object.keys(arg).forEach(key => {\n            if( Array.isArray(arg[key]) ){\n                out[key] = (out[key] || []).concat( arg[key].slice(0) );\n            } else if( isPlainObject(arg[key]) ){\n                out[key] = mergeObjects((out[key] || {}), arg[key]);\n            } else {\n                // * STRING | NUMBER | BOOLEAN | FUNCTION\n                if( Array.isArray(out[key]) ){\n                    // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                    out[key].push(arg[key]);\n                } else {\n                    out[key] = arg[key];\n                }\n            }\n        });\n    });\n\n    return out;\n}\n","\nexport const fieldsStringSelector = 'input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"hidden\"]), select, textarea'\n","\nimport { getSplitChar } from './getSplitChar';\n\nconst formatMap = {\n    'YYYY-MM-DD': function(dateArray){\n        return dateArray;\n    },\n    'MM-DD-YYYY': function(dateArray){\n        return [dateArray[2], dateArray[0], dateArray[1]];\n    },\n    'DD-MM-YYYY': function(dateArray){\n        return dateArray.reverse();\n    }\n};\n\nexport const getDateAsNumber = ( dateString, dateFormat ) => {\n    dateFormat = dateFormat || 'YYYY-MM-DD';\n    const splitChar = getSplitChar(dateString);\n\n    if( dateFormat.indexOf(splitChar) < 0 ){\n        return;\n    }\n\n    dateFormat = dateFormat.replace(/[^YMD]/g, '-');\n    dateString = dateString.split(splitChar);\n    dateString = formatMap[dateFormat](dateString).join('');\n    \n    return dateString;\n}\n","\nexport const getSplitChar = string => {\n    // MATCH ANY NON-DIGIT CHAR\n    const separator = string.match(/\\D/);\n    return (separator && separator.length > 0) ? separator[0] : null;\n}\n","\nexport const getUniqueFields = nodeList => {\n\n    let currentFieldName = '',\n        currentFieldType = '';\n\n    return Array.from( nodeList ).filter(fieldEl => {\n        const name = fieldEl.name,\n              type = fieldEl.type;\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false;\n        }\n        \n        if( !fieldEl.matches('[data-required-from]') ){\n            currentFieldName = name;\n            currentFieldType = type;\n        }\n        return true;\n    });\n    \n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const getValidateFieldDefault = obj => {\n    return mergeObjects({}, { result: false, fieldEl: null }, obj);\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const getValidateFormDefault = obj => {\n    return mergeObjects({}, { result: true, fields: [] }, obj);\n}\n","\nexport const toCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase(); });\n}\n","\nimport { date }         from './validationRules/date';\nimport { email }        from './validationRules/email';\nimport { number }       from './validationRules/number';\n\nimport { checkbox }     from './validationRules/checkbox';\nimport { equalTo }      from './validationRules/equalTo';\nimport { exactLength }  from './validationRules/exactLength';\nimport { file }         from './validationRules/file';\nimport { length }       from './validationRules/length';\nimport { max }          from './validationRules/max';\nimport { maxlength }    from './validationRules/maxlength';\nimport { min }          from './validationRules/min';\nimport { minlength }    from './validationRules/minlength';\nimport { pattern }      from './validationRules/pattern';\nimport { radio }        from './validationRules/radio';\n\nexport const validationRules = {\n    date,\n    email,\n    number,\n\n    checkbox,\n    equalTo,\n    exactLength,\n    file,\n    length,\n    max,\n    maxlength,\n    min,\n    minlength,\n    pattern,\n    radio\n}\n","\n/*\n    DATE AS ISO 8601 DATE FORMAT:\n    YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n*/\n\nexport const date = function( string ){\n    return {\n        result: /^((((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13578]|1[02])[ \\/\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13456789]|1[012])[ \\/\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.]02[ \\/\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ \\/\\-.]02[ \\/\\-.]29))$/g.test( string )\n    };\n}\n","\n// https://regex101.com/r/cdlyJy/3\n\nexport const email = function( string ){\n    return {\n        result: /^[a-zA-Z_-]([\\w.-]?[a-zA-Z0-9])*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?){2,})+$/.test( string )\n    };\n}\n","\n/*\n    ALL NUMBERS ( INTEGERS AND FLOATING )\n    VALID NUMBERS: 123 | 123.456 | .123\n*/\n\nexport const number = function( string ){\n    return {\n        result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n    };\n}","\nimport { checks } from './checks';\n\nexport const checkbox = function( value, fieldEl ){\n    const dataChecksEl = fieldEl.closest('form').querySelector('[name=\"' + fieldEl.name + '\"][data-checks]');\n    return dataChecksEl ? checks(dataChecksEl) : { result: fieldEl.checked };\n}\n","\nexport const checks = function( fieldEl ){\n    const attrValue = JSON.parse( fieldEl.getAttribute('data-checks') ),\n          checkedElLength = fieldEl.closest('form').querySelectorAll('[name=\"' + fieldEl.name + '\"]:checked').length,\n          isMinOk = checkedElLength >= attrValue[0],\n          isMaxOk = checkedElLength <= attrValue[1],\n          obj = { result: isMinOk && isMaxOk };\n\n    if( !obj.result ){\n        obj.errors = { checks: true };\n        if( !isMinOk ){ obj.errors.minChecks = true; }\n        if( !isMaxOk ){ obj.errors.maxChecks = true; }\n    }\n\n    return obj;\n}\n","\nexport const equalTo = function( value, fieldEl ){\n    const checkFromEl = fieldEl.closest('form').querySelector( '[name=\"' + fieldEl.getAttribute('data-equal-to') + '\"]' );\n    return { result: value === checkFromEl.value };\n}\n","\nexport const exactLength = function( value, fieldEl ){\n    const valueLength = value.length,\n          exactLength = fieldEl.getAttribute('data-exact-length') * 1,\n          obj = { result: valueLength === exactLength };\n\n    if( !obj.result ){\n        obj.errors = {};\n        if( valueLength < exactLength ){ obj.errors.minlength = true; }\n        else { obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nexport const file = function( value, fieldEl ){\n    const maxFileSize = (fieldEl.getAttribute('data-max-file-size') || fieldOptions.maxFileSize) * 1,\n          MIMEtype = fieldEl.accept ? new RegExp(fieldEl.accept.replace( '*', '[^\\\\/,]+' )) : null,\n          filesList = Array.from(fieldEl.files),\n          obj = { result: true };\n\n    filesList.forEach(file => {\n        const exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize,\n              isAcceptedFileType = MIMEtype !== null ? MIMEtype.test(file.type) : true;\n\n        if( exceedMaxFileSize || !isAcceptedFileType ){\n            obj.result = false;\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {};\n            }\n            if( exceedMaxFileSize ){ obj.errors.maxFileSize = true; }\n            if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true; }\n\n        }\n    });\n\n    return obj;\n}\n","\nexport const length = function( value, fieldEl ){\n    const valueL = value.length,\n          attrValue = JSON.parse( fieldEl.getAttribute('data-length') ),\n          isMinlengthOk = valueL >= attrValue[0],\n          isMaxlengthOk = valueL <= attrValue[1],\n          obj = { result: isMinlengthOk && isMaxlengthOk };\n\n    if( !obj.result ){\n        obj.errors = { stringLength: true };\n        if( !isMinlengthOk ){ obj.errors.minlength = true; }\n        if( !isMaxlengthOk ){ obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const max = function( value, fieldEl ){\n    let maxVal = fieldEl.max;\n    const dateFormat = fieldEl.getAttribute('data-date-format');\n    \n    if( fieldEl.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat );\n        maxVal = maxVal.split('-').join('');\n    }\n\n    value = value * 1;\n    maxVal = maxVal * 1;\n    \n    return { result: value <= maxVal };\n}\n","\nexport const maxlength = function( value, fieldEl ){\n    return { result: value.length <= fieldEl.maxLength * 1 };\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const min = function( value, fieldEl ){\n    let minVal = fieldEl.min;\n    const dateFormat = fieldEl.getAttribute('data-date-format');\n    \n    if( fieldEl.type === 'date' || fieldEl.getAttribute('data-date-format') ){\n        value = getDateAsNumber( value, dateFormat );\n        minVal = minVal.split('-').join('');\n    }\n\n    value = value * 1;\n    minVal = minVal * 1;\n    \n    return { result: value >= minVal };\n}\n","\nexport const minlength = function( value, fieldEl ){\n    return { result: value.length >= fieldEl.minLength * 1 };\n}\n","\nexport const pattern = function( value, fieldEl ){\n    return { result: new RegExp(fieldEl.pattern).test(value) };\n}\n","\nexport const radio = function( value, fieldEl ){\n    const fieldChecked = fieldEl.closest('form').querySelector( '[name=\"'+ fieldEl.name +'\"]:checked' ),\n          isValid = fieldChecked !== null && fieldChecked.value.trim().length > 0;\n\n    return { result: isValid };\n}\n","\nimport { getValidateFieldDefault, isDOMNode, runFunctionsSequence } from './helpers';\nimport { isValid } from './isValid';\n\nexport function checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    if( !isDOMNode(fieldEl) ){\n        const obj = getValidateFieldDefault({fieldEl});\n        return Promise.resolve(obj);\n    }\n\n    const formEl = fieldEl.closest('form'),\n          isValidValue = fieldEl.value.trim().length > 0;\n\n     // HANDLE FIELDS radio/data-require-more\n     if( fieldEl.type === 'radio' ){\n        const checkedEl = fieldEl.checked ? fieldEl : formEl.querySelector('[name=\"'+ fieldEl.name +'\"]:checked'),\n              reqMoreIsChecked = checkedEl && checkedEl.matches('[data-require-more]'),\n              findReqMoreEl = reqMoreIsChecked ? checkedEl : formEl.querySelector('[data-require-more][name=\"'+ fieldEl.name +'\"]'),\n              findReqFromEl = findReqMoreEl ? formEl.querySelector('[data-required-from=\"#'+ findReqMoreEl.id +'\"]') : null;\n        \n        if( checkedEl && findReqFromEl ){\n            findReqFromEl.required = findReqMoreEl.required && findReqMoreEl.checked;\n            if( !reqMoreIsChecked ){\n                findReqFromEl.value = '';\n            } else if( fieldOptions.focusOnRelated ) {\n                findReqFromEl.focus();\n            }\n        }\n    }\n\n    // HANDLE FIELDS data-required-from\n    if( fieldEl.matches('[data-required-from]') && isValidValue ){\n        const reqMoreEl = formEl.querySelector( fieldEl.getAttribute('data-required-from') );\n        reqMoreEl.checked = true;\n        fieldEl.required = reqMoreEl.required;\n    }\n\n    const needsValidation = fieldEl.required || (fieldEl.matches('[data-validate-if-filled]') && isValidValue);\n\n    return runFunctionsSequence({\n            functionsList: fieldOptions.beforeValidation,\n            data: {fieldEl}\n        })\n        .then(data => {\n            const dataObj = data.pop();\n            return new Promise(resolve => {\n                if( !needsValidation ){\n                    dataObj.result = true;\n                }\n                resolve( needsValidation ? isValid(fieldEl, fieldOptions, validationRules, validationErrors) : dataObj );\n            });\n        });\n\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const runFunctionsSequence = ( { functionsList = [], data = {}, stopConditionFn = () => false } = {} ) => {\n    return functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1]);\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res);\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result);\n                    return res;\n                });\n        });\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList);\n}\n","\nimport { getValidateFieldDefault, mergeObjects, toCamelCase } from './helpers';\n\nexport function isValid( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    const fieldValue = fieldEl.value,\n          obj = getValidateFieldDefault({result: fieldValue.trim().length > 0, fieldEl}),\n          isRadioOrCheckbox = /^(radio|checkbox)$/.test(fieldEl.type),\n          hasSelectedInput = fieldEl.closest('form').querySelectorAll('[name=\"'+ fieldEl.name +'\"]:checked').length > 0;\n\n    if( (!isRadioOrCheckbox && !obj.result) || (isRadioOrCheckbox && !hasSelectedInput) ){\n        obj.result = false;\n        obj.errors = { empty: true };\n        return Promise.resolve(obj);\n    }\n\n    // COLLECT VALIDATION METHOD NAMES ( USED TO RUN VALIDATIONS AND GET ERRORS )\n    const validationMethods = Array.from(fieldEl.attributes).reduce((accList, attr) => {\n        const attrName = toCamelCase( attr.name.replace('data-', '') ),\n              attrValue = toCamelCase( attr.value ),\n              isAttrValueWithFn = (attrName === 'type' || attrName === 'subtype') && validationRules[attrValue],\n              isAttrNameWithFn = validationRules[attrName];\n\n        if( isAttrValueWithFn || isAttrNameWithFn ){\n            accList.push( isAttrValueWithFn ? attrValue : attrName );\n        }\n        return accList;\n    }, []);\n\n    return new Promise(resolve => {\n\n        // RUN VALIDATIONS\n        const validationsResult = validationMethods.reduce((accPromise, methodName) => {\n            return accPromise.then(accObj => {\n                return new Promise(resolveVal => {\n                    // RUN VALIDATION INSIDE A PROMISE IS USEFUL FOR ASYNC VALIDATIONS\n                    resolveVal( validationRules[methodName](fieldValue, fieldEl, fieldOptions) );\n                }).then(valObj => {\n                    // ADD CUSTOM ERROR-KEY FOR EACH VALIDATION RULE\n                    if( !valObj.result ){\n                        const errorObj = {};\n                        if( typeof valObj.errors === 'undefined' || typeof valObj.errors[methodName] === 'undefined' ){\n                            errorObj[methodName] = true;\n                        }\n                        valObj.errors = mergeObjects({}, valObj.errors, errorObj);\n                    }\n                    valObj = valObj.result ? {} : valObj;\n                    return mergeObjects(accObj, valObj);\n                });\n            });\n        }, Promise.resolve(obj));\n        resolve(validationsResult);\n\n    }).then(data => {\n\n        // GET ERRORS\n        if( !data.result ){\n            data.errors = validationMethods.reduce((accObj, methodName) => {\n                const errors = (validationErrors[methodName] && validationErrors[methodName](fieldValue, fieldEl)) || {};\n                return mergeObjects(accObj, errors);\n            }, data.errors);\n            data.errors.rule = true;\n        }\n        return data;\n\n    });\n\n}\n","\nimport { version }              from './modules/version';\nimport { checkFormEl, isNodeList, mergeObjects } from './modules/helpers';\nimport { options }              from './modules-lite/options';\nimport { validationRules }      from './modules/validationRules';\nimport { checkFieldValidity }   from './modules/checkFieldValidity';\nimport { checkFormValidity }    from './modules/checkFormValidity';\n\nclass Form {\n\n    constructor( formEl, optionsObj ){\n        const argsL = arguments.length,\n              checkFormElem = checkFormEl(formEl);\n\n        if( argsL === 0 || (argsL > 0 && !formEl) ){\n            throw new Error('First argument \"formEl\" is missing or falsy!');\n        }\n        if( isNodeList(formEl) ){\n            throw new Error('First argument \"formEl\" must be a single DOM node or a form CSS selector, not a NodeList!');\n        }\n        if( !checkFormElem.result ){\n            throw new Error('First argument \"formEl\" is not a DOM node nor a form CSS selector!');\n        }\n\n        const self = this;\n\n        self.formEl = checkFormElem.element;\n        self.formEl.formjs = self;\n        self.options = mergeObjects({}, Form.prototype.options, optionsObj);\n\n        // BINDING CONTEXT FOR FUTURE EXECUTION\n        self.options.fieldOptions.beforeValidation = self.options.fieldOptions.beforeValidation.map(cbFn => cbFn.bind(self));\n\n        self.formEl.noValidate = true;\n    }\n\n    destroy(){\n        delete this.formEl.formjs;\n    }\n\n    validateField( fieldEl, fieldOptions ){\n        const self = this;\n        fieldEl = (typeof fieldEl === 'string' ? self.formEl.querySelector(fieldEl) : fieldEl);\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions);\n        return checkFieldValidity(fieldEl, fieldOptions, self.validationRules, self.validationErrors);\n    }\n\n    validateForm( fieldOptions ){\n        const self = this;\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions);\n        return checkFormValidity(self.formEl, fieldOptions, self.validationRules, self.validationErrors);\n    }\n    \n    static addValidationErrors( errorsObj ){\n        Form.prototype.validationErrors = mergeObjects({}, Form.prototype.validationErrors, errorsObj);\n    }\n\n    static addValidationRules( rulesObj ){\n        Form.prototype.validationRules = mergeObjects({}, Form.prototype.validationRules, rulesObj);\n    }\n    \n    static setOptions( optionsObj ){\n        Form.prototype.options = mergeObjects({}, Form.prototype.options, optionsObj);\n    }\n\n}\n\nForm.prototype.options = options;\nForm.prototype.validationErrors = {};\nForm.prototype.validationRules = validationRules;\nForm.prototype.version = version;\n\nexport default Form;\n","\nimport { fieldsStringSelector, getUniqueFields, getValidateFieldDefault, getValidateFormDefault, mergeObjects } from './helpers';\nimport { checkFieldValidity } from './checkFieldValidity';\n\nexport function checkFormValidity( formEl, fieldOptions, validationRules, validationErrors, fieldToSkip = null ){\n\n    fieldOptions = mergeObjects( {}, fieldOptions, {focusOnRelated: false} );\n    const fieldsList = getUniqueFields( formEl.querySelectorAll(fieldsStringSelector) );\n\n    return Promise.all( fieldsList.map(fieldEl => {\n\n        if( fieldToSkip && fieldEl === fieldToSkip ){\n            const obj = getValidateFieldDefault({fieldEl, result: true});\n            return Promise.resolve(obj);\n        }\n        return checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors );\n\n    }) ).then(fields => {\n\n        const areAllFieldsValid = fields.filter(fieldObj => !fieldObj.result).length === 0;\n        return getValidateFormDefault({result: areAllFieldsValid, fields});\n\n    });\n\n}\n","\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [],\n        focusOnRelated:         true,\n        maxFileSize:            10\n    }\n    \n}\n"],"names":["isNodeList","nodeList","NodeList","prototype","isPrototypeOf","isDOMNode","node","Element","checkFormEl","formEl","isString","isFormSelector","document","querySelector","tagName","toLowerCase","result","element","isPlainObject","object","Object","toString","call","mergeObjects","out","Array","from","arguments","slice","filter","arg","forEach","keys","key","isArray","concat","push","fieldsStringSelector","formatMap","dateArray","reverse","getDateAsNumber","dateString","dateFormat","separator","splitChar","match","length","indexOf","replace","split","join","getUniqueFields","currentFieldName","currentFieldType","fieldEl","name","type","matches","getValidateFieldDefault","obj","getValidateFormDefault","fields","toCamelCase","string","all","letter","toUpperCase","validationRules","date","test","email","number","checkbox","value","dataChecksEl","closest","attrValue","JSON","parse","getAttribute","checkedElLength","querySelectorAll","isMinOk","isMaxOk","errors","checks","minChecks","maxChecks","checked","equalTo","exactLength","valueLength","minlength","maxlength","file","maxFileSize","fieldOptions","MIMEtype","accept","RegExp","filesList","files","exceedMaxFileSize","size","isAcceptedFileType","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","stringLength","max","maxVal","maxLength","min","minVal","minLength","pattern","radio","fieldChecked","trim","checkFieldValidity","validationErrors","Promise","resolve","isValidValue","checkedEl","reqMoreIsChecked","findReqMoreEl","findReqFromEl","id","required","focusOnRelated","focus","reqMoreEl","needsValidation","functionsList","data","stopConditionFn","reduce","acc","promiseFn","then","res","dataNew","dataList","runFunctionsSequence","beforeValidation","dataObj","pop","fieldValue","isRadioOrCheckbox","hasSelectedInput","empty","validationMethods","attributes","accList","attr","attrName","isAttrValueWithFn","isAttrNameWithFn","accPromise","methodName","accObj","resolveVal","valObj","errorObj","rule","isValid","Form","optionsObj","argsL","checkFormElem","Error","self","this","formjs","options","map","cbFn","bind","noValidate","errorsObj","rulesObj","fieldToSkip","fieldsList","areAllFieldsValid","fieldObj","checkFormValidity","version"],"mappings":"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"}