{"version":3,"file":"formjs.min.js","sources":["../../src/modules/helpers/isNodeList.js","../../src/modules/helpers/isDOMNode.js","../../src/modules/helpers/checkFormEl.js","../../src/modules/helpers/isPlainObject.js","../../src/modules/helpers/mergeObjects.js","../../src/modules/helpers/dispatchCustomEvent.js","../../src/modules/helpers/finalizeFieldPromise.js","../../src/modules/helpers/finalizeFormPromise.js","../../src/modules/helpers/getDateAsNumber.js","../../src/modules/helpers/getSplitChar.js","../../src/modules/helpers/getUniqueFields.js","../../src/modules/helpers/mergeValidateFieldDefault.js","../../src/modules/helpers/mergeValidateFormDefault.js","../../src/modules/helpers/toCamelCase.js","../../src/modules-lite/helpers/customEvents.js","../../src/modules/validationRules.js","../../src/modules/validationRules/date.js","../../src/modules/validationRules/email.js","../../src/modules/validationRules/number.js","../../src/modules/validationRules/checkbox.js","../../src/modules/validationRules/checks.js","../../src/modules/validationRules/equalTo.js","../../src/modules/validationRules/exactLength.js","../../src/modules/validationRules/file.js","../../src/modules/validationRules/length.js","../../src/modules/validationRules/max.js","../../src/modules/validationRules/maxlength.js","../../src/modules/validationRules/min.js","../../src/modules/validationRules/minlength.js","../../src/modules/validationRules/pattern.js","../../src/modules/validationRules/radio.js","../../src/modules/checkFieldValidity.js","../../src/modules/helpers/getJSONobjectFromFieldAttribute.js","../../src/modules/helpers/runFunctionsSequence.js","../../src/modules/isValid.js","../../src/modules/helpers/removeClass.js","../../src/index-lite.js","../../src/modules/checkFieldsValidity.js","../../src/modules/helpers/fieldsStringSelector.js","../../src/modules-lite/options.js"],"sourcesContent":["\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList );\n}\n","\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node );\n}\n","\nimport { isDOMNode } from './isDOMNode';\n\nexport const checkFormEl = form => {\n    let isString = typeof form,\n        isValidNodeSelector = isString === 'string' && isDOMNode(document.querySelector(form)),\n        isFormSelector = isValidNodeSelector && document.querySelector(form).tagName.toLowerCase() === 'form',\n        obj = {\n            result: isDOMNode(form) || isFormSelector,\n            $el: (isString === 'string' ? document.querySelector(form) : form)\n        };\n\n    return obj;\n}\n","\nexport const isPlainObject = object => {\n    return Object.prototype.toString.call( object ) === '[object Object]';\n}\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const mergeObjects = function( out = {} ){\n    Array.from(arguments).slice(1).filter(arg => !!arg).forEach(arg => {\n        Object.keys(arg).forEach(key => {\n            if( Array.isArray(arg[key]) ){\n                out[key] = (out[key] || []).concat( arg[key].slice(0) );\n            } else if( isPlainObject(arg[key]) ){\n                out[key] = mergeObjects((out[key] || {}), arg[key]);\n            } else {\n                // * STRING | NUMBER | BOOLEAN | FUNCTION\n                if( Array.isArray(out[key]) ){\n                    // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                    out[key].push(arg[key]);\n                } else {\n                    out[key] = arg[key];\n                }\n            }\n        });\n    });\n\n    return out;\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const dispatchCustomEvent = ( elem, eventName, eventOptions ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions);\n    const eventObj = new CustomEvent(eventName, eventOptions);\n    elem.dispatchEvent( eventObj );\n}\n","\nexport const finalizeFieldPromise = ({errors, result}) => {\n    if( result ){\n        return Promise.resolve();\n    }\n    return Promise.reject(errors);\n}\n","\nexport const finalizeFormPromise = ({fields, result}) => {\n    if( result ){\n        return Promise.resolve(fields);\n    }\n    return Promise.reject(fields);\n}\n","\nimport { getSplitChar } from './getSplitChar';\n\nconst formatMap = {\n    'YYYY-MM-DD': function(dateArray){\n        return dateArray;\n    },\n    'MM-DD-YYYY': function(dateArray){\n        return [dateArray[2], dateArray[0], dateArray[1]];\n    },\n    'DD-MM-YYYY': function(dateArray){\n        return dateArray.reverse();\n    }\n};\n\nexport const getDateAsNumber = ( dateString, dateFormat ) => {\n    dateFormat = dateFormat || 'YYYY-MM-DD';\n    const splitChar = getSplitChar(dateString);\n\n    if( dateFormat.indexOf(splitChar) < 0 ){\n        return;\n    }\n\n    dateFormat = dateFormat.replace(/[^YMD]/g, '-');\n    dateString = dateString.split(splitChar);\n    dateString = formatMap[dateFormat](dateString).join('');\n    \n    return dateString;\n}\n","\nexport const getSplitChar = string => {\n    // MATCH ANY NON-DIGIT CHAR\n    const separator = string.match(/\\D/);\n    return (separator && separator.length > 0) ? separator[0] : null;\n}\n","\nexport const getUniqueFields = $nodeList => {\n\n    let currentFieldName = '',\n        currentFieldType = '';\n\n    return Array.from( $nodeList ).filter($field => {\n        const name = $field.name,\n              type = $field.type;\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false;\n        }\n        \n        if( !$field.matches('[data-required-from]') ){\n            currentFieldName = name;\n            currentFieldType = type;\n        }\n        return true;\n    });\n    \n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const mergeValidateFieldDefault = obj => {\n    return mergeObjects({}, { result: false, $field: null }, obj);\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const mergeValidateFormDefault = obj => {\n    return mergeObjects({}, { result: true, fields: [] }, obj);\n}\n","\nexport const toCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase(); });\n}\n","\nexport const customEvents = {\n    field: {\n        validation: 'fjs.field:validation'\n    },\n    form: {\n        destroy:    'fjs.form:destroy',\n        init:       'fjs.form:init',\n        validation: 'fjs.form:validation'\n    }\n}\n","\nimport { date }         from './validationRules/date';\nimport { email }        from './validationRules/email';\nimport { number }       from './validationRules/number';\n\nimport { checkbox }     from './validationRules/checkbox';\nimport { equalTo }      from './validationRules/equalTo';\nimport { exactLength }  from './validationRules/exactLength';\nimport { file }         from './validationRules/file';\nimport { length }       from './validationRules/length';\nimport { max }          from './validationRules/max';\nimport { maxlength }    from './validationRules/maxlength';\nimport { min }          from './validationRules/min';\nimport { minlength }    from './validationRules/minlength';\nimport { pattern }      from './validationRules/pattern';\nimport { radio }        from './validationRules/radio';\n\nexport const validationRules = {\n    date,\n    email,\n    number,\n\n    checkbox,\n    equalTo,\n    exactLength,\n    file,\n    length,\n    max,\n    maxlength,\n    min,\n    minlength,\n    pattern,\n    radio\n}\n","\n/*\n    DATE AS ISO 8601 DATE FORMAT:\n    YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n*/\n\nexport const date = function( string ){\n    return {\n        result: /^((((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13578]|1[02])[ \\/\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13456789]|1[012])[ \\/\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.]02[ \\/\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ \\/\\-.]02[ \\/\\-.]29))$/g.test( string )\n    };\n}\n","\n// https://regex101.com/r/cdlyJy/3\n\nexport const email = function( string ){\n    return {\n        result: /^[a-zA-Z_-]([\\w.-]?[a-zA-Z0-9])*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?){2,})+$/.test( string )\n    };\n}\n","\n/*\n    ALL NUMBERS ( INTEGERS AND FLOATING )\n    VALID NUMBERS: 123 | 123.456 | .123\n*/\n\nexport const number = function( string ){\n    return {\n        result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n    };\n}","\nimport { checks } from './checks';\n\nexport const checkbox = function( value, $field ){\n    const $dataChecks = $field.closest('form').querySelector('[name=\"' + $field.name + '\"][data-checks]');\n    return $dataChecks ? checks($dataChecks) : { result: $field.checked };\n}\n","\nexport const checks = function( $field ){\n    const attrValue = JSON.parse( $field.getAttribute('data-checks') ),\n          checkedLength = $field.closest('form').querySelectorAll('[name=\"' + $field.name + '\"]:checked').length,\n          isMinOk = checkedLength >= attrValue[0],\n          isMaxOk = checkedLength <= attrValue[1],\n          obj = { result: isMinOk && isMaxOk };\n\n    if( !obj.result ){\n        obj.errors = { checks: true };\n        if( !isMinOk ){ obj.errors.minChecks = true; }\n        if( !isMaxOk ){ obj.errors.maxChecks = true; }\n    }\n\n    return obj;\n}\n","\nexport const equalTo = function( value, $field ){\n    const $checkFrom = $field.closest('form').querySelector( '[name=\"' + $field.getAttribute('data-equal-to') + '\"]' );\n    return { result: value === $checkFrom.value };\n}\n","\nexport const exactLength = function( value, $field ){\n    const valueLength = value.length,\n          exactLength = $field.getAttribute('data-exact-length') * 1,\n          obj = { result: valueLength === exactLength };\n\n    if( !obj.result ){\n        obj.errors = {};\n        if( valueLength < exactLength ){ obj.errors.minlength = true; }\n        else { obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nexport const file = function( value, $field, fieldOptions ){\n    const maxFileSize = ($field.getAttribute('data-max-file-size') || fieldOptions.maxFileSize) * 1,\n          MIMEtype = $field.accept ? new RegExp($field.accept.replace( '*', '[^\\\\/,]+' )) : null,\n          filesList = Array.from($field.files),\n          obj = { result: true };\n\n    filesList.forEach(file => {\n        const exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize,\n              isAcceptedFileType = MIMEtype !== null ? MIMEtype.test(file.type) : true;\n\n        if( exceedMaxFileSize || !isAcceptedFileType ){\n            obj.result = false;\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {};\n            }\n            if( exceedMaxFileSize ){ obj.errors.maxFileSize = true; }\n            if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true; }\n\n        }\n    });\n\n    return obj;\n}\n","\nexport const length = function( value, $field ){\n    const valueL = value.length,\n          attrValue = JSON.parse( $field.getAttribute('data-length') ),\n          isMinlengthOk = valueL >= attrValue[0],\n          isMaxlengthOk = valueL <= attrValue[1],\n          obj = { result: isMinlengthOk && isMaxlengthOk };\n\n    if( !obj.result ){\n        obj.errors = {};\n        if( !isMinlengthOk ){ obj.errors.minlength = true; }\n        if( !isMaxlengthOk ){ obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const max = function( value, $field ){\n    let maxVal = $field.max;\n    const dateFormat = $field.getAttribute('data-date-format');\n    \n    if( $field.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat );\n        maxVal = maxVal.split('-').join('');\n    }\n\n    value = value * 1;\n    maxVal = maxVal * 1;\n    \n    return { result: value <= maxVal };\n}\n","\nexport const maxlength = function( value, $field ){\n    return { result: value.length <= $field.maxLength * 1 };\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const min = function( value, $field ){\n    let minVal = $field.min;\n    const dateFormat = $field.getAttribute('data-date-format');\n    \n    if( $field.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat );\n        minVal = minVal.split('-').join('');\n    }\n\n    value = value * 1;\n    minVal = minVal * 1;\n    \n    return { result: value >= minVal };\n}\n","\nexport const minlength = function( value, $field ){\n    return { result: value.length >= $field.minLength * 1 };\n}\n","\nexport const pattern = function( value, $field ){\n    return { result: new RegExp($field.pattern).test(value) };\n}\n","\nexport const radio = function( value, $field ){\n    const $fieldChecked = $field.closest('form').querySelector( '[name=\"'+ $field.name +'\"]:checked' ),\n          isValid = $fieldChecked !== null && $fieldChecked.value.trim().length > 0;\n\n    return { result: isValid };\n}\n","\nimport {    getJSONobjectFromFieldAttribute,\n            isDOMNode,\n            mergeObjects,\n            mergeValidateFieldDefault,\n            removeClass,\n            runFunctionsSequence\n        }           from './helpers';\nimport { isValid }  from './isValid';\n\nexport function checkFieldValidity( $field, fieldOptions, validationRules, validationErrors ){\n\n    if( !isDOMNode($field) ){\n        const obj = mergeValidateFieldDefault({$field});\n        return Promise.resolve(obj);\n    }\n\n    const $form = $field.closest('form'),\n          isValidValue = $field.value.trim().length > 0,\n          dataFieldOptions = getJSONobjectFromFieldAttribute( $field, 'data-field-options' );\n\n    fieldOptions = mergeObjects( fieldOptions, dataFieldOptions );\n\n    // HANDLE FIELD data-required-from WHEN CHANGING ITS RELATED RADIO\n    if( $field.type === 'radio' ){\n        const $checked = $field.checked ? $field : $form.querySelector('[name=\"'+ $field.name +'\"]:checked'),\n              reqMoreIsChecked = $checked && $checked.matches('[data-require-more]'),\n              $findReqMore = reqMoreIsChecked ? $checked : $form.querySelector('[data-require-more][name=\"'+ $field.name +'\"]'),\n              $findReqFrom = $findReqMore ? $form.querySelector('[data-required-from=\"#'+ $findReqMore.id +'\"]') : null;\n        \n        if( $checked && $findReqFrom ){\n            $findReqFrom.required = $findReqMore.required && $findReqMore.checked;\n            if( !reqMoreIsChecked ){\n                $findReqFrom.value = '';\n            } else if( fieldOptions.focusOnRelated ) {\n                $findReqFrom.focus();\n            }\n        }\n    }\n\n    // HANDLE FIELD data-require-more & data-required-from WHEN *-from IT'S FILLED\n    if( $field.matches('[data-required-from]') && isValidValue ){\n        const $reqMore = $form.querySelector( $field.getAttribute('data-required-from') );\n        $reqMore.checked = true;\n        $field.required = $reqMore.required;\n    }\n\n    const needsValidation = $field.required || ($field.matches('[data-validate-if-filled]') && isValidValue);\n\n    return runFunctionsSequence({\n            functionsList: fieldOptions.beforeValidation,\n            data: { $field, fieldOptions }\n        })\n        .then(data => {\n            const dataObj = data.pop();\n            return new Promise(resolve => {\n                if( !needsValidation ){\n                    dataObj.result = true;\n                }\n                resolve( needsValidation ? isValid($field, fieldOptions, validationRules, validationErrors) : dataObj );\n            });\n        })\n        .then(data => {\n            const $container = fieldOptions.questionContainer && data.$field.closest( fieldOptions.questionContainer );\n            if( $container ){\n                removeClass( $container, fieldOptions.cssClasses.pending );\n            }\n            return data;\n        })\n        ;\n\n}\n","\nexport const getJSONobjectFromFieldAttribute = ( fieldEl, attrName ) => {\n    const customAttrEl = fieldEl.closest('['+ attrName +']');\n    return (customAttrEl && JSON.parse(customAttrEl.getAttribute(attrName))) || {};\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const runFunctionsSequence = ( { functionsList = [], data = {}, stopConditionFn = () => false } = {} ) => {\n    return functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1]);\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res);\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result);\n                    return res;\n                });\n        });\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList);\n}\n","\nimport { mergeValidateFieldDefault, mergeObjects, toCamelCase } from './helpers';\n\nexport function isValid( $field, fieldOptions, validationRules, validationErrors ){\n\n    const fieldValue = $field.value,\n          obj = mergeValidateFieldDefault({result: fieldValue.trim().length > 0, $field}),\n          isRadioOrCheckbox = /^(radio|checkbox)$/.test($field.type),\n          hasSelectedInput = $field.closest('form').querySelectorAll('[name=\"'+ $field.name +'\"]:checked').length > 0;\n\n    if( (!isRadioOrCheckbox && !obj.result) || (isRadioOrCheckbox && !hasSelectedInput) ){\n        obj.result = false;\n        obj.errors = { empty: true };\n        return Promise.resolve(obj);\n    }\n\n    // COLLECT VALIDATION METHOD NAMES ( USED TO RUN VALIDATIONS AND GET ERRORS )\n    const validationMethods = Array.from($field.attributes).reduce((accList, attr) => {\n        const attrName = toCamelCase( attr.name.replace('data-', '') ),\n              attrValue = toCamelCase( attr.value ),\n              isAttrValueWithFn = (attrName === 'type' || attrName === 'subtype') && validationRules[attrValue],\n              isAttrNameWithFn = validationRules[attrName];\n\n        if( isAttrValueWithFn || isAttrNameWithFn ){\n            accList.push( isAttrValueWithFn ? attrValue : attrName );\n        }\n        return accList;\n    }, []);\n\n    return new Promise(resolve => {\n\n        // RUN VALIDATIONS\n        const validationsResult = validationMethods.reduce((accPromise, methodName) => {\n            return accPromise.then(accObj => {\n                return new Promise(resolveVal => {\n                    // RUN VALIDATION INSIDE A PROMISE IS USEFUL FOR ASYNC VALIDATIONS\n                    resolveVal( validationRules[methodName](fieldValue, $field, fieldOptions) );\n                }).then(valObj => {\n                    // ADD CUSTOM ERROR-KEY FOR EACH VALIDATION RULE\n                    if( !valObj.result ){\n                        const errorObj = {};\n                        if( typeof valObj.errors === 'undefined' || typeof valObj.errors[methodName] === 'undefined' ){\n                            errorObj[methodName] = true;\n                        }\n                        valObj.errors = mergeObjects({}, valObj.errors, errorObj);\n                    }\n                    valObj = valObj.result ? {} : valObj;\n                    return mergeObjects(accObj, valObj);\n                });\n            });\n        }, Promise.resolve(obj));\n        resolve(validationsResult);\n\n    }).then(data => {\n\n        // GET ERRORS\n        if( !data.result ){\n            data.errors = validationMethods.reduce((accObj, methodName) => {\n                const errors = (validationErrors[methodName] && validationErrors[methodName](fieldValue, $field)) || {};\n                return mergeObjects(accObj, errors);\n            }, data.errors);\n        }\n        return data;\n\n    });\n\n}\n","\nexport const removeClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.remove( className );\n    });\n}\n","\nimport { version }              from '../package.json';\nimport { \n    checkFormEl,\n    dispatchCustomEvent,\n    fieldsStringSelector,\n    finalizeFieldPromise,\n    finalizeFormPromise,\n    isNodeList,\n    mergeObjects }              from './modules/helpers';\nimport { customEvents }         from './modules-lite/helpers/customEvents';\nimport { options }              from './modules-lite/options';\nimport { validationRules }      from './modules/validationRules';\nimport { checkFieldValidity }   from './modules/checkFieldValidity';\nimport { checkFieldsValidity }  from './modules/checkFieldsValidity';\n\nclass Form {\n\n    constructor( form, optionsObj ){\n        const argsL = arguments.length,\n              checkFormElem = checkFormEl(form);\n\n        if( argsL === 0 || (argsL > 0 && !form) ){\n            throw new Error('First argument \"form\" is missing or falsy!');\n        }\n        if( isNodeList(form) ){\n            throw new Error('First argument \"form\" must be a single DOM node or a form CSS selector, not a NodeList!');\n        }\n        if( !checkFormElem.result ){\n            throw new Error('First argument \"form\" is not a DOM node nor a form CSS selector!');\n        }\n\n        const self = this;\n\n        self.$form = checkFormElem.$el;\n        self.$form.formjs = self;\n        self.options = mergeObjects({}, Form.prototype.options, optionsObj);\n\n        // BINDING CONTEXT FOR FUTURE EXECUTION\n        self.options.fieldOptions.beforeValidation = self.options.fieldOptions.beforeValidation.map(cbFn => cbFn.bind(self));\n\n        self.$form.noValidate = true;\n\n        dispatchCustomEvent( self.$form, customEvents.form.init );\n    }\n\n    destroy(){\n        delete this.$form.formjs;\n        dispatchCustomEvent( this.$form, customEvents.form.destroy );\n    }\n\n    validateField( field, fieldOptions ){\n        const self = this;\n        const $field = typeof field === 'string' ? self.$form.querySelector(field) : field;\n        \n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions);\n        \n        return checkFieldValidity($field, fieldOptions, self.validationRules, self.validationErrors)\n            .then(obj => {\n                dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } );\n                return obj;\n            })\n            .then(finalizeFieldPromise);\n    }\n\n    validateForm( fieldOptions ){\n        const self = this;\n        const $form = self.$form;\n        const $fields = $form.querySelectorAll(fieldsStringSelector);\n\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions);\n\n        return checkFieldsValidity($fields, fieldOptions, self.validationRules, self.validationErrors)\n            .then(data => {\n                data.fields.forEach(obj => {\n                    obj.isCheckingForm = true;\n                    dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } );\n                });\n                dispatchCustomEvent( $form, customEvents.form.validation, { detail: data } );\n                return data;\n            })\n            .then(finalizeFormPromise);\n    }\n    \n    static addValidationErrors( errorsObj ){\n        Form.prototype.validationErrors = mergeObjects({}, Form.prototype.validationErrors, errorsObj);\n    }\n\n    static addValidationRules( rulesObj ){\n        Form.prototype.validationRules = mergeObjects({}, Form.prototype.validationRules, rulesObj);\n    }\n    \n    static setOptions( optionsObj ){\n        Form.prototype.options = mergeObjects({}, Form.prototype.options, optionsObj);\n    }\n\n}\n\nForm.prototype.options = options;\nForm.prototype.validationErrors = {};\nForm.prototype.validationRules = validationRules;\nForm.prototype.version = version;\n\nexport default Form;\n","\nimport { getUniqueFields, mergeValidateFieldDefault, mergeValidateFormDefault, mergeObjects } from './helpers';\nimport { checkFieldValidity } from './checkFieldValidity';\n\nexport function checkFieldsValidity( $fields, fieldOptions, validationRules, validationErrors, fieldToSkip = null ){\n\n    fieldOptions = mergeObjects( {}, fieldOptions, {focusOnRelated: false} );\n    const $fieldsList = getUniqueFields( $fields );\n\n    return Promise.all( $fieldsList.map($field => {\n\n        if( fieldToSkip && $field === fieldToSkip ){\n            const obj = mergeValidateFieldDefault({$field, result: true});\n            return Promise.resolve(obj);\n        }\n        return checkFieldValidity( $field, fieldOptions, validationRules, validationErrors );\n\n    }) ).then(fields => {\n\n        const areAllFieldsValid = fields.every(({result}) => result);\n        return mergeValidateFormDefault({result: areAllFieldsValid, fields});\n\n    });\n\n}\n","\nexport const fieldsStringSelector = 'input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"hidden\"]), select, textarea'\n","\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [],\n        focusOnRelated:         true,\n        maxFileSize:            10\n    }\n    \n}\n"],"names":["isNodeList","nodeList","NodeList","prototype","isPrototypeOf","isDOMNode","node","Element","checkFormEl","form","isString","isFormSelector","document","querySelector","tagName","toLowerCase","result","$el","isPlainObject","object","Object","toString","call","mergeObjects","out","Array","from","arguments","slice","filter","arg","forEach","keys","key","isArray","concat","push","dispatchCustomEvent","elem","eventName","eventOptions","bubbles","eventObj","CustomEvent","dispatchEvent","finalizeFieldPromise","errors","Promise","resolve","reject","finalizeFormPromise","fields","formatMap","dateArray","reverse","getDateAsNumber","dateString","dateFormat","separator","splitChar","match","length","indexOf","replace","split","join","getUniqueFields","$nodeList","currentFieldName","currentFieldType","$field","name","type","matches","mergeValidateFieldDefault","obj","mergeValidateFormDefault","toCamelCase","string","all","letter","toUpperCase","customEvents","validation","destroy","init","validationRules","date","test","email","number","checkbox","value","$dataChecks","closest","attrValue","JSON","parse","getAttribute","checkedLength","querySelectorAll","isMinOk","isMaxOk","checks","minChecks","maxChecks","checked","equalTo","exactLength","valueLength","minlength","maxlength","file","fieldOptions","maxFileSize","MIMEtype","accept","RegExp","filesList","files","exceedMaxFileSize","size","isAcceptedFileType","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","max","maxVal","maxLength","min","minVal","minLength","pattern","radio","$fieldChecked","trim","checkFieldValidity","validationErrors","attrName","customAttrEl","$form","isValidValue","dataFieldOptions","$checked","reqMoreIsChecked","$findReqMore","$findReqFrom","id","required","focusOnRelated","focus","$reqMore","needsValidation","functionsList","data","stopConditionFn","reduce","acc","promiseFn","then","res","dataNew","dataList","runFunctionsSequence","beforeValidation","dataObj","pop","fieldValue","isRadioOrCheckbox","hasSelectedInput","empty","validationMethods","attributes","accList","attr","isAttrValueWithFn","isAttrNameWithFn","accPromise","methodName","accObj","resolveVal","valObj","errorObj","isValid","element","$container","questionContainer","cssClasses","pending","className","classList","remove","Form","optionsObj","argsL","checkFormElem","Error","self","this","formjs","options","map","cbFn","bind","noValidate","errorsObj","rulesObj","field","detail","$fields","fieldToSkip","$fieldsList","areAllFieldsValid","every","checkFieldsValidity","isCheckingForm","version"],"mappings":"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"}