{"version":3,"file":"formjs.min.js","sources":["../src/modules/helpers/addClass.js","../src/modules/helpers/isNodeList.js","../src/modules/helpers/removeClass.js","../src/modules/helpers/isDOMNode.js","../src/modules/helpers/customEvents.js","../src/modules/helpers/mergeObjects.js","../src/modules/helpers/isPlainObject.js","../src/modules/helpers/dispatchCustomEvent.js","../src/modules/helpers/fieldsStringSelector.js","../src/modules/helpers/finalizeFormPromise.js","../src/modules/helpers/getDateAsNumber.js","../src/modules/helpers/getSplitChar.js","../src/modules/helpers/getUniqueFields.js","../src/modules/helpers/getFormFields.js","../src/modules/helpers/getJSONobjectFromFieldAttribute.js","../src/modules/helpers/mergeValidateFieldDefault.js","../src/modules/helpers/isFieldForChangeEvent.js","../src/modules/helpers/runFunctionsSequence.js","../src/modules/helpers/serializeObject.js","../src/modules/helpers/toCamelCase.js","../src/modules/options.js","../src/modules/optionsUtils/beforeValidation.js","../src/modules/helpers/checkDirtyField.js","../src/modules/optionsUtils/getFormData.js","../src/modules/validationRules.js","../src/modules/validationRules/date.js","../src/modules/validationRules/email.js","../src/modules/validationRules/number.js","../src/modules/validationRules/checkbox.js","../src/modules/validationRules/checks.js","../src/modules/validationRules/equalTo.js","../src/modules/validationRules/exactLength.js","../src/modules/validationRules/file.js","../src/modules/validationRules/length.js","../src/modules/validationRules/max.js","../src/modules/validationRules/maxlength.js","../src/modules/validationRules/min.js","../src/modules/validationRules/minlength.js","../src/modules/validationRules/pattern.js","../src/modules/validationRules/radio.js","../src/modules/listenerCallbacks/dataTypeNumber.js","../src/modules/listenerCallbacks/formValidationEnd.js","../src/modules/listenerCallbacks/keypressMaxlength.js","../src/modules/listenerCallbacks/pastePrevent.js","../src/modules/ajaxCall.js","../src/modules/listenerCallbacks/submit.js","../src/modules/listenerCallbacks/groupValidationEnd.js","../src/modules/listenerCallbacks/validation.js","../src/modules/listenerCallbacks/validationEnd.js","../src/modules/checkFieldValidity.js","../src/modules/isValid.js","../src/modules/checkFieldsValidity.js","../src/modules/helpers/mergeValidateFormDefault.js","../src/index.js","../src/modules/helpers/checkFormEl.js","../src/modules/formStartup.js","../src/modules/destroy.js","../src/modules/helpers/finalizeFieldPromise.js","../src/modules/helpers/finalizeFieldsGroupPromise.js","../src/modules/helpers/getFilledFields.js"],"sourcesContent":["\nexport const addClass = ( $el, cssClasses = '' ) => {\n    $el && $el.classList.add( ...cssClasses.split(' ') )\n}\n","\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList )\n}\n","\nexport const removeClass = ( $el, cssClasses = '' ) => {\n    $el && $el.classList.remove( ...cssClasses.split(' ') )\n}\n","\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node )\n}\n","\nexport const customEvents = {\n    field: {\n        validation: 'fjs.field:validation'\n    },\n    form: {\n        destroy:    'fjs.form:destroy',\n        init:       'fjs.form:init',\n        submit:     'fjs.form:submit',\n        validation: 'fjs.form:validation'\n    },\n    group: {\n        validation: 'fjs.group:validation'\n    }\n}\n","\nimport { isPlainObject } from './isPlainObject'\n\nexport const mergeObjects = function( out = {} ){\n    Array.from(arguments).slice(1).filter(arg => !!arg).forEach(arg => {\n        Object.keys(arg).forEach(key => {\n            if( Array.isArray(arg[key]) ){\n                out[key] = (out[key] || []).concat( arg[key].slice(0) )\n            } else if( isPlainObject(arg[key]) ){\n                out[key] = mergeObjects((out[key] || {}), arg[key])\n            } else {\n                // * STRING | NUMBER | BOOLEAN | FUNCTION\n                if( Array.isArray(out[key]) ){\n                    // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                    out[key].push(arg[key])\n                } else {\n                    out[key] = arg[key]\n                }\n            }\n        })\n    })\n\n    return out\n}\n","\nexport const isPlainObject = object => {\n    return Object.prototype.toString.call( object ) === '[object Object]'\n}\n","\nimport { mergeObjects } from './mergeObjects'\n\nexport const dispatchCustomEvent = ( $el, eventName, eventOptions ) => {\n    const eventOptionsNew = mergeObjects({}, { bubbles: true }, eventOptions)\n    const eventObj = new CustomEvent(eventName, eventOptionsNew)\n    $el.dispatchEvent( eventObj )\n}\n","\nexport const fieldsStringSelector = 'input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"hidden\"]), select, textarea'\n","\nexport const finalizeFormPromise = ({fields, result}) => {\n    if( result ){\n        return Promise.resolve(fields)\n    }\n    return Promise.reject(fields)\n}\n","\nimport { getSplitChar } from './getSplitChar'\n\nconst formatMap = {\n    'YYYY-MM-DD': function(dateArray){\n        return dateArray\n    },\n    'MM-DD-YYYY': function(dateArray){\n        return [dateArray[2], dateArray[0], dateArray[1]]\n    },\n    'DD-MM-YYYY': function(dateArray){\n        return dateArray.reverse()\n    }\n}\n\nexport const getDateAsNumber = ( dateString, dateFormat ) => {\n    dateFormat = dateFormat || 'YYYY-MM-DD'\n    const splitChar = getSplitChar(dateString)\n\n    if( dateFormat.indexOf(splitChar) < 0 ){\n        return\n    }\n\n    dateFormat = dateFormat.replace(/[^YMD]/g, '-')\n    dateString = dateString.split(splitChar)\n    dateString = formatMap[dateFormat](dateString).join('')\n    \n    return dateString\n}\n","\nexport const getSplitChar = string => {\n    // MATCH ANY NON-DIGIT CHAR\n    const separator = string.match(/\\D/)\n    return (separator && separator.length > 0) ? separator[0] : null\n}\n","\nexport const getUniqueFields = $nodeList => {\n\n    let currentFieldName = ''\n    let currentFieldType = ''\n\n    return Array.from( $nodeList ).filter($field => {\n        const { name, type } = $field\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false\n        }\n        \n        if( !$field.matches('[data-required-from]') ){\n            currentFieldName = name\n            currentFieldType = type\n        }\n        \n        return true\n    })\n    \n}\n","\nimport { getUniqueFields } from './getUniqueFields'\n\n// TO SIMULATE fieldsStringSelector => { hidden: false }\n// TO SIMULATE excludeSelector ( USED IN METHOD getFormData ) => { file: false, excludeData: false } => ':not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"file\"]):not([data-exclude-data])'\nexport const getFormFields = ( $form, { unique = false, hidden = true, file = true, excludeData = true } = {} ) => {\n    const BASIC_SELECTOR = 'select, textarea, input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"])'\n    const FIELDS_SELECTOR = `${BASIC_SELECTOR}${hidden ? '' : ':not([type=\"hidden\"])'}${file ? '' : ':not([type=\"file\"])'}${excludeData ? '' : ':not([data-exclude-data])'}`\n    \n    const $fields = unique ? getUniqueFields($form.elements) : Array.from($form.elements)\n\n    return $fields.filter( $el => $el.matches( FIELDS_SELECTOR ) )\n}\n","\nexport const getJSONobjectFromFieldAttribute = ( $field, attrName ) => {\n    const $customAttr = $field.closest(`[${attrName}]`)\n    return ($customAttr && JSON.parse($customAttr.getAttribute(attrName))) || {}\n}\n","\nimport { mergeObjects } from './mergeObjects'\n\nexport const mergeValidateFieldDefault = obj => {\n    return mergeObjects({}, { result: false, $field: null }, obj)\n}\n","\nexport const isFieldForChangeEvent = $field => {\n    return $field.matches('select, [type=\"radio\"], [type=\"checkbox\"], [type=\"file\"]')\n}\n","\nimport { mergeObjects } from './mergeObjects'\n\nexport const runFunctionsSequence = async ( { functionsList = [], data = {}, stopConditionFn = () => false } = {} ) => {\n    return await functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1])\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res)\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result)\n                    return res\n                })\n        })\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList)\n}\n","\nexport const serializeObject = obj => {\n    const objToString = (\n            (obj && typeof obj === 'object' && obj.constructor === Object) ? \n            Object.keys(obj)\n                .reduce((a,k) => {\n                    a.push(k+'='+encodeURIComponent(obj[k]))\n                    return a\n                },[]).join('&') : \n            obj\n    )\n    return objToString\n}\n","\nexport const toCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase() })\n}\n","\nimport { beforeValidationExtraLogic, beforeValidationUI } from './optionsUtils/beforeValidation'\nimport { getFormData } from './optionsUtils/getFormData'\n\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [beforeValidationExtraLogic, beforeValidationUI],\n        cssClasses: {\n            dirty:              'is-dirty',\n            error:              'has-error',\n            errorEmpty:         'has-error-empty',\n            errorRule:          'has-error-rule',\n            pending:            'is-pending',\n            valid:              'is-valid'\n        },\n        focusOnRelated:         true,\n        maxFileSize:            10,\n        onValidationCheckAll:   false,\n        preventPasteFields:     '[type=\"password\"], [data-equal-to]',\n        questionContainer:      '[data-formjs-question]',\n        skipUIfeedback:         false,\n        strictHtmlValidation:   true,\n        trimValue:              false,\n        validateOnEvents:       'input change'\n    },\n\n    formOptions: {\n        ajaxOptions:            {\n            cache:              'no-store',\n            credentials:        'same-origin',\n            headers: {\n                                'Content-Type': 'application/json',\n                                'Accept':       'application/json'\n            },\n            method:             'POST',\n            mode:               'same-origin',\n            redirect:           'follow',\n            timeout:            0,\n            url:                location.href\n        },\n        ajaxSubmit:             true,\n        beforeSend:             [],\n        cssClasses: {\n            ajaxComplete:       'ajax-complete',\n            ajaxError:          'ajax-error',\n            ajaxPending:        'ajax-pending',\n            ajaxSuccess:        'ajax-success',\n            submit:             'is-submitting',\n            valid:              'is-valid'\n        },\n        getFormData:            getFormData,\n        groups:                 [],\n        handleFileUpload:       true,\n        handleSubmit:           true,\n        onInitCheckFilled:      true\n    }\n    \n}\n","\nimport { addClass, checkDirtyField, getFormFields, isFieldForChangeEvent } from '../helpers'\n\nexport const beforeValidationExtraLogic = function beforeValidationExtraLogic ( { $field, fieldOptions } ) {\n\n    const $form = $field.form\n    const $formFields = getFormFields($form)\n    const isValidValue = $field.value.trim().length > 0\n\n    // HANDLE FIELD data-required-from WHEN CHANGING ITS RELATED RADIO\n    if( $field.type === 'radio' ){\n        const $checked = $field.checked ? $field : $formFields.find($el => $el.matches(`[name=\"${$field.name}\"]:checked`))\n        const reqMoreIsChecked = $checked && $checked.matches('[data-require-more]')\n        const $findReqMore = reqMoreIsChecked ? $checked : $formFields.find($el => $el.matches(`[data-require-more][name=\"${$field.name}\"]`))\n        const $findReqFrom = $findReqMore ? $formFields.find($el => $el.matches(`[data-required-from=\"#${$findReqMore.id}\"]`)) : null\n        \n        if( $checked && $findReqFrom ){\n            $findReqFrom.required = $findReqMore.required && $findReqMore.checked\n            if( !reqMoreIsChecked ){\n                $findReqFrom.value = ''\n            } else if( fieldOptions.focusOnRelated ) {\n                $findReqFrom.focus()\n            }\n        }\n    }\n\n    // HANDLE FIELD data-require-more & data-required-from WHEN *-from IT'S FILLED\n    if( $field.matches('[data-required-from]') && isValidValue ){\n        const $reqMore = $formFields.find( $el => $el.matches($field.dataset.requiredFrom) )\n        $reqMore.checked = true\n        $field.required = $reqMore.required\n    }\n\n}\n\nexport const beforeValidationUI = function beforeValidationUI ( { $field, fieldOptions } ) {\n\n    if( fieldOptions.trimValue && !isFieldForChangeEvent($field) ){\n        $field.value = $field.value.trim()\n    }\n\n    checkDirtyField( $field, fieldOptions )\n\n    if( !fieldOptions.skipUIfeedback ){\n        addClass( $field.closest( fieldOptions.questionContainer ), fieldOptions.cssClasses.pending )\n    }\n\n}\n","\nimport { addClass } from './addClass'\nimport { isNodeList } from './isNodeList'\nimport { removeClass } from './removeClass'\n\nexport const checkDirtyField = ( $fields, fieldOptions ) => {\n\n    const $fieldsNew = isNodeList($fields) ? Array.from( $fields ) : [$fields]\n\n    $fieldsNew.forEach($field => {\n        const isNotCheckboxOrRadio = !['checkbox', 'radio'].includes($field.type)\n        if( isNotCheckboxOrRadio ){\n            const $container = $field.closest( fieldOptions.questionContainer ) || $field\n            if( $field.value ){\n                addClass( $container, fieldOptions.cssClasses.dirty )\n            } else {\n                removeClass( $container, fieldOptions.cssClasses.dirty )\n            }\n        }\n    })\n    \n}\n","\nimport { getFormFields } from '../helpers'\n\nexport const getFormData = function getFormDataDefault( $filteredFields, trimValues ){\n\n    const formData = {}\n    const $form = this.$form\n    const $formFields = getFormFields($form)\n    let prevObj = formData\n  \n    $filteredFields.forEach($field => {\n        const isCheckbox = $field.type === 'checkbox'\n        const isRadio = $field.type === 'radio'\n        const isSelect = $field.matches('select')\n        const name = $field.name\n        let value = trimValues ? $field.value.trim() : $field.value\n  \n        if( isCheckbox ){\n\n            value = $field.checked\n            let $checkboxes = $formFields.filter($el => $el.name === name)\n            if( $checkboxes.length > 1 ){\n                value = []\n                let $checked = $checkboxes.filter((field) => field.checked)\n                $checked.forEach($field => {\n                    value.push($field.value)\n                })\n            }\n\n        } else if( isRadio ){\n\n            const $checkedRadio = $formFields.find($el => $el.matches(`[name=\"${name}\"]:checked`))\n            value = $checkedRadio ? $checkedRadio.value : null\n\n        } else if( isSelect ){\n\n            const $selectedOpts = Array.from($field.options).filter(option => option.selected)\n            if( $selectedOpts.length > 1 ){\n                value = []\n                $selectedOpts.forEach($field => { \n                    value.push($field.value)\n                })\n            }\n        }\n  \n        const nameSplit = name.split('.')\n        nameSplit.forEach((keyName, index, list) => {\n            const isLastKeyName = index + 1 === list.length\n  \n            if( Array.isArray(prevObj) ){\n                const keyNameSplit = keyName.split('___')\n                const arrPos = keyNameSplit[0] - 1\n                const arrayHasItemAtIndex = typeof prevObj[arrPos] !== 'undefined'\n                const arrItemKeyName = keyNameSplit[1]\n  \n                if( !arrayHasItemAtIndex ){\n                    prevObj.push({})\n                }\n  \n                keyName = arrItemKeyName\n\n                if( isLastKeyName ){\n                    prevObj[arrPos][keyName] = value\n                } else if( typeof prevObj[arrPos][keyName] === 'undefined' ) {\n                    prevObj[arrPos][keyName] = {}\n                }\n                \n                if( !isLastKeyName ){\n                    prevObj = prevObj[arrPos][keyName]\n                    return\n                }\n            } else {\n                const isKeyNameArray = keyName.endsWith('[]')\n                keyName = keyName.replace('[]', '')\n  \n                if( isLastKeyName ){\n                    prevObj[keyName] = value\n                } else if( typeof prevObj[keyName] === 'undefined' ){\n                    if( isKeyNameArray ){\n                        prevObj[keyName] = []\n                    } else {\n                        prevObj[keyName] = {}\n                    }\n                }\n            }\n  \n            prevObj = isLastKeyName ? formData : prevObj[keyName]\n        })\n    })\n  \n    return formData\n\n}\n","\nimport { date }         from './validationRules/date'\nimport { email }        from './validationRules/email'\nimport { number }       from './validationRules/number'\n\nimport { checkbox }     from './validationRules/checkbox'\nimport { equalTo }      from './validationRules/equalTo'\nimport { exactLength }  from './validationRules/exactLength'\nimport { file }         from './validationRules/file'\nimport { length }       from './validationRules/length'\nimport { max }          from './validationRules/max'\nimport { maxlength }    from './validationRules/maxlength'\nimport { min }          from './validationRules/min'\nimport { minlength }    from './validationRules/minlength'\nimport { pattern }      from './validationRules/pattern'\nimport { radio }        from './validationRules/radio'\n\nexport const validationRules = {\n    date,\n    email,\n    number,\n\n    checkbox,\n    equalTo,\n    exactLength,\n    file,\n    length,\n    max,\n    maxlength,\n    min,\n    minlength,\n    pattern,\n    radio\n}\n","\n/*\n    DATE AS ISO 8601 DATE FORMAT:\n    YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n*/\n\nexport const date = function( string ){\n    return {\n        result: /^((((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13578]|1[02])[ \\/\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13456789]|1[012])[ \\/\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.]02[ \\/\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ \\/\\-.]02[ \\/\\-.]29))$/g.test( string )\n    }\n}\n","\n// https://regex101.com/r/cdlyJy/3\n\nexport const email = function( string ){\n    return {\n        result: /^[a-zA-Z_-]([\\w.-]?[a-zA-Z0-9])*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?){2,})+$/.test( string )\n    }\n}\n","\n/*\n    ALL NUMBERS ( INTEGERS AND FLOATING )\n    VALID NUMBERS: 123 | 123.456 | .123\n*/\n\nexport const number = function( string ){\n    return {\n        result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n    }\n}","\nimport { getFormFields } from '../helpers'\nimport { checks } from './checks'\n\nexport const checkbox = function( value, $field ){\n    const $dataChecks = getFormFields($field.form).find( $el => $el.matches(`[name=\"${$field.name}\"][data-checks]`) )\n    return $dataChecks ? checks($dataChecks) : { result: $field.checked }\n}\n","\nimport { getFormFields } from '../helpers'\n\nexport const checks = function( $field ){\n    const attrValue = JSON.parse( $field.dataset.checks )\n    const checkedLength = getFormFields($field.form).filter($el => $el.matches(`[name=\"${$field.name}\"]:checked`)).length\n    const isMinOk = checkedLength >= attrValue[0]\n    const isMaxOk = checkedLength <= attrValue[1]\n    const obj = { result: isMinOk && isMaxOk }\n\n    if( !obj.result ){\n        obj.errors = { checks: true }\n        if( !isMinOk ){ obj.errors.minChecks = true }\n        if( !isMaxOk ){ obj.errors.maxChecks = true }\n    }\n\n    return obj\n}\n","\nimport { getFormFields } from '../helpers'\n\nexport const equalTo = function( value, $field ){\n    const $checkFrom = getFormFields($field.form).find( $el => $el.matches(`[name=\"${$field.dataset.equalTo}\"]`) )\n    return { result: value === $checkFrom.value }\n}\n","\nexport const exactLength = function( value, $field ){\n    const valueLength = value.length\n    const exactLength = $field.dataset.exactLength * 1\n    const obj = { result: valueLength === exactLength }\n\n    if( !obj.result ){\n        obj.errors = {}\n        if( valueLength < exactLength ){ obj.errors.minlength = true }\n        else { obj.errors.maxlength = true }\n    }\n\n    return obj\n}\n","\nexport const file = function( value, $field, fieldOptions ){\n    const maxFileSize = fieldOptions.maxFileSize * 1\n    const MIMEtype = $field.accept ? new RegExp($field.accept.replace( '*', '[^\\\\/,]+' )) : null\n    const filesList = Array.from($field.files)\n    const obj = { result: true }\n\n    filesList.forEach(file => {\n        const exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize\n        const isAcceptedFileType = MIMEtype !== null ? MIMEtype.test(file.type) : true\n\n        if( exceedMaxFileSize || !isAcceptedFileType ){\n            obj.result = false\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {}\n            }\n            if( exceedMaxFileSize ){ obj.errors.maxFileSize = true }\n            if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true }\n\n        }\n    })\n\n    return obj\n}\n","\nexport const length = function( value, $field ){\n    const valueL = value.length\n    const attrValue = JSON.parse( $field.dataset.length )\n    const isMinlengthOk = valueL >= attrValue[0]\n    const isMaxlengthOk = valueL <= attrValue[1]\n    const obj = { result: isMinlengthOk && isMaxlengthOk }\n\n    if( !obj.result ){\n        obj.errors = {}\n        if( !isMinlengthOk ){ obj.errors.minlength = true }\n        if( !isMaxlengthOk ){ obj.errors.maxlength = true }\n    }\n\n    return obj\n}\n","\nimport { getDateAsNumber } from '../helpers'\n\nexport const max = function( value, $field ){\n    let maxVal = $field.max\n    const dateFormat = $field.dataset.dateFormat\n    \n    if( $field.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat )\n        maxVal = maxVal.split('-').join('')\n    }\n\n    value = value * 1\n    maxVal = maxVal * 1\n    \n    return { result: value <= maxVal }\n}\n","\nexport const maxlength = function( value, $field ){\n    return { result: value.length <= $field.maxLength * 1 }\n}\n","\nimport { getDateAsNumber } from '../helpers'\n\nexport const min = function( value, $field ){\n    let minVal = $field.min\n    const dateFormat = $field.dataset.dateFormat\n    \n    if( $field.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat )\n        minVal = minVal.split('-').join('')\n    }\n\n    value = value * 1\n    minVal = minVal * 1\n    \n    return { result: value >= minVal }\n}\n","\nexport const minlength = function( value, $field ){\n    return { result: value.length >= $field.minLength * 1 }\n}\n","\nexport const pattern = function( value, $field ){\n    return { result: new RegExp($field.pattern).test(value) }\n}\n","\nimport { getFormFields } from '../helpers'\n\nexport const radio = function( value, $field ){\n    const $fieldChecked = getFormFields($field.form).find( $el => $el.matches(`[name=\"${$field.name}\"]:checked`) )\n    const isValid = $fieldChecked !== null && $fieldChecked.value.trim().length > 0\n\n    return { result: isValid }\n}\n","\nexport const dataTypeNumber = function( event ){\n\n    const $field = event.target\n    \n    if( $field.matches('[data-type=\"number\"]') ){\n        const fieldValue = $field.value\n        const hasInvalidChars = /[^\\d.,+\\-]/.test(fieldValue)\n        \n        if( hasInvalidChars ){\n            event.stopImmediatePropagation()\n            const valueReplaced = fieldValue.replace(/[^\\d.,+\\-]/g, '')\n            $field.value = valueReplaced\n        }\n    }\n\n}\n","\nimport { addClass, removeClass } from '../helpers'\n\nexport const formValidationEnd = function( event ){\n\n    const $form = event.target\n    const { fieldOptions, formOptions } = $form.formjs.options\n    \n    if( !fieldOptions.skipUIfeedback ){\n        const formClasses = formOptions.cssClasses.valid\n        \n        if( event.detail.result ){\n            addClass($form, formClasses)\n        } else {\n            removeClass($form, formClasses)\n        }\n    }\n\n}\n","\nexport const keypressMaxlength = function( event ){\n\n    const $field = event.target\n    \n    if( $field.matches( '[maxlength]' ) ){\n        const maxLength = $field.maxLength * 1\n        const keyPressed = event.which || event.keyCode\n        const allowedKeys = [8, 37, 38, 39, 46]\n\n        if( $field.value.length >= maxLength && allowedKeys.indexOf(keyPressed) === -1 ){\n            return false\n        }\n    }\n\n}\n","\nexport const pastePrevent = function( event ){\n\n    const $field = event.target\n    const fieldOptions = $field.form.formjs.options.fieldOptions\n\n    if( $field.matches( fieldOptions.preventPasteFields ) ){     \n        event.preventDefault()\n    }\n\n}\n","\nimport { addClass, getFormFields, mergeObjects, removeClass, serializeObject } from './helpers'\n\nconst getFetchMethod = (response, options) => {\n    const accept = options.headers.get('Accept')\n    const contentType = response.headers.get('Content-Type')\n    const headerOpt = accept || contentType || ''\n\n    if( headerOpt.indexOf('application/json') > -1 || headerOpt === '' ){\n        return 'json'\n    } else if( headerOpt.indexOf('text/') > -1 ){\n        return 'text'\n    } else {\n        return 'blob'\n    }\n}\n\nexport async function ajaxCall( $form, formDataObj, options ){\n\n    let timeoutTimer\n    const { formOptions } = options\n    const ajaxOptions = mergeObjects( {}, formOptions.ajaxOptions )\n    const isMultipart = ajaxOptions.headers['Content-Type'] === 'multipart/form-data'\n\n    ajaxOptions.body = formDataObj\n    \n    // POST A FormData OBJECT ( multipart )\n    if( isMultipart && formOptions.handleFileUpload ){\n        let formDataMultipart = new FormData()\n        \n        for(let key in ajaxOptions.body){\n            formDataMultipart.append( key, ajaxOptions.body[key] )\n        }\n        \n        getFormFields($form).filter($el => $el.type === 'file').forEach($field => {\n            Array.from($field.files).forEach((file, idx) => {\n                const name = `${$field.name}[${idx}]`\n                formDataMultipart.append( name, file, file.name )\n            })\n        })\n        \n        ajaxOptions.body = formDataMultipart\n    }\n\n    if( ajaxOptions.method === 'GET' ){\n\n        // FETCH WITH \"GET\" METHOD CAN'T HAVE \"body\". SO IT IS APPENDED TO THE URL\n        ajaxOptions.url += ( /\\?/.test(ajaxOptions.url) ? '&' : '?' ) + serializeObject( ajaxOptions.body )\n        delete ajaxOptions.body\n\n    } else {\n\n        if( ajaxOptions.headers['Content-Type'].indexOf('application/x-www-form-urlencoded') > -1 ){\n            // POST A NORMAL FORM\n            ajaxOptions.body = serializeObject( ajaxOptions.body )\n        } else if( !isMultipart ){\n            // POST A JSON STRING\n            ajaxOptions.body = JSON.stringify(ajaxOptions.body)\n        }\n\n    }\n\n    ajaxOptions.headers = new Headers( ajaxOptions.headers )\n\n    if ( ajaxOptions.timeout > 0 ) {\n        const controller = new AbortController()\n        const signal = controller.signal\n\n        ajaxOptions.signal = signal\n        timeoutTimer = window.setTimeout(() => {\n            controller.abort()\n        }, ajaxOptions.timeout)\n    }\n\n    return await fetch(ajaxOptions.url, ajaxOptions)\n        .then(response => {\n            if( !response.ok ){\n                throw new Error(response.statusText)\n            }\n            const fetchMethod = getFetchMethod(response, ajaxOptions)\n            return response[fetchMethod]()\n        })\n        .then(data => {\n            addClass( $form, formOptions.cssClasses.ajaxSuccess )\n            return data\n        })\n        .catch(error => {\n            addClass( $form, formOptions.cssClasses.ajaxError )\n            throw new Error(error.message)\n        })\n        .finally(() => {\n            if( timeoutTimer ){\n                window.clearTimeout( timeoutTimer )\n            }\n            removeClass( $form, `${formOptions.cssClasses.submit} ${formOptions.cssClasses.ajaxPending}` )\n            addClass( $form, formOptions.cssClasses.ajaxComplete )\n            Array.from($form.elements).find($el => $el.type === 'submit').disabled = false\n        })\n\n}\n","\nimport { addClass, customEvents, dispatchCustomEvent, removeClass, runFunctionsSequence } from '../helpers'\nimport { ajaxCall } from '../ajaxCall'\n\nexport function submit( event ){\n\n    const $form = event.target\n    const instance = $form.formjs\n    const options = instance.options\n    const formCssClasses = options.formOptions.cssClasses\n    const isAjaxForm = options.formOptions.ajaxSubmit\n    const $btn = Array.from($form.elements).find($el => $el.matches('[type=\"submit\"]'))\n\n    const eventPreventDefault = ( enableBtn = true ) => {\n        if( $btn && enableBtn ){ $btn.disabled = false }\n        if( event ){ event.preventDefault() }\n    }\n\n    if( isAjaxForm ){\n        eventPreventDefault(false)\n    }\n\n    if( $btn ){\n        if( $btn.disabled ){\n            eventPreventDefault(false)\n            return false\n        }\n        $btn.disabled = true\n    }\n\n    removeClass( $form, `${formCssClasses.ajaxComplete} ${formCssClasses.ajaxError} ${formCssClasses.ajaxSuccess}` )\n    addClass( $form, formCssClasses.submit )\n\n    instance.validateForm()\n        .then(async data => {\n            \n            const hasGroup = typeof data.group !== 'undefined'\n\n            if( hasGroup && !data.canSubmit ){\n                return [{ stopExecution: true }]\n            }\n\n            const beforeSendData = {\n                stopExecution: false,\n                formData: isAjaxForm ? instance.getFormData() : null\n            }\n\n            const rfsObject = {\n                functionsList: options.formOptions.beforeSend,\n                data: beforeSendData,\n                stopConditionFn: function(data){ return data.stopExecution }\n            }\n\n            return await runFunctionsSequence(rfsObject)\n\n        }).then(dataList => {\n\n            if( dataList.some(({stopExecution}) => stopExecution) ){\n                eventPreventDefault()\n                return false\n            }\n            \n            if( isAjaxForm ){\n                const { formData } = dataList.pop()\n                addClass( $form, formCssClasses.ajaxPending )\n                dispatchCustomEvent( $form, customEvents.form.submit, { detail: ajaxCall( $form, formData, options ) } )\n            }\n\n        })\n        .catch(() => {\n            eventPreventDefault()\n            removeClass( $form, formCssClasses.submit )\n        })\n    \n}\n","\nexport const groupValidationEnd = function( event ){\n\n    const detail = event.detail\n\n    if( detail.result ){\n        event.target.formjs.currentGroup = detail.group.next\n    }\n    \n}\n","\nimport { fieldsStringSelector, getFormFields, isFieldForChangeEvent } from '../helpers'\n\nexport const validation = function( event ){\n\n    const isChangeEvent = event.type === 'change'\n    const $field = event.target\n    const self = $field.form.formjs\n\n    if( $field.matches( fieldsStringSelector ) ){\n        const isFieldForChangeEventBoolean = isFieldForChangeEvent($field)\n        const hasOnlyChangeEvent = self.options.fieldOptions.validateOnEvents === 'change'\n        \n        if(\n            (isFieldForChangeEventBoolean && isChangeEvent) ||\n            (!isFieldForChangeEventBoolean && (!isChangeEvent || hasOnlyChangeEvent))\n        ){\n            \n            self.validateField( $field )\n                .then(() => {\n                    const type = $field.type\n                    const $relatedEqualTo = getFormFields($field.form).find($el => $el.matches(`[data-equal-to=\"${$field.name}\"]`))\n\n                    if(\n                        // FIELD IS ( required OR data-validate-if-filled ) AND RELATED FIELD data-equal-to HAS A VALUE\n                        ($field.required || $field.matches('[data-validate-if-filled]')) && \n                        !(type === 'checkbox' || type === 'radio') && \n                        $relatedEqualTo && $relatedEqualTo.value.trim() !== ''\n                    ){\n                        self.validateField( $relatedEqualTo ).catch(errors => {})\n                    }\n                })\n                .catch(errors => {})\n\n        }\n    }\n    \n}\n","\nimport { addClass, getFormFields, getJSONobjectFromFieldAttribute, removeClass, mergeObjects } from '../helpers'\n\nexport const validationEnd = function( event ){\n\n    const eventDetail = event.detail\n    const $field = eventDetail.$field\n    const $form = $field.form\n    const dataFieldOptions = getJSONobjectFromFieldAttribute( $field, 'data-field-options' )\n    const fieldOptions = mergeObjects({}, $form.formjs.options.fieldOptions, dataFieldOptions)\n    const $container = $field.closest( fieldOptions.questionContainer )\n    const isReqFrom = $field.matches('[data-required-from]')\n    const $reqMore = getFormFields($form).find($el => $el.matches($field.dataset.requiredFrom))\n\n    if( !fieldOptions.skipUIfeedback ){\n        removeClass( $container, fieldOptions.cssClasses.pending )\n\n        if( eventDetail.result ){\n\n            if( !isReqFrom || (isReqFrom && $reqMore.checked) ){\n                // IF FIELD IS VALID\n                const errorClasses = `${fieldOptions.cssClasses.error} ${fieldOptions.cssClasses.errorEmpty} ${fieldOptions.cssClasses.errorRule}`\n                removeClass( $container, errorClasses )\n                addClass( $container, fieldOptions.cssClasses.valid )\n            }\n\n        } else {\n\n            // IF FIELD IS NOT VALID\n            let extraErrorClass = fieldOptions.cssClasses.errorRule\n\n            // HANDLE CASE OF FIELD data-checks\n            const isChecks = $field.matches('[data-checks]')\n            const checkedElLength = (isChecks ? getFormFields($form).filter($el => $el.matches(`[name=\"${$field.name}\"]:checked`)).length : 0)\n\n            if( (!isChecks && (eventDetail.errors && eventDetail.errors.empty)) || (isChecks && checkedElLength === 0) ){\n                extraErrorClass = fieldOptions.cssClasses.errorEmpty\n            }\n\n            const errorClasses = `${fieldOptions.cssClasses.error} ${extraErrorClass}`\n            const errorClassToRemove = `${fieldOptions.cssClasses.errorEmpty} ${fieldOptions.cssClasses.errorRule}`\n            removeClass( $container, `${fieldOptions.cssClasses.valid} ${errorClassToRemove}` )\n            addClass( $container, errorClasses )\n\n            removeClass( $form, $form.formjs.options.formOptions.cssClasses.valid )\n\n        }\n    }\n\n}\n","\nimport { getJSONobjectFromFieldAttribute, isDOMNode, mergeObjects, mergeValidateFieldDefault, runFunctionsSequence } from './helpers'\nimport { isValid }  from './isValid'\n\nexport async function checkFieldValidity( $field, fieldOptions, validationRules, validationErrors ){\n\n    if( !isDOMNode($field) ){\n        const obj = mergeValidateFieldDefault({$field})\n        return Promise.resolve(obj)\n    }\n\n    const dataFieldOptions = getJSONobjectFromFieldAttribute( $field, 'data-field-options' )\n    const fieldOptionsTemp = mergeObjects( {}, fieldOptions, dataFieldOptions )\n    \n    const dataBeforeValidation = (await runFunctionsSequence({\n        functionsList: fieldOptionsTemp.beforeValidation,\n        data: { $field, fieldOptions: fieldOptionsTemp }\n    })).pop()\n    \n    const isValidValue = $field.value.trim().length > 0\n    const needsValidation = $field.required || ($field.matches('[data-validate-if-filled]') && isValidValue)\n\n    if( !needsValidation ){\n        delete dataBeforeValidation.fieldOptions\n        dataBeforeValidation.result = true\n    }\n    \n    return needsValidation ? await isValid($field, fieldOptionsTemp, validationRules, validationErrors) : dataBeforeValidation\n\n}\n","\nimport { getFormFields, mergeObjects, mergeValidateFieldDefault, toCamelCase } from './helpers'\n\nexport async function isValid( $field, fieldOptions, validationRules, validationErrors ){\n\n    const fieldValue = $field.value\n    const obj = mergeValidateFieldDefault({result: fieldValue.trim().length > 0, $field})\n    const isCheckboxOrRadio = ['checkbox', 'radio'].includes($field.type)\n    const hasSelectedInput = getFormFields($field.form).filter($el => $el.matches(`[name=\"${$field.name}\"]:checked`)).length > 0\n\n    if( (!isCheckboxOrRadio && !obj.result) || (isCheckboxOrRadio && !hasSelectedInput) ){\n        obj.result = false\n        obj.errors = { empty: true }\n        return Promise.resolve(obj)\n    }\n\n    // COLLECT VALIDATION METHOD NAMES ( USED TO RUN VALIDATIONS AND GET ERRORS )\n    const validationMethods = Array.from($field.attributes).reduce((accList, attr) => {\n        const attrName = toCamelCase( attr.name.replace('data-', '') )\n        const attrValue = toCamelCase( attr.value )\n        const isAttrValueWithFn = ['type', 'subtype'].includes(attrName) && validationRules[attrValue]\n        const isAttrNameWithFn = validationRules[attrName]\n\n        if( isAttrValueWithFn || isAttrNameWithFn ){\n            accList.push( isAttrValueWithFn ? attrValue : attrName )\n        }\n        return accList\n    }, [])\n\n    const validity = await new Promise(resolve => {\n\n        // RUN VALIDATIONS\n        const validationsResult = validationMethods.reduce((accPromise, methodName) => {\n            return accPromise.then(accObj => {\n                return new Promise(resolveVal => {\n                    // RUN VALIDATION INSIDE A PROMISE IS USEFUL FOR ASYNC VALIDATIONS\n                    resolveVal( validationRules[methodName](fieldValue, $field, fieldOptions) )\n                }).then(valObj => {\n                    // ADD CUSTOM ERROR-KEY FOR EACH VALIDATION RULE\n                    if( !valObj.result ){\n                        const errorObj = {}\n                        if( typeof valObj.errors === 'undefined' || typeof valObj.errors[methodName] === 'undefined' ){\n                            errorObj[methodName] = true\n                        }\n                        valObj.errors = mergeObjects({}, valObj.errors, errorObj)\n                    }\n                    valObj = valObj.result ? {} : valObj\n                    return mergeObjects(accObj, valObj)\n                })\n            })\n        }, Promise.resolve(obj))\n        resolve(validationsResult)\n\n    })\n\n    if( !validity.result ){\n        validity.errors = validationMethods.reduce((accObj, methodName) => {\n            const errors = (validationErrors[methodName] && validationErrors[methodName](fieldValue, $field)) || {}\n            return mergeObjects(accObj, errors)\n        }, validity.errors)\n    }\n\n    return validity\n\n}\n","\nimport { getUniqueFields, mergeValidateFormDefault, mergeObjects } from './helpers'\nimport { checkFieldValidity } from './checkFieldValidity'\n\nexport async function checkFieldsValidity( $fields, fieldOptions, validationRules, validationErrors, fieldToSkip = {} ){\n\n    const fieldOptionsTemp = mergeObjects( {}, fieldOptions, {focusOnRelated: false} )\n    const $fieldsList = getUniqueFields( $fields )\n\n    const fieldsValidity = await Promise.all( $fieldsList.map(async $field => {\n\n        if( fieldToSkip.$field && $field === fieldToSkip.$field ){\n            return Promise.resolve(fieldToSkip)\n        }\n        return await checkFieldValidity( $field, fieldOptionsTemp, validationRules, validationErrors )\n\n    }) )\n\n    const areAllFieldsValid = fieldsValidity.every(({result}) => result)\n\n    return mergeValidateFormDefault({result: areAllFieldsValid, fields:fieldsValidity})\n\n}\n","\nimport { mergeObjects } from './mergeObjects'\n\nexport const mergeValidateFormDefault = obj => {\n    return mergeObjects({}, { result: true, fields: [] }, obj)\n}\n","\nimport { version }              from '../package.json'\nimport { \n    checkFormEl, \n    customEvents, \n    dispatchCustomEvent, \n    fieldsStringSelector, \n    finalizeFieldPromise, \n    finalizeFieldsGroupPromise, \n    finalizeFormPromise, \n    getFilledFields, \n    getFormFields, \n    isDOMNode, \n    isNodeList,\n    mergeObjects\n}                               from './modules/helpers'\nimport { options }              from './modules/options'\nimport { validationRules }      from './modules/validationRules'\nimport { formStartup }          from './modules/formStartup'\nimport { destroy }              from './modules/destroy'\nimport { checkFieldValidity }   from './modules/checkFieldValidity'\nimport { checkFieldsValidity }  from './modules/checkFieldsValidity'\n\nclass Form {\n\n    constructor( form, options ){\n        const argsL = arguments.length\n        const { $el, result } = checkFormEl(form)\n\n        if( argsL === 0 || (argsL > 0 && !form) ){\n            throw new Error('First argument \"form\" is missing or falsy!')\n        }\n        if( isNodeList(form) ){\n            throw new Error('First argument \"form\" must be a single DOM node or a form CSS selector, not a NodeList!')\n        }\n        if( !result ){\n            throw new Error('First argument \"form\" is not a DOM node nor a form CSS selector!')\n        }\n\n        const self = this\n\n        self.$form = $el\n        self.$form.formjs = self\n        self.options = mergeObjects({}, Form.prototype.options, options)\n        self.currentGroup = self.options.formOptions.groups[0]\n\n        // BINDING CONTEXT FOR FUTURE EXECUTION\n        const cbList = [\n            // IN fieldOptions\n            'beforeValidation',\n            // IN formOptions\n            'beforeSend',\n            'getFormData'\n        ]\n        cbList.forEach(cbName => {\n            const optionType = self.options.formOptions[cbName] ? 'formOptions' : 'fieldOptions'\n            let cbOpt = self.options[optionType][cbName]\n\n            if( cbOpt ){\n                self.options[optionType][cbName] = ( Array.isArray(cbOpt) ? cbOpt.map(cbFn => cbFn.bind(self)) : cbOpt.bind(self) )\n            }\n        })\n\n        formStartup( self.$form, self.options )\n\n        const initOptions = {}\n        if( self.options.formOptions.onInitCheckFilled ){\n            initOptions.detail = self.validateFilledFields().catch(fields => {})\n        }\n        dispatchCustomEvent( self.$form, customEvents.form.init, initOptions )\n    }\n\n    destroy(){\n        const { $form, options } = this\n        destroy($form, options)\n        dispatchCustomEvent( $form, customEvents.form.destroy )\n    }\n    \n    getFormData( trimValues = this.options.fieldOptions.trimValue ){\n        return this.options.formOptions.getFormData( this.$dataFields, trimValues )\n    }\n\n    async validateField( field, fieldOptions ){\n        const { $fields, $form, currentGroup, options, validationErrors, validationRules } = this\n        let $field = field\n\n        if( typeof field === 'string' ){\n            const element = $form.elements.namedItem(field)\n            if( isDOMNode(element) ){\n                $field = element\n            } else {\n                $field = element[0]\n            }\n        }\n\n        const fieldOptionsTemp = mergeObjects({}, options.fieldOptions, fieldOptions)\n        const fieldValidity = await checkFieldValidity($field, fieldOptionsTemp, validationRules, validationErrors)\n\n        dispatchCustomEvent( fieldValidity.$field, customEvents.field.validation, { detail: fieldValidity } )\n\n        if( fieldOptionsTemp.onValidationCheckAll ){\n            const selector = currentGroup || fieldsStringSelector\n            const $otherFields = $fields.filter($el => $el.matches(selector))\n            const fieldOptionsTempCheckAll = mergeObjects({}, fieldOptionsTemp, { skipUIfeedback: true })\n\n            checkFieldsValidity( $otherFields, fieldOptionsTempCheckAll, validationRules, validationErrors, fieldValidity )\n                .then(dataForm => {\n                    const { groups } = options.formOptions\n                    const validationEventName = currentGroup ? customEvents.group.validation : customEvents.form.validation\n                    if( groups.length > 0 ){\n                        dataForm.group = {\n                            prev: groups[groups.indexOf(selector) - 1],\n                            current: selector,\n                            next: groups[groups.indexOf(selector) + 1]\n                        }\n                        dataForm.canSubmit = dataForm.result && !dataForm.group.next\n                    }\n                    dispatchCustomEvent( $form, validationEventName, { detail: dataForm } )\n                })\n        }\n\n        return finalizeFieldPromise(fieldValidity)\n    }\n\n    async validateFieldsGroup( group = this.currentGroup, fieldOptions ){\n        const { $fields, $form, options, validationErrors, validationRules } = this\n        const fieldOptionsTemp = mergeObjects({}, options.fieldOptions, fieldOptions)\n        const $fieldsGroup = $fields.filter($el => $el.matches(group))\n        const groupValidity = await checkFieldsValidity($fieldsGroup, fieldOptionsTemp, validationRules, validationErrors)\n\n        groupValidity.fields.forEach(obj => {\n            obj.isCheckingGroup = true\n            dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } )\n        })\n\n        const groups = options.formOptions.groups\n        if( groups.length > 0 ){\n            groupValidity.group = {\n                prev: groups[groups.indexOf(group) - 1],\n                current: group,\n                next: groups[groups.indexOf(group) + 1]\n            }\n            groupValidity.canSubmit = groupValidity.result && !groupValidity.group.next\n        }\n\n        dispatchCustomEvent( $form, customEvents.group.validation, { detail: groupValidity } )\n        \n        return finalizeFieldsGroupPromise(groupValidity)\n    }\n\n    async validateFilledFields( fieldOptions ){\n        const { $form, options, validationErrors, validationRules } = this\n        const $filledFields = getFilledFields( $form )\n        const fieldOptionsTemp = mergeObjects({}, options.fieldOptions, fieldOptions)\n        const filledFieldsValidity = await checkFieldsValidity($filledFields, fieldOptionsTemp, validationRules, validationErrors)\n\n        filledFieldsValidity.fields.forEach(obj => {\n            dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } )\n        })\n        \n        return finalizeFormPromise(filledFieldsValidity)\n    }\n\n    async validateForm( fieldOptions ){\n        const { $form, $visibleFields, currentGroup, options, validationErrors, validationRules } = this\n        const fieldOptionsTemp = mergeObjects({}, options.fieldOptions, fieldOptions)\n\n        if( currentGroup ){\n            return await this.validateFieldsGroup( currentGroup, fieldOptionsTemp )\n        }\n\n        const formValidity = await checkFieldsValidity($visibleFields, fieldOptionsTemp, validationRules, validationErrors)\n\n        formValidity.fields.forEach(obj => {\n            obj.isCheckingForm = true\n            dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } )\n        })\n\n        dispatchCustomEvent( $form, customEvents.form.validation, { detail: formValidity } )\n\n        return finalizeFormPromise(formValidity)\n    }\n\n    get $fields () {\n        return getFormFields( this.$form )\n    }\n\n    get $dataFields () {\n        return getFormFields( this.$form, { file: false, excludeData: false } )\n    }\n\n    get $groupFields () {\n        return this.$fields.filter($el => $el.matches(this.currentGroup))\n    }\n\n    get $uniqueFields () {\n        return getFormFields( this.$form, { unique: true } )\n    }\n\n    get $visibleFields () {\n        return getFormFields( this.$form, { hidden: false } )\n    }\n    \n    static addValidationErrors( errorsObj ){\n        Form.prototype.validationErrors = mergeObjects({}, Form.prototype.validationErrors, errorsObj)\n    }\n\n    static addValidationRules( rulesObj ){\n        Form.prototype.validationRules = mergeObjects({}, Form.prototype.validationRules, rulesObj)\n    }\n    \n    static setOptions( optionsObj ){\n        Form.prototype.options = mergeObjects({}, Form.prototype.options, optionsObj)\n    }\n\n}\n\nForm.prototype.options = options\nForm.prototype.validationErrors = {}\nForm.prototype.validationRules = validationRules\nForm.prototype.version = version\n\nexport default Form\n","\nimport { isDOMNode } from './isDOMNode'\n\nexport const checkFormEl = form => {\n    const formIsString = typeof form === 'string'\n    const isValidNodeSelector = formIsString && isDOMNode(document.querySelector(form))\n    const isFormSelector = isValidNodeSelector && document.querySelector(form).tagName.toLowerCase() === 'form'\n    \n    return {\n        result: isDOMNode(form) || isFormSelector,\n        $el: (formIsString ? document.querySelector(form) : form)\n    }\n}\n","\nimport { customEvents, getFormFields } from './helpers'\nimport { \n    dataTypeNumber,\n    formValidationEnd,\n    groupValidationEnd,\n    keypressMaxlength,\n    pastePrevent,\n    submit,\n    validation, \n    validationEnd \n} from './listenerCallbacks'\n\nexport function formStartup( $form, options ){\n\n    const { fieldOptions, formOptions } = options\n    \n    $form.noValidate = true\n        \n    // VALIDATION WITH ATTRIBUTES LIKE HTML ONES ( ALSO FOR BUG FIXING, EG: maxlength IN ANDROID )\n    if( fieldOptions.strictHtmlValidation ){\n        \n        // maxlength\n        // MAXLENGTH IS BUGGY IN ANDROID BROWSERS\n        $form.addEventListener('keypress', keypressMaxlength, false)\n\n        // data-type=\"number\"\n        // SINCE VALIDATING type=\"number\" WITH NON NUMERIC CHARS WILL RETURN EMPTY STRING IN SOME BROWSERS ( EG: FIREFOX )\n        $form.addEventListener('input', dataTypeNumber, false)\n        \n    }\n    \n    if( fieldOptions.preventPasteFields && getFormFields($form).filter($el => $el.matches(fieldOptions.preventPasteFields) ).length ){\n        // INIT EVENT LISTENER FOR \"PASTE\" EVENT TO PREVENT IT ON SPECIFIED FIELDS\n        $form.addEventListener('paste', pastePrevent, false)\n    }\n\n    // INIT EVENTS LISTENER ( AS IN fieldOptions )\n    fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n        const useCapture = ['blur', 'focus'].includes(eventName)\n        $form.addEventListener(eventName, validation, useCapture)\n    })\n\n    $form.addEventListener(customEvents.field.validation, validationEnd, false)\n    if( formOptions.groups.length > 0 ){\n        $form.addEventListener(customEvents.group.validation, groupValidationEnd, false)\n    }\n    $form.addEventListener(customEvents.form.validation, formValidationEnd, false)\n    \n    // HANDLE FORM SUBMIT\n    if( formOptions.handleSubmit ){\n        // INIT FORM SUBMIT ( DEFAULT AND AJAX )\n        $form.addEventListener('submit', submit)\n\n        if( formOptions.ajaxSubmit ){\n            if( $form.getAttribute('enctype') ){\n                formOptions.ajaxOptions.headers['Content-Type'] = $form.getAttribute('enctype')\n            }\n\n            if( $form.getAttribute('method') ){\n                formOptions.ajaxOptions.method = $form.getAttribute('method').toUpperCase()\n            }\n\n            if( $form.getAttribute('action') ){\n                formOptions.ajaxOptions.url = $form.getAttribute('action')\n            }\n        }\n    }\n\n}\n","\nimport { customEvents } from './helpers'\nimport { dataTypeNumber, formValidationEnd, groupValidationEnd, keypressMaxlength, pastePrevent, submit, validation, validationEnd } from './listenerCallbacks'\n\n\nexport function destroy( $form, options ){\n\n    const { fieldOptions, formOptions } = options\n\n    if( fieldOptions.strictHtmlValidation ){\n        $form.removeEventListener('keypress', keypressMaxlength, false)\n        $form.removeEventListener('input', dataTypeNumber, false)\n    }\n\n    if( fieldOptions.preventPasteFields ){\n        $form.removeEventListener('paste', pastePrevent, false)\n    }\n\n    if( formOptions.handleSubmit ){\n        $form.removeEventListener('submit', submit)\n    }\n\n    fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n        const useCapturing = eventName === 'blur' ? true : false\n        $form.removeEventListener(eventName, validation, useCapturing)\n    })\n\n    $form.removeEventListener(customEvents.field.validation, validationEnd, false)\n    if( formOptions.groups.length > 0 ){\n        $form.removeEventListener(customEvents.group.validation, groupValidationEnd, false)\n    }\n    $form.removeEventListener(customEvents.form.validation, formValidationEnd, false)\n\n    delete $form.formjs\n    \n}\n","\nexport const finalizeFieldPromise = ({errors, result}) => {\n    if( result ){\n        return Promise.resolve()\n    }\n    return Promise.reject(errors)\n}\n","\nexport const finalizeFieldsGroupPromise = ({canSubmit, fields, group, result}) => {\n    if( result ){\n        return Promise.resolve({canSubmit, fields, group})\n    }\n    return Promise.reject({fields, group})\n}\n","\nimport { getFormFields } from './getFormFields'\n\nexport const getFilledFields = $form => {\n    const $formFields = getFormFields($form, { unique: true, hidden: false })\n    return $formFields.map($field => {\n\n        const { dataset, name, type, value } = $field\n        const isCheckboxOrRadio = ['checkbox', 'radio'].includes(type)\n        const fieldChecked = $formFields.find($el => $el.matches(`[name=\"${name}\"]:checked`))\n        const isReqFrom = $field.matches('[data-required-from]')\n        const $reqMore = (isReqFrom ? $formFields.find($el => $el.matches(dataset.requiredFrom)) : null)\n\n        return (\n            isCheckboxOrRadio ? (fieldChecked || null) :\n            (isReqFrom && $reqMore.checked) || (!isReqFrom && value) ? $field : null\n        )\n\n    })\n    .filter($field => $field !== null)\n}\n"],"names":["addClass","$el","cssClasses","arguments","length","undefined","classList","add","split","isNodeList","nodeList","NodeList","prototype","isPrototypeOf","removeClass","remove","isDOMNode","node","Element","customEvents","field","validation","form","destroy","init","submit","group","mergeObjects","out","Array","from","slice","filter","arg","forEach","Object","keys","key","object","isArray","concat","toString","call","push","dispatchCustomEvent","eventName","eventOptions","eventOptionsNew","bubbles","eventObj","CustomEvent","dispatchEvent","fieldsStringSelector","finalizeFormPromise","_ref","fields","result","Promise","resolve","reject","formatMap","dateArray","reverse","getDateAsNumber","dateString","dateFormat","splitChar","string","separator","match","getSplitChar","indexOf","replace","join","getUniqueFields","$nodeList","currentFieldName","currentFieldType","$field","name","type","matches","getFormFields","$form","unique","hidden","file","excludeData","FIELDS_SELECTOR","elements","getJSONobjectFromFieldAttribute","attrName","$customAttr","closest","JSON","parse","getAttribute","mergeValidateFieldDefault","obj","isFieldForChangeEvent","runFunctionsSequence","async","functionsList","data","stopConditionFn","reduce","acc","promiseFn","then","res","dataNew","dataList","serializeObject","constructor","a","k","encodeURIComponent","toCamelCase","all","letter","toUpperCase","options","fieldOptions","beforeValidation","$formFields","isValidValue","value","trim","$checked","checked","find","reqMoreIsChecked","$findReqMore","$findReqFrom","id","required","focusOnRelated","focus","$reqMore","dataset","requiredFrom","_ref2","trimValue","checkDirtyField","$fields","includes","$container","questionContainer","dirty","skipUIfeedback","pending","error","errorEmpty","errorRule","valid","maxFileSize","onValidationCheckAll","preventPasteFields","strictHtmlValidation","validateOnEvents","formOptions","ajaxOptions","cache","credentials","headers","Accept","method","mode","redirect","timeout","url","location","href","ajaxSubmit","beforeSend","ajaxComplete","ajaxError","ajaxPending","ajaxSuccess","getFormData","$filteredFields","trimValues","formData","this","prevObj","isCheckbox","isRadio","isSelect","$checkboxes","$checkedRadio","$selectedOpts","option","selected","keyName","index","list","isLastKeyName","keyNameSplit","arrPos","arrayHasItemAtIndex","arrItemKeyName","isKeyNameArray","endsWith","groups","handleFileUpload","handleSubmit","onInitCheckFilled","validationRules","date","test","email","number","checkbox","$dataChecks","attrValue","checks","checkedLength","isMinOk","isMaxOk","errors","minChecks","maxChecks","equalTo","exactLength","valueLength","minlength","maxlength","MIMEtype","accept","RegExp","filesList","files","exceedMaxFileSize","size","isAcceptedFileType","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","max","maxVal","maxLength","min","minVal","minLength","pattern","radio","$fieldChecked","dataTypeNumber","event","target","fieldValue","stopImmediatePropagation","valueReplaced","formValidationEnd","formjs","formClasses","detail","keypressMaxlength","keyPressed","which","keyCode","allowedKeys","pastePrevent","preventDefault","getFetchMethod","response","get","contentType","headerOpt","ajaxCall","formDataObj","timeoutTimer","isMultipart","body","formDataMultipart","FormData","append","idx","stringify","Headers","controller","AbortController","signal","window","setTimeout","abort","fetch","ok","Error","statusText","catch","message","finally","clearTimeout","disabled","instance","formCssClasses","isAjaxForm","$btn","eventPreventDefault","validateForm","canSubmit","stopExecution","beforeSendData","rfsObject","some","pop","groupValidationEnd","currentGroup","next","isChangeEvent","self","isFieldForChangeEventBoolean","hasOnlyChangeEvent","validateField","$relatedEqualTo","validationEnd","eventDetail","dataFieldOptions","isReqFrom","errorClasses","extraErrorClass","isChecks","checkedElLength","empty","errorClassToRemove","checkFieldValidity","validationErrors","fieldOptionsTemp","dataBeforeValidation","needsValidation","isCheckboxOrRadio","hasSelectedInput","validationMethods","attributes","accList","attr","isAttrValueWithFn","isAttrNameWithFn","validity","accPromise","methodName","accObj","resolveVal","valObj","errorObj","isValid","checkFieldsValidity","fieldToSkip","$fieldsList","fieldsValidity","map","areAllFieldsValid","every","Form","argsL","formIsString","isFormSelector","document","querySelector","tagName","toLowerCase","checkFormEl","cbName","optionType","cbOpt","cbFn","bind","noValidate","addEventListener","useCapture","formStartup","initOptions","validateFilledFields","removeEventListener","useCapturing","$dataFields","element","namedItem","fieldValidity","selector","dataForm","validationEventName","prev","current","finalizeFieldPromise","validateFieldsGroup","$fieldsGroup","groupValidity","isCheckingGroup","finalizeFieldsGroupPromise","$filledFields","fieldChecked","getFilledFields","filledFieldsValidity","$visibleFields","formValidity","isCheckingForm","$groupFields","$uniqueFields","addValidationErrors","errorsObj","addValidationRules","rulesObj","setOptions","optionsObj","version"],"mappings":"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"}