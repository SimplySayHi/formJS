{"version":3,"file":"formjs.min.js","sources":["../src/modules/helpers/addClass.js","../src/modules/helpers/isNodeList.js","../src/modules/helpers/removeClass.js","../src/modules/helpers/isDOMNode.js","../src/modules/helpers/checkFormEl.js","../src/modules/helpers/checkModifiedField.js","../src/modules/helpers/checkTouchedField.js","../src/modules/helpers/customEvents.js","../src/modules/helpers/isPlainObject.js","../src/modules/helpers/mergeObjects.js","../src/modules/helpers/dispatchCustomEvent.js","../src/modules/helpers/excludeSelector.js","../src/modules/helpers/fieldsStringSelector.js","../src/modules/helpers/finalizeFieldPromise.js","../src/modules/helpers/finalizeFieldsGroupPromise.js","../src/modules/helpers/finalizeFormPromise.js","../src/modules/helpers/getDateAsNumber.js","../src/modules/helpers/getSplitChar.js","../src/modules/helpers/getInitialValues.js","../src/modules/helpers/getJSONobjectFromFieldAttribute.js","../src/modules/helpers/getUniqueFields.js","../src/modules/helpers/mergeValidateFieldDefault.js","../src/modules/helpers/mergeValidateFormDefault.js","../src/modules/helpers/isFieldForChangeEvent.js","../src/modules/helpers/runFunctionsSequence.js","../src/modules/helpers/serializeObject.js","../src/modules/helpers/toCamelCase.js","../src/modules/options.js","../src/modules/optionsUtils/beforeValidation.js","../src/modules/helpers/checkDirtyField.js","../src/modules/optionsUtils/getFormData.js","../src/modules/validationRules.js","../src/modules/validationRules/date.js","../src/modules/validationRules/email.js","../src/modules/validationRules/number.js","../src/modules/validationRules/checkbox.js","../src/modules/validationRules/checks.js","../src/modules/validationRules/equalTo.js","../src/modules/validationRules/exactLength.js","../src/modules/validationRules/file.js","../src/modules/validationRules/length.js","../src/modules/validationRules/max.js","../src/modules/validationRules/maxlength.js","../src/modules/validationRules/min.js","../src/modules/validationRules/minlength.js","../src/modules/validationRules/pattern.js","../src/modules/validationRules/radio.js","../src/modules/listenerCallbacks/blurHandler.js","../src/modules/listenerCallbacks/dataTypeNumber.js","../src/modules/listenerCallbacks/formValidationEnd.js","../src/modules/listenerCallbacks/keypressMaxlength.js","../src/modules/listenerCallbacks/pastePrevent.js","../src/modules/ajaxCall.js","../src/modules/listenerCallbacks/submit.js","../src/modules/listenerCallbacks/groupValidationEnd.js","../src/modules/listenerCallbacks/validation.js","../src/modules/listenerCallbacks/validationEnd.js","../src/modules/formStartup.js","../src/modules/checkFieldValidity.js","../src/modules/isValid.js","../src/modules/checkFieldsValidity.js","../src/index.js","../src/modules/destroy.js","../src/modules/helpers/getFilledFields.js"],"sourcesContent":["\nexport const addClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.add( className );\n    });\n}\n","\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList );\n}\n","\nexport const removeClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.remove( className );\n    });\n}\n","\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node );\n}\n","\nimport { isDOMNode } from './isDOMNode';\n\nexport const checkFormEl = form => {\n    let isString = typeof form,\n        isValidNodeSelector = isString === 'string' && isDOMNode(document.querySelector(form)),\n        isFormSelector = isValidNodeSelector && document.querySelector(form).tagName.toLowerCase() === 'form',\n        obj = {\n            result: isDOMNode(form) || isFormSelector,\n            $el: (isString === 'string' ? document.querySelector(form) : form)\n        };\n\n    return obj;\n}\n","\nimport { addClass } from './addClass';\nimport { removeClass } from './removeClass';\n\nconst isValueModified = ( { form, tagName, type, name, value, multiple, options }, initValues ) => {\n    const isRadio = type === 'radio';\n    const isCheckbox = type === 'checkbox';\n    const isSelect = tagName === 'SELECT';\n    const isMultiAnswer = (isCheckbox && form.querySelectorAll(`[name=\"${name}\"]`).length > 1) || (isSelect && multiple);\n\n    if( isMultiAnswer ){\n        const multiValues = isCheckbox ? \n                            [...form.querySelectorAll(`[name=\"${name}\"]:checked`)].map($el => $el.value) : \n                            [...options].filter(opt => opt.selected);\n        \n        const checkValues = initValues[name].length !== multiValues.length || \n                            multiValues.filter(val => initValues[name].includes(val)).length !== initValues[name].length;\n\n        return checkValues;\n    } else if( isRadio ){\n        const $checkedRadio = form.querySelector(`[name=\"${name}\"]:checked`);\n\n        value = null;\n\n        if( $checkedRadio ){\n            value = $checkedRadio.value;\n        }\n    }\n\n    return value !== initValues[name];\n}\n\nexport const checkModifiedField = ( $field, initialValues, fieldOptions ) => {\n\n    const $container = $field.closest( fieldOptions.questionContainer ) || $field;\n    const isModified = isValueModified( $field, initialValues );\n    \n    if( isModified ){\n        addClass( $container, fieldOptions.cssClasses.modified );\n    } else {\n        removeClass( $container, fieldOptions.cssClasses.modified );\n    }\n    \n}\n","\nimport { addClass } from './addClass';\n\nexport const checkTouchedField = ( $field, fieldOptions ) => {\n\n    const $container = $field.closest( fieldOptions.questionContainer ) || $field;\n    addClass( $container, fieldOptions.cssClasses.touched );\n    \n}\n","\nexport const customEvents = {\n    field: {\n        validation: 'fjs.field:validation'\n    },\n    form: {\n        destroy:    'fjs.form:destroy',\n        init:       'fjs.form:init',\n        submit:     'fjs.form:submit',\n        validation: 'fjs.form:validation'\n    },\n    group: {\n        validation: 'fjs.group:validation'\n    }\n}\n","\nexport const isPlainObject = object => {\n    return Object.prototype.toString.call( object ) === '[object Object]';\n}\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const mergeObjects = function( out = {} ){\n    Array.from(arguments).slice(1).filter(arg => !!arg).forEach(arg => {\n        Object.keys(arg).forEach(key => {\n            if( Array.isArray(arg[key]) ){\n                out[key] = (out[key] || []).concat( arg[key].slice(0) );\n            } else if( isPlainObject(arg[key]) ){\n                out[key] = mergeObjects((out[key] || {}), arg[key]);\n            } else {\n                // * STRING | NUMBER | BOOLEAN | FUNCTION\n                if( Array.isArray(out[key]) ){\n                    // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                    out[key].push(arg[key]);\n                } else {\n                    out[key] = arg[key];\n                }\n            }\n        });\n    });\n\n    return out;\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const dispatchCustomEvent = ( elem, eventName, eventOptions ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions);\n    const eventObj = new CustomEvent(eventName, eventOptions);\n    elem.dispatchEvent( eventObj );\n}\n","\nexport const excludeSelector = ':not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"file\"]):not([data-exclude-data])'\n","\nexport const fieldsStringSelector = 'input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"hidden\"]), select, textarea'\n","\nexport const finalizeFieldPromise = ({errors, result}) => {\n    if( result ){\n        return Promise.resolve();\n    }\n    return Promise.reject(errors);\n}\n","\nexport const finalizeFieldsGroupPromise = ({canSubmit, fields, group, result}) => {\n    if( result ){\n        return Promise.resolve({canSubmit, fields, group});\n    }\n    return Promise.reject({fields, group});\n}\n","\nexport const finalizeFormPromise = ({fields, result}) => {\n    if( result ){\n        return Promise.resolve(fields);\n    }\n    return Promise.reject(fields);\n}\n","\nimport { getSplitChar } from './getSplitChar';\n\nconst formatMap = {\n    'YYYY-MM-DD': function(dateArray){\n        return dateArray;\n    },\n    'MM-DD-YYYY': function(dateArray){\n        return [dateArray[2], dateArray[0], dateArray[1]];\n    },\n    'DD-MM-YYYY': function(dateArray){\n        return dateArray.reverse();\n    }\n};\n\nexport const getDateAsNumber = ( dateString, dateFormat ) => {\n    dateFormat = dateFormat || 'YYYY-MM-DD';\n    const splitChar = getSplitChar(dateString);\n\n    if( dateFormat.indexOf(splitChar) < 0 ){\n        return;\n    }\n\n    dateFormat = dateFormat.replace(/[^YMD]/g, '-');\n    dateString = dateString.split(splitChar);\n    dateString = formatMap[dateFormat](dateString).join('');\n    \n    return dateString;\n}\n","\nexport const getSplitChar = string => {\n    // MATCH ANY NON-DIGIT CHAR\n    const separator = string.match(/\\D/);\n    return (separator && separator.length > 0) ? separator[0] : null;\n}\n","\nimport { excludeSelector } from './excludeSelector'\n\nexport const getInitialValues = $form => {\n    const $fields = [...$form.querySelectorAll('input, select, textarea')].filter($el => $el.matches(excludeSelector))\n\n    const data = $fields.reduce((accData, { tagName, type, name, value, checked, multiple, options }) => {\n        const isCheckboxOrRadio = ['checkbox', 'radio'].includes(type)\n        const isMultiCheckbox = type === 'checkbox' && $form.querySelectorAll(`[name=\"${name}\"]`).length > 1\n\n        if( typeof accData[name] !== 'undefined' && isCheckboxOrRadio && !checked ){\n            return accData\n        }\n        \n        if( typeof accData[name] === 'undefined' ){\n            if( isCheckboxOrRadio && !checked ){\n                accData[name] = isMultiCheckbox ? [] : null\n                return accData\n            }\n\n            const isMultiSelect = tagName === 'SELECT' && multiple\n            const multiSelectValues = options && [...options].filter(opt => opt.selected)\n            accData[name] = isMultiSelect ? multiSelectValues : (isMultiCheckbox ? [value] : value)\n        } else if( isMultiCheckbox ){\n            accData[name].push(value)\n        } else {\n            accData[name] = value\n        }\n\n        return accData\n    }, {})\n\n    return data\n}\n","\nexport const getJSONobjectFromFieldAttribute = ( fieldEl, attrName ) => {\n    const customAttrEl = fieldEl.closest('['+ attrName +']');\n    return (customAttrEl && JSON.parse(customAttrEl.getAttribute(attrName))) || {};\n}\n","\nexport const getUniqueFields = $nodeList => {\n\n    let currentFieldName = '',\n        currentFieldType = '';\n\n    return Array.from( $nodeList ).filter($field => {\n        const name = $field.name,\n              type = $field.type;\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false;\n        }\n        \n        if( !$field.matches('[data-required-from]') ){\n            currentFieldName = name;\n            currentFieldType = type;\n        }\n        return true;\n    });\n    \n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const mergeValidateFieldDefault = obj => {\n    return mergeObjects({}, { result: false, $field: null }, obj);\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const mergeValidateFormDefault = obj => {\n    return mergeObjects({}, { result: true, fields: [] }, obj);\n}\n","\nexport const isFieldForChangeEvent = $field => {\n    return $field.matches('select, [type=\"radio\"], [type=\"checkbox\"], [type=\"file\"]');\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const runFunctionsSequence = ( { functionsList = [], data = {}, stopConditionFn = () => false } = {} ) => {\n    return functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1]);\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res);\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result);\n                    return res;\n                });\n        });\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList);\n}\n","\nexport const serializeObject = obj => {\n    const objToString = (\n            (obj && typeof obj === 'object' && obj.constructor === Object) ? \n            Object.keys(obj)\n                .reduce((a,k) => {\n                    a.push(k+'='+encodeURIComponent(obj[k]));\n                    return a\n                },[]).join('&') : \n            obj\n    );\n    return objToString;\n}\n","\nexport const toCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase(); });\n}\n","\nimport { beforeValidation } from './optionsUtils/beforeValidation';\nimport { getFormData } from './optionsUtils/getFormData';\n\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [beforeValidation],\n        cssClasses: {\n            dirty:              'is-dirty',\n            error:              'has-error',\n            errorEmpty:         'has-error-empty',\n            errorRule:          'has-error-rule',\n            modified:           'is-modified',\n            pending:            'is-pending',\n            touched:            'is-touched',\n            valid:              'is-valid'\n        },\n        focusOnRelated:         true,\n        maxFileSize:            10,\n        onValidationCheckAll:   false,\n        preventPasteFields:     '[type=\"password\"], [data-equal-to]',\n        questionContainer:      '[data-formjs-question]',\n        skipUIfeedback:         false,\n        strictHtmlValidation:   true,\n        trimValue:              false,\n        validateOnEvents:       'input change'\n    },\n\n    formOptions: {\n        ajaxOptions:            {\n            cache:              'no-store',\n            credentials:        'same-origin',\n            headers: {\n                                'Content-Type': 'application/json',\n                                'Accept':       'application/json'\n            },\n            method:             'POST',\n            mode:               'same-origin',\n            redirect:           'follow',\n            timeout:            0,\n            url:                location.href\n        },\n        ajaxSubmit:             true,\n        beforeSend:             [],\n        cssClasses: {\n            ajaxComplete:       'ajax-complete',\n            ajaxError:          'ajax-error',\n            ajaxPending:        'ajax-pending',\n            ajaxSuccess:        'ajax-success',\n            error:              'form-error',\n            pending:            'form-pending',\n            submit:             'is-submitting',\n            valid:              'is-valid'\n        },\n        getFormData:            getFormData,\n        groups:                 [],\n        handleFileUpload:       true,\n        handleSubmit:           true,\n        onInitCheckFilled:      true\n    }\n    \n}\n","\nimport { addClass, checkDirtyField, checkModifiedField, isFieldForChangeEvent } from '../helpers';\n\nexport const beforeValidation = function beforeValidationDefault ( { $field, fieldOptions } ) {\n\n    const initialValues = $field.form.formjs._.initialValues\n\n    if( fieldOptions.trimValue && !isFieldForChangeEvent($field) ){\n        $field.value = $field.value.trim();\n    }\n\n    checkDirtyField( $field, fieldOptions );\n    checkModifiedField( $field, initialValues, fieldOptions );\n\n    if( !fieldOptions.skipUIfeedback ){\n        addClass( $field.closest( fieldOptions.questionContainer ), fieldOptions.cssClasses.pending );\n    }\n\n}\n","\nimport { addClass } from './addClass';\nimport { isNodeList } from './isNodeList';\nimport { removeClass } from './removeClass';\n\nexport const checkDirtyField = ( $fields, fieldOptions ) => {\n\n    $fields = isNodeList($fields) ? Array.from( $fields ) : [$fields];\n    $fields.forEach($field => {\n        if( $field.type !== 'checkbox' && $field.type !== 'radio' ){\n            const $container = $field.closest( fieldOptions.questionContainer ) || $field;\n            if( $field.value ){\n                addClass( $container, fieldOptions.cssClasses.dirty );\n            } else {\n                removeClass( $container, fieldOptions.cssClasses.dirty );\n            }\n        }\n    });\n    \n}\n","\nexport const getFormData = function getFormDataDefault( $filteredFields, trimValues ){\n\n    const formData = {};\n    const $form = this.$form;\n    let prevObj = formData;\n  \n    $filteredFields.forEach($field => {\n        const isCheckbox = $field.type === \"checkbox\";\n        const isRadio = $field.type === \"radio\";\n        const isSelect = $field.matches(\"select\");\n        const name = $field.name;\n        let value = trimValues ? $field.value.trim() : $field.value;\n  \n        if( isCheckbox ){\n\n            value = $field.checked;\n            let $checkboxes = Array.from( $form.querySelectorAll('[name=\"' + name + '\"]') );\n            if( $checkboxes.length > 1 ){\n                value = [];\n                let $checked = $checkboxes.filter((field) => field.checked);\n                $checked.forEach($field => {\n                    value.push($field.value);\n                });\n            }\n\n        } else if( isRadio ){\n\n            const $checkedRadio = $form.querySelector('[name=\"' + name + '\"]:checked');\n            value = $checkedRadio === null ? null : $checkedRadio.value;\n\n        } else if( isSelect ){\n\n            const $selectedOpts = Array.from($field.options).filter(option => option.selected);\n            if( $selectedOpts.length > 1 ){\n                value = [];\n                $selectedOpts.forEach($field => { \n                    value.push($field.value); \n                });\n            }\n        }\n  \n        const nameSplit = name.split(\".\");\n        nameSplit.forEach((keyName, index, list) => {\n            const isLastKeyName = index + 1 === list.length;\n  \n            if( Array.isArray(prevObj) ){\n                const keyNameSplit = keyName.split(\"___\");\n                const arrPos = keyNameSplit[0] - 1;\n                const arrayHasItemAtIndex = typeof prevObj[arrPos] !== \"undefined\";\n                const arrItemKeyName = keyNameSplit[1];\n  \n                if( !arrayHasItemAtIndex ){\n                    prevObj.push({});\n                }\n  \n                keyName = arrItemKeyName;\n\n                if( isLastKeyName ){\n                    prevObj[arrPos][keyName] = value;\n                } else if( typeof prevObj[arrPos][keyName] === 'undefined' ) {\n                    prevObj[arrPos][keyName] = {};\n                }\n                \n                if( !isLastKeyName ){\n                    prevObj = prevObj[arrPos][keyName];\n                    return;\n                }\n            } else {\n                const isKeyNameArray = keyName.endsWith(\"[]\");\n                keyName = keyName.replace(\"[]\", \"\");\n  \n                if( isLastKeyName ){\n                    prevObj[keyName] = value;\n                } else if( typeof prevObj[keyName] === \"undefined\" ){\n                    if( isKeyNameArray ){\n                        prevObj[keyName] = [];\n                    } else {\n                        prevObj[keyName] = {};\n                    }\n                }\n            }\n  \n            prevObj = isLastKeyName ? formData : prevObj[keyName];\n        });\n    });\n  \n    return formData;\n\n}\n","\nimport { date }         from './validationRules/date';\nimport { email }        from './validationRules/email';\nimport { number }       from './validationRules/number';\n\nimport { checkbox }     from './validationRules/checkbox';\nimport { equalTo }      from './validationRules/equalTo';\nimport { exactLength }  from './validationRules/exactLength';\nimport { file }         from './validationRules/file';\nimport { length }       from './validationRules/length';\nimport { max }          from './validationRules/max';\nimport { maxlength }    from './validationRules/maxlength';\nimport { min }          from './validationRules/min';\nimport { minlength }    from './validationRules/minlength';\nimport { pattern }      from './validationRules/pattern';\nimport { radio }        from './validationRules/radio';\n\nexport const validationRules = {\n    date,\n    email,\n    number,\n\n    checkbox,\n    equalTo,\n    exactLength,\n    file,\n    length,\n    max,\n    maxlength,\n    min,\n    minlength,\n    pattern,\n    radio\n}\n","\n/*\n    DATE AS ISO 8601 DATE FORMAT:\n    YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n*/\n\nexport const date = function( string ){\n    return {\n        result: /^((((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13578]|1[02])[ \\/\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13456789]|1[012])[ \\/\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.]02[ \\/\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ \\/\\-.]02[ \\/\\-.]29))$/g.test( string )\n    };\n}\n","\n// https://regex101.com/r/cdlyJy/3\n\nexport const email = function( string ){\n    return {\n        result: /^[a-zA-Z_-]([\\w.-]?[a-zA-Z0-9])*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?){2,})+$/.test( string )\n    };\n}\n","\n/*\n    ALL NUMBERS ( INTEGERS AND FLOATING )\n    VALID NUMBERS: 123 | 123.456 | .123\n*/\n\nexport const number = function( string ){\n    return {\n        result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n    };\n}","\nimport { checks } from './checks';\n\nexport const checkbox = function( value, $field ){\n    const $dataChecks = $field.closest('form').querySelector('[name=\"' + $field.name + '\"][data-checks]');\n    return $dataChecks ? checks($dataChecks) : { result: $field.checked };\n}\n","\nexport const checks = function( $field ){\n    const attrValue = JSON.parse( $field.getAttribute('data-checks') ),\n          checkedLength = $field.closest('form').querySelectorAll('[name=\"' + $field.name + '\"]:checked').length,\n          isMinOk = checkedLength >= attrValue[0],\n          isMaxOk = checkedLength <= attrValue[1],\n          obj = { result: isMinOk && isMaxOk };\n\n    if( !obj.result ){\n        obj.errors = { checks: true };\n        if( !isMinOk ){ obj.errors.minChecks = true; }\n        if( !isMaxOk ){ obj.errors.maxChecks = true; }\n    }\n\n    return obj;\n}\n","\nexport const equalTo = function( value, $field ){\n    const $checkFrom = $field.closest('form').querySelector( '[name=\"' + $field.getAttribute('data-equal-to') + '\"]' );\n    return { result: value === $checkFrom.value };\n}\n","\nexport const exactLength = function( value, $field ){\n    const valueLength = value.length,\n          exactLength = $field.getAttribute('data-exact-length') * 1,\n          obj = { result: valueLength === exactLength };\n\n    if( !obj.result ){\n        obj.errors = {};\n        if( valueLength < exactLength ){ obj.errors.minlength = true; }\n        else { obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nexport const file = function( value, $field, fieldOptions ){\n    const maxFileSize = ($field.getAttribute('data-max-file-size') || fieldOptions.maxFileSize) * 1,\n          MIMEtype = $field.accept ? new RegExp($field.accept.replace( '*', '[^\\\\/,]+' )) : null,\n          filesList = Array.from($field.files),\n          obj = { result: true };\n\n    filesList.forEach(file => {\n        const exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize,\n              isAcceptedFileType = MIMEtype !== null ? MIMEtype.test(file.type) : true;\n\n        if( exceedMaxFileSize || !isAcceptedFileType ){\n            obj.result = false;\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {};\n            }\n            if( exceedMaxFileSize ){ obj.errors.maxFileSize = true; }\n            if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true; }\n\n        }\n    });\n\n    return obj;\n}\n","\nexport const length = function( value, $field ){\n    const valueL = value.length,\n          attrValue = JSON.parse( $field.getAttribute('data-length') ),\n          isMinlengthOk = valueL >= attrValue[0],\n          isMaxlengthOk = valueL <= attrValue[1],\n          obj = { result: isMinlengthOk && isMaxlengthOk };\n\n    if( !obj.result ){\n        obj.errors = {};\n        if( !isMinlengthOk ){ obj.errors.minlength = true; }\n        if( !isMaxlengthOk ){ obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const max = function( value, $field ){\n    let maxVal = $field.max;\n    const dateFormat = $field.getAttribute('data-date-format');\n    \n    if( $field.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat );\n        maxVal = maxVal.split('-').join('');\n    }\n\n    value = value * 1;\n    maxVal = maxVal * 1;\n    \n    return { result: value <= maxVal };\n}\n","\nexport const maxlength = function( value, $field ){\n    return { result: value.length <= $field.maxLength * 1 };\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const min = function( value, $field ){\n    let minVal = $field.min;\n    const dateFormat = $field.getAttribute('data-date-format');\n    \n    if( $field.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat );\n        minVal = minVal.split('-').join('');\n    }\n\n    value = value * 1;\n    minVal = minVal * 1;\n    \n    return { result: value >= minVal };\n}\n","\nexport const minlength = function( value, $field ){\n    return { result: value.length >= $field.minLength * 1 };\n}\n","\nexport const pattern = function( value, $field ){\n    return { result: new RegExp($field.pattern).test(value) };\n}\n","\nexport const radio = function( value, $field ){\n    const $fieldChecked = $field.closest('form').querySelector( '[name=\"'+ $field.name +'\"]:checked' ),\n          isValid = $fieldChecked !== null && $fieldChecked.value.trim().length > 0;\n\n    return { result: isValid };\n}\n","\nimport { checkTouchedField } from '../helpers';\n\nexport const blurHandler = function( event ){\n\n    const $field = event.target;\n    const { fieldOptions } = $field.form.formjs.options;\n\n    checkTouchedField( $field, fieldOptions );\n\n}\n","\nexport const dataTypeNumber = function( event ){\n\n    const $field = event.target;\n    \n    if( $field.matches('[data-type=\"number\"]') ){\n        let fieldValue = $field.value;\n        const hasInvalidChars = /[^\\d.,+\\-]/.test(fieldValue);\n        \n        if( hasInvalidChars ){\n            event.stopImmediatePropagation();\n            let valueReplaced = fieldValue.replace(/[^\\d.,+\\-]/g, '');\n            $field.value = valueReplaced;\n        }\n    }\n\n}\n","\nimport { addClass, checkTouchedField, removeClass } from '../helpers';\n\nexport const formValidationEnd = function( event ){\n\n    const { result, fields } = event.detail;\n    const $form = event.target;\n    const { fieldOptions, formOptions: { cssClasses } } = $form.formjs.options;\n\n    if( fields[0].isCheckingForm ){\n        fields.forEach(({ $field }) => {\n            checkTouchedField( $field, fieldOptions );\n        });\n    }\n\n    if( !fieldOptions.skipUIfeedback ){\n        const feedbackClassesKey = result ? 'valid' : 'error';\n        removeClass( $form, (`${cssClasses.pending} ${cssClasses.valid} ${cssClasses.error}`) );\n        addClass( $form, cssClasses[feedbackClassesKey] );\n    }\n    \n}\n","\nexport const keypressMaxlength = function( event ){\n\n    const $field = event.target;\n    \n    if( $field.matches( '[maxlength]' ) ){\n        const maxLength = $field.maxLength * 1,\n              keyPressed = event.which || event.keyCode,\n              allowedKeys = [8, 37, 38, 39, 46];\n\n        if( $field.value.length >= maxLength && allowedKeys.indexOf(keyPressed) === -1 ){\n            return false;\n        }\n    }\n\n}\n","\nexport const pastePrevent = function( event ){\n\n    const $field = event.target;\n    const fieldOptions = $field.closest('form').formjs.options.fieldOptions;\n\n    if( $field.matches( fieldOptions.preventPasteFields ) ){     \n        event.preventDefault();\n    }\n\n}\n","\nimport { addClass, mergeObjects, removeClass, serializeObject } from './helpers';\n\nconst getFetchMethod = (response, options) => {\n    const accept = options.headers.get('Accept'),\n          contentType = response.headers.get('Content-Type'),\n          headerOpt = accept || contentType || '';\n\n    if( headerOpt.indexOf('application/json') > -1 || headerOpt === '' ){\n        return 'json';\n    } else if( headerOpt.indexOf('text/') > -1 ){\n        return 'text';\n    } else {\n        return 'blob';\n    }\n};\n\nexport function ajaxCall( $form, formDataObj, options ){\n\n    let timeoutTimer;\n    const ajaxOptions = mergeObjects( {}, options.formOptions.ajaxOptions ),\n          isMultipart = ajaxOptions.headers['Content-Type'] === 'multipart/form-data';\n\n    ajaxOptions.body = formDataObj;\n    \n    // POST A FormData OBJECT ( multipart )\n    if( isMultipart && options.formOptions.handleFileUpload ){\n        let formDataMultipart = new FormData();\n        \n        for(let key in ajaxOptions.body){\n            formDataMultipart.append( key, ajaxOptions.body[key] );\n        }\n        \n        Array.from( $form.querySelectorAll('[type=\"file\"]') ).forEach($field => {\n            Array.from($field.files).forEach((file, idx) => {\n                const name = $field.name+'['+ idx +']';\n                formDataMultipart.append( name, file, file.name );\n            });\n        });\n        \n        ajaxOptions.body = formDataMultipart;\n    }\n\n    if( ajaxOptions.method === 'GET' ){\n\n        // FETCH WITH \"GET\" METHOD CAN'T HAVE \"body\". SO IT IS APPENDED TO THE URL\n        ajaxOptions.url += ( /\\?/.test(ajaxOptions.url) ? '&' : '?' ) + serializeObject( ajaxOptions.body );\n        delete ajaxOptions.body;\n\n    } else {\n\n        if( ajaxOptions.headers['Content-Type'].indexOf('application/x-www-form-urlencoded') > -1 ){\n            // POST A NORMAL FORM\n            ajaxOptions.body = serializeObject( ajaxOptions.body );\n        } else if( !isMultipart ){\n            // POST A JSON STRING\n            ajaxOptions.body = JSON.stringify(ajaxOptions.body);\n        }\n\n    }\n\n    ajaxOptions.headers = new Headers( ajaxOptions.headers );\n\n    if ( ajaxOptions.timeout > 0 ) {\n        const controller = new AbortController(),\n              signal = controller.signal;\n\n        ajaxOptions.signal = signal;\n        timeoutTimer = window.setTimeout(() => {\n            controller.abort();\n        }, ajaxOptions.timeout);\n    }\n\n    return fetch(ajaxOptions.url, ajaxOptions)\n        .then(response => {\n            if( !response.ok ){\n                throw new Error(response.statusText);\n            }\n            const fetchMethod = getFetchMethod(response, ajaxOptions);\n            return response[fetchMethod]();\n        })\n        .then(data => {\n            addClass( $form, options.formOptions.cssClasses.ajaxSuccess );\n            return data;\n        })\n        .catch(error => {\n            addClass( $form, options.formOptions.cssClasses.ajaxError );\n            throw new Error(error.message);\n        })\n        .finally(() => {\n            if( timeoutTimer ){\n                window.clearTimeout( timeoutTimer );\n            }\n            removeClass( $form, options.formOptions.cssClasses.submit + ' ' + options.formOptions.cssClasses.ajaxPending );\n            addClass( $form, options.formOptions.cssClasses.ajaxComplete );\n            $form.querySelector('[type=\"submit\"]').disabled = false;\n        });\n\n}\n","\nimport { addClass, customEvents, dispatchCustomEvent, removeClass, runFunctionsSequence } from '../helpers';\nimport { ajaxCall } from '../ajaxCall';\n\nexport function submit( event ){\n\n    const $form = event.target,\n          instance = $form.formjs,\n          options = instance.options,\n          formCssClasses = options.formOptions.cssClasses,\n          isAjaxForm = options.formOptions.ajaxSubmit,\n          $btn = $form.querySelector('[type=\"submit\"]'),\n          eventPreventDefault = ( enableBtn = true ) => {\n              if( $btn && enableBtn ){ $btn.disabled = false; }\n              if( event ){ event.preventDefault(); }\n          };\n\n    if( isAjaxForm ){\n        eventPreventDefault(false);\n    }\n\n    if( $btn ){\n        if( $btn.disabled ){\n            eventPreventDefault(false);\n            return false;\n        }\n        $btn.disabled = true;\n    }\n\n    removeClass( $form, (formCssClasses.ajaxComplete + ' ' + formCssClasses.ajaxError + ' ' + formCssClasses.ajaxSuccess) );\n\n    instance.validateForm()\n        .then(data => {\n            \n            const hasGroup = typeof data.group !== 'undefined';\n\n            if( hasGroup && !data.canSubmit ){\n                return [{ stopExecution: true }]\n            }\n\n            const beforeSendData = {\n                stopExecution: false,\n                formData: isAjaxForm ? instance.getFormData() : null\n            };\n\n            const rfsObject = {\n                  functionsList: options.formOptions.beforeSend,\n                  data: beforeSendData,\n                  stopConditionFn: function(data){ return data.stopExecution; }\n            };\n            return runFunctionsSequence(rfsObject);\n\n        }).then(dataList => {\n\n            if( dataList.some(({stopExecution}) => stopExecution) ){\n                eventPreventDefault();\n                return false;\n            }\n\n            addClass( $form, formCssClasses.submit );\n            \n            if( isAjaxForm ){\n                const formData = dataList.pop().formData;\n                addClass( $form, formCssClasses.ajaxPending );\n                dispatchCustomEvent( $form, customEvents.form.submit, { detail: ajaxCall( $form, formData, options ) } );\n            }\n\n        })\n        .catch(fields => {\n            eventPreventDefault();\n            removeClass( $form, formCssClasses.submit );\n        });\n    \n}\n","\nimport { checkTouchedField, removeClass } from '../helpers';\n\nexport const groupValidationEnd = function( event ){\n\n    const detail = event.detail;\n    const { fieldOptions, formOptions } = event.target.formjs.options;\n\n    if( detail.result ){\n        event.target.formjs.currentGroup = detail.group.next;\n    }\n\n    if( detail.fields[0].isCheckingGroup ){\n        detail.fields.forEach(({ $field }) => {\n            checkTouchedField( $field, fieldOptions );\n        });\n    }\n\n    if( !fieldOptions.skipUIfeedback ){\n        removeClass( $form, formOptions.cssClasses.pending );\n    }\n    \n}\n","\nimport { fieldsStringSelector, isFieldForChangeEvent } from '../helpers';\n\nexport const validation = function( event ){\n\n    const isChangeEvent = event.type === 'change',\n          $field = event.target,\n          self = $field.closest('form').formjs;\n\n    if( $field.matches( fieldsStringSelector ) ){\n        const isFieldForChangeEventBoolean = isFieldForChangeEvent($field);\n        const hasOnlyChangeEvent = self.options.fieldOptions.validateOnEvents === 'change';\n        \n        if(\n            (isFieldForChangeEventBoolean && isChangeEvent) ||\n            (!isFieldForChangeEventBoolean && (!isChangeEvent || hasOnlyChangeEvent))\n        ){\n            \n            self.validateField( $field )\n                .then(() => {\n                    const type = $field.type;\n                    const $relatedEqualTo = $field.closest('form').querySelector('[data-equal-to=\"'+ $field.name +'\"]');\n\n                    if(\n                        // FIELD IS ( required OR data-validate-if-filled ) AND RELATED FIELD data-equal-to HAS A VALUE\n                        ($field.required || $field.matches('[data-validate-if-filled]')) && \n                        !(type === 'checkbox' || type === 'radio') && \n                        $relatedEqualTo && $relatedEqualTo.value.trim() !== ''\n                    ){\n                        self.validateField( $relatedEqualTo ).catch(errors => {});\n                    }\n                })\n                .catch(errors => {});\n\n        }\n    }\n    \n}\n","\nimport { addClass, getJSONobjectFromFieldAttribute, removeClass, mergeObjects } from '../helpers';\n\nexport const validationEnd = function( event ){\n\n    const { $field, result, errors } = event.detail,\n          dataFieldOptions = getJSONobjectFromFieldAttribute( $field, 'data-field-options' ),\n          { cssClasses, questionContainer, skipUIfeedback } = mergeObjects({}, $field.form.formjs.options.fieldOptions, dataFieldOptions),\n          $container = $field.closest( questionContainer ),\n          isReqFrom = $field.matches('[data-required-from]'),\n          $reqMore = document.querySelector( $field.getAttribute('data-required-from') );\n\n    if( $container && !skipUIfeedback ){\n        const formClasses = Object.values($field.form.formjs.options.formOptions.cssClasses)\n                                .reduce((accString, cssClass) => {\n                                    return `${accString} ${cssClass}`\n                                }, '').trim();\n        removeClass( $field.form, formClasses );\n        removeClass( $container, cssClasses.pending );\n\n        if( result ){\n\n            if( !isReqFrom || (isReqFrom && $reqMore.checked) ){\n                // IF FIELD IS VALID\n                const errorClasses = cssClasses.error + ' ' + cssClasses.errorEmpty + ' ' + cssClasses.errorRule;\n                removeClass( $container, errorClasses );\n                addClass( $container, cssClasses.valid );\n            }\n\n        } else {\n\n            // IF FIELD IS NOT VALID\n            let extraErrorClass = cssClasses.errorRule;\n\n            // HANDLE CASE OF FIELD data-checks\n            const isChecks = $field.matches('[data-checks]'),\n                  checkedElLength = (isChecks ? $container.querySelectorAll('[name=\"' + $field.name + '\"]:checked').length : 0);\n\n            if( (!isChecks && (errors && errors.empty)) || (isChecks && checkedElLength === 0) ){\n                extraErrorClass = cssClasses.errorEmpty;\n            }\n\n            let errorClasses = cssClasses.error + ' ' + extraErrorClass,\n                errorClassToRemove = cssClasses.errorEmpty + ' ' + cssClasses.errorRule;\n            removeClass( $container, cssClasses.valid + ' ' + errorClassToRemove );\n            addClass( $container, errorClasses );\n\n        }\n    }\n\n}\n","\nimport { customEvents } from './helpers';\nimport { \n    blurHandler,\n    dataTypeNumber,\n    formValidationEnd,\n    groupValidationEnd,\n    keypressMaxlength,\n    pastePrevent,\n    submit,\n    validation, \n    validationEnd \n} from './listenerCallbacks';\n\nexport function formStartup( $form, options ){\n\n    $form.noValidate = true;\n\n    const fieldOptions = options.fieldOptions,\n          formOptions = options.formOptions;\n        \n    // VALIDATION WITH ATTRIBUTES LIKE HTML ONES ( ALSO FOR BUG FIXING, EG: maxlength IN ANDROID )\n    if( fieldOptions.strictHtmlValidation ){\n        \n        // maxlength\n        // MAXLENGTH IS BUGGY IN ANDROID BROWSERS\n        $form.addEventListener('keypress', keypressMaxlength, false);\n\n        // data-type=\"number\"\n        // SINCE VALIDATING type=\"number\" WITH NON NUMERIC CHARS WILL RETURN EMPTY STRING IN SOME BROWSERS ( EG: FIREFOX )\n        $form.addEventListener('input', dataTypeNumber, false);\n        \n    }\n    \n    if( fieldOptions.preventPasteFields && $form.querySelectorAll( fieldOptions.preventPasteFields ).length ){\n        // INIT EVENT LISTENER FOR \"PASTE\" EVENT TO PREVENT IT ON SPECIFIED FIELDS\n        $form.addEventListener('paste', pastePrevent, false);\n    }\n\n    $form.addEventListener('blur', blurHandler, true);\n\n    // INIT EVENTS LISTENER ( AS IN fieldOptions )\n    fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n        const useCapture = /^(blur|focus)$/.test(eventName);\n        $form.addEventListener(eventName, validation, useCapture);\n    });\n\n    $form.addEventListener(customEvents.field.validation, validationEnd, false);\n    if( formOptions.groups.length > 0 ){\n        $form.addEventListener(customEvents.group.validation, groupValidationEnd, false);\n    }\n    $form.addEventListener(customEvents.form.validation, formValidationEnd, false);\n    \n    // HANDLE FORM SUBMIT\n    if( formOptions.handleSubmit ){\n        // INIT FORM SUBMIT ( DEFAULT AND AJAX )\n        $form.addEventListener('submit', submit);\n\n        if( formOptions.ajaxSubmit ){\n            if( $form.getAttribute('enctype') ){\n                formOptions.ajaxOptions.headers['Content-Type'] = $form.getAttribute('enctype');\n            }\n\n            if( $form.getAttribute('method') ){\n                formOptions.ajaxOptions.method = $form.getAttribute('method').toUpperCase();\n            }\n\n            if( $form.getAttribute('action') ){\n                formOptions.ajaxOptions.url = $form.getAttribute('action');\n            }\n        }\n    }\n\n}\n","\nimport {    getJSONobjectFromFieldAttribute,\n            isDOMNode,\n            mergeObjects,\n            mergeValidateFieldDefault,\n            runFunctionsSequence\n        }           from './helpers';\nimport { isValid }  from './isValid';\n\nexport function checkFieldValidity( $field, fieldOptions, validationRules, validationErrors ){\n\n    if( !isDOMNode($field) ){\n        const obj = mergeValidateFieldDefault({$field});\n        return Promise.resolve(obj);\n    }\n\n    const $form = $field.closest('form'),\n          isValidValue = $field.value.trim().length > 0,\n          dataFieldOptions = getJSONobjectFromFieldAttribute( $field, 'data-field-options' );\n\n    fieldOptions = mergeObjects( fieldOptions, dataFieldOptions );\n\n    // HANDLE FIELD data-required-from WHEN CHANGING ITS RELATED RADIO\n    if( $field.type === 'radio' ){\n        const $checked = $field.checked ? $field : $form.querySelector('[name=\"'+ $field.name +'\"]:checked'),\n              reqMoreIsChecked = $checked && $checked.matches('[data-require-more]'),\n              $findReqMore = reqMoreIsChecked ? $checked : $form.querySelector('[data-require-more][name=\"'+ $field.name +'\"]'),\n              $findReqFrom = $findReqMore ? $form.querySelector('[data-required-from=\"#'+ $findReqMore.id +'\"]') : null;\n        \n        if( $checked && $findReqFrom ){\n            $findReqFrom.required = $findReqMore.required && $findReqMore.checked;\n            if( !reqMoreIsChecked ){\n                $findReqFrom.value = '';\n            } else if( fieldOptions.focusOnRelated ) {\n                $findReqFrom.focus();\n            }\n        }\n    }\n\n    // HANDLE FIELD data-require-more & data-required-from WHEN *-from IT'S FILLED\n    if( $field.matches('[data-required-from]') && isValidValue ){\n        const $reqMore = $form.querySelector( $field.getAttribute('data-required-from') );\n        $reqMore.checked = true;\n        $field.required = $reqMore.required;\n    }\n\n    const needsValidation = $field.required || ($field.matches('[data-validate-if-filled]') && isValidValue);\n\n    return runFunctionsSequence({\n            functionsList: fieldOptions.beforeValidation,\n            data: { $field, fieldOptions }\n        })\n        .then(data => {\n            const dataObj = data.pop();\n            return new Promise(resolve => {\n                if( !needsValidation ){\n                    dataObj.result = true;\n                }\n                resolve( needsValidation ? isValid($field, fieldOptions, validationRules, validationErrors) : dataObj );\n            });\n        });\n\n}\n","\nimport { mergeValidateFieldDefault, mergeObjects, toCamelCase } from './helpers';\n\nexport function isValid( $field, fieldOptions, validationRules, validationErrors ){\n\n    const fieldValue = $field.value,\n          obj = mergeValidateFieldDefault({result: fieldValue.trim().length > 0, $field}),\n          isRadioOrCheckbox = /^(radio|checkbox)$/.test($field.type),\n          hasSelectedInput = $field.closest('form').querySelectorAll('[name=\"'+ $field.name +'\"]:checked').length > 0;\n\n    if( (!isRadioOrCheckbox && !obj.result) || (isRadioOrCheckbox && !hasSelectedInput) ){\n        obj.result = false;\n        obj.errors = { empty: true };\n        return Promise.resolve(obj);\n    }\n\n    // COLLECT VALIDATION METHOD NAMES ( USED TO RUN VALIDATIONS AND GET ERRORS )\n    const validationMethods = Array.from($field.attributes).reduce((accList, attr) => {\n        const attrName = toCamelCase( attr.name.replace('data-', '') ),\n              attrValue = toCamelCase( attr.value ),\n              isAttrValueWithFn = (attrName === 'type' || attrName === 'subtype') && validationRules[attrValue],\n              isAttrNameWithFn = validationRules[attrName];\n\n        if( isAttrValueWithFn || isAttrNameWithFn ){\n            accList.push( isAttrValueWithFn ? attrValue : attrName );\n        }\n        return accList;\n    }, []);\n\n    return new Promise(resolve => {\n\n        // RUN VALIDATIONS\n        const validationsResult = validationMethods.reduce((accPromise, methodName) => {\n            return accPromise.then(accObj => {\n                return new Promise(resolveVal => {\n                    // RUN VALIDATION INSIDE A PROMISE IS USEFUL FOR ASYNC VALIDATIONS\n                    resolveVal( validationRules[methodName](fieldValue, $field, fieldOptions) );\n                }).then(valObj => {\n                    // ADD CUSTOM ERROR-KEY FOR EACH VALIDATION RULE\n                    if( !valObj.result ){\n                        const errorObj = {};\n                        if( typeof valObj.errors === 'undefined' || typeof valObj.errors[methodName] === 'undefined' ){\n                            errorObj[methodName] = true;\n                        }\n                        valObj.errors = mergeObjects({}, valObj.errors, errorObj);\n                    }\n                    valObj = valObj.result ? {} : valObj;\n                    return mergeObjects(accObj, valObj);\n                });\n            });\n        }, Promise.resolve(obj));\n        resolve(validationsResult);\n\n    }).then(data => {\n\n        // GET ERRORS\n        if( !data.result ){\n            data.errors = validationMethods.reduce((accObj, methodName) => {\n                const errors = (validationErrors[methodName] && validationErrors[methodName](fieldValue, $field)) || {};\n                return mergeObjects(accObj, errors);\n            }, data.errors);\n        }\n        return data;\n\n    });\n\n}\n","\nimport { getUniqueFields, mergeValidateFieldDefault, mergeValidateFormDefault, mergeObjects } from './helpers';\nimport { checkFieldValidity } from './checkFieldValidity';\n\nexport function checkFieldsValidity( $fields, fieldOptions, validationRules, validationErrors, fieldToSkip = null ){\n\n    fieldOptions = mergeObjects( {}, fieldOptions, {focusOnRelated: false} );\n    const $fieldsList = getUniqueFields( $fields );\n\n    return Promise.all( $fieldsList.map($field => {\n\n        if( fieldToSkip && $field === fieldToSkip ){\n            const obj = mergeValidateFieldDefault({$field, result: true});\n            return Promise.resolve(obj);\n        }\n        return checkFieldValidity( $field, fieldOptions, validationRules, validationErrors );\n\n    }) ).then(fields => {\n\n        const areAllFieldsValid = fields.every(({result}) => result);\n        return mergeValidateFormDefault({result: areAllFieldsValid, fields});\n\n    });\n\n}\n","\nimport { version }              from '../package.json';\nimport { \n    addClass,\n    checkFormEl, \n    checkTouchedField, \n    customEvents, \n    dispatchCustomEvent, \n    excludeSelector, \n    fieldsStringSelector, \n    finalizeFieldPromise, \n    finalizeFieldsGroupPromise, \n    finalizeFormPromise, \n    getFilledFields, \n    getInitialValues,\n    getUniqueFields,\n    isNodeList,\n    mergeObjects, \n    mergeValidateFormDefault, \n    removeClass }               from './modules/helpers';\nimport { options }              from './modules/options';\nimport { validationRules }      from './modules/validationRules';\nimport { formStartup }          from './modules/formStartup';\nimport { destroy }              from './modules/destroy';\nimport { checkFieldValidity }   from './modules/checkFieldValidity';\nimport { checkFieldsValidity }  from './modules/checkFieldsValidity';\n\nclass Form {\n\n    constructor( form, optionsObj ){\n        const argsL = arguments.length,\n              checkFormElem = checkFormEl(form);\n\n        if( argsL === 0 || (argsL > 0 && !form) ){\n            throw new Error('First argument \"form\" is missing or falsy!');\n        }\n        if( isNodeList(form) ){\n            throw new Error('First argument \"form\" must be a single DOM node or a form CSS selector, not a NodeList!');\n        }\n        if( !checkFormElem.result ){\n            throw new Error('First argument \"form\" is not a DOM node nor a form CSS selector!');\n        }\n\n        const self = this;\n\n        self.$form = checkFormElem.$el;\n        self.$form.formjs = self;\n        self.options = mergeObjects({}, Form.prototype.options, optionsObj);\n        self.currentGroup = self.options.formOptions.groups[0];\n\n        // BINDING CONTEXT FOR FUTURE EXECUTION\n        const cbList = [\n            // IN fieldOptions\n            'beforeValidation',\n            // IN formOptions\n            'beforeSend',\n            'getFormData'\n        ];\n        cbList.forEach(cbName => {\n            const optionType = self.options.formOptions[cbName] ? 'formOptions' : 'fieldOptions';\n            let cbOpt = self.options[optionType][cbName];\n\n            if( cbOpt ){\n                self.options[optionType][cbName] = ( Array.isArray(cbOpt) ? cbOpt.map(cbFn => cbFn.bind(self)) : cbOpt.bind(self) );\n            }\n        });\n\n        self._ = { initialValues: getInitialValues(self.$form) }\n\n        formStartup( self.$form, self.options );\n\n        const initOptions = {};\n        if( self.options.formOptions.onInitCheckFilled ){\n            initOptions.detail = self.validateFilledFields().catch(fields => {});\n        }\n        dispatchCustomEvent( self.$form, customEvents.form.init, initOptions );\n    }\n\n    destroy(){\n        destroy(this.$form, this.options);\n        dispatchCustomEvent( this.$form, customEvents.form.destroy );\n    }\n    \n    getFormData( trimValues = this.options.fieldOptions.trimValue ){\n        const $formFields = this.$form.querySelectorAll('input, select, textarea'),\n              $filteredFields = Array.from( $formFields ).filter( elem => elem.matches(excludeSelector) );\n        return this.options.formOptions.getFormData( $filteredFields, trimValues );\n    }\n\n    validateField( field, fieldOptions ){\n        const self = this;\n        const $form = self.$form;\n        const $field = typeof field === 'string' ? $form.querySelector(field) : field;\n\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions);\n        \n        return checkFieldValidity($field, fieldOptions, self.validationRules, self.validationErrors)\n            .then(obj => {\n                dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } );\n                if( obj.result ){\n                    if( fieldOptions.onValidationCheckAll ){\n                        const selector = self.currentGroup || fieldsStringSelector;\n                        const $fields = $form.querySelectorAll(selector);\n                        checkFieldsValidity( $fields, fieldOptions, self.validationRules, self.validationErrors, obj.$field )\n                            .then(dataForm => {\n                                const groups = self.options.formOptions.groups;\n                                const validationEventName = self.currentGroup ? customEvents.group.validation : customEvents.form.validation;\n                                if( groups.length > 0 ){\n                                    dataForm.group = {\n                                        prev: groups[groups.indexOf(selector) - 1],\n                                        current: selector,\n                                        next: groups[groups.indexOf(selector) + 1]\n                                    }\n                                    dataForm.canSubmit = dataForm.result && !dataForm.group.next;\n                                }\n                                dispatchCustomEvent( $form, validationEventName, { detail: dataForm } );\n                            });\n                    }\n                } else {\n                    removeClass( $form, self.options.formOptions.cssClasses.valid );\n                    addClass( $form, self.options.formOptions.cssClasses.error );\n                }\n                return obj;\n            })\n            .then(finalizeFieldPromise);\n    }\n\n    validateFieldsGroup( group = this.currentGroup, fieldOptions ){\n        const self = this;\n\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions);\n        \n        const $fields = self.$form.querySelectorAll(group);\n        const skipUIfeedback = fieldOptions.skipUIfeedback;\n\n        if( !skipUIfeedback ){\n            addClass( self.$form, self.options.formOptions.cssClasses.pending );\n        }\n\n        return checkFieldsValidity($fields, fieldOptions, self.validationRules, self.validationErrors)\n            .then(data => {\n                data.fields.forEach(obj => {\n                    obj.isCheckingGroup = true;\n                    dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } );\n                });\n                const groups = self.options.formOptions.groups;\n                if( groups.length > 0 ){\n                    data.group = {\n                        prev: groups[groups.indexOf(group) - 1],\n                        current: group,\n                        next: groups[groups.indexOf(group) + 1]\n                    }\n                    data.canSubmit = data.result && !data.group.next;\n                }\n                dispatchCustomEvent( self.$form, customEvents.group.validation, { detail: data } );\n                return data;\n            })\n            .then(finalizeFieldsGroupPromise);\n    }\n\n    validateFilledFields( fieldOptions ){\n        const self = this;\n        const $form = self.$form;\n        const $filledFields = getFilledFields( $form );\n        const requiredFieldsLength = getUniqueFields( $form.querySelectorAll(fieldsStringSelector) ).filter($field => $field.required).length;\n        const formClasses = self.options.formOptions.cssClasses;\n\n        if( $filledFields.length === 0 ){\n            const obj = mergeValidateFormDefault({result: true, fields: []})\n            return Promise.resolve(obj);\n        }\n\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions);\n\n        const skipUIfeedback = fieldOptions.skipUIfeedback;\n\n        if( !skipUIfeedback ){\n            addClass( $form, formClasses.pending );\n        }\n\n        return checkFieldsValidity($filledFields, fieldOptions, self.validationRules, self.validationErrors)\n            .then(data => {\n                data.fields.forEach(obj => {\n                    checkTouchedField( obj.$field, fieldOptions );\n                    dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } );\n                });\n            \n                if( !skipUIfeedback ){\n                    removeClass( $form, (`${formClasses.pending} ${formClasses.valid} ${formClasses.error}`) );\n                    \n                    if( data.result && $filledFields.length === requiredFieldsLength ) {\n                        addClass( $form, formClasses.valid );\n                    } else if( !data.result ) {\n                        addClass( $form, formClasses.error );\n                    }\n                }\n                \n                return data;\n            })\n            .then(finalizeFormPromise);\n    }\n\n    validateForm( fieldOptions ){\n        const self = this;\n\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions);\n\n        if( self.currentGroup ){\n            return self.validateFieldsGroup( self.currentGroup, fieldOptions )\n        }\n\n        const $form = self.$form;\n        const $fields = $form.querySelectorAll(fieldsStringSelector);\n\n        if( !fieldOptions.skipUIfeedback ){\n            addClass( $form, self.options.formOptions.cssClasses.pending );\n        }\n\n        return checkFieldsValidity($fields, fieldOptions, self.validationRules, self.validationErrors)\n            .then(data => {\n                data.fields.forEach(obj => {\n                    obj.isCheckingForm = true;\n                    dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } );\n                });\n                dispatchCustomEvent( $form, customEvents.form.validation, { detail: data } );\n                return data;\n            })\n            .then(finalizeFormPromise);\n    }\n    \n    static addValidationErrors( errorsObj ){\n        Form.prototype.validationErrors = mergeObjects({}, Form.prototype.validationErrors, errorsObj);\n    }\n\n    static addValidationRules( rulesObj ){\n        Form.prototype.validationRules = mergeObjects({}, Form.prototype.validationRules, rulesObj);\n    }\n    \n    static setOptions( optionsObj ){\n        Form.prototype.options = mergeObjects({}, Form.prototype.options, optionsObj);\n    }\n\n}\n\nForm.prototype.options = options;\nForm.prototype.validationErrors = {};\nForm.prototype.validationRules = validationRules;\nForm.prototype.version = version;\n\nexport default Form;\n","\nimport { customEvents } from './helpers';\nimport { blurHandler, dataTypeNumber, formValidationEnd, groupValidationEnd, keypressMaxlength, pastePrevent, submit, validation, validationEnd } from './listenerCallbacks';\n\nexport function destroy( $form, options ){\n\n    if( options.fieldOptions.strictHtmlValidation ){\n        $form.removeEventListener('keypress', keypressMaxlength, false);\n        $form.removeEventListener('input', dataTypeNumber, false);\n    }\n\n    if( options.fieldOptions.preventPasteFields ){\n        $form.removeEventListener('paste', pastePrevent, false);\n    }\n\n    if( options.formOptions.handleSubmit ){\n        $form.removeEventListener('submit', submit);\n    }\n\n    $form.removeEventListener('blur', blurHandler, true);\n\n    options.fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n        const useCapturing = ['blur', 'focus'].includes(eventName);\n        $form.removeEventListener(eventName, validation, useCapturing);\n    });\n\n    $form.removeEventListener(customEvents.field.validation, validationEnd, false);\n    if( options.formOptions.groups.length > 0 ){\n        $form.removeEventListener(customEvents.group.validation, groupValidationEnd, false);\n    }\n    $form.removeEventListener(customEvents.form.validation, formValidationEnd, false);\n\n    delete $form.formjs;\n    \n}\n","\nimport { fieldsStringSelector } from './fieldsStringSelector';\nimport { getUniqueFields } from './getUniqueFields';\n\nexport const getFilledFields = $form => {\n    return getUniqueFields( $form.querySelectorAll(fieldsStringSelector) )\n    .map($field => {\n\n        const name = $field.name,\n              type = $field.type,\n              isCheckboxOrRadio = type === 'checkbox' || type === 'radio',\n              fieldChecked = $form.querySelector('[name=\"' + name + '\"]:checked'),\n              isReqFrom = $field.matches('[data-required-from]'),\n              $reqMore = (isReqFrom ? $form.querySelector($field.getAttribute('data-required-from')) : null);\n\n        return (\n            isCheckboxOrRadio ? (fieldChecked || null) :\n            (isReqFrom && $reqMore.checked) || (!isReqFrom && $field.value) ? $field : null\n        );\n\n    })\n    .filter($field => $field !== null);\n}\n"],"names":["addClass","element","cssClasses","split","forEach","className","classList","add","isNodeList","nodeList","NodeList","prototype","isPrototypeOf","removeClass","remove","isDOMNode","node","Element","checkFormEl","form","isString","isFormSelector","document","querySelector","tagName","toLowerCase","result","$el","checkModifiedField","$field","initialValues","fieldOptions","$container","closest","questionContainer","_ref","initValues","type","name","value","multiple","options","isRadio","isCheckbox","isSelect","querySelectorAll","concat","length","multiValues","_toConsumableArray","map","filter","opt","selected","val","includes","$checkedRadio","isValueModified","modified","checkTouchedField","touched","customEvents","validation","destroy","init","submit","isPlainObject","object","Object","toString","call","mergeObjects","out","arguments","undefined","Array","from","slice","arg","keys","key","isArray","push","dispatchCustomEvent","elem","eventName","eventOptions","bubbles","eventObj","CustomEvent","dispatchEvent","excludeSelector","fieldsStringSelector","finalizeFieldPromise","errors","Promise","resolve","reject","finalizeFieldsGroupPromise","canSubmit","fields","group","finalizeFormPromise","formatMap","YYYY-MM-DD","dateArray","MM-DD-YYYY","DD-MM-YYYY","reverse","getDateAsNumber","dateString","dateFormat","separator","splitChar","match","indexOf","replace","join","getInitialValues","$form","matches","reduce","accData","checked","isCheckboxOrRadio","isMultiCheckbox","isMultiSelect","multiSelectValues","getJSONobjectFromFieldAttribute","fieldEl","attrName","customAttrEl","JSON","parse","getAttribute","getUniqueFields","$nodeList","currentFieldName","currentFieldType","mergeValidateFieldDefault","obj","mergeValidateFormDefault","isFieldForChangeEvent","runFunctionsSequence","_ref$functionsList","functionsList","_ref$data","data","_ref$stopConditionFn","stopConditionFn","acc","promiseFn","then","res","dataNew","dataList","serializeObject","_typeof","constructor","a","k","encodeURIComponent","toCamelCase","string","all","letter","toUpperCase","beforeValidation","formjs","_","trimValue","trim","$fields","dirty","checkDirtyField","skipUIfeedback","pending","error","errorEmpty","errorRule","valid","focusOnRelated","maxFileSize","onValidationCheckAll","preventPasteFields","strictHtmlValidation","validateOnEvents","formOptions","ajaxOptions","cache","credentials","headers","Content-Type","Accept","method","mode","redirect","timeout","url","location","href","ajaxSubmit","beforeSend","ajaxComplete","ajaxError","ajaxPending","ajaxSuccess","getFormData","$filteredFields","trimValues","formData","this","prevObj","$checkboxes","field","$selectedOpts","option","keyName","index","list","isLastKeyName","keyNameSplit","arrPos","arrayHasItemAtIndex","arrItemKeyName","isKeyNameArray","endsWith","groups","handleFileUpload","handleSubmit","onInitCheckFilled","validationRules","date","test","email","number","checkbox","$dataChecks","attrValue","checkedLength","isMinOk","isMaxOk","checks","minChecks","maxChecks","equalTo","exactLength","valueLength","minlength","maxlength","file","MIMEtype","accept","RegExp","filesList","files","exceedMaxFileSize","size","isAcceptedFileType","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","max","maxVal","maxLength","min","minVal","minLength","pattern","radio","$fieldChecked","blurHandler","event","target","dataTypeNumber","fieldValue","stopImmediatePropagation","valueReplaced","formValidationEnd","detail","_$form$formjs$options","isCheckingForm","feedbackClassesKey","keypressMaxlength","keyPressed","which","keyCode","pastePrevent","preventDefault","ajaxCall","formDataObj","timeoutTimer","isMultipart","body","formDataMultipart","FormData","append","idx","stringify","Headers","controller","AbortController","signal","window","setTimeout","abort","fetch","response","ok","Error","statusText","fetchMethod","get","contentType","headerOpt","getFetchMethod","message","clearTimeout","disabled","instance","formCssClasses","isAjaxForm","$btn","eventPreventDefault","enableBtn","validateForm","stopExecution","beforeSendData","rfsObject","some","pop","groupValidationEnd","_event$target$formjs$","currentGroup","next","isCheckingGroup","isChangeEvent","self","isFieldForChangeEventBoolean","hasOnlyChangeEvent","validateField","$relatedEqualTo","required","validationEnd","dataFieldOptions","_mergeObjects","isReqFrom","$reqMore","formClasses","values","accString","cssClass","errorClasses","extraErrorClass","isChecks","checkedElLength","empty","errorClassToRemove","formStartup","noValidate","addEventListener","useCapture","checkFieldValidity","validationErrors","isValidValue","$checked","reqMoreIsChecked","$findReqMore","$findReqFrom","id","focus","needsValidation","dataObj","isRadioOrCheckbox","hasSelectedInput","validationMethods","attributes","accList","attr","isAttrValueWithFn","isAttrNameWithFn","accPromise","methodName","accObj","resolveVal","valObj","errorObj","isValid","checkFieldsValidity","fieldToSkip","$fieldsList","areAllFieldsValid","every","Form","optionsObj","_classCallCheck","argsL","checkFormElem","cbList","cbName","optionType","cbOpt","cbFn","bind","initOptions","validateFilledFields","errorsObj","rulesObj","removeEventListener","useCapturing","$formFields","selector","dataForm","validationEventName","prev","current","$filledFields","fieldChecked","getFilledFields","requiredFieldsLength","validateFieldsGroup","version"],"mappings":"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"}