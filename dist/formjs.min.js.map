{"version":3,"file":"formjs.min.js","sources":["../src/modules/version.js","../src/modules/helpers/addClass.js","../src/modules/helpers/isNodeList.js","../src/modules/helpers/removeClass.js","../src/modules/helpers/isDOMNode.js","../src/modules/helpers/checkFormEl.js","../src/modules/helpers/customEvents.js","../src/modules/helpers/mergeObjects.js","../src/modules/helpers/dispatchCustomEvent.js","../src/modules/helpers/fieldsStringSelector.js","../src/modules/helpers/finalizeFieldPromise.js","../src/modules/helpers/finalizeFormPromise.js","../src/modules/helpers/getDateAsNumber.js","../src/modules/helpers/getSplitChar.js","../src/modules/helpers/getUniqueFields.js","../src/modules/helpers/mergeValidateFieldDefault.js","../src/modules/helpers/mergeValidateFormDefault.js","../src/modules/helpers/isFieldForChangeEvent.js","../src/modules/helpers/runFunctionsSequence.js","../src/modules/helpers/serializeObject.js","../src/modules/helpers/toCamelCase.js","../src/modules/optionsUtils.js","../src/modules/helpers/checkDirtyField.js","../src/modules/options.js","../src/modules/validationRules.js","../src/modules/validationRules/date.js","../src/modules/validationRules/email.js","../src/modules/validationRules/number.js","../src/modules/validationRules/checkbox.js","../src/modules/validationRules/checks.js","../src/modules/validationRules/equalTo.js","../src/modules/validationRules/exactLength.js","../src/modules/validationRules/file.js","../src/modules/validationRules/length.js","../src/modules/validationRules/max.js","../src/modules/validationRules/maxlength.js","../src/modules/validationRules/min.js","../src/modules/validationRules/minlength.js","../src/modules/validationRules/pattern.js","../src/modules/validationRules/radio.js","../src/modules/listenerCallbacks/dataTypeNumber.js","../src/modules/listenerCallbacks/keypressMaxlength.js","../src/modules/listenerCallbacks/pastePrevent.js","../src/modules/ajaxCall.js","../src/modules/listenerCallbacks/submit.js","../src/modules/listenerCallbacks/validation.js","../src/modules/listenerCallbacks/validationEnd.js","../src/modules/formStartup.js","../src/modules/checkFilledFields.js","../src/modules/helpers/getFilledFields.js","../src/modules/checkFieldValidity.js","../src/modules/isValid.js","../src/modules/checkFormValidity.js","../src/index.js","../src/modules/constructor.js","../src/modules/destroy.js","../src/modules/helpers/excludeSelector.js"],"sourcesContent":["\nexport const version = '5.0.0';\n","\nexport const addClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.add( className );\n    });\n}\n","\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList );\n}\n","\nexport const removeClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.remove( className );\n    });\n}\n","\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node );\n}\n","\nimport { isDOMNode } from './isDOMNode';\n\nexport const checkFormEl = formEl => {\n    let isString = typeof formEl,\n        isValidNodeSelector = isString === 'string' && isDOMNode(document.querySelector(formEl)),\n        isFormSelector = isValidNodeSelector && document.querySelector(formEl).tagName.toLowerCase() === 'form',\n        obj = {\n            result: isDOMNode(formEl) || isFormSelector,\n            element: (isString === 'string' ? document.querySelector(formEl) : formEl)\n        };\n\n    return obj;\n}\n","\nexport const customEvents = {\n    field: {\n        validation: 'fjs.field:validation'\n    },\n    form: {\n        submit:     'fjs.form:submit',\n        validation: 'fjs.form:validation'\n    }\n}\n","\nexport const mergeObjects = function( out = {} ){\n    for(let i=1; i<arguments.length; i++){\n        let obj = arguments[i];\n\n        if(!obj){ continue; }\n\n        for(let key in obj){\n            let isArray = Object.prototype.toString.call(obj[key]) === \"[object Array]\";\n            let isObject = Object.prototype.toString.call(obj[key]) === \"[object Object]\";\n\n            // COPY ONLY ENUMERABLE PROPERTIES\n            if( obj.hasOwnProperty(key) ){\n                if( isArray ){\n\n                    if( typeof out[key] === 'undefined' ){\n                        out[key] = [];\n                    }\n                    out[key] = out[key].concat( obj[key].slice(0) );\n\n                } else if( isObject ){\n\n                    out[key] = mergeObjects(out[key], obj[key]);\n\n                } else {\n\n                    // * STRING | NUMBER | BOOLEAN | FUNCTION\n                    if( Array.isArray(out[key]) ){\n                        // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                        out[key].push(obj[key]);\n                    } else {\n                        out[key] = obj[key];\n                    }\n\n                }\n            }\n        }\n    }\n\n    return out;\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const dispatchCustomEvent = ( elem, eventName, eventOptions ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions);\n    const eventObj = new CustomEvent(eventName, eventOptions);\n    elem.dispatchEvent( eventObj );\n}\n","\nexport const fieldsStringSelector = 'input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"hidden\"]), select, textarea'\n","\nexport const finalizeFieldPromise = obj => {\n    if( obj.result ){\n        return Promise.resolve();\n    }\n    return Promise.reject(obj.errors);\n}\n","\nexport const finalizeFormPromise = obj => {\n    if( obj.result ){\n        return Promise.resolve(obj.fields);\n    }\n    return Promise.reject(obj.fields);\n}\n","\nimport { getSplitChar } from './getSplitChar';\n\nconst formatMap = {\n    'YYYY-MM-DD': function(dateArray){\n        return dateArray;\n    },\n    'MM-DD-YYYY': function(dateArray){\n        return [dateArray[2], dateArray[0], dateArray[1]];\n    },\n    'DD-MM-YYYY': function(dateArray){\n        return dateArray.reverse();\n    }\n};\n\nexport const getDateAsNumber = ( dateString, dateFormat ) => {\n    dateFormat = dateFormat || 'YYYY-MM-DD';\n    const splitChar = getSplitChar(dateString);\n\n    if( dateFormat.indexOf(splitChar) < 0 ){\n        return;\n    }\n\n    dateFormat = dateFormat.replace(/[^YMD]/g, '-');\n    dateString = dateString.split(splitChar);\n    dateString = formatMap[dateFormat](dateString).join('');\n    \n    return dateString;\n}\n","\nexport const getSplitChar = string => {\n    // MATCH ANY NON-DIGIT CHAR\n    const separator = string.match(/\\D/);\n    return (separator && separator.length > 0) ? separator[0] : null;\n}\n","\nexport const getUniqueFields = nodeList => {\n\n    let currentFieldName = '',\n        currentFieldType = '';\n\n    return Array.from( nodeList ).filter(fieldEl => {\n        const name = fieldEl.name,\n              type = fieldEl.type;\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false;\n        }\n        \n        if( !fieldEl.matches('[data-required-from]') ){\n            currentFieldName = name;\n            currentFieldType = type;\n        }\n        return true;\n    });\n    \n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const mergeValidateFieldDefault = obj => {\n    return mergeObjects({}, { result: false, fieldEl: null }, obj);\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const mergeValidateFormDefault = obj => {\n    return mergeObjects({}, { result: true, fields: [] }, obj);\n}\n","\nexport const isFieldForChangeEvent = fieldEl => {\n    return fieldEl.matches('select, [type=\"radio\"], [type=\"checkbox\"], [type=\"file\"]');\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const runFunctionsSequence = ( { functionsList = [], data = {}, stopConditionFn = () => false } = {} ) => {\n    return functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1]);\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res);\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result);\n                    return res;\n                });\n        });\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList);\n}\n","\nexport const serializeObject = obj => {\n    var objToString = (\n            (obj && typeof obj === 'object' && obj.constructor === Object) ? \n            Object.keys(obj)\n                .reduce((a,k) => {\n                    a.push(k+'='+encodeURIComponent(obj[k]));\n                    return a\n                },[]).join('&') : \n            obj\n    );\n    return objToString;\n}\n","\nexport const toCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase(); });\n}\n","\nimport { addClass, checkDirtyField } from './helpers';\n\nexport const defaultCallbacksInOptions = {\n    fieldOptions: {\n\n        beforeValidation: function beforeValidationDefault ( fieldObj ) {\n\n            const fieldOptions = this.options.fieldOptions;\n\n            checkDirtyField( fieldObj.fieldEl, fieldOptions );\n            if( !fieldOptions.skipUIfeedback ){\n                addClass( fieldObj.fieldEl.closest( fieldOptions.questionContainer ), fieldOptions.cssClasses.pending );\n            }\n\n        }\n\n    },\n    formOptions: {\n\n        getFormData: function getFormDataDefault ( filteredFields ) {\n\n            const formData = {},\n                  formEl = this.formEl;\n\n            filteredFields.forEach(fieldEl => {\n                const isCheckbox = fieldEl.type === 'checkbox',\n                      isRadio = fieldEl.type === 'radio',\n                      isSelect = fieldEl.matches('select'),\n                      name = fieldEl.name;\n                let value = fieldEl.value;\n                                \n                if( isCheckbox ) {\n                    \n                    value = fieldEl.checked;\n                    let checkboxes = Array.from( formEl.querySelectorAll('[name=\"'+ name +'\"]') );\n                    if( checkboxes.length > 1 ){\n\n                        value = [];\n                        let checkedElems = checkboxes.filter(field => field.checked);\n                        checkedElems.forEach(fieldEl => {\n                            value.push( fieldEl.value );\n                        });\n\n                    }\n                        \n                } else if( isRadio ){\n                    \n                    const checkedRadio = formEl.querySelector('[name=\"'+ name +'\"]:checked');\n                    value = (checkedRadio === null ? null : checkedRadio.value);\n                    \n                } else if( isSelect ){\n\n                    const selectedOpts = Array.from( fieldEl.options ).filter(option => option.selected);\n                    if( selectedOpts.length > 1 ){\n\n                        value = [];\n                        selectedOpts.forEach(fieldEl => {\n                            value.push( fieldEl.value );\n                        });\n\n                    }\n                }\n\n                formData[ name ] = value;\n            });\n\n            return formData;\n\n        }\n\n    }\n}\n","\nimport { addClass } from './addClass';\nimport { isNodeList } from './isNodeList';\nimport { removeClass } from './removeClass';\n\nexport const checkDirtyField = ( fields, fieldOptions ) => {\n\n    fields = isNodeList(fields) ? Array.from( fields ) : [fields];\n    fields.forEach(fieldEl => {\n        if( fieldEl.type !== 'checkbox' && fieldEl.type !== 'radio' ){\n            const containerEl = fieldEl.closest( fieldOptions.questionContainer ) || fieldEl;\n            if( fieldEl.value ){\n                addClass( containerEl, fieldOptions.cssClasses.dirty );\n            } else {\n                removeClass( containerEl, fieldOptions.cssClasses.dirty );\n            }\n        }\n    });\n    \n}\n","\nimport { defaultCallbacksInOptions } from './optionsUtils';\n\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [defaultCallbacksInOptions.fieldOptions.beforeValidation],\n        cssClasses: {\n            dirty:              'is-dirty',\n            error:              'has-error',\n            errorEmpty:         'has-error-empty',\n            errorRule:          'has-error-rule',\n            pending:            'is-pending',\n            valid:              'is-valid'\n        },\n        focusOnRelated:         true,\n        handleFileUpload:       true,\n        onValidationCheckAll:   false,\n        preventPasteFields:     '[type=\"password\"], [data-equal-to]',\n        questionContainer:      '[data-formjs-question]',\n        skipUIfeedback:         false,\n        strictHtmlValidation:   true,\n        validateOnEvents:       'input change'\n    },\n\n    formOptions: {\n        ajaxOptions:            {\n            cache:              'no-store',\n            credentials:        'same-origin',\n            headers: {\n                                'Content-Type': 'application/json',\n                                'Accept':       'application/json'\n            },\n            method:             'POST',\n            mode:               'same-origin',\n            redirect:           'follow',\n            timeout:            0,\n            url:                location.href\n        },\n        ajaxSubmit:             true,\n        beforeSend:             [],\n        cssClasses: {\n            ajaxComplete:       'ajax-complete',\n            ajaxError:          'ajax-error',\n            ajaxPending:        'ajax-pending',\n            ajaxSuccess:        'ajax-success',\n            submit:             'is-submitting',\n            valid:              'is-valid'\n        },\n        getFormData:            defaultCallbacksInOptions.formOptions.getFormData,\n        handleSubmit:           true\n    }\n    \n}\n","\nimport { date }         from './validationRules/date';\nimport { email }        from './validationRules/email';\nimport { number }       from './validationRules/number';\n\nimport { checkbox }     from './validationRules/checkbox';\nimport { equalTo }      from './validationRules/equalTo';\nimport { exactLength }  from './validationRules/exactLength';\nimport { file }         from './validationRules/file';\nimport { length }       from './validationRules/length';\nimport { max }          from './validationRules/max';\nimport { maxlength }    from './validationRules/maxlength';\nimport { min }          from './validationRules/min';\nimport { minlength }    from './validationRules/minlength';\nimport { pattern }      from './validationRules/pattern';\nimport { radio }        from './validationRules/radio';\n\nexport const validationRules = {\n    date,\n    email,\n    number,\n\n    checkbox,\n    equalTo,\n    exactLength,\n    file,\n    length,\n    max,\n    maxlength,\n    min,\n    minlength,\n    pattern,\n    radio\n}\n","\n/*\n    DATE AS ISO 8601 DATE FORMAT:\n    YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n*/\n\nexport const date = function( string ){\n    return {\n        result: /^((((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13578]|1[02])[ \\/\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13456789]|1[012])[ \\/\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.]02[ \\/\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ \\/\\-.]02[ \\/\\-.]29))$/g.test( string )\n    };\n}\n","\n// https://regex101.com/r/cdlyJy/3\n\nexport const email = function( string ){\n    return {\n        result: /^[a-zA-Z_-]([\\w.-]?[a-zA-Z0-9])*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?){2,})+$/.test( string )\n    };\n}\n","\n/*\n    ALL NUMBERS ( INTEGERS AND FLOATING )\n    VALID NUMBERS: 123 | 123.456 | .123\n*/\n\nexport const number = function( string ){\n    return {\n        result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n    };\n}","\nimport { checks } from './checks';\n\nexport const checkbox = function( value, fieldEl ){\n    const dataChecksEl = fieldEl.closest('form').querySelector('[name=\"' + fieldEl.name + '\"][data-checks]');\n    return dataChecksEl ? checks(dataChecksEl) : { result: fieldEl.checked };\n}\n","\nexport const checks = function( fieldEl ){\n    const attrValue = JSON.parse( fieldEl.getAttribute('data-checks') ),\n          checkedElLength = fieldEl.closest('form').querySelectorAll('[name=\"' + fieldEl.name + '\"]:checked').length,\n          isMinOk = checkedElLength >= attrValue[0],\n          isMaxOk = checkedElLength <= attrValue[1],\n          obj = { result: isMinOk && isMaxOk };\n\n    if( !obj.result ){\n        obj.errors = { checks: true };\n        if( !isMinOk ){ obj.errors.minChecks = true; }\n        if( !isMaxOk ){ obj.errors.maxChecks = true; }\n    }\n\n    return obj;\n}\n","\nexport const equalTo = function( value, fieldEl ){\n    const checkFromEl = fieldEl.closest('form').querySelector( '[name=\"' + fieldEl.getAttribute('data-equal-to') + '\"]' );\n    return { result: value === checkFromEl.value };\n}\n","\nexport const exactLength = function( value, fieldEl ){\n    const valueLength = value.length,\n          exactLength = fieldEl.getAttribute('data-exact-length') * 1,\n          obj = { result: valueLength === exactLength };\n\n    if( !obj.result ){\n        obj.errors = {};\n        if( valueLength < exactLength ){ obj.errors.minlength = true; }\n        else { obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nexport const file = function( value, fieldEl ){\n    const maxFileSize = (fieldEl.getAttribute('data-max-file-size') || 0) * 1,\n          MIMEtype = fieldEl.accept ? new RegExp(fieldEl.accept.replace( '*', '[^\\\\/,]+' )) : null,\n          filesList = Array.from(fieldEl.files),\n          obj = { result: true };\n\n    filesList.forEach(file => {\n        const exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize,\n              isAcceptedFileType = MIMEtype !== null ? MIMEtype.test(file.type) : true;\n\n        if( exceedMaxFileSize || !isAcceptedFileType ){\n            obj.result = false;\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {};\n            }\n            if( exceedMaxFileSize ){ obj.errors.maxFileSize = true; }\n            if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true; }\n\n        }\n    });\n\n    return obj;\n}\n","\nexport const length = function( value, fieldEl ){\n    const valueL = value.length,\n          attrValue = JSON.parse( fieldEl.getAttribute('data-length') ),\n          isMinlengthOk = valueL >= attrValue[0],\n          isMaxlengthOk = valueL <= attrValue[1],\n          obj = { result: isMinlengthOk && isMaxlengthOk };\n\n    if( !obj.result ){\n        obj.errors = {};\n        if( !isMinlengthOk ){ obj.errors.minlength = true; }\n        if( !isMaxlengthOk ){ obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const max = function( value, fieldEl ){\n    let maxVal = fieldEl.max;\n    const dateFormat = fieldEl.getAttribute('data-date-format');\n    \n    if( fieldEl.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat );\n        maxVal = maxVal.split('-').join('');\n    }\n\n    value = value * 1;\n    maxVal = maxVal * 1;\n    \n    return { result: value <= maxVal };\n}\n","\nexport const maxlength = function( value, fieldEl ){\n    return { result: value.length <= fieldEl.maxLength * 1 };\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const min = function( value, fieldEl ){\n    let minVal = fieldEl.min;\n    const dateFormat = fieldEl.getAttribute('data-date-format');\n    \n    if( fieldEl.type === 'date' || fieldEl.getAttribute('data-date-format') ){\n        value = getDateAsNumber( value, dateFormat );\n        minVal = minVal.split('-').join('');\n    }\n\n    value = value * 1;\n    minVal = minVal * 1;\n    \n    return { result: value >= minVal };\n}\n","\nexport const minlength = function( value, fieldEl ){\n    return { result: value.length >= fieldEl.minLength * 1 };\n}\n","\nexport const pattern = function( value, fieldEl ){\n    return { result: new RegExp(fieldEl.pattern).test(value) };\n}\n","\nexport const radio = function( value, fieldEl ){\n    const fieldChecked = fieldEl.closest('form').querySelector( '[name=\"'+ fieldEl.name +'\"]:checked' ),\n          isValid = fieldChecked !== null && fieldChecked.value.trim().length > 0;\n\n    return { result: isValid };\n}\n","\nexport const dataTypeNumber = function( event ){\n\n    const fieldEl = event.target;\n    \n    if( fieldEl.matches('[data-type=\"number\"]') ){\n        let fieldValue = fieldEl.value;\n        const hasInvalidChars = /[^\\d.,+\\-]/.test(fieldValue);\n        \n        if( hasInvalidChars ){\n            event.stopImmediatePropagation();\n            let valueReplaced = fieldValue.replace(/[^\\d.,+\\-]/g, '');\n            fieldEl.value = valueReplaced;\n        }\n    }\n\n}\n","\nexport const keypressMaxlength = function( event ){\n\n    const fieldEl = event.target;\n    \n    if( fieldEl.matches( '[maxlength]' ) ){\n        const maxLength = fieldEl.maxLength * 1,\n              keyPressed = event.which || event.keyCode,\n              allowedKeys = [8, 37, 38, 39, 46];\n\n        if( fieldEl.value.length >= maxLength && allowedKeys.indexOf(keyPressed) === -1 ){\n            return false;\n        }\n    }\n\n}\n","\nexport const pastePrevent = function( event ){\n\n    const fieldEl = event.target;\n    const fieldOptions = fieldEl.closest('form').formjs.options.fieldOptions;\n\n    if( fieldEl.matches( fieldOptions.preventPasteFields ) ){     \n        event.preventDefault();\n    }\n\n}\n","\nimport { addClass, mergeObjects, removeClass, serializeObject } from './helpers';\n\nconst getFetchMethod = (response, options) => {\n    const accept = options.headers.get('Accept'),\n          contentType = response.headers.get('Content-Type'),\n          headerOpt = accept || contentType || '';\n\n    if( headerOpt.indexOf('application/json') > -1 || headerOpt === '' ){\n        return 'json';\n    } else if( headerOpt.indexOf('text/') > -1 ){\n        return 'text';\n    } else {\n        return 'blob';\n    }\n};\n\nexport function ajaxCall( formEl, formDataObj, options ){\n\n    let timeoutTimer;\n    const ajaxOptions = mergeObjects( {}, options.formOptions.ajaxOptions ),\n          isMultipart = ajaxOptions.headers['Content-Type'] === 'multipart/form-data';\n\n    ajaxOptions.body = formDataObj;\n    \n    // POST A FormData OBJECT ( multipart )\n    if( isMultipart && options.fieldOptions.handleFileUpload ){\n        let formDataMultipart = new FormData();\n        \n        for(let key in ajaxOptions.body){\n            formDataMultipart.append( key, ajaxOptions.body[key] );\n        }\n        \n        Array.from( formEl.querySelectorAll('[type=\"file\"]') ).forEach(field => {\n            Array.from(field.files).forEach((file, idx) => {\n                const name = field.name+'['+ idx +']';\n                formDataMultipart.append( name, file, file.name );\n            });\n        });\n        \n        ajaxOptions.body = formDataMultipart;\n    }\n\n    if( ajaxOptions.method === 'GET' ){\n\n        // FETCH WITH \"GET\" METHOD CAN'T HAVE \"body\". SO IT IS APPENDED TO THE URL\n        ajaxOptions.url += ( /\\?/.test(ajaxOptions.url) ? '&' : '?' ) + serializeObject( ajaxOptions.body );\n        delete ajaxOptions.body;\n\n    } else {\n\n        if( ajaxOptions.headers['Content-Type'].indexOf('application/x-www-form-urlencoded') > -1 ){\n            // POST A NORMAL FORM\n            ajaxOptions.body = serializeObject( ajaxOptions.body );\n        } else if( !isMultipart ){\n            // POST A JSON STRING\n            ajaxOptions.body = JSON.stringify(ajaxOptions.body);\n        }\n\n    }\n\n    ajaxOptions.headers = new Headers( ajaxOptions.headers );\n\n    if ( ajaxOptions.timeout > 0 ) {\n        const controller = new AbortController(),\n              signal = controller.signal;\n\n        ajaxOptions.signal = signal;\n        timeoutTimer = window.setTimeout(() => {\n            controller.abort();\n        }, ajaxOptions.timeout);\n    }\n\n    return fetch(ajaxOptions.url, ajaxOptions)\n        .then(response => {\n            if( !response.ok ){\n                return Promise.reject(response);\n            }\n            const fetchMethod = getFetchMethod(response, ajaxOptions);\n            return response[fetchMethod]();\n        })\n        .then(data => {\n            addClass( formEl, options.formOptions.cssClasses.ajaxSuccess );\n            return data;\n        })\n        .catch(error => {\n            addClass( formEl, options.formOptions.cssClasses.ajaxError );\n            return Promise.reject(error);\n        })\n        .finally(() => {\n            if( timeoutTimer ){\n                window.clearTimeout( timeoutTimer );\n            }\n            removeClass( formEl, options.formOptions.cssClasses.submit + ' ' + options.formOptions.cssClasses.ajaxPending );\n            addClass( formEl, options.formOptions.cssClasses.ajaxComplete );\n            formEl.querySelector('[type=\"submit\"]').disabled = false;\n        });\n\n}\n","\nimport { addClass, customEvents, dispatchCustomEvent, removeClass, runFunctionsSequence } from '../helpers';\nimport { ajaxCall } from '../ajaxCall';\n\nexport function submit( event ){\n\n    const formEl = event.target,\n          instance = formEl.formjs,\n          options = instance.options,\n          formCssClasses = options.formOptions.cssClasses,\n          isAjaxForm = options.formOptions.ajaxSubmit,\n          btnEl = formEl.querySelector('[type=\"submit\"]'),\n          eventPreventDefault = ( enableBtn = true ) => {\n              if( btnEl && enableBtn ){ btnEl.disabled = false; }\n              if( event ){ event.preventDefault(); }\n          };\n\n    if( isAjaxForm ){\n        eventPreventDefault(false);\n    }\n\n    if( btnEl ){\n        if( btnEl.disabled ){\n            eventPreventDefault(false);\n            return false;\n        }\n        btnEl.disabled = true;\n    }\n\n    removeClass( formEl, (formCssClasses.ajaxComplete + ' ' + formCssClasses.ajaxError + ' ' + formCssClasses.ajaxSuccess) );\n    addClass( formEl, formCssClasses.submit );\n\n    instance.validateForm()\n        .then(fields => {\n\n            const beforeSendData = {\n                stopExecution: false,\n                formData: isAjaxForm ? instance.getFormData() : null\n            };\n\n            const rfsObject = {\n                  functionsList: options.formOptions.beforeSend,\n                  data: beforeSendData,\n                  stopConditionFn: function(data){ return data.stopExecution; }\n            };\n            return runFunctionsSequence(rfsObject);\n\n        }).then(dataList => {\n\n            if( dataList.filter(data => data.stopExecution).length > 0 ){\n                eventPreventDefault();\n                return false;\n            }\n            \n            if( isAjaxForm ){\n                const formData = dataList.pop().formData;\n                addClass( formEl, formCssClasses.ajaxPending );\n                dispatchCustomEvent( formEl, customEvents.form.submit, { detail: ajaxCall( formEl, formData, options ) } );\n            }\n\n        })\n        .catch(fields => {\n            eventPreventDefault();\n            removeClass( formEl, formCssClasses.submit );\n        });\n    \n}\n","\nimport { fieldsStringSelector, mergeValidateFieldDefault, isFieldForChangeEvent } from '../helpers';\n\nexport const validation = function( event ){\n\n    const isChangeEvent = event.type === 'change',\n          fieldEl = event.target,\n          self = fieldEl.closest('form').formjs;\n\n    if( fieldEl.matches( fieldsStringSelector ) ){\n        const isFieldForChangeEventBoolean = isFieldForChangeEvent(fieldEl);\n        \n        if(\n            (isFieldForChangeEventBoolean && isChangeEvent) ||\n            (!isFieldForChangeEventBoolean && !isChangeEvent)\n        ){\n            \n            return self.validateField( fieldEl )\n                .then(() => {\n                    const type = fieldEl.type,\n                          realtedFieldEqualTo = fieldEl.closest('form').querySelector('[data-equal-to=\"'+ fieldEl.name +'\"]');\n\n                    if(\n                        // FIELD IS ( required OR data-validate-if-filled ) AND RELATED FIELD data-equal-to HAS A VALUE\n                        (fieldEl.required || fieldEl.matches('[data-validate-if-filled]')) && \n                        !(type === 'checkbox' || type === 'radio') && \n                        realtedFieldEqualTo && realtedFieldEqualTo.value.trim() !== ''\n                    ){\n                        self.validateField( realtedFieldEqualTo ).catch(errors => {});\n                    }\n\n                    return mergeValidateFieldDefault({ result: true, fieldEl });\n                })\n                .catch(errors => mergeValidateFieldDefault({fieldEl, errors}));\n\n        }\n    }\n    \n}\n","\nimport { addClass, fieldsStringSelector, removeClass } from '../helpers';\n\nexport const validationEnd = function( event ){\n\n    const fieldsArray = event.detail.fieldEl ? [event.detail] : event.detail.fields,\n          options = fieldsArray[0].fieldEl.closest('form').formjs.options.fieldOptions;\n\n    fieldsArray.forEach(obj => {\n        const fieldEl = obj.fieldEl;\n        if( fieldEl.matches( fieldsStringSelector ) ){\n            const containerEl = fieldEl.closest( options.questionContainer ),\n                isReqFrom = fieldEl.matches('[data-required-from]'),\n                reqMoreEl = document.querySelector( fieldEl.getAttribute('data-required-from') );\n\n            if( containerEl !== null ){\n                removeClass( containerEl, options.cssClasses.pending );\n            }\n\n            if( containerEl !== null && !options.skipUIfeedback ){\n\n                if( obj.result ){\n\n                    if( !isReqFrom || (isReqFrom && reqMoreEl.checked) ){\n                        // IF FIELD IS VALID\n                        const errorClasses = options.cssClasses.error + ' ' + options.cssClasses.errorEmpty + ' ' + options.cssClasses.errorRule;\n                        removeClass( containerEl, errorClasses );\n                        addClass( containerEl, options.cssClasses.valid );\n                    }\n\n                } else {\n\n                    // IF FIELD IS NOT VALID\n                    let extraErrorClass = options.cssClasses.errorRule;\n\n                    // HANDLE CASE OF FIELD data-checks\n                    const isChecks = fieldEl.matches('[data-checks]'),\n                          checkedElLength = (isChecks ? containerEl.querySelectorAll('[name=\"' + fieldEl.name + '\"]:checked').length : 0);\n\n                    if( (!isChecks && (obj.errors && obj.errors.empty)) || (isChecks && checkedElLength === 0) ){\n                        extraErrorClass = options.cssClasses.errorEmpty;\n                    }\n\n                    const errorClasses = options.cssClasses.error + ' ' + extraErrorClass,\n                          errorClassToRemove = options.cssClasses.errorEmpty + ' ' + options.cssClasses.errorRule;\n                    removeClass( containerEl, options.cssClasses.valid + ' ' + errorClassToRemove );\n                    addClass( containerEl, errorClasses );\n\n                }\n            }\n        }\n    });\n\n}\n","\nimport { customEvents } from './helpers';\nimport { keypressMaxlength, dataTypeNumber, pastePrevent, submit, validation, validationEnd } from './listenerCallbacks';\n\nexport function formStartup( formEl, options ){\n\n    formEl.noValidate = true;\n\n    const fieldOptions = options.fieldOptions,\n          formOptions = options.formOptions;\n        \n    // VALIDATION WITH ATTRIBUTES LIKE HTML ONES ( ALSO FOR BUG FIXING, EG: maxlength IN ANDROID )\n    if( fieldOptions.strictHtmlValidation ){\n        \n        // maxlength\n        // MAXLENGTH IS BUGGY IN ANDROID BROWSERS\n        formEl.addEventListener('keypress', keypressMaxlength, false);\n\n        // data-type=\"number\"\n        // SINCE VALIDATING type=\"number\" WITH NON NUMERIC CHARS WILL RETURN EMPTY STRING IN SOME BROWSERS ( EG: FIREFOX )\n        formEl.addEventListener('input', dataTypeNumber, false);\n        \n    }\n    \n    if( fieldOptions.preventPasteFields && formEl.querySelectorAll( fieldOptions.preventPasteFields ).length ){\n        // INIT EVENT LISTENER FOR \"PASTE\" EVENT TO PREVENT IT ON SPECIFIED FIELDS\n        formEl.addEventListener('paste', pastePrevent, false);\n    }\n\n    // INIT EVENTS LISTENER ( AS IN fieldOptions )\n    fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n        const useCapturing = eventName === 'blur' ? true : false;\n        formEl.addEventListener(eventName, validation, useCapturing);\n    });\n\n    formEl.addEventListener(customEvents.field.validation, validationEnd, false);\n    \n    // HANDLE FORM SUBMIT\n    if( formOptions.handleSubmit ){\n        // INIT FORM SUBMIT ( DEFAULT AND AJAX )\n        formEl.addEventListener('submit', submit);\n\n        if( formOptions.ajaxSubmit ){\n            if( formEl.getAttribute('enctype') ){\n                formOptions.ajaxOptions.headers['Content-Type'] = formEl.getAttribute('enctype');\n            }\n\n            if( formEl.getAttribute('method') ){\n                formOptions.ajaxOptions.method = formEl.getAttribute('method').toUpperCase();\n            }\n\n            if( formEl.getAttribute('action') ){\n                formOptions.ajaxOptions.url = formEl.getAttribute('action');\n            }\n        }\n    }\n\n}\n","\nimport { getFilledFields, isFieldForChangeEvent } from './helpers';\nimport { validation } from './listenerCallbacks';\n\nexport const checkFilledFields = formEl => {\n\n    const formFields = getFilledFields( formEl );\n    // VALIDATE ALL FILLED FIELDS\n    return Promise.all( formFields.map(fieldEl => {\n\n        const isFieldForChangeEventBoolean = isFieldForChangeEvent(fieldEl);\n        const fakeEventObj = { target: fieldEl, type: (isFieldForChangeEventBoolean ? 'change': '') };\n        return validation( fakeEventObj );\n\n    }) )\n    .then(fields => fields)\n    .catch(fields => fields);\n\n}\n","\nimport { fieldsStringSelector } from './fieldsStringSelector';\nimport { getUniqueFields } from './getUniqueFields';\n\nexport const getFilledFields = formEl => {\n    return getUniqueFields( formEl.querySelectorAll(fieldsStringSelector) )\n    .map(fieldEl => {\n\n        const name = fieldEl.name,\n              type = fieldEl.type,\n              isCheckboxOrRadio = (type === 'checkbox' || type === 'radio'),\n              fieldChecked = formEl.querySelector('[name=\"' + name + '\"]:checked'),\n              isReqFrom = fieldEl.matches('[data-required-from]'),\n              reqMoreEl = (isReqFrom ? formEl.querySelector(fieldEl.getAttribute('data-required-from')) : null);\n\n        return (\n            isCheckboxOrRadio ? (fieldChecked || null) :\n            (isReqFrom && reqMoreEl.checked) || (!isReqFrom && fieldEl.value) ? fieldEl : null\n        );\n\n    })\n    .filter(fieldEl => fieldEl !== null);\n}\n","\nimport { mergeValidateFieldDefault, isDOMNode, runFunctionsSequence } from './helpers';\nimport { isValid } from './isValid';\n\nexport function checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    if( !isDOMNode(fieldEl) ){\n        const obj = mergeValidateFieldDefault({fieldEl});\n        return Promise.resolve(obj);\n    }\n\n    const formEl = fieldEl.closest('form'),\n          isValidValue = fieldEl.value.trim().length > 0;\n\n    // HANDLE FIELD data-required-from WHEN CHANGING ITS RELATED RADIO\n    if( fieldEl.type === 'radio' ){\n        const checkedEl = fieldEl.checked ? fieldEl : formEl.querySelector('[name=\"'+ fieldEl.name +'\"]:checked'),\n              reqMoreIsChecked = checkedEl && checkedEl.matches('[data-require-more]'),\n              findReqMoreEl = reqMoreIsChecked ? checkedEl : formEl.querySelector('[data-require-more][name=\"'+ fieldEl.name +'\"]'),\n              findReqFromEl = findReqMoreEl ? formEl.querySelector('[data-required-from=\"#'+ findReqMoreEl.id +'\"]') : null;\n        \n        if( checkedEl && findReqFromEl ){\n            findReqFromEl.required = findReqMoreEl.required && findReqMoreEl.checked;\n            if( !reqMoreIsChecked ){\n                findReqFromEl.value = '';\n            } else if( fieldOptions.focusOnRelated ) {\n                findReqFromEl.focus();\n            }\n        }\n    }\n\n    // HANDLE FIELD data-require-more & data-required-from WHEN *-from IT'S FILLED\n    if( fieldEl.matches('[data-required-from]') && isValidValue ){\n        const reqMoreEl = formEl.querySelector( fieldEl.getAttribute('data-required-from') );\n        reqMoreEl.checked = true;\n        fieldEl.required = reqMoreEl.required;\n    }\n\n    const needsValidation = fieldEl.required || (fieldEl.matches('[data-validate-if-filled]') && isValidValue);\n\n    return runFunctionsSequence({\n            functionsList: fieldOptions.beforeValidation,\n            data: {fieldEl}\n        })\n        .then(data => {\n            const dataObj = data.pop();\n            return new Promise(resolve => {\n                if( !needsValidation ){\n                    dataObj.result = true;\n                }\n                resolve( needsValidation ? isValid(fieldEl, validationRules, validationErrors) : dataObj );\n            });\n        });\n\n}\n","\nimport { mergeValidateFieldDefault, mergeObjects, toCamelCase } from './helpers';\n\nexport function isValid( fieldEl, validationRules, validationErrors ){\n\n    const fieldValue = fieldEl.value,\n          obj = mergeValidateFieldDefault({result: fieldValue.trim().length > 0, fieldEl}),\n          isRadioOrCheckbox = /^(radio|checkbox)$/.test(fieldEl.type),\n          hasSelectedInput = fieldEl.closest('form').querySelectorAll('[name=\"'+ fieldEl.name +'\"]:checked').length > 0;\n\n    if( (!isRadioOrCheckbox && !obj.result) || (isRadioOrCheckbox && !hasSelectedInput) ){\n        obj.result = false;\n        obj.errors = { empty: true };\n        return Promise.resolve(obj);\n    }\n\n    // COLLECT VALIDATION METHOD NAMES ( USED TO RUN VALIDATIONS AND GET ERRORS )\n    const validationMethods = Array.from(fieldEl.attributes).reduce((accList, attr) => {\n        const attrName = toCamelCase( attr.name.replace('data-', '') ),\n              attrValue = toCamelCase( attr.value ),\n              isAttrValueWithFn = (attrName === 'type' || attrName === 'subtype') && validationRules[attrValue],\n              isAttrNameWithFn = validationRules[attrName];\n\n        if( isAttrValueWithFn || isAttrNameWithFn ){\n            accList.push( isAttrValueWithFn ? attrValue : attrName );\n        }\n        return accList;\n    }, []);\n\n    return new Promise(resolve => {\n\n        // RUN VALIDATIONS\n        const validationsResult = validationMethods.reduce((accPromise, methodName) => {\n            return accPromise.then(accObj => {\n                return new Promise(resolveVal => {\n                    // RUN VALIDATION INSIDE A PROMISE IS USEFUL FOR ASYNC VALIDATIONS\n                    resolveVal( validationRules[methodName](fieldValue, fieldEl) );\n                }).then(valObj => {\n                    // ADD CUSTOM ERROR-KEY FOR EACH VALIDATION RULE\n                    if( !valObj.result ){\n                        const errorObj = {};\n                        if( typeof valObj.errors === 'undefined' || typeof valObj.errors[methodName] === 'undefined' ){\n                            errorObj[methodName] = true;\n                        }\n                        valObj.errors = mergeObjects({}, valObj.errors, errorObj);\n                    }\n                    valObj = valObj.result ? {} : valObj;\n                    return mergeObjects(accObj, valObj);\n                });\n            });\n        }, Promise.resolve(obj));\n        resolve(validationsResult);\n\n    }).then(data => {\n\n        // GET ERRORS\n        if( !data.result ){\n            data.errors = validationMethods.reduce((accObj, methodName) => {\n                const errors = (validationErrors[methodName] && validationErrors[methodName](fieldValue, fieldEl)) || {};\n                return mergeObjects(accObj, errors);\n            }, data.errors);\n        }\n        return data;\n\n    });\n\n}\n","\nimport { fieldsStringSelector, getUniqueFields, mergeValidateFieldDefault, mergeValidateFormDefault, mergeObjects } from './helpers';\nimport { checkFieldValidity } from './checkFieldValidity';\n\nexport function checkFormValidity( formEl, fieldOptions, validationRules, validationErrors, fieldToSkip = null ){\n\n    fieldOptions = mergeObjects( {}, fieldOptions, {focusOnRelated: false} );\n    const fieldsList = getUniqueFields( formEl.querySelectorAll(fieldsStringSelector) );\n\n    return Promise.all( fieldsList.map(fieldEl => {\n\n        if( fieldToSkip && fieldEl === fieldToSkip ){\n            const obj = mergeValidateFieldDefault({fieldEl, result: true});\n            return Promise.resolve(obj);\n        }\n        return checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors );\n\n    }) ).then(fields => {\n\n        const areAllFieldsValid = fields.filter(fieldObj => !fieldObj.result).length === 0;\n        return mergeValidateFormDefault({result: areAllFieldsValid, fields});\n\n    });\n\n}\n","\nimport { version }              from './modules/version';\nimport { customEvents, dispatchCustomEvent, excludeSelector, finalizeFieldPromise, finalizeFormPromise, mergeObjects, removeClass } from './modules/helpers';\nimport { options }              from './modules/options';\nimport { validationRules }      from './modules/validationRules';\nimport { validationEnd }        from './modules/listenerCallbacks';\nimport { constructorFn }        from './modules/constructor';\nimport { destroy }              from './modules/destroy';\nimport { checkFilledFields }    from './modules/checkFilledFields';\nimport { checkFieldValidity }   from './modules/checkFieldValidity';\nimport { checkFormValidity }    from './modules/checkFormValidity';\n\nclass Form {\n\n    constructor( formEl, optionsObj ){\n        constructorFn(this, formEl, optionsObj);\n    }\n\n    destroy(){\n        destroy(this.formEl, this.options);\n    }\n    \n    getFormData(){\n        const formFieldsEl = this.formEl.querySelectorAll('input, select, textarea'),\n              filteredFields = Array.from( formFieldsEl ).filter( elem => elem.matches(excludeSelector) );\n        return this.options.formOptions.getFormData(filteredFields);\n    }\n\n    validateField( fieldEl, fieldOptions ){\n        fieldEl = (typeof fieldEl === 'string' ? this.formEl.querySelector(fieldEl) : fieldEl);\n        fieldOptions = mergeObjects({}, this.options.fieldOptions, fieldOptions);\n        const formEl = this.formEl;\n        const skipUIfeedback = this.options.fieldOptions.skipUIfeedback;\n        return checkFieldValidity(fieldEl, fieldOptions, this.validationRules, this.validationErrors)\n            .then(obj => {\n                return new Promise(resolve => {\n                    if( obj.fieldEl ){\n                        dispatchCustomEvent( obj.fieldEl, customEvents.field.validation, { bubbles: false, detail: obj } );\n                        dispatchCustomEvent( formEl, customEvents.field.validation, { detail: obj } );\n                        if( fieldOptions.onValidationCheckAll && obj.result ){\n                            // FORCE skipUIfeedback TO true\n                            fieldOptions.skipUIfeedback = true;\n                            resolve(\n                                checkFormValidity( formEl, fieldOptions, this.validationRules, this.validationErrors, obj.fieldEl )\n                                    .then(dataForm => {\n                                        const clMethodName = dataForm.result ? 'add' : 'remove';\n                                        formEl.classList[clMethodName]( this.options.formOptions.cssClasses.valid );\n                                        dispatchCustomEvent( formEl, customEvents.form.validation, { detail: dataForm } );\n                                        // RESTORE skipUIfeedback TO THE ORIGINAL VALUE\n                                        fieldOptions.skipUIfeedback = skipUIfeedback;\n                                        return obj;\n                                    })\n                            );\n                        } else if( !obj.result ){\n                            removeClass( formEl, this.options.formOptions.cssClasses.valid );\n                        }\n                    }\n                    resolve( obj );\n                });\n            })\n            .then(finalizeFieldPromise);\n    }\n\n    validateFilledFields(){\n        return checkFilledFields(this.formEl);\n    }\n\n    validateForm( fieldOptions ){\n        fieldOptions = mergeObjects({}, this.options.fieldOptions, fieldOptions);\n        const formEl = this.formEl;\n        return checkFormValidity(formEl, fieldOptions, this.validationRules, this.validationErrors)\n            .then(data => {\n                const clMethodName = data.result ? 'add' : 'remove';\n                formEl.classList[clMethodName]( this.options.formOptions.cssClasses.valid );\n                validationEnd( {detail:data} );\n                dispatchCustomEvent( formEl, customEvents.form.validation, { detail: data } );\n                return data;\n            })\n            .then(finalizeFormPromise);\n    }\n    \n    static addValidationErrors( errorsObj ){\n        this.prototype.validationErrors = mergeObjects({}, this.prototype.validationErrors, errorsObj);\n    }\n\n    static addValidationRules( rulesObj ){\n        this.prototype.validationRules = mergeObjects({}, this.prototype.validationRules, rulesObj);\n    }\n    \n    static setOptions( optionsObj ){\n        this.prototype.options = mergeObjects({}, this.prototype.options, optionsObj);\n    }\n\n}\n\nForm.prototype.options = options;\nForm.prototype.validationErrors = {};\nForm.prototype.validationRules = validationRules;\nForm.prototype.version = version;\n\nexport default Form;\n","\nimport { checkFormEl, isNodeList, mergeObjects }   from './helpers';\nimport { formStartup }                             from './formStartup';\n\nexport function constructorFn( self, formEl, optionsObj ){\n\n    const argsL = arguments.length,\n          checkFormElem = checkFormEl(formEl);\n\n    if( argsL === 0 || (argsL > 0 && !formEl) ){\n        throw new Error('First argument \"formEl\" is missing or falsy!');\n    }\n    if( isNodeList(formEl) ){\n        throw new Error('First argument \"formEl\" must be a single DOM node or a form CSS selector, not a NodeList!');\n    }\n    if( !checkFormElem.result ){\n        throw new Error('First argument \"formEl\" is not a DOM node nor a form CSS selector!');\n    }\n\n    self.formEl = checkFormElem.element;\n    self.formEl.formjs = self;\n    self.options = mergeObjects({}, self.constructor.prototype.options, optionsObj);\n\n    // BINDING CONTEXT FOR FUTURE EXECUTION\n    const cbList = [\n        // IN fieldOptions\n        'beforeValidation',\n        // IN formOptions\n        'beforeSend',\n        'getFormData'\n    ];\n    cbList.forEach(cbName => {\n        const optionType = self.options.formOptions[cbName] ? 'formOptions' : 'fieldOptions';\n        let cbOpt = self.options[optionType][cbName];\n\n        if( cbOpt ){\n            self.options[optionType][cbName] = ( Array.isArray(cbOpt) ? cbOpt.map(cbFn => cbFn.bind(self)) : cbOpt.bind(self) );\n        }\n    });\n\n    formStartup( self.formEl, self.options );\n    \n}\n","\nimport { customEvents } from './helpers';\nimport { keypressMaxlength, dataTypeNumber, pastePrevent, submit, validation, validationEnd } from './listenerCallbacks';\n\n\nexport function destroy( formEl, options ){\n\n    if( options.fieldOptions.strictHtmlValidation ){\n        formEl.removeEventListener('keypress', keypressMaxlength, false);\n        formEl.removeEventListener('input', dataTypeNumber, false);\n    }\n\n    if( options.fieldOptions.preventPasteFields ){\n        formEl.removeEventListener('paste', pastePrevent, false);\n    }\n\n    if( options.formOptions.handleSubmit ){\n        formEl.removeEventListener('submit', submit);\n    }\n\n    options.fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n        const useCapturing = eventName === 'blur' ? true : false;\n        formEl.removeEventListener(eventName, validation, useCapturing);\n    });\n\n    formEl.removeEventListener(customEvents.field.validation, validationEnd, false);\n\n    delete formEl.formjs;\n    \n}\n","\nexport const excludeSelector = ':not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"file\"]):not([data-exclude-data])'\n"],"names":["addClass","element","cssClasses","split","forEach","className","classList","add","isNodeList","nodeList","NodeList","prototype","isPrototypeOf","removeClass","remove","isDOMNode","node","Element","checkFormEl","formEl","isString","isFormSelector","document","querySelector","tagName","toLowerCase","result","customEvents","validation","submit","mergeObjects","out","i","arguments","length","obj","key","isArray","Object","toString","call","isObject","hasOwnProperty","concat","slice","Array","push","dispatchCustomEvent","elem","eventName","eventOptions","bubbles","eventObj","CustomEvent","dispatchEvent","fieldsStringSelector","finalizeFieldPromise","Promise","resolve","reject","errors","finalizeFormPromise","fields","formatMap","dateArray","reverse","getDateAsNumber","dateString","dateFormat","separator","splitChar","match","indexOf","replace","join","getUniqueFields","currentFieldName","currentFieldType","from","filter","fieldEl","name","type","matches","mergeValidateFieldDefault","mergeValidateFormDefault","isFieldForChangeEvent","runFunctionsSequence","functionsList","data","stopConditionFn","reduce","acc","promiseFn","then","res","dataNew","dataList","serializeObject","_typeof","constructor","keys","a","k","encodeURIComponent","toCamelCase","string","all","letter","toUpperCase","defaultCallbacksInOptions","fieldOptions","beforeValidation","fieldObj","this","options","containerEl","closest","questionContainer","value","dirty","checkDirtyField","skipUIfeedback","pending","formOptions","getFormData","filteredFields","formData","isCheckbox","isRadio","isSelect","checked","checkboxes","querySelectorAll","field","checkedRadio","selectedOpts","option","selected","error","errorEmpty","errorRule","valid","focusOnRelated","handleFileUpload","onValidationCheckAll","preventPasteFields","strictHtmlValidation","validateOnEvents","ajaxOptions","cache","credentials","headers","method","mode","redirect","timeout","url","location","href","ajaxSubmit","beforeSend","ajaxComplete","ajaxError","ajaxPending","ajaxSuccess","handleSubmit","validationRules","date","test","email","number","checkbox","dataChecksEl","attrValue","JSON","parse","getAttribute","checkedElLength","isMinOk","isMaxOk","checks","minChecks","maxChecks","equalTo","exactLength","valueLength","minlength","maxlength","file","maxFileSize","MIMEtype","accept","RegExp","filesList","files","exceedMaxFileSize","size","isAcceptedFileType","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","max","maxVal","maxLength","min","minVal","minLength","pattern","radio","fieldChecked","trim","dataTypeNumber","event","target","fieldValue","stopImmediatePropagation","valueReplaced","keypressMaxlength","keyPressed","which","keyCode","pastePrevent","formjs","preventDefault","ajaxCall","formDataObj","timeoutTimer","isMultipart","body","formDataMultipart","FormData","append","idx","stringify","Headers","controller","AbortController","signal","window","setTimeout","abort","fetch","response","ok","fetchMethod","get","contentType","headerOpt","getFetchMethod","clearTimeout","disabled","instance","formCssClasses","isAjaxForm","btnEl","eventPreventDefault","enableBtn","validateForm","beforeSendData","stopExecution","rfsObject","pop","detail","isChangeEvent","self","isFieldForChangeEventBoolean","validateField","realtedFieldEqualTo","required","validationEnd","fieldsArray","isReqFrom","reqMoreEl","errorClasses","extraErrorClass","isChecks","empty","errorClassToRemove","formStartup","noValidate","addEventListener","useCapturing","checkFilledFields","formFields","map","isCheckboxOrRadio","getFilledFields","checkFieldValidity","validationErrors","isValidValue","checkedEl","reqMoreIsChecked","findReqMoreEl","findReqFromEl","id","focus","needsValidation","dataObj","isRadioOrCheckbox","hasSelectedInput","validationMethods","attributes","accList","attr","attrName","isAttrValueWithFn","isAttrNameWithFn","accPromise","methodName","accObj","resolveVal","valObj","errorObj","isValid","checkFormValidity","fieldToSkip","fieldsList","areAllFieldsValid","Form","optionsObj","argsL","checkFormElem","Error","cbList","cbName","optionType","cbOpt","cbFn","bind","constructorFn","errorsObj","rulesObj","removeEventListener","destroy","formFieldsEl","_this","dataForm","clMethodName","_this2","version"],"mappings":"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"}