{"version":3,"file":"formjs.min.js","sources":["../src/modules/version.js","../src/modules/helpers/addClass.js","../src/modules/helpers/isNodeList.js","../src/modules/helpers/removeClass.js","../src/modules/helpers/isDOMNode.js","../src/modules/helpers/checkFormEl.js","../src/modules/helpers/customEvents.js","../src/modules/helpers/mergeObjects.js","../src/modules/helpers/dispatchCustomEvent.js","../src/modules/helpers/fieldsStringSelector.js","../src/modules/helpers/getDateAsNumber.js","../src/modules/helpers/getSplitChar.js","../src/modules/helpers/getUniqueFields.js","../src/modules/helpers/getValidateFieldDefault.js","../src/modules/helpers/getValidateFormDefault.js","../src/modules/helpers/isFieldForChangeEvent.js","../src/modules/helpers/runFunctionsSequence.js","../src/modules/helpers/serializeObject.js","../src/modules/helpers/toCamelCase.js","../src/modules/optionsUtils.js","../src/modules/helpers/checkDirtyField.js","../src/modules/options.js","../src/modules/validationRules.js","../src/modules/validationRules/date.js","../src/modules/validationRules/email.js","../src/modules/validationRules/number.js","../src/modules/submit.js","../src/modules/ajaxCall.js","../src/modules/listenerCallbacks.js","../src/modules/formStartup.js","../src/modules/init.js","../src/modules/helpers/getFilledFields.js","../src/modules/validationRulesAttributes.js","../src/modules/validationRules/checkbox.js","../src/modules/validationRules/checks.js","../src/modules/validationRules/equalTo.js","../src/modules/validationRules/exactLength.js","../src/modules/validationRules/file.js","../src/modules/validationRules/length.js","../src/modules/validationRules/max.js","../src/modules/validationRules/maxlength.js","../src/modules/validationRules/min.js","../src/modules/validationRules/minlength.js","../src/modules/validationRules/pattern.js","../src/modules/validationRules/radio.js","../src/modules/validationRules/requiredFrom.js","../src/modules/checkFieldValidity.js","../src/modules/isValid.js","../src/modules/checkFormValidity.js","../src/index.js","../src/modules/constructor.js","../src/modules/destroy.js","../src/modules/helpers/excludeSelector.js","../src/modules/validationErrors.js"],"sourcesContent":["\nexport const version = '4.1.0';\n","\nexport const addClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.add( className );\n    });\n}\n","\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList );\n}\n","\nexport const removeClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.remove( className );\n    });\n}\n","\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node );\n}\n","\nimport { isDOMNode } from './isDOMNode';\n\nexport const checkFormEl = formEl => {\n    let isString = typeof formEl,\n        isValidNodeSelector = isString === 'string' && isDOMNode(document.querySelector(formEl)),\n        isFormSelector = isValidNodeSelector && document.querySelector(formEl).tagName.toLowerCase() === 'form',\n        obj = {\n            result: isDOMNode(formEl) || isFormSelector,\n            element: (isString === 'string' ? document.querySelector(formEl) : formEl)\n        };\n\n    return obj;\n}\n","\nexport const customEvents = {\n    field: {\n        validation: 'fjs.field:validation'\n    },\n    form: {\n        submit:     'fjs.form:submit',\n        validation: 'fjs.form:validation'\n    }\n}\n","\nexport const mergeObjects = function( out = {} ){\n    for(let i=1; i<arguments.length; i++){\n        let obj = arguments[i];\n\n        if(!obj){ continue; }\n\n        for(let key in obj){\n            let isArray = Object.prototype.toString.call(obj[key]) === \"[object Array]\";\n            let isObject = Object.prototype.toString.call(obj[key]) === \"[object Object]\";\n\n            // COPY ONLY ENUMERABLE PROPERTIES\n            if( obj.hasOwnProperty(key) ){\n                if( isArray ){\n\n                    if( typeof out[key] === 'undefined' ){\n                        out[key] = [];\n                    }\n                    out[key] = out[key].concat( obj[key].slice(0) );\n\n                } else if( isObject ){\n\n                    out[key] = mergeObjects(out[key], obj[key]);\n\n                } else {\n\n                    // * STRING | NUMBER | BOOLEAN | FUNCTION\n                    if( Array.isArray(out[key]) ){\n                        // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                        out[key].push(obj[key]);\n                    } else {\n                        out[key] = obj[key];\n                    }\n\n                }\n            }\n        }\n    }\n\n    return out;\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const dispatchCustomEvent = ( elem, eventName, data = {}, eventOptions = {} ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions);\n    const eventObj = new Event(eventName, eventOptions);\n    eventObj.data = data;\n    elem.dispatchEvent( eventObj );\n}\n","\nexport const fieldsStringSelector = 'input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"hidden\"]), select, textarea'\n","\nimport { getSplitChar } from './getSplitChar';\n\nconst formatMap = {\n    'YYYY-MM-DD': function(dateArray){\n        return dateArray;\n    },\n    'MM-DD-YYYY': function(dateArray){\n        return [dateArray[2], dateArray[0], dateArray[1]];\n    },\n    'DD-MM-YYYY': function(dateArray){\n        return dateArray.reverse();\n    }\n};\n\nexport const getDateAsNumber = ( dateString, dateFormat ) => {\n    dateFormat = dateFormat || 'YYYY-MM-DD';\n    const splitChar = getSplitChar(dateString);\n\n    if( dateFormat.indexOf(splitChar) < 0 ){\n        return;\n    }\n\n    dateFormat = dateFormat.replace(/[^YMD]/g, '-');\n    dateString = dateString.split(splitChar);\n    dateString = formatMap[dateFormat](dateString).join('');\n    \n    return dateString;\n}\n","\nexport const getSplitChar = string => {\n    // MATCH ANY NON-DIGIT CHAR\n    const separator = string.match(/\\D/);\n    return (separator && separator.length > 0) ? separator[0] : null;\n}\n","\nexport const getUniqueFields = nodeList => {\n\n    let currentFieldName = '',\n        currentFieldType = '';\n\n    return Array.from( nodeList ).filter(fieldEl => {\n        const name = fieldEl.name,\n              type = fieldEl.type;\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false;\n        }\n        \n        if( !fieldEl.matches('[data-required-from]') ){\n            currentFieldName = name;\n            currentFieldType = type;\n        }\n        return true;\n    });\n    \n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const getValidateFieldDefault = obj => {\n    return mergeObjects({}, { result: false, fieldEl: null }, obj);\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const getValidateFormDefault = obj => {\n    return mergeObjects({}, { result: true, fields: [] }, obj);\n}\n","\nexport const isFieldForChangeEvent = fieldEl => {\n    return fieldEl.matches('select, [type=\"radio\"], [type=\"checkbox\"], [type=\"file\"]');\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const runFunctionsSequence = ( { functionsList = [], data = {}, stopConditionFn = () => false } = {} ) => {\n    return functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1]);\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res);\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result);\n                    return res;\n                });\n        });\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList);\n}\n","\nexport const serializeObject = obj => {\n    var objToString = (\n            (obj && typeof obj === 'object' && obj.constructor === Object) ? \n            Object.keys(obj)\n                .reduce((a,k) => {\n                    a.push(k+'='+encodeURIComponent(obj[k]));\n                    return a\n                },[]).join('&') : \n            obj\n    );\n    return objToString;\n}\n","\nexport const toCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase(); });\n}\n","\nimport { addClass, checkDirtyField } from './helpers';\n\nexport const defaultCallbacksInOptions = {\n    fieldOptions: {\n\n        beforeValidation: function beforeValidationDefault ( fieldObj ) {\n\n            const fieldOptions = this.options.fieldOptions;\n\n            checkDirtyField( fieldObj.fieldEl, fieldOptions );\n            if( !fieldOptions.skipUIfeedback ){\n                addClass( fieldObj.fieldEl.closest( fieldOptions.questionContainer ), fieldOptions.cssClasses.pending );\n            }\n\n        }\n\n    },\n    formOptions: {\n\n        getFormData: function getFormDataDefault ( filteredFields ) {\n\n            const formData = {},\n                  formEl = this.formEl;\n\n            filteredFields.forEach(function( fieldEl ){\n                const isCheckbox = fieldEl.type === 'checkbox',\n                      isRadio = fieldEl.type === 'radio',\n                      isSelect = fieldEl.matches('select'),\n                      name = fieldEl.name;\n                let value = fieldEl.value;\n                                \n                if( isCheckbox ) {\n                    \n                    value = fieldEl.checked;\n                    let checkboxes = Array.from( formEl.querySelectorAll('[name=\"'+ name +'\"]') );\n                    if( checkboxes.length > 1 ){\n\n                        value = [];\n                        let checkedElems = checkboxes.filter(field => field.checked);\n                        checkedElems.forEach(fieldEl => {\n                            value.push( fieldEl.value );\n                        });\n\n                    }\n                        \n                } else if( isRadio ){\n                    \n                    let checkedRadio = formEl.querySelector('[name=\"'+ name +'\"]:checked');\n                    value = (checkedRadio === null ? null : checkedRadio.value);\n                    \n                } else if( isSelect ){\n\n                    let selectedOpts = Array.from( fieldEl.options ).filter(option => option.selected);\n                    if( selectedOpts.length > 1 ){\n\n                        value = [];\n                        selectedOpts.forEach(fieldEl => {\n                            value.push( fieldEl.value );\n                        });\n\n                    }\n                }\n\n                formData[ name ] = value;\n            });\n\n            return formData;\n\n        }\n\n    }\n}\n","\nimport { addClass } from './addClass';\nimport { isNodeList } from './isNodeList';\nimport { removeClass } from './removeClass';\n\nexport const checkDirtyField = ( fields, fieldOptions ) => {\n\n    fields = isNodeList(fields) ? Array.from( fields ) : [fields];\n    fields.forEach(fieldEl => {\n        if( fieldEl.type !== 'checkbox' && fieldEl.type !== 'radio' ){\n            const containerEl = fieldEl.closest( fieldOptions.questionContainer ) || fieldEl;\n            if( fieldEl.value ){\n                addClass( containerEl, fieldOptions.cssClasses.dirty );\n            } else {\n                removeClass( containerEl, fieldOptions.cssClasses.dirty );\n            }\n        }\n    });\n    \n}\n","\nimport { defaultCallbacksInOptions } from './optionsUtils';\n\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [defaultCallbacksInOptions.fieldOptions.beforeValidation],\n        cssClasses: {\n            dirty:              'is-dirty',\n            error:              'has-error',\n            errorEmpty:         'has-error-empty',\n            errorRule:          'has-error-rule',\n            pending:            'is-pending',\n            valid:              'is-valid'\n        },\n        focusOnRelated:         true,\n        handleFileUpload:       true,\n        handleValidation:       true,\n        maxFileSize:            10,\n        onValidationCheckAll:   true,\n        preventPasteFields:     '[type=\"password\"], [data-equal-to]',\n        questionContainer:      '[data-formjs-question]',\n        skipUIfeedback:         false,\n        strictHtmlValidation:   true,\n        validateOnEvents:       'input change'\n    },\n\n    formOptions: {\n        ajaxOptions:            {\n            cache:              'no-store',\n            credentials:        'same-origin',\n            headers: {\n                                'Content-Type': 'application/json',\n                                'Accept':       'application/json'\n            },\n            method:             'POST',\n            mode:               'same-origin',\n            redirect:           'follow',\n            timeout:            0,\n            url:                location.href\n        },\n        ajaxSubmit:             true,\n        beforeSend:             [],\n        cssClasses: {\n            ajaxComplete:       'ajax-complete',\n            ajaxError:          'ajax-error',\n            ajaxPending:        'ajax-pending',\n            ajaxSuccess:        'ajax-success',\n            submit:             'is-submitting',\n            valid:              'is-valid'\n        },\n        getFormData:            defaultCallbacksInOptions.formOptions.getFormData,\n        handleSubmit:           true\n    }\n    \n}\n","\nimport { date }         from './validationRules/date';\nimport { email }        from './validationRules/email';\nimport { number }       from './validationRules/number';\n\nexport const validationRules = {\n    date,\n    email,\n    number\n}\n","\n/*\n    DATE AS ISO 8601 DATE FORMAT:\n    YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n*/\n\nexport const date = function( string ){\n    let date = /^((((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13578]|1[02])[ \\/\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13456789]|1[012])[ \\/\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.]02[ \\/\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ \\/\\-.]02[ \\/\\-.]29))$/g.test( string ),\n        obj = {\n            result: date\n        };\n\n    return obj;\n}\n","\n// https://regex101.com/r/cdlyJy/3\n\nexport const email = function( string ){\n    let obj = {\n        result: /^[a-zA-Z_-]([\\w.-]?[a-zA-Z0-9])*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?){2,})+$/.test( string )\n    };\n\n    return obj;\n}\n","\n/*\n    ALL NUMBERS ( INTEGERS AND FLOATING )\n    VALID NUMBERS: 123 | 123.456 | .123\n*/\n\nexport const number = function( string ){\n    let obj = {\n        result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n    };\n\n    return obj;\n}","\nimport { addClass, customEvents, dispatchCustomEvent, getValidateFormDefault, removeClass, runFunctionsSequence } from './helpers';\nimport { ajaxCall } from './ajaxCall';\n\nexport function submit( event ){\n\n    const formEl = event.target,\n          instance = formEl.formjs,\n          options = instance.options,\n          formCssClasses = options.formOptions.cssClasses,\n          isAjaxForm = options.formOptions.ajaxSubmit,\n          btnEl = formEl.querySelector('[type=\"submit\"]'),\n          eventPreventDefault = ( enableBtn = true ) => {\n              if( btnEl && enableBtn ){ btnEl.disabled = false; }\n              if( event ){ event.preventDefault(); }\n          };\n\n    if( isAjaxForm ){\n        eventPreventDefault(false);\n    }\n\n    if( btnEl ){\n        if( btnEl.disabled ){\n            eventPreventDefault(false);\n            return false;\n        }\n        btnEl.disabled = true;\n    }\n\n    removeClass( formEl, (formCssClasses.ajaxComplete + ' ' + formCssClasses.ajaxError + ' ' + formCssClasses.ajaxSuccess) );\n    addClass( formEl, formCssClasses.submit );\n    \n    const handleValidation = options.fieldOptions.handleValidation,\n          formValidationPromise = (handleValidation ? instance.validateForm() : Promise.resolve(getValidateFormDefault()));\n\n    formValidationPromise.then(formValidation => {\n\n        let beforeSendData = { stopExecution: false, formData: {} };\n\n        if( !formValidation.result ){\n            eventPreventDefault();\n            removeClass( formEl, formCssClasses.submit );\n            beforeSendData.stopExecution = true;\n            return [beforeSendData];\n        }\n        \n        let formDataObj = (isAjaxForm ? instance.getFormData() : null),\n            callbacksBeforeSend = options.formOptions.beforeSend;\n\n        if( formDataObj ){\n            beforeSendData.formData = formDataObj;\n        }\n\n        const rfsObject = {\n            functionsList: callbacksBeforeSend,\n            data: beforeSendData,\n            stopConditionFn: function(data){ return data.stopExecution; }\n        };\n        return runFunctionsSequence(rfsObject);\n\n    }).then(dataList => {\n\n        if( dataList.filter(data => data.stopExecution).length > 0 ){\n            eventPreventDefault();\n            return false;\n        }\n        \n        if( isAjaxForm ){\n\n            const formData = dataList.pop().formData;\n            addClass( formEl, formCssClasses.ajaxPending );\n            dispatchCustomEvent( formEl, customEvents.form.submit, ajaxCall( formEl, formData, options ) );\n            \n        }\n\n    });\n    \n}\n","\nimport { addClass, mergeObjects, removeClass, serializeObject } from './helpers';\n\nconst getFetchMethod = (response, options) => {\n    const accept = options.headers.get('Accept');\n    const contentType = response.headers.get('Content-Type');\n    const headerOpt = accept || contentType || '';\n\n    if( headerOpt.indexOf('application/json') > -1 || headerOpt === '' ){\n        return 'json';\n    } else if( headerOpt.indexOf('text/') > -1 ){\n        return 'text';\n    } else {\n        return 'blob';\n    }\n};\n\nexport function ajaxCall( formEl, formDataObj, options ){\n\n    let btnEl = formEl.querySelector('[type=\"submit\"]'),\n        timeoutTimer,\n        ajaxOptions = mergeObjects( {}, options.formOptions.ajaxOptions ),\n        isMultipart = ajaxOptions.headers['Content-Type'] === 'multipart/form-data';\n\n    ajaxOptions.body = formDataObj;\n    \n    // POST A FormData OBJECT ( multipart )\n    if( isMultipart && options.fieldOptions.handleFileUpload ){\n        let formDataMultipart = new FormData();\n        \n        for(let key in ajaxOptions.body){\n            formDataMultipart.append( key, ajaxOptions.body[key] );\n        }\n        \n        Array.from( formEl.querySelectorAll('[type=\"file\"]') ).forEach(function( field ){\n            Array.from(field.files).forEach(function( file, idx ){\n                let name = field.name+'['+ idx +']';\n                formDataMultipart.append( name, file, file.name );\n            });\n        });\n        \n        ajaxOptions.body = formDataMultipart;\n    }\n\n    if( ajaxOptions.method === 'GET' ){\n\n        // FETCH WITH \"GET\" METHOD CAN'T HAVE \"body\". SO IT IS APPENDED TO THE URL\n        ajaxOptions.url += ( /\\?/.test(ajaxOptions.url) ? '&' : '?' ) + serializeObject( ajaxOptions.body );\n        delete ajaxOptions.body;\n\n    } else {\n\n        if( ajaxOptions.headers['Content-Type'].indexOf('application/x-www-form-urlencoded') > -1 ){\n            // POST A NORMAL FORM\n            ajaxOptions.body = serializeObject( ajaxOptions.body );\n        } else if( !isMultipart ){\n            // POST A JSON STRING\n            ajaxOptions.body = JSON.stringify(ajaxOptions.body);\n        }\n\n    }\n\n    ajaxOptions.headers = new Headers( ajaxOptions.headers );\n\n    if ( ajaxOptions.timeout > 0 ) {\n        const controller = new AbortController();\n        const signal = controller.signal;\n\n        ajaxOptions.signal = signal;\n\n        timeoutTimer = window.setTimeout(function() {\n            controller.abort();\n        }, ajaxOptions.timeout);\n    }\n\n    return fetch(ajaxOptions.url, ajaxOptions)\n        .then(function( response ){\n            if( !response.ok ){\n                return Promise.reject(response);\n            }\n\n            let fetchMethod = getFetchMethod(response, ajaxOptions);\n\n            return response[fetchMethod]();\n        })\n        .then(function( data ){\n            addClass( formEl, options.formOptions.cssClasses.ajaxSuccess );\n            return data;\n        })\n        .catch(function( error ){\n            addClass( formEl, options.formOptions.cssClasses.ajaxError );\n            return Promise.reject(error);\n        })\n        .finally(function(){\n            if( timeoutTimer ){\n                window.clearTimeout( timeoutTimer );\n            }\n            removeClass( formEl, options.formOptions.cssClasses.submit + ' ' + options.formOptions.cssClasses.ajaxPending );\n            addClass( formEl, options.formOptions.cssClasses.ajaxComplete );\n            btnEl.disabled = false;\n        });\n\n}\n","\nimport { addClass, fieldsStringSelector, isFieldForChangeEvent, removeClass } from './helpers';\nimport { submit } from './submit';\n\nexport const listenerCallbacks = {\n\n    dataTypeNumber: function( event ){\n\n        const fieldEl = event.target;\n        \n        if( fieldEl.matches('[data-type=\"number\"]') ){\n            let fieldValue = fieldEl.value,\n                hasInvalidChars = /[^\\d.,+\\-]/.test(fieldValue);\n            \n            if( hasInvalidChars ){\n                event.stopImmediatePropagation();\n                let valueReplaced = fieldValue.replace(/[^\\d.,+\\-]/g, '');\n                fieldEl.value = valueReplaced;\n            }\n        }\n\n    },\n\n    keypressMaxlength: function( event ){\n\n        const fieldEl = event.target;\n        \n        if( fieldEl.matches( '[maxlength]' ) ){\n            const maxLength = fieldEl.maxLength * 1,\n                keyPressed = event.which || event.keyCode,\n                allowedKeys = [8, 37, 38, 39, 46];\n\n            if( fieldEl.value.length >= maxLength && allowedKeys.indexOf(keyPressed) === -1 ){\n                return false;\n            }\n        }\n\n    },\n\n    pastePrevent: function( event ){\n\n        const fieldEl = event.target;\n        let fieldOptions = fieldEl.closest('form').formjs.options.fieldOptions;\n\n        if( fieldEl.matches( fieldOptions.preventPasteFields ) ){     \n            event.preventDefault();\n        }\n\n    },\n\n    submit: function( event ){\n        submit(event);\n    },\n\n    validation: function( event ){\n\n        const isChangeEvent = event.type === 'change',\n              fieldEl = event.target,\n              self = fieldEl.closest('form').formjs;\n\n        if( fieldEl.matches( fieldsStringSelector ) ){\n            const isFieldForChangeEventBoolean = isFieldForChangeEvent(fieldEl);\n            \n            if(\n                (isFieldForChangeEventBoolean && isChangeEvent) ||\n                (!isFieldForChangeEventBoolean && !isChangeEvent)\n            ){\n                \n                return self.validateField( fieldEl ).then(obj => {\n                    const type = obj.fieldEl.type,\n                          realtedFieldEqualTo = obj.fieldEl.closest('form').querySelector('[data-equal-to=\"'+ obj.fieldEl.name +'\"]');\n\n                    if(\n                        // FIELD IS ( required OR data-validate-if-filled ) AND RELATED FIELD data-equal-to HAS A VALUE\n                        (obj.fieldEl.required || obj.fieldEl.matches('[data-validate-if-filled]')) && \n                        !(type === 'checkbox' || type === 'radio') && \n                        realtedFieldEqualTo && realtedFieldEqualTo.value.trim() !== ''\n                    ){\n                        return self.validateField( realtedFieldEqualTo );\n                    } else {\n                        return obj;\n                    }\n                });\n\n            }\n        }\n        \n    },\n\n    validationEnd: function( event ){\n\n        const fieldsArray = event.data.fieldEl ? [event.data] : event.data.fields,\n              options = fieldsArray[0].fieldEl.closest('form').formjs.options.fieldOptions;\n\n        fieldsArray.forEach(function( obj ){\n            let fieldEl = obj.fieldEl;\n            if( fieldEl.matches( fieldsStringSelector ) ){\n                let containerEl = fieldEl.closest( options.questionContainer ),\n                    isReqFrom = fieldEl.matches('[data-required-from]'),\n                    reqMoreEl = document.querySelector( fieldEl.getAttribute('data-required-from') );\n\n                if( containerEl !== null ){\n                    removeClass( containerEl, options.cssClasses.pending );\n                }\n\n                if( containerEl !== null && !options.skipUIfeedback ){\n\n                    if( obj.result ){\n\n                        if( !isReqFrom || (isReqFrom && reqMoreEl.checked) ){\n                            // IF FIELD IS VALID\n                            let errorClasses = options.cssClasses.error + ' ' + options.cssClasses.errorEmpty + ' ' + options.cssClasses.errorRule;\n                            removeClass( containerEl, errorClasses );\n                            addClass( containerEl, options.cssClasses.valid );\n                        }\n\n                    } else {\n\n                        // IF FIELD IS NOT VALID\n                        let extraErrorClass = options.cssClasses.errorRule;\n\n                        // HANDLE CASE OF FIELD data-checks\n                        let isChecks = fieldEl.matches('[data-checks]'),\n                            checkedElLength = (isChecks ? containerEl.querySelectorAll('[name=\"' + fieldEl.name + '\"]:checked').length : 0);\n\n                        if( (!isChecks && (obj.errors && obj.errors.empty)) || (isChecks && checkedElLength === 0) ){\n                            extraErrorClass = options.cssClasses.errorEmpty;\n                        }\n\n                        let errorClasses = options.cssClasses.error + ' ' + extraErrorClass,\n                            errorClassToRemove = options.cssClasses.errorEmpty + ' ' + options.cssClasses.errorRule;\n                        removeClass( containerEl, options.cssClasses.valid + ' ' + errorClassToRemove );\n                        addClass( containerEl, errorClasses );\n\n                    }\n                }\n            }\n        });\n\n    }\n\n}\n","\nimport { customEvents } from './helpers';\nimport { listenerCallbacks } from './listenerCallbacks';\n\nexport function formStartup( formEl, options ){\n\n    formEl.noValidate = true;\n\n    let fieldOptions = options.fieldOptions,\n        formOptions = options.formOptions;\n\n    // HANDLE FIELD VALIDATION\n    if( fieldOptions.handleValidation ){\n        \n        // VALIDATION WITH ATTRIBUTES LIKE HTML ONES ( ALSO FOR BUG FIXING, EG: maxlength IN ANDROID )\n        if( fieldOptions.strictHtmlValidation ){\n            \n            // maxlength\n            // MAXLENGTH IS BUGGY IN ANDROID BROWSERS\n            formEl.addEventListener('keypress', listenerCallbacks.keypressMaxlength, false);\n\n            // data-type=\"number\"\n            // SINCE VALIDATING type=\"number\" WITH NON NUMERIC CHARS WILL RETURN EMPTY STRING IN SOME BROWSERS ( EG: FIREFOX )\n            formEl.addEventListener('input', listenerCallbacks.dataTypeNumber, false);\n            \n        }\n        \n        if( fieldOptions.preventPasteFields && formEl.querySelectorAll( fieldOptions.preventPasteFields ).length ){\n            // INIT EVENT LISTENER FOR \"PASTE\" EVENT TO PREVENT IT ON SPECIFIED FIELDS\n            formEl.addEventListener('paste', listenerCallbacks.pastePrevent, false);\n        }\n\n        // INIT EVENTS LISTENER ( AS IN fieldOptions )\n        fieldOptions.validateOnEvents.split(' ').forEach(function( eventName ){\n            let useCapturing = (eventName === 'blur' ? true : false);\n            formEl.addEventListener(eventName, listenerCallbacks.validation, useCapturing);\n        });\n\n        formEl.addEventListener(customEvents.field.validation, listenerCallbacks.validationEnd, false);\n\n    }\n    \n    // HANDLE FORM SUBMIT\n    if( formOptions.handleSubmit ){\n        // INIT FORM SUBMIT ( DEFAULT AND AJAX )\n        formEl.addEventListener('submit', listenerCallbacks.submit);\n\n        if( formOptions.ajaxSubmit ){\n            if( formEl.getAttribute('enctype') ){\n                formOptions.ajaxOptions.headers['Content-Type'] = formEl.getAttribute('enctype');\n            }\n\n            if( formEl.getAttribute('method') ){\n                formOptions.ajaxOptions.method = formEl.getAttribute('method').toUpperCase();\n            }\n\n            if( formEl.getAttribute('action') ){\n                formOptions.ajaxOptions.url = formEl.getAttribute('action');\n            }\n        }\n    }\n\n}\n","\nimport { getFilledFields, isFieldForChangeEvent } from './helpers';\nimport { listenerCallbacks } from './listenerCallbacks';\n\nexport const init = function( formEl ){\n\n    const instance = formEl.formjs;\n    const formFields = getFilledFields( formEl );\n\n    // VALIDATE ALL FILLED FIELDS\n    return Promise.all( formFields.map(fieldEl => {\n\n        const isFieldForChangeEventBoolean = isFieldForChangeEvent(fieldEl);\n        const fakeEventObj = { target: fieldEl, type: (isFieldForChangeEventBoolean ? 'change': '') };\n        return listenerCallbacks.validation( fakeEventObj );\n\n    }) ).then(fields => {\n        instance.isInitialized = true;\n        return { instance, fields };\n    });;\n\n}\n","\nimport { fieldsStringSelector } from './fieldsStringSelector';\nimport { getUniqueFields } from './getUniqueFields';\n\nexport const getFilledFields = formEl => {\n    return getUniqueFields( formEl.querySelectorAll(fieldsStringSelector) )\n    .map(fieldEl => {\n\n        const name = fieldEl.name,\n              type = fieldEl.type,\n              isCheckboxOrRadio = (type === 'checkbox' || type === 'radio'),\n              fieldChecked = formEl.querySelector('[name=\"' + name + '\"]:checked'),\n              isReqFrom = fieldEl.matches('[data-required-from]'),\n              reqMoreEl = (isReqFrom ? formEl.querySelector(fieldEl.getAttribute('data-required-from')) : null);\n\n        return (\n            isCheckboxOrRadio ? (fieldChecked || null) :\n            (isReqFrom && reqMoreEl.checked) || (!isReqFrom && fieldEl.value) ? fieldEl : null\n        );\n\n    })\n    .filter(fieldEl => fieldEl !== null);\n}\n","\nimport { checkbox }     from './validationRules/checkbox';\nimport { equalTo }      from './validationRules/equalTo';\nimport { exactLength }  from './validationRules/exactLength';\nimport { file }         from './validationRules/file';\nimport { length }       from './validationRules/length';\nimport { max }          from './validationRules/max';\nimport { maxlength }    from './validationRules/maxlength';\nimport { min }          from './validationRules/min';\nimport { minlength }    from './validationRules/minlength';\nimport { pattern }      from './validationRules/pattern';\nimport { radio }        from './validationRules/radio';\nimport { requiredFrom } from './validationRules/requiredFrom';\n\nexport const validationRulesAttributes = {\n    checkbox,\n    equalTo,\n    exactLength,\n    file,\n    length,\n    max,\n    maxlength,\n    min,\n    minlength,\n    pattern,\n    radio,\n    requiredFrom,\n}\n","\nimport { checks } from './checks';\n\nexport const checkbox = function( fieldEl ){\n    let dataChecksEl = fieldEl.closest('form').querySelector('[name=\"' + fieldEl.name + '\"][data-checks]');\n    return dataChecksEl ? checks(dataChecksEl): {result: fieldEl.checked};\n}\n","\nexport const checks = function( fieldEl ){\n    let attrValue = JSON.parse( fieldEl.getAttribute('data-checks') ),\n        checkedElLength = fieldEl.closest('form').querySelectorAll('[name=\"' + fieldEl.name + '\"]:checked').length,\n        isMinOk = checkedElLength >= attrValue[0],\n        isMaxOk = checkedElLength <= attrValue[1],\n        obj = { result: isMinOk && isMaxOk };\n\n    if( !obj.result ){\n        obj.errors = { checks: true };\n        if( !isMinOk ){ obj.errors.minChecks = true; }\n        if( !isMaxOk ){ obj.errors.maxChecks = true; }\n    }\n\n    return obj;\n}\n","\nexport const equalTo = function( fieldEl ){\n    let checkFromEl = fieldEl.closest('form').querySelector( '[name=\"' + fieldEl.getAttribute('data-equal-to') + '\"]' ),\n        obj = { result: fieldEl.value === checkFromEl.value };\n\n    if( !obj.result ){\n        obj.errors = { equalTo: true };\n    }\n\n    return obj;\n}\n","\nexport const exactLength = function( fieldEl ){\n    let valueLength = fieldEl.value.length,\n        exactLength = fieldEl.getAttribute('data-exact-length') * 1,\n        obj = { result: valueLength === exactLength };\n\n    if( !obj.result ){\n        obj.errors = { exactLength: true };\n        if( valueLength < exactLength ){ obj.errors.minlength = true; }\n        else { obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nexport const file = function( fieldEl, fieldOptions ){\n    let maxFileSize = (fieldEl.getAttribute('data-max-file-size') || fieldOptions.maxFileSize) * 1,\n        MIMEtype = (fieldEl.accept ? new RegExp(fieldEl.accept.replace( '*', '[^\\\\/,]+' )) : null),\n        filesList = Array.from(fieldEl.files),\n        obj = { result: true };\n\n    filesList.forEach(function( file ){\n        let exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize,\n            isAcceptedFileType = (MIMEtype !== null ? MIMEtype.test(file.type) : true);\n\n        if( exceedMaxFileSize || !isAcceptedFileType ){\n            obj.result = false;\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {};\n            }\n            obj.errors.file = true;\n            if( exceedMaxFileSize ){ obj.errors.maxFileSize = true; }\n            if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true; }\n\n        }\n    });\n\n    return obj;\n}\n","\nexport const length = function( fieldEl ){\n    let valueL = fieldEl.value.length,\n        attrValue = JSON.parse( fieldEl.getAttribute('data-length') ),\n        isMinlengthOk = valueL >= attrValue[0],\n        isMaxlengthOk = valueL <= attrValue[1],\n        obj = { result: isMinlengthOk && isMaxlengthOk };\n\n    if( !obj.result ){\n        obj.errors = { stringLength: true };\n        if( !isMinlengthOk ){ obj.errors.minlength = true; }\n        if( !isMaxlengthOk ){ obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const max = function( fieldEl ){\n    let value = fieldEl.value,\n        maxVal = fieldEl.max,\n        dateFormat = fieldEl.getAttribute('data-date-format');\n    \n    if( fieldEl.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat );\n        maxVal = maxVal.split('-').join('');\n    }\n\n    value = value * 1;\n    maxVal = maxVal * 1;\n\n    let obj = { result: value <= maxVal };\n\n    if( !obj.result ){\n        obj.errors = { max: true };\n    }\n    \n    return obj;\n}\n","\nexport const maxlength = function( fieldEl ){\n    const obj = { result: fieldEl.value.length <= fieldEl.maxLength * 1 };\n\n    if( !obj.result ){\n        obj.errors = { maxlength: true };\n    }\n\n    return obj;\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const min = function( fieldEl ){\n    let value = fieldEl.value,\n        minVal = fieldEl.min,\n        dateFormat = fieldEl.getAttribute('data-date-format');\n    \n    if( fieldEl.type === 'date' || fieldEl.getAttribute('data-date-format') ){\n        value = getDateAsNumber( value, dateFormat );\n        minVal = minVal.split('-').join('');\n    }\n\n    value = value * 1;\n    minVal = minVal * 1;\n\n    let obj = { result: value >= minVal };\n\n    if( !obj.result ){\n        obj.errors = { min: true };\n    }\n    \n    return obj;\n}\n","\nexport const minlength = function( fieldEl ){\n    const obj = { result: fieldEl.value.length >= fieldEl.minLength * 1 };\n\n    if( !obj.result ){\n        obj.errors = { minlength: true };\n    }\n\n    return obj;\n}\n","\nexport const pattern = function( fieldEl ){\n    let fieldPattern = fieldEl.pattern,\n        fieldRegex = new RegExp( fieldPattern ),\n        obj = { result: fieldRegex.test( fieldEl.value ) };\n\n    if( !obj.result ){\n        obj.errors = { pattern: true };\n    }\n\n    return obj;\n}\n","\nexport const radio = function( fieldEl ){\n    let fieldChecked = fieldEl.closest('form').querySelector( '[name=\"'+ fieldEl.name +'\"]:checked' ),\n        isValid = fieldChecked !== null && fieldChecked.value.trim().length > 0;\n\n    return { result: isValid };\n}\n","\nexport const requiredFrom = function( fieldEl ){\n    return {\n        result: fieldEl.value.trim().length > 0\n    };\n}\n","\nimport { getValidateFieldDefault, isDOMNode, runFunctionsSequence } from './helpers';\nimport { isValid } from './isValid';\n\nexport function checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    if( !isDOMNode(fieldEl) ){\n        const obj = getValidateFieldDefault({fieldEl});\n        return Promise.resolve(obj);\n    }\n\n    const formEl = fieldEl.closest('form'),\n          isValidValue = fieldEl.value.trim().length > 0;\n\n     // HANDLE FIELDS radio/data-require-more\n     if( fieldEl.type === 'radio' ){\n        const checkedEl = fieldEl.checked ? fieldEl : formEl.querySelector('[name=\"'+ fieldEl.name +'\"]:checked'),\n              reqMoreIsChecked = checkedEl && checkedEl.matches('[data-require-more]'),\n              findReqMoreEl = reqMoreIsChecked ? checkedEl : formEl.querySelector('[data-require-more][name=\"'+ fieldEl.name +'\"]'),\n              findReqFromEl = findReqMoreEl ? formEl.querySelector('[data-required-from=\"#'+ findReqMoreEl.id +'\"]') : null;\n        \n        if( checkedEl && findReqFromEl ){\n            findReqFromEl.required = findReqMoreEl.required && findReqMoreEl.checked;\n            if( !reqMoreIsChecked ){\n                findReqFromEl.value = '';\n            } else if( fieldOptions.focusOnRelated ) {\n                findReqFromEl.focus();\n            }\n        }\n    }\n\n    // HANDLE FIELDS data-required-from\n    if( fieldEl.matches('[data-required-from]') && isValidValue ){\n        const reqMoreEl = formEl.querySelector( fieldEl.getAttribute('data-required-from') );\n        reqMoreEl.checked = true;\n        fieldEl.required = reqMoreEl.required;\n    }\n\n    const needsValidation = fieldEl.required || (fieldEl.matches('[data-validate-if-filled]') && isValidValue);\n\n    return runFunctionsSequence({\n            functionsList: fieldOptions.beforeValidation,\n            data: {fieldEl}\n        })\n        .then(data => {\n            let dataObj = data.pop();\n            return new Promise(resolve => {\n                if( !needsValidation ){\n                    dataObj.result = true;\n                }\n                resolve( needsValidation ? isValid(fieldEl, fieldOptions, validationRules, validationErrors) : dataObj );\n            });\n        });\n\n}\n","\nimport { getValidateFieldDefault, mergeObjects, toCamelCase } from './helpers';\nimport { validationRulesAttributes } from './validationRulesAttributes';\n\nexport function isValid( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    const fieldType = fieldEl.matches('[data-subtype]') ? toCamelCase(fieldEl.getAttribute('data-subtype')) : fieldEl.type,\n          fieldValue = fieldEl.value,\n          isValidValue = fieldValue.trim().length > 0;\n\n    let obj = getValidateFieldDefault({result: isValidValue, fieldEl});\n\n    if( !obj.result ){\n        obj.errors = { empty: true };\n        return Promise.resolve(obj);\n    }\n\n    let attrValidationsResult;\n\n    return new Promise(resolve => {\n\n        // RUN VALIDATIONS FROM validationRulesAttributes\n        attrValidationsResult = Array.from(fieldEl.attributes).reduce((valResult, attr) => {\n            // FOR data-* ATTRIBUTES -> REMOVE \"data-\" AND TRANSFORM TO CAMELCASE\n            const attrName = toCamelCase( attr.name.replace('data-', '') ),\n                  attrValue = attr.value,\n                  isAttrValueWithFn = attrName === 'type' && typeof validationRulesAttributes[attrValue] === 'function',\n                  isAttrNameWithFn = typeof validationRulesAttributes[attrName] === 'function';\n\n            if( isAttrValueWithFn || isAttrNameWithFn ){\n                const method = isAttrValueWithFn ? attrValue : attrName;\n                const extraVal = validationRulesAttributes[method]( fieldEl, fieldOptions );\n                if( !extraVal.result ){\n                    obj = mergeObjects({}, obj, extraVal);\n                    return false;\n                }\n            }\n            return valResult;\n        }, isValidValue);\n\n        // RUN VALIDATION FROM validationRules\n        if( typeof validationRules[fieldType] === 'function' ){\n            resolve( validationRules[fieldType](fieldValue, fieldEl) );\n        } else {\n            resolve( obj );\n        }\n\n    }).then(data => {\n\n        obj = mergeObjects( {}, obj, data );\n        obj.result = obj.result && attrValidationsResult;\n\n        if( !obj.result ){\n            const fieldErrors = (typeof validationErrors[fieldType] === 'function' ? validationErrors[fieldType](fieldValue, fieldEl) : {});\n            obj.errors = mergeObjects({}, obj.errors || {}, fieldErrors);\n            obj.errors.rule = true;\n        }\n        \n        return obj;\n\n    });\n\n}\n","\nimport { fieldsStringSelector, getUniqueFields, getValidateFieldDefault, getValidateFormDefault, mergeObjects } from './helpers';\nimport { checkFieldValidity } from './checkFieldValidity';\n\nexport function checkFormValidity( formEl, fieldOptions, validationRules, validationErrors, fieldToSkip = null ){\n\n    fieldOptions = mergeObjects( {}, fieldOptions, {focusOnRelated: false} );\n\n    const obj = getValidateFormDefault(),\n          fieldsList = getUniqueFields( formEl.querySelectorAll(fieldsStringSelector) );\n\n    return Promise.all( fieldsList.map(fieldEl => {\n\n        if( fieldToSkip && fieldEl === fieldToSkip ){\n            const obj2 = getValidateFieldDefault({fieldEl, result: true});\n            return Promise.resolve(obj2);\n        }\n        \n        return checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors );\n\n    }) ).then(list => {\n\n        let areAllFieldsValid = list.filter(fieldObj => !fieldObj.result).length === 0;\n        obj.result = areAllFieldsValid;\n        obj.fields = list;\n\n        return obj;\n\n    });\n\n}\n","\nimport { version }              from './modules/version';\nimport { customEvents, dispatchCustomEvent, excludeSelector, mergeObjects, removeClass } from './modules/helpers';\nimport { options }              from './modules/options';\nimport { validationRules }      from './modules/validationRules';\nimport { validationErrors }     from './modules/validationErrors';\nimport { listenerCallbacks }    from './modules/listenerCallbacks';\nimport { constructorFn }        from './modules/constructor';\nimport { destroy }              from './modules/destroy';\nimport { init }                 from './modules/init';\nimport { checkFieldValidity }   from './modules/checkFieldValidity';\nimport { checkFormValidity }    from './modules/checkFormValidity';\n\nclass Form {\n\n    constructor( formEl, optionsObj ){\n        constructorFn(this, formEl, optionsObj);\n    }\n\n    destroy(){\n        destroy(this.formEl, this.options);\n    }\n    \n    getFormData(){\n        const formFieldsEl = this.formEl.querySelectorAll('input, select, textarea'),\n              filteredFields = Array.from( formFieldsEl ).filter( elem => elem.matches(excludeSelector) );\n        return this.options.formOptions.getFormData(filteredFields);\n    }\n\n    init(){\n        return init(this.formEl);\n    }\n\n    validateField( fieldEl, fieldOptions ){\n        fieldEl = (typeof fieldEl === 'string' ? this.formEl.querySelector(fieldEl) : fieldEl);\n        fieldOptions = mergeObjects({}, this.options.fieldOptions, fieldOptions);\n        const formEl = this.formEl;\n        const skipUIfeedback = this.options.fieldOptions.skipUIfeedback;\n        return checkFieldValidity(fieldEl, fieldOptions, this.validationRules, this.validationErrors)\n            .then(obj => {\n                return new Promise(resolve => {\n                    if( obj.fieldEl ){\n                        dispatchCustomEvent( obj.fieldEl, customEvents.field.validation, obj, { bubbles: false } );\n                        dispatchCustomEvent( formEl, customEvents.field.validation, obj );\n                        if( fieldOptions.onValidationCheckAll && obj.result ){\n                            // FORCE skipUIfeedback TO true\n                            fieldOptions.skipUIfeedback = true;\n                            resolve(\n                                checkFormValidity( formEl, fieldOptions, this.validationRules, this.validationErrors, obj.fieldEl )\n                                    .then(dataForm => {\n                                        const clMethodName = dataForm.result ? 'add' : 'remove';\n                                        formEl.classList[clMethodName]( this.options.formOptions.cssClasses.valid );\n                                        dispatchCustomEvent( formEl, customEvents.form.validation, dataForm );\n                                        // RESTORE skipUIfeedback TO THE ORIGINAL VALUE\n                                        fieldOptions.skipUIfeedback = skipUIfeedback;\n                                        return obj;\n                                    })\n                            );\n                        } else if( !obj.result ){\n                            removeClass( formEl, this.options.formOptions.cssClasses.valid );\n                        }\n                    }\n                    resolve( obj );\n                });\n            });\n    }\n\n    validateForm( fieldOptions ){\n        fieldOptions = mergeObjects({}, this.options.fieldOptions, fieldOptions);\n        const formEl = this.formEl;\n        return checkFormValidity(formEl, fieldOptions, this.validationRules, this.validationErrors)\n            .then(data => {\n                const clMethodName = data.result ? 'add' : 'remove';\n                formEl.classList[clMethodName]( this.options.formOptions.cssClasses.valid );\n                listenerCallbacks.validationEnd( {data} );\n                dispatchCustomEvent( formEl, customEvents.form.validation, data );\n                return data;\n            });\n\n    }\n    \n    static addValidationErrors( errorsObj ){\n        this.prototype.validationErrors = mergeObjects({}, this.prototype.validationErrors, errorsObj);\n    }\n\n    static addValidationRules( rulesObj ){\n        this.prototype.validationRules = mergeObjects({}, this.prototype.validationRules, rulesObj);\n    }\n    \n    static setOptions( optionsObj ){\n        this.prototype.options = mergeObjects({}, this.prototype.options, optionsObj);\n    }\n\n}\n\nForm.prototype.isInitialized = false;\nForm.prototype.options = options;\nForm.prototype.validationErrors = validationErrors;\nForm.prototype.validationRules = validationRules;\nForm.prototype.version = version;\n\nexport default Form;\n","\nimport { checkFormEl, isNodeList, mergeObjects }   from './helpers';\nimport { formStartup }                             from './formStartup';\n\nexport function constructorFn( self, formEl, optionsObj ){\n\n    let argsL = arguments.length,\n        checkFormElem = checkFormEl(formEl);\n\n    if( argsL === 0 || (argsL > 0 && !formEl) ){\n        throw new Error('First argument \"formEl\" is missing or falsy!');\n    }\n    if( isNodeList(formEl) ){\n        throw new Error('First argument \"formEl\" must be a single DOM node or a form CSS selector, not a NodeList!');\n    }\n    if( !checkFormElem.result ){\n        throw new Error('First argument \"formEl\" is not a DOM node nor a form CSS selector!');\n    }\n\n    self.formEl = checkFormElem.element;\n    self.formEl.formjs = self;\n    self.options = mergeObjects({}, self.constructor.prototype.options, optionsObj);\n\n    // BINDING CONTEXT FOR FUTURE EXECUTION\n    const cbList = [\n        // IN fieldOptions\n        'beforeValidation',\n        // IN formOptions\n        'beforeSend',\n        'getFormData'\n    ];\n    cbList.forEach(cbName => {\n        let optionType = self.options.formOptions[cbName] ? 'formOptions' : 'fieldOptions',\n            cbOpt = self.options[optionType][cbName];\n\n        if( cbOpt ){\n            self.options[optionType][cbName] = ( Array.isArray(cbOpt) ? cbOpt.map(cbFn => cbFn.bind(self)) : cbOpt.bind(self) );\n        }\n    });\n\n    formStartup( self.formEl, self.options );\n    \n}\n","\nimport { customEvents } from './helpers';\nimport { listenerCallbacks } from './listenerCallbacks';\n\n\nexport function destroy( formEl, options ){\n\n    if( options.fieldOptions.strictHtmlValidation ){\n        formEl.removeEventListener('keypress', listenerCallbacks.keypressMaxlength, false);\n        formEl.removeEventListener('input', listenerCallbacks.dataTypeNumber, false);\n    }\n\n    if( options.fieldOptions.preventPasteFields ){\n        formEl.removeEventListener('paste', listenerCallbacks.pastePrevent, false);\n    }\n\n    if( options.formOptions.handleSubmit ){\n        formEl.removeEventListener('submit', listenerCallbacks.submit);\n    }\n\n    options.fieldOptions.validateOnEvents.split(' ').forEach(function( eventName ){\n        let useCapturing = (eventName === 'blur' ? true : false);\n        formEl.removeEventListener(eventName, listenerCallbacks.validation, useCapturing);\n    });\n\n    formEl.removeEventListener(customEvents.field.validation, listenerCallbacks.validationEnd, false);\n\n    delete formEl.formjs;\n    \n}\n","\nexport const excludeSelector = ':not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"file\"]):not([data-exclude-data])'\n","\nexport const validationErrors = {\n\n    email: function ( string ) {\n        const obj = {};\n\n        if( string.indexOf('@') === -1 ){\n\n            // @ IS MISSING\n            obj.missingAtChar = true;\n\n        } else {\n\n            let splitAt_at = string.split('@');\n            if( splitAt_at[0].length === 0 ){\n\n                // USER NAME IS MISSING\n                obj.missingUserName = true;\n\n            }\n\n            if( splitAt_at[1].length === 0 ){\n\n                // IS EMPTY AFTER @\n                obj.missingDomain = true;\n                obj.missingExtensionDot = true;\n                obj.missingExtension = true;\n\n            } else if( splitAt_at[1].indexOf('.') === -1 ) {\n\n                // DOT IS MISSING\n                obj.missingExtensionDot = true;\n                obj.missingExtension = true;\n\n            } else {\n\n                // EXTENSION MISSING OR NOT LONG ENOUGH\n                let splitAt_dot = splitAt_at[1].split('.'),\n                    extLength = splitAt_dot[1].length;\n                if( extLength === 0 ) {\n                    obj.missingExtension = true;\n                } else if( extLength < 2 ){\n                    obj.minlengthExtension = true;\n                }\n\n            }\n        }\n\n        return obj;\n\n    }\n\n}"],"names":["addClass","element","cssClasses","split","forEach","className","classList","add","isNodeList","nodeList","NodeList","prototype","isPrototypeOf","removeClass","remove","isDOMNode","node","Element","checkFormEl","formEl","isString","isFormSelector","document","querySelector","tagName","toLowerCase","result","customEvents","validation","submit","mergeObjects","out","i","arguments","length","obj","key","isArray","Object","toString","call","isObject","hasOwnProperty","concat","slice","Array","push","dispatchCustomEvent","elem","eventName","data","eventOptions","bubbles","eventObj","Event","dispatchEvent","fieldsStringSelector","formatMap","dateArray","reverse","getDateAsNumber","dateString","dateFormat","separator","splitChar","match","indexOf","replace","join","getUniqueFields","currentFieldName","currentFieldType","from","filter","fieldEl","name","type","matches","getValidateFieldDefault","getValidateFormDefault","fields","isFieldForChangeEvent","runFunctionsSequence","functionsList","stopConditionFn","reduce","acc","promiseFn","then","res","dataNew","Promise","resolve","dataList","serializeObject","_typeof","constructor","keys","a","k","encodeURIComponent","toCamelCase","string","all","letter","toUpperCase","defaultCallbacksInOptions","fieldOptions","beforeValidation","fieldObj","this","options","containerEl","closest","questionContainer","value","dirty","checkDirtyField","skipUIfeedback","pending","formOptions","getFormData","filteredFields","formData","isCheckbox","isRadio","isSelect","checked","checkboxes","querySelectorAll","field","checkedRadio","selectedOpts","option","selected","error","errorEmpty","errorRule","valid","focusOnRelated","handleFileUpload","handleValidation","maxFileSize","onValidationCheckAll","preventPasteFields","strictHtmlValidation","validateOnEvents","ajaxOptions","cache","credentials","headers","method","mode","redirect","timeout","url","location","href","ajaxSubmit","beforeSend","ajaxComplete","ajaxError","ajaxPending","ajaxSuccess","handleSubmit","validationRules","date","test","email","number","event","target","instance","formjs","formCssClasses","isAjaxForm","btnEl","eventPreventDefault","enableBtn","disabled","preventDefault","validateForm","formValidation","beforeSendData","stopExecution","formDataObj","callbacksBeforeSend","pop","timeoutTimer","isMultipart","body","formDataMultipart","FormData","append","files","file","idx","JSON","stringify","Headers","controller","AbortController","signal","window","setTimeout","abort","fetch","response","ok","reject","fetchMethod","accept","get","contentType","headerOpt","getFetchMethod","clearTimeout","ajaxCall","listenerCallbacks","fieldValue","stopImmediatePropagation","valueReplaced","maxLength","keyPressed","which","keyCode","isChangeEvent","self","isFieldForChangeEventBoolean","validateField","realtedFieldEqualTo","required","trim","fieldsArray","isReqFrom","reqMoreEl","getAttribute","errorClasses","extraErrorClass","isChecks","checkedElLength","errors","empty","errorClassToRemove","formStartup","noValidate","addEventListener","useCapturing","init","formFields","map","isCheckboxOrRadio","fieldChecked","getFilledFields","isInitialized","validationRulesAttributes","checkbox","dataChecksEl","attrValue","parse","isMinOk","isMaxOk","checks","minChecks","maxChecks","equalTo","checkFromEl","exactLength","valueLength","minlength","maxlength","MIMEtype","RegExp","filesList","exceedMaxFileSize","size","isAcceptedFileType","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","stringLength","max","maxVal","min","minVal","minLength","pattern","fieldPattern","radio","requiredFrom","checkFieldValidity","validationErrors","isValidValue","checkedEl","reqMoreIsChecked","findReqMoreEl","findReqFromEl","id","focus","needsValidation","dataObj","attrValidationsResult","fieldType","attributes","valResult","attr","attrName","isAttrValueWithFn","isAttrNameWithFn","extraVal","fieldErrors","rule","isValid","checkFormValidity","fieldToSkip","fieldsList","obj2","list","areAllFieldsValid","Form","optionsObj","argsL","checkFormElem","Error","cbList","cbName","optionType","cbOpt","cbFn","bind","constructorFn","errorsObj","rulesObj","removeEventListener","destroy","formFieldsEl","_this","dataForm","clMethodName","_this2","missingAtChar","splitAt_at","missingUserName","missingDomain","missingExtensionDot","missingExtension","extLength","minlengthExtension","version"],"mappings":"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"}