{"version":3,"file":"formjs.min.js","sources":["../src/modules/helpers/addClass.js","../src/modules/helpers/isNodeList.js","../src/modules/helpers/removeClass.js","../src/modules/helpers/isDOMNode.js","../src/modules/helpers/customEvents.js","../src/modules/helpers/mergeObjects.js","../src/modules/helpers/isPlainObject.js","../src/modules/helpers/dispatchCustomEvent.js","../src/modules/helpers/fieldsStringSelector.js","../src/modules/helpers/finalizeFormPromise.js","../src/modules/helpers/getDateAsNumber.js","../src/modules/helpers/getSplitChar.js","../src/modules/helpers/getJSONobjectFromFieldAttribute.js","../src/modules/helpers/getUniqueFields.js","../src/modules/helpers/mergeValidateFieldDefault.js","../src/modules/helpers/isFieldForChangeEvent.js","../src/modules/helpers/runFunctionsSequence.js","../src/modules/helpers/serializeObject.js","../src/modules/helpers/toCamelCase.js","../src/modules/options.js","../src/modules/optionsUtils/beforeValidation.js","../src/modules/helpers/checkDirtyField.js","../src/modules/optionsUtils/getFormData.js","../src/modules/validationRules.js","../src/modules/validationRules/date.js","../src/modules/validationRules/email.js","../src/modules/validationRules/number.js","../src/modules/validationRules/checkbox.js","../src/modules/validationRules/checks.js","../src/modules/validationRules/equalTo.js","../src/modules/validationRules/exactLength.js","../src/modules/validationRules/file.js","../src/modules/validationRules/length.js","../src/modules/validationRules/max.js","../src/modules/validationRules/maxlength.js","../src/modules/validationRules/min.js","../src/modules/validationRules/minlength.js","../src/modules/validationRules/pattern.js","../src/modules/validationRules/radio.js","../src/modules/listenerCallbacks/dataTypeNumber.js","../src/modules/listenerCallbacks/formValidationEnd.js","../src/modules/listenerCallbacks/keypressMaxlength.js","../src/modules/listenerCallbacks/pastePrevent.js","../src/modules/ajaxCall.js","../src/modules/listenerCallbacks/submit.js","../src/modules/listenerCallbacks/groupValidationEnd.js","../src/modules/listenerCallbacks/validation.js","../src/modules/listenerCallbacks/validationEnd.js","../src/modules/checkFieldValidity.js","../src/modules/isValid.js","../src/modules/checkFieldsValidity.js","../src/modules/helpers/mergeValidateFormDefault.js","../src/index.js","../src/modules/helpers/checkFormEl.js","../src/modules/formStartup.js","../src/modules/destroy.js","../src/modules/helpers/excludeSelector.js","../src/modules/helpers/finalizeFieldPromise.js","../src/modules/helpers/finalizeFieldsGroupPromise.js","../src/modules/helpers/getFilledFields.js"],"sourcesContent":["\nexport const addClass = ( element, cssClasses ) => {\n    element.classList.add( ...cssClasses.split(' ') )\n}\n","\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList )\n}\n","\nexport const removeClass = ( element, cssClasses ) => {\n    element.classList.remove( ...cssClasses.split(' ') )\n}\n","\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node )\n}\n","\nexport const customEvents = {\n    field: {\n        validation: 'fjs.field:validation'\n    },\n    form: {\n        destroy:    'fjs.form:destroy',\n        init:       'fjs.form:init',\n        submit:     'fjs.form:submit',\n        validation: 'fjs.form:validation'\n    },\n    group: {\n        validation: 'fjs.group:validation'\n    }\n}\n","\nimport { isPlainObject } from './isPlainObject'\n\nexport const mergeObjects = function( out = {} ){\n    Array.from(arguments).slice(1).filter(arg => !!arg).forEach(arg => {\n        Object.keys(arg).forEach(key => {\n            if( Array.isArray(arg[key]) ){\n                out[key] = (out[key] || []).concat( arg[key].slice(0) )\n            } else if( isPlainObject(arg[key]) ){\n                out[key] = mergeObjects((out[key] || {}), arg[key])\n            } else {\n                // * STRING | NUMBER | BOOLEAN | FUNCTION\n                if( Array.isArray(out[key]) ){\n                    // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                    out[key].push(arg[key])\n                } else {\n                    out[key] = arg[key]\n                }\n            }\n        })\n    })\n\n    return out\n}\n","\nexport const isPlainObject = object => {\n    return Object.prototype.toString.call( object ) === '[object Object]'\n}\n","\nimport { mergeObjects } from './mergeObjects'\n\nexport const dispatchCustomEvent = ( elem, eventName, eventOptions ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions)\n    const eventObj = new CustomEvent(eventName, eventOptions)\n    elem.dispatchEvent( eventObj )\n}\n","\nexport const fieldsStringSelector = 'input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"hidden\"]), select, textarea'\n","\nexport const finalizeFormPromise = ({fields, result}) => {\n    if( result ){\n        return Promise.resolve(fields)\n    }\n    return Promise.reject(fields)\n}\n","\nimport { getSplitChar } from './getSplitChar'\n\nconst formatMap = {\n    'YYYY-MM-DD': function(dateArray){\n        return dateArray\n    },\n    'MM-DD-YYYY': function(dateArray){\n        return [dateArray[2], dateArray[0], dateArray[1]]\n    },\n    'DD-MM-YYYY': function(dateArray){\n        return dateArray.reverse()\n    }\n}\n\nexport const getDateAsNumber = ( dateString, dateFormat ) => {\n    dateFormat = dateFormat || 'YYYY-MM-DD'\n    const splitChar = getSplitChar(dateString)\n\n    if( dateFormat.indexOf(splitChar) < 0 ){\n        return\n    }\n\n    dateFormat = dateFormat.replace(/[^YMD]/g, '-')\n    dateString = dateString.split(splitChar)\n    dateString = formatMap[dateFormat](dateString).join('')\n    \n    return dateString\n}\n","\nexport const getSplitChar = string => {\n    // MATCH ANY NON-DIGIT CHAR\n    const separator = string.match(/\\D/)\n    return (separator && separator.length > 0) ? separator[0] : null\n}\n","\nexport const getJSONobjectFromFieldAttribute = ( $field, attrName ) => {\n    const $customAttr = $field.closest(`[${attrName}]`)\n    return ($customAttr && JSON.parse($customAttr.getAttribute(attrName))) || {}\n}\n","\nexport const getUniqueFields = $nodeList => {\n\n    let currentFieldName = ''\n    let currentFieldType = ''\n\n    return Array.from( $nodeList ).filter($field => {\n        const name = $field.name\n        const type = $field.type\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false\n        }\n        \n        if( !$field.matches('[data-required-from]') ){\n            currentFieldName = name\n            currentFieldType = type\n        }\n        \n        return true\n    })\n    \n}\n","\nimport { mergeObjects } from './mergeObjects'\n\nexport const mergeValidateFieldDefault = obj => {\n    return mergeObjects({}, { result: false, $field: null }, obj)\n}\n","\nexport const isFieldForChangeEvent = $field => {\n    return $field.matches('select, [type=\"radio\"], [type=\"checkbox\"], [type=\"file\"]')\n}\n","\nimport { mergeObjects } from './mergeObjects'\n\nexport const runFunctionsSequence = ( { functionsList = [], data = {}, stopConditionFn = () => false } = {} ) => {\n    return functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1])\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res)\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result)\n                    return res\n                })\n        })\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList)\n}\n","\nexport const serializeObject = obj => {\n    const objToString = (\n            (obj && typeof obj === 'object' && obj.constructor === Object) ? \n            Object.keys(obj)\n                .reduce((a,k) => {\n                    a.push(k+'='+encodeURIComponent(obj[k]))\n                    return a\n                },[]).join('&') : \n            obj\n    )\n    return objToString\n}\n","\nexport const toCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase() })\n}\n","\nimport { beforeValidation } from './optionsUtils/beforeValidation'\nimport { getFormData } from './optionsUtils/getFormData'\n\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [beforeValidation],\n        cssClasses: {\n            dirty:              'is-dirty',\n            error:              'has-error',\n            errorEmpty:         'has-error-empty',\n            errorRule:          'has-error-rule',\n            pending:            'is-pending',\n            valid:              'is-valid'\n        },\n        focusOnRelated:         true,\n        maxFileSize:            10,\n        onValidationCheckAll:   false,\n        preventPasteFields:     '[type=\"password\"], [data-equal-to]',\n        questionContainer:      '[data-formjs-question]',\n        skipUIfeedback:         false,\n        strictHtmlValidation:   true,\n        trimValue:              false,\n        validateOnEvents:       'input change'\n    },\n\n    formOptions: {\n        ajaxOptions:            {\n            cache:              'no-store',\n            credentials:        'same-origin',\n            headers: {\n                                'Content-Type': 'application/json',\n                                'Accept':       'application/json'\n            },\n            method:             'POST',\n            mode:               'same-origin',\n            redirect:           'follow',\n            timeout:            0,\n            url:                location.href\n        },\n        ajaxSubmit:             true,\n        beforeSend:             [],\n        cssClasses: {\n            ajaxComplete:       'ajax-complete',\n            ajaxError:          'ajax-error',\n            ajaxPending:        'ajax-pending',\n            ajaxSuccess:        'ajax-success',\n            submit:             'is-submitting',\n            valid:              'is-valid'\n        },\n        getFormData:            getFormData,\n        groups:                 [],\n        handleFileUpload:       true,\n        handleSubmit:           true,\n        onInitCheckFilled:      true\n    }\n    \n}\n","\nimport { addClass, checkDirtyField, isFieldForChangeEvent } from '../helpers'\n\nexport const beforeValidation = function beforeValidationDefault ( { $field, fieldOptions } ) {\n\n    if( fieldOptions.trimValue && !isFieldForChangeEvent($field) ){\n        $field.value = $field.value.trim()\n    }\n\n    checkDirtyField( $field, fieldOptions )\n\n    if( !fieldOptions.skipUIfeedback ){\n        addClass( $field.closest( fieldOptions.questionContainer ), fieldOptions.cssClasses.pending )\n    }\n\n}\n","\nimport { addClass } from './addClass'\nimport { isNodeList } from './isNodeList'\nimport { removeClass } from './removeClass'\n\nexport const checkDirtyField = ( $fields, fieldOptions ) => {\n\n    $fields = isNodeList($fields) ? Array.from( $fields ) : [$fields]\n\n    $fields.forEach($field => {\n        const isNotCheckboxOrRadio = !['checkbox', 'radio'].includes($field.type)\n        if( isNotCheckboxOrRadio ){\n            const $container = $field.closest( fieldOptions.questionContainer ) || $field\n            if( $field.value ){\n                addClass( $container, fieldOptions.cssClasses.dirty )\n            } else {\n                removeClass( $container, fieldOptions.cssClasses.dirty )\n            }\n        }\n    })\n    \n}\n","\nexport const getFormData = function getFormDataDefault( $filteredFields, trimValues ){\n\n    const formData = {}\n    const $form = this.$form\n    let prevObj = formData\n  \n    $filteredFields.forEach($field => {\n        const isCheckbox = $field.type === 'checkbox'\n        const isRadio = $field.type === 'radio'\n        const isSelect = $field.matches('select')\n        const name = $field.name\n        let value = trimValues ? $field.value.trim() : $field.value\n  \n        if( isCheckbox ){\n\n            value = $field.checked\n            let $checkboxes = Array.from( $form.querySelectorAll(`[name=\"${name}\"]`) )\n            if( $checkboxes.length > 1 ){\n                value = []\n                let $checked = $checkboxes.filter((field) => field.checked)\n                $checked.forEach($field => {\n                    value.push($field.value)\n                })\n            }\n\n        } else if( isRadio ){\n\n            const $checkedRadio = $form.querySelector(`[name=\"${name}\"]:checked`)\n            value = $checkedRadio === null ? null : $checkedRadio.value\n\n        } else if( isSelect ){\n\n            const $selectedOpts = Array.from($field.options).filter(option => option.selected)\n            if( $selectedOpts.length > 1 ){\n                value = []\n                $selectedOpts.forEach($field => { \n                    value.push($field.value)\n                })\n            }\n        }\n  \n        const nameSplit = name.split('.')\n        nameSplit.forEach((keyName, index, list) => {\n            const isLastKeyName = index + 1 === list.length\n  \n            if( Array.isArray(prevObj) ){\n                const keyNameSplit = keyName.split('___')\n                const arrPos = keyNameSplit[0] - 1\n                const arrayHasItemAtIndex = typeof prevObj[arrPos] !== 'undefined'\n                const arrItemKeyName = keyNameSplit[1]\n  \n                if( !arrayHasItemAtIndex ){\n                    prevObj.push({})\n                }\n  \n                keyName = arrItemKeyName\n\n                if( isLastKeyName ){\n                    prevObj[arrPos][keyName] = value\n                } else if( typeof prevObj[arrPos][keyName] === 'undefined' ) {\n                    prevObj[arrPos][keyName] = {}\n                }\n                \n                if( !isLastKeyName ){\n                    prevObj = prevObj[arrPos][keyName]\n                    return\n                }\n            } else {\n                const isKeyNameArray = keyName.endsWith('[]')\n                keyName = keyName.replace('[]', '')\n  \n                if( isLastKeyName ){\n                    prevObj[keyName] = value\n                } else if( typeof prevObj[keyName] === 'undefined' ){\n                    if( isKeyNameArray ){\n                        prevObj[keyName] = []\n                    } else {\n                        prevObj[keyName] = {}\n                    }\n                }\n            }\n  \n            prevObj = isLastKeyName ? formData : prevObj[keyName]\n        })\n    })\n  \n    return formData\n\n}\n","\nimport { date }         from './validationRules/date'\nimport { email }        from './validationRules/email'\nimport { number }       from './validationRules/number'\n\nimport { checkbox }     from './validationRules/checkbox'\nimport { equalTo }      from './validationRules/equalTo'\nimport { exactLength }  from './validationRules/exactLength'\nimport { file }         from './validationRules/file'\nimport { length }       from './validationRules/length'\nimport { max }          from './validationRules/max'\nimport { maxlength }    from './validationRules/maxlength'\nimport { min }          from './validationRules/min'\nimport { minlength }    from './validationRules/minlength'\nimport { pattern }      from './validationRules/pattern'\nimport { radio }        from './validationRules/radio'\n\nexport const validationRules = {\n    date,\n    email,\n    number,\n\n    checkbox,\n    equalTo,\n    exactLength,\n    file,\n    length,\n    max,\n    maxlength,\n    min,\n    minlength,\n    pattern,\n    radio\n}\n","\n/*\n    DATE AS ISO 8601 DATE FORMAT:\n    YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n*/\n\nexport const date = function( string ){\n    return {\n        result: /^((((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13578]|1[02])[ \\/\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13456789]|1[012])[ \\/\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.]02[ \\/\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ \\/\\-.]02[ \\/\\-.]29))$/g.test( string )\n    }\n}\n","\n// https://regex101.com/r/cdlyJy/3\n\nexport const email = function( string ){\n    return {\n        result: /^[a-zA-Z_-]([\\w.-]?[a-zA-Z0-9])*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?){2,})+$/.test( string )\n    }\n}\n","\n/*\n    ALL NUMBERS ( INTEGERS AND FLOATING )\n    VALID NUMBERS: 123 | 123.456 | .123\n*/\n\nexport const number = function( string ){\n    return {\n        result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n    }\n}","\nimport { checks } from './checks'\n\nexport const checkbox = function( value, $field ){\n    const $dataChecks = $field.form.querySelector(`[name=\"${$field.name}\"][data-checks]`)\n    return $dataChecks ? checks($dataChecks) : { result: $field.checked }\n}\n","\nexport const checks = function( $field ){\n    const attrValue = JSON.parse( $field.dataset.checks )\n    const checkedLength = $field.form.querySelectorAll(`[name=\"${$field.name}\"]:checked`).length\n    const isMinOk = checkedLength >= attrValue[0]\n    const isMaxOk = checkedLength <= attrValue[1]\n    const obj = { result: isMinOk && isMaxOk }\n\n    if( !obj.result ){\n        obj.errors = { checks: true }\n        if( !isMinOk ){ obj.errors.minChecks = true }\n        if( !isMaxOk ){ obj.errors.maxChecks = true }\n    }\n\n    return obj\n}\n","\nexport const equalTo = function( value, $field ){\n    const $checkFrom = $field.form.querySelector( `[name=\"${$field.dataset.equalTo}\"]` )\n    return { result: value === $checkFrom.value }\n}\n","\nexport const exactLength = function( value, $field ){\n    const valueLength = value.length\n    const exactLength = $field.dataset.exactLength * 1\n    const obj = { result: valueLength === exactLength }\n\n    if( !obj.result ){\n        obj.errors = {}\n        if( valueLength < exactLength ){ obj.errors.minlength = true }\n        else { obj.errors.maxlength = true }\n    }\n\n    return obj\n}\n","\nexport const file = function( value, $field, fieldOptions ){\n    const maxFileSize = ($field.getAttribute('data-max-file-size') || fieldOptions.maxFileSize) * 1\n    const MIMEtype = $field.accept ? new RegExp($field.accept.replace( '*', '[^\\\\/,]+' )) : null\n    const filesList = Array.from($field.files)\n    const obj = { result: true }\n\n    filesList.forEach(file => {\n        const exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize\n        const isAcceptedFileType = MIMEtype !== null ? MIMEtype.test(file.type) : true\n\n        if( exceedMaxFileSize || !isAcceptedFileType ){\n            obj.result = false\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {}\n            }\n            if( exceedMaxFileSize ){ obj.errors.maxFileSize = true }\n            if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true }\n\n        }\n    })\n\n    return obj\n}\n","\nexport const length = function( value, $field ){\n    const valueL = value.length\n    const attrValue = JSON.parse( $field.dataset.length )\n    const isMinlengthOk = valueL >= attrValue[0]\n    const isMaxlengthOk = valueL <= attrValue[1]\n    const obj = { result: isMinlengthOk && isMaxlengthOk }\n\n    if( !obj.result ){\n        obj.errors = {}\n        if( !isMinlengthOk ){ obj.errors.minlength = true }\n        if( !isMaxlengthOk ){ obj.errors.maxlength = true }\n    }\n\n    return obj\n}\n","\nimport { getDateAsNumber } from '../helpers'\n\nexport const max = function( value, $field ){\n    let maxVal = $field.max\n    const dateFormat = $field.dataset.dateFormat\n    \n    if( $field.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat )\n        maxVal = maxVal.split('-').join('')\n    }\n\n    value = value * 1\n    maxVal = maxVal * 1\n    \n    return { result: value <= maxVal }\n}\n","\nexport const maxlength = function( value, $field ){\n    return { result: value.length <= $field.maxLength * 1 }\n}\n","\nimport { getDateAsNumber } from '../helpers'\n\nexport const min = function( value, $field ){\n    let minVal = $field.min\n    const dateFormat = $field.dataset.dateFormat\n    \n    if( $field.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat )\n        minVal = minVal.split('-').join('')\n    }\n\n    value = value * 1\n    minVal = minVal * 1\n    \n    return { result: value >= minVal }\n}\n","\nexport const minlength = function( value, $field ){\n    return { result: value.length >= $field.minLength * 1 }\n}\n","\nexport const pattern = function( value, $field ){\n    return { result: new RegExp($field.pattern).test(value) }\n}\n","\nexport const radio = function( value, $field ){\n    const $fieldChecked = $field.form.querySelector( `[name=\"${$field.name}\"]:checked` )\n    const isValid = $fieldChecked !== null && $fieldChecked.value.trim().length > 0\n\n    return { result: isValid }\n}\n","\nexport const dataTypeNumber = function( event ){\n\n    const $field = event.target\n    \n    if( $field.matches('[data-type=\"number\"]') ){\n        let fieldValue = $field.value\n        const hasInvalidChars = /[^\\d.,+\\-]/.test(fieldValue)\n        \n        if( hasInvalidChars ){\n            event.stopImmediatePropagation()\n            let valueReplaced = fieldValue.replace(/[^\\d.,+\\-]/g, '')\n            $field.value = valueReplaced\n        }\n    }\n\n}\n","\nexport const formValidationEnd = function( event ){\n    const $form = event.target\n    const options = $form.formjs.options\n    \n    if( !options.fieldOptions.skipUIfeedback ){\n        const clMethodName = event.detail.result ? 'add' : 'remove'\n        $form.classList[clMethodName]( options.formOptions.cssClasses.valid )\n    }\n}\n","\nexport const keypressMaxlength = function( event ){\n\n    const $field = event.target\n    \n    if( $field.matches( '[maxlength]' ) ){\n        const maxLength = $field.maxLength * 1\n        const keyPressed = event.which || event.keyCode\n        const allowedKeys = [8, 37, 38, 39, 46]\n\n        if( $field.value.length >= maxLength && allowedKeys.indexOf(keyPressed) === -1 ){\n            return false\n        }\n    }\n\n}\n","\nexport const pastePrevent = function( event ){\n\n    const $field = event.target\n    const fieldOptions = $field.form.formjs.options.fieldOptions\n\n    if( $field.matches( fieldOptions.preventPasteFields ) ){     \n        event.preventDefault()\n    }\n\n}\n","\nimport { addClass, mergeObjects, removeClass, serializeObject } from './helpers'\n\nconst getFetchMethod = (response, options) => {\n    const accept = options.headers.get('Accept')\n    const contentType = response.headers.get('Content-Type')\n    const headerOpt = accept || contentType || ''\n\n    if( headerOpt.indexOf('application/json') > -1 || headerOpt === '' ){\n        return 'json'\n    } else if( headerOpt.indexOf('text/') > -1 ){\n        return 'text'\n    } else {\n        return 'blob'\n    }\n}\n\nexport async function ajaxCall( $form, formDataObj, options ){\n\n    let timeoutTimer\n    const ajaxOptions = mergeObjects( {}, options.formOptions.ajaxOptions )\n    const isMultipart = ajaxOptions.headers['Content-Type'] === 'multipart/form-data'\n\n    ajaxOptions.body = formDataObj\n    \n    // POST A FormData OBJECT ( multipart )\n    if( isMultipart && options.formOptions.handleFileUpload ){\n        let formDataMultipart = new FormData()\n        \n        for(let key in ajaxOptions.body){\n            formDataMultipart.append( key, ajaxOptions.body[key] )\n        }\n        \n        Array.from( $form.querySelectorAll('[type=\"file\"]') ).forEach($field => {\n            Array.from($field.files).forEach((file, idx) => {\n                const name = `${$field.name}[${idx}]`\n                formDataMultipart.append( name, file, file.name )\n            })\n        })\n        \n        ajaxOptions.body = formDataMultipart\n    }\n\n    if( ajaxOptions.method === 'GET' ){\n\n        // FETCH WITH \"GET\" METHOD CAN'T HAVE \"body\". SO IT IS APPENDED TO THE URL\n        ajaxOptions.url += ( /\\?/.test(ajaxOptions.url) ? '&' : '?' ) + serializeObject( ajaxOptions.body )\n        delete ajaxOptions.body\n\n    } else {\n\n        if( ajaxOptions.headers['Content-Type'].indexOf('application/x-www-form-urlencoded') > -1 ){\n            // POST A NORMAL FORM\n            ajaxOptions.body = serializeObject( ajaxOptions.body )\n        } else if( !isMultipart ){\n            // POST A JSON STRING\n            ajaxOptions.body = JSON.stringify(ajaxOptions.body)\n        }\n\n    }\n\n    ajaxOptions.headers = new Headers( ajaxOptions.headers )\n\n    if ( ajaxOptions.timeout > 0 ) {\n        const controller = new AbortController()\n        const signal = controller.signal\n\n        ajaxOptions.signal = signal\n        timeoutTimer = window.setTimeout(() => {\n            controller.abort()\n        }, ajaxOptions.timeout)\n    }\n\n    return await fetch(ajaxOptions.url, ajaxOptions)\n        .then(response => {\n            if( !response.ok ){\n                throw new Error(response.statusText)\n            }\n            const fetchMethod = getFetchMethod(response, ajaxOptions)\n            return response[fetchMethod]()\n        })\n        .then(data => {\n            addClass( $form, options.formOptions.cssClasses.ajaxSuccess )\n            return data\n        })\n        .catch(error => {\n            addClass( $form, options.formOptions.cssClasses.ajaxError )\n            throw new Error(error.message)\n        })\n        .finally(() => {\n            if( timeoutTimer ){\n                window.clearTimeout( timeoutTimer )\n            }\n            removeClass( $form, `${options.formOptions.cssClasses.submit} ${options.formOptions.cssClasses.ajaxPending}` )\n            addClass( $form, options.formOptions.cssClasses.ajaxComplete )\n            $form.querySelector('[type=\"submit\"]').disabled = false\n        })\n\n}\n","\nimport { addClass, customEvents, dispatchCustomEvent, removeClass, runFunctionsSequence } from '../helpers'\nimport { ajaxCall } from '../ajaxCall'\n\nexport function submit( event ){\n\n    const $form = event.target\n    const instance = $form.formjs\n    const options = instance.options\n    const formCssClasses = options.formOptions.cssClasses\n    const isAjaxForm = options.formOptions.ajaxSubmit\n    const $btn = $form.querySelector('[type=\"submit\"]')\n\n    const eventPreventDefault = ( enableBtn = true ) => {\n        if( $btn && enableBtn ){ $btn.disabled = false }\n        if( event ){ event.preventDefault() }\n    }\n\n    if( isAjaxForm ){\n        eventPreventDefault(false)\n    }\n\n    if( $btn ){\n        if( $btn.disabled ){\n            eventPreventDefault(false)\n            return false\n        }\n        $btn.disabled = true\n    }\n\n    removeClass( $form, `${formCssClasses.ajaxComplete} ${formCssClasses.ajaxError} ${formCssClasses.ajaxSuccess}` )\n    addClass( $form, formCssClasses.submit )\n\n    instance.validateForm()\n        .then(data => {\n            \n            const hasGroup = typeof data.group !== 'undefined'\n\n            if( hasGroup && !data.canSubmit ){\n                return [{ stopExecution: true }]\n            }\n\n            const beforeSendData = {\n                stopExecution: false,\n                formData: isAjaxForm ? instance.getFormData() : null\n            }\n\n            const rfsObject = {\n                  functionsList: options.formOptions.beforeSend,\n                  data: beforeSendData,\n                  stopConditionFn: function(data){ return data.stopExecution }\n            }\n            return runFunctionsSequence(rfsObject)\n\n        }).then(dataList => {\n\n            if( dataList.some(({stopExecution}) => stopExecution) ){\n                eventPreventDefault()\n                return false\n            }\n            \n            if( isAjaxForm ){\n                const formData = dataList.pop().formData\n                addClass( $form, formCssClasses.ajaxPending )\n                dispatchCustomEvent( $form, customEvents.form.submit, { detail: ajaxCall( $form, formData, options ) } )\n            }\n\n        })\n        .catch(fields => {\n            eventPreventDefault()\n            removeClass( $form, formCssClasses.submit )\n        })\n    \n}\n","\nexport const groupValidationEnd = function( event ){\n\n    const detail = event.detail\n\n    if( detail.result ){\n        event.target.formjs.currentGroup = detail.group.next\n    }\n    \n}\n","\nimport { fieldsStringSelector, isFieldForChangeEvent } from '../helpers'\n\nexport const validation = function( event ){\n\n    const isChangeEvent = event.type === 'change'\n    const $field = event.target\n    const self = $field.form.formjs\n\n    if( $field.matches( fieldsStringSelector ) ){\n        const isFieldForChangeEventBoolean = isFieldForChangeEvent($field)\n        const hasOnlyChangeEvent = self.options.fieldOptions.validateOnEvents === 'change'\n        \n        if(\n            (isFieldForChangeEventBoolean && isChangeEvent) ||\n            (!isFieldForChangeEventBoolean && (!isChangeEvent || hasOnlyChangeEvent))\n        ){\n            \n            self.validateField( $field )\n                .then(() => {\n                    const type = $field.type\n                    const $relatedEqualTo = $field.form.querySelector(`[data-equal-to=\"${$field.name}\"]`)\n\n                    if(\n                        // FIELD IS ( required OR data-validate-if-filled ) AND RELATED FIELD data-equal-to HAS A VALUE\n                        ($field.required || $field.matches('[data-validate-if-filled]')) && \n                        !(type === 'checkbox' || type === 'radio') && \n                        $relatedEqualTo && $relatedEqualTo.value.trim() !== ''\n                    ){\n                        self.validateField( $relatedEqualTo ).catch(errors => {})\n                    }\n                })\n                .catch(errors => {})\n\n        }\n    }\n    \n}\n","\nimport { addClass, getJSONobjectFromFieldAttribute, removeClass, mergeObjects } from '../helpers'\n\nexport const validationEnd = function( event ){\n\n    const eventDetail = event.detail\n    const $field = eventDetail.$field\n    const dataFieldOptions = getJSONobjectFromFieldAttribute( $field, 'data-field-options' )\n    const fieldOptions = mergeObjects({}, $field.form.formjs.options.fieldOptions, dataFieldOptions)\n    const $container = $field.closest( fieldOptions.questionContainer )\n    const isReqFrom = $field.matches('[data-required-from]')\n    const $reqMore = document.querySelector( $field.dataset.requiredFrom )\n\n    if( $container && !fieldOptions.skipUIfeedback ){\n\n        if( eventDetail.result ){\n\n            if( !isReqFrom || (isReqFrom && $reqMore.checked) ){\n                // IF FIELD IS VALID\n                const errorClasses = `${fieldOptions.cssClasses.error} ${fieldOptions.cssClasses.errorEmpty} ${fieldOptions.cssClasses.errorRule}`\n                removeClass( $container, errorClasses )\n                addClass( $container, fieldOptions.cssClasses.valid )\n            }\n\n        } else {\n\n            // IF FIELD IS NOT VALID\n            let extraErrorClass = fieldOptions.cssClasses.errorRule\n\n            // HANDLE CASE OF FIELD data-checks\n            const isChecks = $field.matches('[data-checks]')\n            const checkedElLength = (isChecks ? $container.querySelectorAll(`[name=\"${$field.name}\"]:checked`).length : 0)\n\n            if( (!isChecks && (eventDetail.errors && eventDetail.errors.empty)) || (isChecks && checkedElLength === 0) ){\n                extraErrorClass = fieldOptions.cssClasses.errorEmpty\n            }\n\n            let errorClasses = `${fieldOptions.cssClasses.error} ${extraErrorClass}`\n            let errorClassToRemove = `${fieldOptions.cssClasses.errorEmpty} ${fieldOptions.cssClasses.errorRule}`\n            removeClass( $container, `${fieldOptions.cssClasses.valid} ${errorClassToRemove}` )\n            addClass( $container, errorClasses )\n\n        }\n    }\n\n}\n","\nimport {    \n    getJSONobjectFromFieldAttribute,\n    isDOMNode,\n    mergeObjects,\n    mergeValidateFieldDefault,\n    removeClass,\n    runFunctionsSequence\n}                   from './helpers'\nimport { isValid }  from './isValid'\n\nexport async function checkFieldValidity( $field, fieldOptions, validationRules, validationErrors ){\n\n    if( !isDOMNode($field) ){\n        const obj = mergeValidateFieldDefault({$field})\n        return Promise.resolve(obj)\n    }\n\n    const $form = $field.form\n    const isValidValue = $field.value.trim().length > 0\n    const dataFieldOptions = getJSONobjectFromFieldAttribute( $field, 'data-field-options' )\n\n    fieldOptions = mergeObjects( fieldOptions, dataFieldOptions )\n\n    // HANDLE FIELD data-required-from WHEN CHANGING ITS RELATED RADIO\n    if( $field.type === 'radio' ){\n        const $checked = $field.checked ? $field : $form.querySelector(`[name=\"${$field.name}\"]:checked`)\n        const reqMoreIsChecked = $checked && $checked.matches('[data-require-more]')\n        const $findReqMore = reqMoreIsChecked ? $checked : $form.querySelector(`[data-require-more][name=\"${$field.name}\"]`)\n        const $findReqFrom = $findReqMore ? $form.querySelector(`[data-required-from=\"#${$findReqMore.id}\"]`) : null\n        \n        if( $checked && $findReqFrom ){\n            $findReqFrom.required = $findReqMore.required && $findReqMore.checked\n            if( !reqMoreIsChecked ){\n                $findReqFrom.value = ''\n            } else if( fieldOptions.focusOnRelated ) {\n                $findReqFrom.focus()\n            }\n        }\n    }\n\n    // HANDLE FIELD data-require-more & data-required-from WHEN *-from IT'S FILLED\n    if( $field.matches('[data-required-from]') && isValidValue ){\n        const $reqMore = $form.querySelector( $field.dataset.requiredFrom )\n        $reqMore.checked = true\n        $field.required = $reqMore.required\n    }\n\n    const dataBeforeValidation = (await runFunctionsSequence({\n        functionsList: fieldOptions.beforeValidation,\n        data: { $field, fieldOptions }\n    })).pop()\n\n    const needsValidation = $field.required || ($field.matches('[data-validate-if-filled]') && isValidValue)\n\n    if( !needsValidation ){\n        delete dataBeforeValidation.fieldOptions\n        dataBeforeValidation.result = true\n    }\n    \n    const validationResult = needsValidation ? await isValid($field, fieldOptions, validationRules, validationErrors) : dataBeforeValidation\n\n    const $container = fieldOptions.questionContainer && validationResult.$field.closest( fieldOptions.questionContainer )\n    if( $container ){\n        removeClass( $container, fieldOptions.cssClasses.pending )\n    }\n    \n    return validationResult\n\n}\n","\nimport { mergeValidateFieldDefault, mergeObjects, toCamelCase } from './helpers'\n\nexport async function isValid( $field, fieldOptions, validationRules, validationErrors ){\n\n    const fieldValue = $field.value\n    const obj = mergeValidateFieldDefault({result: fieldValue.trim().length > 0, $field})\n    const isCheckboxOrRadio = ['checkbox', 'radio'].includes($field.type)\n    const hasSelectedInput = $field.form.querySelectorAll(`[name=\"${$field.name}\"]:checked`).length > 0\n\n    if( (!isCheckboxOrRadio && !obj.result) || (isCheckboxOrRadio && !hasSelectedInput) ){\n        obj.result = false\n        obj.errors = { empty: true }\n        return Promise.resolve(obj)\n    }\n\n    // COLLECT VALIDATION METHOD NAMES ( USED TO RUN VALIDATIONS AND GET ERRORS )\n    const validationMethods = Array.from($field.attributes).reduce((accList, attr) => {\n        const attrName = toCamelCase( attr.name.replace('data-', '') )\n        const attrValue = toCamelCase( attr.value )\n        const isAttrValueWithFn = ['type', 'subtype'].includes(attrName) && validationRules[attrValue]\n        const isAttrNameWithFn = validationRules[attrName]\n\n        if( isAttrValueWithFn || isAttrNameWithFn ){\n            accList.push( isAttrValueWithFn ? attrValue : attrName )\n        }\n        return accList\n    }, [])\n\n    const validity = await new Promise(resolve => {\n\n        // RUN VALIDATIONS\n        const validationsResult = validationMethods.reduce((accPromise, methodName) => {\n            return accPromise.then(accObj => {\n                return new Promise(resolveVal => {\n                    // RUN VALIDATION INSIDE A PROMISE IS USEFUL FOR ASYNC VALIDATIONS\n                    resolveVal( validationRules[methodName](fieldValue, $field, fieldOptions) )\n                }).then(valObj => {\n                    // ADD CUSTOM ERROR-KEY FOR EACH VALIDATION RULE\n                    if( !valObj.result ){\n                        const errorObj = {}\n                        if( typeof valObj.errors === 'undefined' || typeof valObj.errors[methodName] === 'undefined' ){\n                            errorObj[methodName] = true\n                        }\n                        valObj.errors = mergeObjects({}, valObj.errors, errorObj)\n                    }\n                    valObj = valObj.result ? {} : valObj\n                    return mergeObjects(accObj, valObj)\n                })\n            })\n        }, Promise.resolve(obj))\n        resolve(validationsResult)\n\n    })\n\n    if( !validity.result ){\n        validity.errors = validationMethods.reduce((accObj, methodName) => {\n            const errors = (validationErrors[methodName] && validationErrors[methodName](fieldValue, $field)) || {}\n            return mergeObjects(accObj, errors)\n        }, validity.errors)\n    }\n\n    return validity\n\n}\n","\nimport { getUniqueFields, mergeValidateFieldDefault, mergeValidateFormDefault, mergeObjects } from './helpers'\nimport { checkFieldValidity } from './checkFieldValidity'\n\nexport async function checkFieldsValidity( $fields, fieldOptions, validationRules, validationErrors, fieldToSkip = null ){\n\n    fieldOptions = mergeObjects( {}, fieldOptions, {focusOnRelated: false} )\n    const $fieldsList = getUniqueFields( $fields )\n\n    const fieldsValidity = await Promise.all( $fieldsList.map($field => {\n\n        if( fieldToSkip && $field === fieldToSkip ){\n            const obj = mergeValidateFieldDefault({$field, result: true})\n            return Promise.resolve(obj)\n        }\n        \n        return checkFieldValidity( $field, fieldOptions, validationRules, validationErrors )\n\n    }) )\n\n    const areAllFieldsValid = fieldsValidity.every(({result}) => result)\n\n    return mergeValidateFormDefault({result: areAllFieldsValid, fields:fieldsValidity})\n\n}\n","\nimport { mergeObjects } from './mergeObjects'\n\nexport const mergeValidateFormDefault = obj => {\n    return mergeObjects({}, { result: true, fields: [] }, obj)\n}\n","\nimport { version }              from '../package.json'\nimport { \n    checkFormEl, \n    customEvents, \n    dispatchCustomEvent, \n    excludeSelector, \n    fieldsStringSelector, \n    finalizeFieldPromise, \n    finalizeFieldsGroupPromise, \n    finalizeFormPromise, \n    getFilledFields, \n    isNodeList,\n    mergeObjects, \n    removeClass }               from './modules/helpers'\nimport { options }              from './modules/options'\nimport { validationRules }      from './modules/validationRules'\nimport { formStartup }          from './modules/formStartup'\nimport { destroy }              from './modules/destroy'\nimport { checkFieldValidity }   from './modules/checkFieldValidity'\nimport { checkFieldsValidity }  from './modules/checkFieldsValidity'\n\nclass Form {\n\n    constructor( form, optionsObj ){\n        const argsL = arguments.length\n        const checkFormElem = checkFormEl(form)\n\n        if( argsL === 0 || (argsL > 0 && !form) ){\n            throw new Error('First argument \"form\" is missing or falsy!')\n        }\n        if( isNodeList(form) ){\n            throw new Error('First argument \"form\" must be a single DOM node or a form CSS selector, not a NodeList!')\n        }\n        if( !checkFormElem.result ){\n            throw new Error('First argument \"form\" is not a DOM node nor a form CSS selector!')\n        }\n\n        const self = this\n\n        self.$form = checkFormElem.$el\n        self.$form.formjs = self\n        self.options = mergeObjects({}, Form.prototype.options, optionsObj)\n        self.currentGroup = self.options.formOptions.groups[0]\n\n        // BINDING CONTEXT FOR FUTURE EXECUTION\n        const cbList = [\n            // IN fieldOptions\n            'beforeValidation',\n            // IN formOptions\n            'beforeSend',\n            'getFormData'\n        ]\n        cbList.forEach(cbName => {\n            const optionType = self.options.formOptions[cbName] ? 'formOptions' : 'fieldOptions'\n            let cbOpt = self.options[optionType][cbName]\n\n            if( cbOpt ){\n                self.options[optionType][cbName] = ( Array.isArray(cbOpt) ? cbOpt.map(cbFn => cbFn.bind(self)) : cbOpt.bind(self) )\n            }\n        })\n\n        formStartup( self.$form, self.options )\n\n        const initOptions = {}\n        if( self.options.formOptions.onInitCheckFilled ){\n            initOptions.detail = self.validateFilledFields().catch(fields => {})\n        }\n        dispatchCustomEvent( self.$form, customEvents.form.init, initOptions )\n    }\n\n    destroy(){\n        destroy(this.$form, this.options)\n        dispatchCustomEvent( this.$form, customEvents.form.destroy )\n    }\n    \n    getFormData( trimValues = this.options.fieldOptions.trimValue ){\n        const $formFields = this.$form.querySelectorAll('input, select, textarea')\n        const $filteredFields = Array.from( $formFields ).filter( elem => elem.matches(excludeSelector) )\n        return this.options.formOptions.getFormData( $filteredFields, trimValues )\n    }\n\n    async validateField( field, fieldOptions ){\n        const self = this\n        const $form = self.$form\n        const $field = typeof field === 'string' ? $form.querySelector(field) : field\n\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions)\n\n        const fieldValidity = await checkFieldValidity($field, fieldOptions, self.validationRules, self.validationErrors)\n\n        dispatchCustomEvent( fieldValidity.$field, customEvents.field.validation, { detail: fieldValidity } )\n        \n        if( fieldValidity.result ){\n            if( fieldOptions.onValidationCheckAll ){\n                const selector = self.currentGroup || fieldsStringSelector\n                const $fields = $form.querySelectorAll(selector)\n                checkFieldsValidity( $fields, fieldOptions, self.validationRules, self.validationErrors, fieldValidity.$field )\n                    .then(dataForm => {\n                        const groups = self.options.formOptions.groups\n                        const validationEventName = self.currentGroup ? customEvents.group.validation : customEvents.form.validation\n                        if( groups.length > 0 ){\n                            dataForm.group = {\n                                prev: groups[groups.indexOf(selector) - 1],\n                                current: selector,\n                                next: groups[groups.indexOf(selector) + 1]\n                            }\n                            dataForm.canSubmit = dataForm.result && !dataForm.group.next\n                        }\n                        dispatchCustomEvent( $form, validationEventName, { detail: dataForm } )\n                    })\n            }\n        } else {\n            removeClass( $form, self.options.formOptions.cssClasses.valid )\n        }\n\n        return finalizeFieldPromise(fieldValidity)\n    }\n\n    async validateFieldsGroup( group = this.currentGroup, fieldOptions ){\n        const self = this\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions)\n        const $fields = self.$form.querySelectorAll(group)\n\n        const groupValidity = await checkFieldsValidity($fields, fieldOptions, self.validationRules, self.validationErrors)\n\n        groupValidity.fields.forEach(obj => {\n            obj.isCheckingGroup = true\n            dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } )\n        })\n\n        const groups = self.options.formOptions.groups\n        if( groups.length > 0 ){\n            groupValidity.group = {\n                prev: groups[groups.indexOf(group) - 1],\n                current: group,\n                next: groups[groups.indexOf(group) + 1]\n            }\n            groupValidity.canSubmit = groupValidity.result && !groupValidity.group.next\n        }\n\n        dispatchCustomEvent( self.$form, customEvents.group.validation, { detail: groupValidity } )\n        \n        return finalizeFieldsGroupPromise(groupValidity)\n    }\n\n    async validateFilledFields( fieldOptions ){\n        const self = this\n        const $filledFields = getFilledFields( self.$form )\n\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions)\n\n        const filledFieldsValidity = await checkFieldsValidity($filledFields, fieldOptions, self.validationRules, self.validationErrors)\n\n        filledFieldsValidity.fields.forEach(obj => {\n            dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } )\n        })\n        \n        return finalizeFormPromise(filledFieldsValidity)\n    }\n\n    async validateForm( fieldOptions ){\n        const self = this\n\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions)\n\n        if( self.currentGroup ){\n            return self.validateFieldsGroup( self.currentGroup, fieldOptions )\n        }\n\n        const $form = self.$form\n        const $fields = $form.querySelectorAll(fieldsStringSelector)\n\n        const formVaidity = await checkFieldsValidity($fields, fieldOptions, self.validationRules, self.validationErrors)\n\n        formVaidity.fields.forEach(obj => {\n            obj.isCheckingForm = true\n            dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } )\n        })\n\n        dispatchCustomEvent( $form, customEvents.form.validation, { detail: formVaidity } )\n\n        return finalizeFormPromise(formVaidity)\n    }\n    \n    static addValidationErrors( errorsObj ){\n        Form.prototype.validationErrors = mergeObjects({}, Form.prototype.validationErrors, errorsObj)\n    }\n\n    static addValidationRules( rulesObj ){\n        Form.prototype.validationRules = mergeObjects({}, Form.prototype.validationRules, rulesObj)\n    }\n    \n    static setOptions( optionsObj ){\n        Form.prototype.options = mergeObjects({}, Form.prototype.options, optionsObj)\n    }\n\n}\n\nForm.prototype.options = options\nForm.prototype.validationErrors = {}\nForm.prototype.validationRules = validationRules\nForm.prototype.version = version\n\nexport default Form\n","\nimport { isDOMNode } from './isDOMNode'\n\nexport const checkFormEl = form => {\n    const formIsString = typeof form === 'string'\n    const isValidNodeSelector = formIsString && isDOMNode(document.querySelector(form))\n    const isFormSelector = isValidNodeSelector && document.querySelector(form).tagName.toLowerCase() === 'form'\n    \n    return {\n        result: isDOMNode(form) || isFormSelector,\n        $el: (formIsString ? document.querySelector(form) : form)\n    }\n}\n","\nimport { customEvents } from './helpers'\nimport { \n    dataTypeNumber,\n    formValidationEnd,\n    groupValidationEnd,\n    keypressMaxlength,\n    pastePrevent,\n    submit,\n    validation, \n    validationEnd \n} from './listenerCallbacks'\n\nexport function formStartup( $form, options ){\n\n    $form.noValidate = true\n\n    const fieldOptions = options.fieldOptions\n    const formOptions = options.formOptions\n        \n    // VALIDATION WITH ATTRIBUTES LIKE HTML ONES ( ALSO FOR BUG FIXING, EG: maxlength IN ANDROID )\n    if( fieldOptions.strictHtmlValidation ){\n        \n        // maxlength\n        // MAXLENGTH IS BUGGY IN ANDROID BROWSERS\n        $form.addEventListener('keypress', keypressMaxlength, false)\n\n        // data-type=\"number\"\n        // SINCE VALIDATING type=\"number\" WITH NON NUMERIC CHARS WILL RETURN EMPTY STRING IN SOME BROWSERS ( EG: FIREFOX )\n        $form.addEventListener('input', dataTypeNumber, false)\n        \n    }\n    \n    if( fieldOptions.preventPasteFields && $form.querySelectorAll( fieldOptions.preventPasteFields ).length ){\n        // INIT EVENT LISTENER FOR \"PASTE\" EVENT TO PREVENT IT ON SPECIFIED FIELDS\n        $form.addEventListener('paste', pastePrevent, false)\n    }\n\n    // INIT EVENTS LISTENER ( AS IN fieldOptions )\n    fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n        const useCapture = ['blur', 'focus'].includes(eventName)\n        $form.addEventListener(eventName, validation, useCapture)\n    })\n\n    $form.addEventListener(customEvents.field.validation, validationEnd, false)\n    if( formOptions.groups.length > 0 ){\n        $form.addEventListener(customEvents.group.validation, groupValidationEnd, false)\n    }\n    $form.addEventListener(customEvents.form.validation, formValidationEnd, false)\n    \n    // HANDLE FORM SUBMIT\n    if( formOptions.handleSubmit ){\n        // INIT FORM SUBMIT ( DEFAULT AND AJAX )\n        $form.addEventListener('submit', submit)\n\n        if( formOptions.ajaxSubmit ){\n            if( $form.getAttribute('enctype') ){\n                formOptions.ajaxOptions.headers['Content-Type'] = $form.getAttribute('enctype')\n            }\n\n            if( $form.getAttribute('method') ){\n                formOptions.ajaxOptions.method = $form.getAttribute('method').toUpperCase()\n            }\n\n            if( $form.getAttribute('action') ){\n                formOptions.ajaxOptions.url = $form.getAttribute('action')\n            }\n        }\n    }\n\n}\n","\nimport { customEvents } from './helpers'\nimport { dataTypeNumber, formValidationEnd, groupValidationEnd, keypressMaxlength, pastePrevent, submit, validation, validationEnd } from './listenerCallbacks'\n\n\nexport function destroy( $form, options ){\n\n    if( options.fieldOptions.strictHtmlValidation ){\n        $form.removeEventListener('keypress', keypressMaxlength, false)\n        $form.removeEventListener('input', dataTypeNumber, false)\n    }\n\n    if( options.fieldOptions.preventPasteFields ){\n        $form.removeEventListener('paste', pastePrevent, false)\n    }\n\n    if( options.formOptions.handleSubmit ){\n        $form.removeEventListener('submit', submit)\n    }\n\n    options.fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n        const useCapturing = eventName === 'blur' ? true : false\n        $form.removeEventListener(eventName, validation, useCapturing)\n    })\n\n    $form.removeEventListener(customEvents.field.validation, validationEnd, false)\n    if( options.formOptions.groups.length > 0 ){\n        $form.removeEventListener(customEvents.group.validation, groupValidationEnd, false)\n    }\n    $form.removeEventListener(customEvents.form.validation, formValidationEnd, false)\n\n    delete $form.formjs\n    \n}\n","\nexport const excludeSelector = ':not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"file\"]):not([data-exclude-data])'\n","\nexport const finalizeFieldPromise = ({errors, result}) => {\n    if( result ){\n        return Promise.resolve()\n    }\n    return Promise.reject(errors)\n}\n","\nexport const finalizeFieldsGroupPromise = ({canSubmit, fields, group, result}) => {\n    if( result ){\n        return Promise.resolve({canSubmit, fields, group})\n    }\n    return Promise.reject({fields, group})\n}\n","\nimport { fieldsStringSelector } from './fieldsStringSelector'\nimport { getUniqueFields } from './getUniqueFields'\n\nexport const getFilledFields = $form => {\n    return getUniqueFields( $form.querySelectorAll(fieldsStringSelector) )\n    .map($field => {\n\n        const name = $field.name\n        const type = $field.type\n        const isCheckboxOrRadio = ['checkbox', 'radio'].includes(type)\n        const fieldChecked = $form.querySelector(`[name=\"${name}\"]:checked`)\n        const isReqFrom = $field.matches('[data-required-from]')\n        const $reqMore = (isReqFrom ? $form.querySelector($field.dataset.requiredFrom) : null)\n\n        return (\n            isCheckboxOrRadio ? (fieldChecked || null) :\n            (isReqFrom && $reqMore.checked) || (!isReqFrom && $field.value) ? $field : null\n        )\n\n    })\n    .filter($field => $field !== null)\n}\n"],"names":["addClass","element","cssClasses","classList","add","split","isNodeList","nodeList","NodeList","prototype","isPrototypeOf","removeClass","remove","isDOMNode","node","Element","customEvents","field","validation","form","destroy","init","submit","group","mergeObjects","out","arguments","length","undefined","Array","from","slice","filter","arg","forEach","Object","keys","key","object","isArray","concat","toString","call","push","dispatchCustomEvent","elem","eventName","eventOptions","bubbles","eventObj","CustomEvent","dispatchEvent","fieldsStringSelector","finalizeFormPromise","_ref","fields","result","Promise","resolve","reject","formatMap","dateArray","reverse","getDateAsNumber","dateString","dateFormat","splitChar","string","separator","match","getSplitChar","indexOf","replace","join","getJSONobjectFromFieldAttribute","$field","attrName","$customAttr","closest","JSON","parse","getAttribute","getUniqueFields","$nodeList","currentFieldName","currentFieldType","name","type","matches","mergeValidateFieldDefault","obj","isFieldForChangeEvent","runFunctionsSequence","functionsList","data","stopConditionFn","reduce","acc","promiseFn","then","res","dataNew","dataList","serializeObject","constructor","a","k","encodeURIComponent","toCamelCase","all","letter","toUpperCase","options","fieldOptions","beforeValidation","trimValue","value","trim","checkDirtyField","$fields","includes","$container","questionContainer","dirty","skipUIfeedback","pending","error","errorEmpty","errorRule","valid","focusOnRelated","maxFileSize","onValidationCheckAll","preventPasteFields","strictHtmlValidation","validateOnEvents","formOptions","ajaxOptions","cache","credentials","headers","Accept","method","mode","redirect","timeout","url","location","href","ajaxSubmit","beforeSend","ajaxComplete","ajaxError","ajaxPending","ajaxSuccess","getFormData","$filteredFields","trimValues","formData","$form","this","prevObj","isCheckbox","isRadio","isSelect","checked","$checkboxes","querySelectorAll","$checkedRadio","querySelector","$selectedOpts","option","selected","keyName","index","list","isLastKeyName","keyNameSplit","arrPos","arrayHasItemAtIndex","arrItemKeyName","isKeyNameArray","endsWith","groups","handleFileUpload","handleSubmit","onInitCheckFilled","validationRules","date","test","email","number","checkbox","$dataChecks","attrValue","dataset","checks","checkedLength","isMinOk","isMaxOk","errors","minChecks","maxChecks","equalTo","exactLength","valueLength","minlength","maxlength","file","MIMEtype","accept","RegExp","filesList","files","exceedMaxFileSize","size","isAcceptedFileType","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","max","maxVal","maxLength","min","minVal","minLength","pattern","radio","$fieldChecked","dataTypeNumber","event","target","fieldValue","stopImmediatePropagation","valueReplaced","formValidationEnd","formjs","clMethodName","detail","keypressMaxlength","keyPressed","which","keyCode","allowedKeys","pastePrevent","preventDefault","getFetchMethod","response","get","contentType","headerOpt","async","ajaxCall","formDataObj","timeoutTimer","isMultipart","body","formDataMultipart","FormData","append","idx","stringify","Headers","controller","AbortController","signal","window","setTimeout","abort","fetch","ok","Error","statusText","catch","message","finally","clearTimeout","disabled","instance","formCssClasses","isAjaxForm","$btn","eventPreventDefault","validateForm","canSubmit","stopExecution","beforeSendData","rfsObject","some","pop","groupValidationEnd","currentGroup","next","isChangeEvent","self","isFieldForChangeEventBoolean","hasOnlyChangeEvent","validateField","$relatedEqualTo","required","validationEnd","eventDetail","dataFieldOptions","isReqFrom","$reqMore","document","requiredFrom","errorClasses","extraErrorClass","isChecks","checkedElLength","empty","errorClassToRemove","checkFieldValidity","validationErrors","isValidValue","$checked","reqMoreIsChecked","$findReqMore","$findReqFrom","id","focus","dataBeforeValidation","needsValidation","validationResult","isCheckboxOrRadio","hasSelectedInput","validationMethods","attributes","accList","attr","isAttrValueWithFn","isAttrNameWithFn","validity","accPromise","methodName","accObj","resolveVal","valObj","errorObj","isValid","checkFieldsValidity","fieldToSkip","$fieldsList","fieldsValidity","map","areAllFieldsValid","every","Form","optionsObj","argsL","checkFormElem","formIsString","isFormSelector","tagName","toLowerCase","$el","checkFormEl","cbName","optionType","cbOpt","cbFn","bind","noValidate","addEventListener","useCapture","formStartup","initOptions","validateFilledFields","removeEventListener","useCapturing","$formFields","fieldValidity","selector","dataForm","validationEventName","prev","current","finalizeFieldPromise","validateFieldsGroup","groupValidity","isCheckingGroup","finalizeFieldsGroupPromise","$filledFields","fieldChecked","filledFieldsValidity","formVaidity","isCheckingForm","addValidationErrors","errorsObj","addValidationRules","rulesObj","setOptions","version"],"mappings":"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"}