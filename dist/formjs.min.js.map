{"version":3,"file":"formjs.min.js","sources":["../src/modules/version.js","../src/modules/helpers/addClass.js","../src/modules/helpers/isNodeList.js","../src/modules/helpers/removeClass.js","../src/modules/helpers/isDOMNode.js","../src/modules/helpers/checkFormEl.js","../src/modules/helpers/customEvents.js","../src/modules/helpers/isPlainObject.js","../src/modules/helpers/mergeObjects.js","../src/modules/helpers/dispatchCustomEvent.js","../src/modules/helpers/fieldsStringSelector.js","../src/modules/helpers/finalizeFieldPromise.js","../src/modules/helpers/finalizeFormPromise.js","../src/modules/helpers/getDateAsNumber.js","../src/modules/helpers/getSplitChar.js","../src/modules/helpers/getUniqueFields.js","../src/modules/helpers/mergeValidateFieldDefault.js","../src/modules/helpers/mergeValidateFormDefault.js","../src/modules/helpers/isFieldForChangeEvent.js","../src/modules/helpers/runFunctionsSequence.js","../src/modules/helpers/serializeObject.js","../src/modules/helpers/toCamelCase.js","../src/modules/optionsUtils.js","../src/modules/helpers/checkDirtyField.js","../src/modules/options.js","../src/modules/validationRules.js","../src/modules/validationRules/date.js","../src/modules/validationRules/email.js","../src/modules/validationRules/number.js","../src/modules/validationRules/checkbox.js","../src/modules/validationRules/checks.js","../src/modules/validationRules/equalTo.js","../src/modules/validationRules/exactLength.js","../src/modules/validationRules/file.js","../src/modules/validationRules/length.js","../src/modules/validationRules/max.js","../src/modules/validationRules/maxlength.js","../src/modules/validationRules/min.js","../src/modules/validationRules/minlength.js","../src/modules/validationRules/pattern.js","../src/modules/validationRules/radio.js","../src/modules/listenerCallbacks/dataTypeNumber.js","../src/modules/listenerCallbacks/formValidationEnd.js","../src/modules/listenerCallbacks/keypressMaxlength.js","../src/modules/listenerCallbacks/pastePrevent.js","../src/modules/ajaxCall.js","../src/modules/listenerCallbacks/submit.js","../src/modules/listenerCallbacks/validation.js","../src/modules/listenerCallbacks/validationEnd.js","../src/modules/formStartup.js","../src/modules/checkFilledFields.js","../src/modules/helpers/getFilledFields.js","../src/modules/checkFieldValidity.js","../src/modules/isValid.js","../src/modules/checkFormValidity.js","../src/index.js","../src/modules/destroy.js","../src/modules/helpers/excludeSelector.js"],"sourcesContent":["\nexport const version = '5.0.0';\n","\nexport const addClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.add( className );\n    });\n}\n","\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList );\n}\n","\nexport const removeClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.remove( className );\n    });\n}\n","\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node );\n}\n","\nimport { isDOMNode } from './isDOMNode';\n\nexport const checkFormEl = form => {\n    let isString = typeof form,\n        isValidNodeSelector = isString === 'string' && isDOMNode(document.querySelector(form)),\n        isFormSelector = isValidNodeSelector && document.querySelector(form).tagName.toLowerCase() === 'form',\n        obj = {\n            result: isDOMNode(form) || isFormSelector,\n            $el: (isString === 'string' ? document.querySelector(form) : form)\n        };\n\n    return obj;\n}\n","\nexport const customEvents = {\n    field: {\n        validation: 'fjs.field:validation'\n    },\n    form: {\n        submit:     'fjs.form:submit',\n        validation: 'fjs.form:validation'\n    }\n}\n","\nexport const isPlainObject = object => {\n    return Object.prototype.toString.call( object ) === '[object Object]';\n}\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const mergeObjects = function( out = {} ){\n    Array.from(arguments).slice(1).filter(arg => !!arg).forEach(arg => {\n        Object.keys(arg).forEach(key => {\n            if( Array.isArray(arg[key]) ){\n                out[key] = (out[key] || []).concat( arg[key].slice(0) );\n            } else if( isPlainObject(arg[key]) ){\n                out[key] = mergeObjects((out[key] || {}), arg[key]);\n            } else {\n                // * STRING | NUMBER | BOOLEAN | FUNCTION\n                if( Array.isArray(out[key]) ){\n                    // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                    out[key].push(arg[key]);\n                } else {\n                    out[key] = arg[key];\n                }\n            }\n        });\n    });\n\n    return out;\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const dispatchCustomEvent = ( elem, eventName, eventOptions ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions);\n    const eventObj = new CustomEvent(eventName, eventOptions);\n    elem.dispatchEvent( eventObj );\n}\n","\nexport const fieldsStringSelector = 'input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"hidden\"]), select, textarea'\n","\nexport const finalizeFieldPromise = obj => {\n    if( obj.result ){\n        return Promise.resolve();\n    }\n    return Promise.reject(obj.errors);\n}\n","\nexport const finalizeFormPromise = obj => {\n    if( obj.result ){\n        return Promise.resolve(obj.fields);\n    }\n    return Promise.reject(obj.fields);\n}\n","\nimport { getSplitChar } from './getSplitChar';\n\nconst formatMap = {\n    'YYYY-MM-DD': function(dateArray){\n        return dateArray;\n    },\n    'MM-DD-YYYY': function(dateArray){\n        return [dateArray[2], dateArray[0], dateArray[1]];\n    },\n    'DD-MM-YYYY': function(dateArray){\n        return dateArray.reverse();\n    }\n};\n\nexport const getDateAsNumber = ( dateString, dateFormat ) => {\n    dateFormat = dateFormat || 'YYYY-MM-DD';\n    const splitChar = getSplitChar(dateString);\n\n    if( dateFormat.indexOf(splitChar) < 0 ){\n        return;\n    }\n\n    dateFormat = dateFormat.replace(/[^YMD]/g, '-');\n    dateString = dateString.split(splitChar);\n    dateString = formatMap[dateFormat](dateString).join('');\n    \n    return dateString;\n}\n","\nexport const getSplitChar = string => {\n    // MATCH ANY NON-DIGIT CHAR\n    const separator = string.match(/\\D/);\n    return (separator && separator.length > 0) ? separator[0] : null;\n}\n","\nexport const getUniqueFields = $nodeList => {\n\n    let currentFieldName = '',\n        currentFieldType = '';\n\n    return Array.from( $nodeList ).filter($field => {\n        const name = $field.name,\n              type = $field.type;\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false;\n        }\n        \n        if( !$field.matches('[data-required-from]') ){\n            currentFieldName = name;\n            currentFieldType = type;\n        }\n        return true;\n    });\n    \n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const mergeValidateFieldDefault = obj => {\n    return mergeObjects({}, { result: false, $field: null }, obj);\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const mergeValidateFormDefault = obj => {\n    return mergeObjects({}, { result: true, fields: [] }, obj);\n}\n","\nexport const isFieldForChangeEvent = $field => {\n    return $field.matches('select, [type=\"radio\"], [type=\"checkbox\"], [type=\"file\"]');\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const runFunctionsSequence = ( { functionsList = [], data = {}, stopConditionFn = () => false } = {} ) => {\n    return functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1]);\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res);\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result);\n                    return res;\n                });\n        });\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList);\n}\n","\nexport const serializeObject = obj => {\n    var objToString = (\n            (obj && typeof obj === 'object' && obj.constructor === Object) ? \n            Object.keys(obj)\n                .reduce((a,k) => {\n                    a.push(k+'='+encodeURIComponent(obj[k]));\n                    return a\n                },[]).join('&') : \n            obj\n    );\n    return objToString;\n}\n","\nexport const toCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase(); });\n}\n","\nimport { addClass, checkDirtyField } from './helpers';\n\nexport const defaultCallbacksInOptions = {\n    fieldOptions: {\n\n        beforeValidation: function beforeValidationDefault ( fieldObj ) {\n\n            const fieldOptions = this.options.fieldOptions;\n\n            checkDirtyField( fieldObj.$field, fieldOptions );\n            if( !fieldOptions.skipUIfeedback ){\n                addClass( fieldObj.$field.closest( fieldOptions.questionContainer ), fieldOptions.cssClasses.pending );\n            }\n\n        }\n\n    },\n    formOptions: {\n\n        getFormData: function getFormDataDefault ( $filteredFields ) {\n\n            const formData = {},\n                  $form = this.$form;\n\n            $filteredFields.forEach($field => {\n                const isCheckbox = $field.type === 'checkbox',\n                      isRadio = $field.type === 'radio',\n                      isSelect = $field.matches('select'),\n                      name = $field.name;\n                let value = $field.value;\n                                \n                if( isCheckbox ) {\n                    \n                    value = $field.checked;\n                    let $checkboxes = Array.from( $form.querySelectorAll('[name=\"'+ name +'\"]') );\n                    if( $checkboxes.length > 1 ){\n\n                        value = [];\n                        let $checked = $checkboxes.filter(field => field.checked);\n                        $checked.forEach($field => {\n                            value.push( $field.value );\n                        });\n\n                    }\n                        \n                } else if( isRadio ){\n                    \n                    const $checkedRadio = $form.querySelector('[name=\"'+ name +'\"]:checked');\n                    value = ($checkedRadio === null ? null : $checkedRadio.value);\n                    \n                } else if( isSelect ){\n\n                    const $selectedOpts = Array.from( $field.options ).filter(option => option.selected);\n                    if( $selectedOpts.length > 1 ){\n\n                        value = [];\n                        $selectedOpts.forEach($field => {\n                            value.push( $field.value );\n                        });\n\n                    }\n                }\n\n                formData[ name ] = value;\n            });\n\n            return formData;\n\n        }\n\n    }\n}\n","\nimport { addClass } from './addClass';\nimport { isNodeList } from './isNodeList';\nimport { removeClass } from './removeClass';\n\nexport const checkDirtyField = ( $fields, fieldOptions ) => {\n\n    $fields = isNodeList($fields) ? Array.from( $fields ) : [$fields];\n    $fields.forEach($field => {\n        if( $field.type !== 'checkbox' && $field.type !== 'radio' ){\n            const $container = $field.closest( fieldOptions.questionContainer ) || $field;\n            if( $field.value ){\n                addClass( $container, fieldOptions.cssClasses.dirty );\n            } else {\n                removeClass( $container, fieldOptions.cssClasses.dirty );\n            }\n        }\n    });\n    \n}\n","\nimport { defaultCallbacksInOptions } from './optionsUtils';\n\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [defaultCallbacksInOptions.fieldOptions.beforeValidation],\n        cssClasses: {\n            dirty:              'is-dirty',\n            error:              'has-error',\n            errorEmpty:         'has-error-empty',\n            errorRule:          'has-error-rule',\n            pending:            'is-pending',\n            valid:              'is-valid'\n        },\n        focusOnRelated:         true,\n        handleFileUpload:       true,\n        onValidationCheckAll:   false,\n        preventPasteFields:     '[type=\"password\"], [data-equal-to]',\n        questionContainer:      '[data-formjs-question]',\n        skipUIfeedback:         false,\n        strictHtmlValidation:   true,\n        validateOnEvents:       'input change'\n    },\n\n    formOptions: {\n        ajaxOptions:            {\n            cache:              'no-store',\n            credentials:        'same-origin',\n            headers: {\n                                'Content-Type': 'application/json',\n                                'Accept':       'application/json'\n            },\n            method:             'POST',\n            mode:               'same-origin',\n            redirect:           'follow',\n            timeout:            0,\n            url:                location.href\n        },\n        ajaxSubmit:             true,\n        beforeSend:             [],\n        cssClasses: {\n            ajaxComplete:       'ajax-complete',\n            ajaxError:          'ajax-error',\n            ajaxPending:        'ajax-pending',\n            ajaxSuccess:        'ajax-success',\n            submit:             'is-submitting',\n            valid:              'is-valid'\n        },\n        getFormData:            defaultCallbacksInOptions.formOptions.getFormData,\n        handleSubmit:           true\n    }\n    \n}\n","\nimport { date }         from './validationRules/date';\nimport { email }        from './validationRules/email';\nimport { number }       from './validationRules/number';\n\nimport { checkbox }     from './validationRules/checkbox';\nimport { equalTo }      from './validationRules/equalTo';\nimport { exactLength }  from './validationRules/exactLength';\nimport { file }         from './validationRules/file';\nimport { length }       from './validationRules/length';\nimport { max }          from './validationRules/max';\nimport { maxlength }    from './validationRules/maxlength';\nimport { min }          from './validationRules/min';\nimport { minlength }    from './validationRules/minlength';\nimport { pattern }      from './validationRules/pattern';\nimport { radio }        from './validationRules/radio';\n\nexport const validationRules = {\n    date,\n    email,\n    number,\n\n    checkbox,\n    equalTo,\n    exactLength,\n    file,\n    length,\n    max,\n    maxlength,\n    min,\n    minlength,\n    pattern,\n    radio\n}\n","\n/*\n    DATE AS ISO 8601 DATE FORMAT:\n    YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n*/\n\nexport const date = function( string ){\n    return {\n        result: /^((((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13578]|1[02])[ \\/\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13456789]|1[012])[ \\/\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.]02[ \\/\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ \\/\\-.]02[ \\/\\-.]29))$/g.test( string )\n    };\n}\n","\n// https://regex101.com/r/cdlyJy/3\n\nexport const email = function( string ){\n    return {\n        result: /^[a-zA-Z_-]([\\w.-]?[a-zA-Z0-9])*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?){2,})+$/.test( string )\n    };\n}\n","\n/*\n    ALL NUMBERS ( INTEGERS AND FLOATING )\n    VALID NUMBERS: 123 | 123.456 | .123\n*/\n\nexport const number = function( string ){\n    return {\n        result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n    };\n}","\nimport { checks } from './checks';\n\nexport const checkbox = function( value, $field ){\n    const $dataChecks = $field.closest('form').querySelector('[name=\"' + $field.name + '\"][data-checks]');\n    return $dataChecks ? checks($dataChecks) : { result: $field.checked };\n}\n","\nexport const checks = function( $field ){\n    const attrValue = JSON.parse( $field.getAttribute('data-checks') ),\n          checkedLength = $field.closest('form').querySelectorAll('[name=\"' + $field.name + '\"]:checked').length,\n          isMinOk = checkedLength >= attrValue[0],\n          isMaxOk = checkedLength <= attrValue[1],\n          obj = { result: isMinOk && isMaxOk };\n\n    if( !obj.result ){\n        obj.errors = { checks: true };\n        if( !isMinOk ){ obj.errors.minChecks = true; }\n        if( !isMaxOk ){ obj.errors.maxChecks = true; }\n    }\n\n    return obj;\n}\n","\nexport const equalTo = function( value, $field ){\n    const $checkFrom = $field.closest('form').querySelector( '[name=\"' + $field.getAttribute('data-equal-to') + '\"]' );\n    return { result: value === $checkFrom.value };\n}\n","\nexport const exactLength = function( value, $field ){\n    const valueLength = value.length,\n          exactLength = $field.getAttribute('data-exact-length') * 1,\n          obj = { result: valueLength === exactLength };\n\n    if( !obj.result ){\n        obj.errors = {};\n        if( valueLength < exactLength ){ obj.errors.minlength = true; }\n        else { obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nexport const file = function( value, $field ){\n    const maxFileSize = ($field.getAttribute('data-max-file-size') || 0) * 1,\n          MIMEtype = $field.accept ? new RegExp($field.accept.replace( '*', '[^\\\\/,]+' )) : null,\n          filesList = Array.from($field.files),\n          obj = { result: true };\n\n    filesList.forEach(file => {\n        const exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize,\n              isAcceptedFileType = MIMEtype !== null ? MIMEtype.test(file.type) : true;\n\n        if( exceedMaxFileSize || !isAcceptedFileType ){\n            obj.result = false;\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {};\n            }\n            if( exceedMaxFileSize ){ obj.errors.maxFileSize = true; }\n            if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true; }\n\n        }\n    });\n\n    return obj;\n}\n","\nexport const length = function( value, $field ){\n    const valueL = value.length,\n          attrValue = JSON.parse( $field.getAttribute('data-length') ),\n          isMinlengthOk = valueL >= attrValue[0],\n          isMaxlengthOk = valueL <= attrValue[1],\n          obj = { result: isMinlengthOk && isMaxlengthOk };\n\n    if( !obj.result ){\n        obj.errors = {};\n        if( !isMinlengthOk ){ obj.errors.minlength = true; }\n        if( !isMaxlengthOk ){ obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const max = function( value, $field ){\n    let maxVal = $field.max;\n    const dateFormat = $field.getAttribute('data-date-format');\n    \n    if( $field.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat );\n        maxVal = maxVal.split('-').join('');\n    }\n\n    value = value * 1;\n    maxVal = maxVal * 1;\n    \n    return { result: value <= maxVal };\n}\n","\nexport const maxlength = function( value, $field ){\n    return { result: value.length <= $field.maxLength * 1 };\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const min = function( value, $field ){\n    let minVal = $field.min;\n    const dateFormat = $field.getAttribute('data-date-format');\n    \n    if( $field.type === 'date' || $field.getAttribute('data-date-format') ){\n        value = getDateAsNumber( value, dateFormat );\n        minVal = minVal.split('-').join('');\n    }\n\n    value = value * 1;\n    minVal = minVal * 1;\n    \n    return { result: value >= minVal };\n}\n","\nexport const minlength = function( value, $field ){\n    return { result: value.length >= $field.minLength * 1 };\n}\n","\nexport const pattern = function( value, $field ){\n    return { result: new RegExp($field.pattern).test(value) };\n}\n","\nexport const radio = function( value, $field ){\n    const $fieldChecked = $field.closest('form').querySelector( '[name=\"'+ $field.name +'\"]:checked' ),\n          isValid = $fieldChecked !== null && $fieldChecked.value.trim().length > 0;\n\n    return { result: isValid };\n}\n","\nexport const dataTypeNumber = function( event ){\n\n    const $field = event.target;\n    \n    if( $field.matches('[data-type=\"number\"]') ){\n        let fieldValue = $field.value;\n        const hasInvalidChars = /[^\\d.,+\\-]/.test(fieldValue);\n        \n        if( hasInvalidChars ){\n            event.stopImmediatePropagation();\n            let valueReplaced = fieldValue.replace(/[^\\d.,+\\-]/g, '');\n            $field.value = valueReplaced;\n        }\n    }\n\n}\n","\nexport const formValidationEnd = function( event ){\n    const formEl = event.target;\n    const options = formEl.formjs.options;\n    \n    if( !options.fieldOptions.skipUIfeedback ){\n        const clMethodName = event.detail.result ? 'add' : 'remove';\n        formEl.classList[clMethodName]( options.formOptions.cssClasses.valid );\n    }\n}\n","\nexport const keypressMaxlength = function( event ){\n\n    const $field = event.target;\n    \n    if( $field.matches( '[maxlength]' ) ){\n        const maxLength = $field.maxLength * 1,\n              keyPressed = event.which || event.keyCode,\n              allowedKeys = [8, 37, 38, 39, 46];\n\n        if( $field.value.length >= maxLength && allowedKeys.indexOf(keyPressed) === -1 ){\n            return false;\n        }\n    }\n\n}\n","\nexport const pastePrevent = function( event ){\n\n    const $field = event.target;\n    const fieldOptions = $field.closest('form').formjs.options.fieldOptions;\n\n    if( $field.matches( fieldOptions.preventPasteFields ) ){     \n        event.preventDefault();\n    }\n\n}\n","\nimport { addClass, mergeObjects, removeClass, serializeObject } from './helpers';\n\nconst getFetchMethod = (response, options) => {\n    const accept = options.headers.get('Accept'),\n          contentType = response.headers.get('Content-Type'),\n          headerOpt = accept || contentType || '';\n\n    if( headerOpt.indexOf('application/json') > -1 || headerOpt === '' ){\n        return 'json';\n    } else if( headerOpt.indexOf('text/') > -1 ){\n        return 'text';\n    } else {\n        return 'blob';\n    }\n};\n\nexport function ajaxCall( $form, formDataObj, options ){\n\n    let timeoutTimer;\n    const ajaxOptions = mergeObjects( {}, options.formOptions.ajaxOptions ),\n          isMultipart = ajaxOptions.headers['Content-Type'] === 'multipart/form-data';\n\n    ajaxOptions.body = formDataObj;\n    \n    // POST A FormData OBJECT ( multipart )\n    if( isMultipart && options.fieldOptions.handleFileUpload ){\n        let formDataMultipart = new FormData();\n        \n        for(let key in ajaxOptions.body){\n            formDataMultipart.append( key, ajaxOptions.body[key] );\n        }\n        \n        Array.from( $form.querySelectorAll('[type=\"file\"]') ).forEach($field => {\n            Array.from($field.files).forEach((file, idx) => {\n                const name = $field.name+'['+ idx +']';\n                formDataMultipart.append( name, file, file.name );\n            });\n        });\n        \n        ajaxOptions.body = formDataMultipart;\n    }\n\n    if( ajaxOptions.method === 'GET' ){\n\n        // FETCH WITH \"GET\" METHOD CAN'T HAVE \"body\". SO IT IS APPENDED TO THE URL\n        ajaxOptions.url += ( /\\?/.test(ajaxOptions.url) ? '&' : '?' ) + serializeObject( ajaxOptions.body );\n        delete ajaxOptions.body;\n\n    } else {\n\n        if( ajaxOptions.headers['Content-Type'].indexOf('application/x-www-form-urlencoded') > -1 ){\n            // POST A NORMAL FORM\n            ajaxOptions.body = serializeObject( ajaxOptions.body );\n        } else if( !isMultipart ){\n            // POST A JSON STRING\n            ajaxOptions.body = JSON.stringify(ajaxOptions.body);\n        }\n\n    }\n\n    ajaxOptions.headers = new Headers( ajaxOptions.headers );\n\n    if ( ajaxOptions.timeout > 0 ) {\n        const controller = new AbortController(),\n              signal = controller.signal;\n\n        ajaxOptions.signal = signal;\n        timeoutTimer = window.setTimeout(() => {\n            controller.abort();\n        }, ajaxOptions.timeout);\n    }\n\n    return fetch(ajaxOptions.url, ajaxOptions)\n        .then(response => {\n            if( !response.ok ){\n                return Promise.reject(response);\n            }\n            const fetchMethod = getFetchMethod(response, ajaxOptions);\n            return response[fetchMethod]();\n        })\n        .then(data => {\n            addClass( $form, options.formOptions.cssClasses.ajaxSuccess );\n            return data;\n        })\n        .catch(error => {\n            addClass( $form, options.formOptions.cssClasses.ajaxError );\n            return Promise.reject(error);\n        })\n        .finally(() => {\n            if( timeoutTimer ){\n                window.clearTimeout( timeoutTimer );\n            }\n            removeClass( $form, options.formOptions.cssClasses.submit + ' ' + options.formOptions.cssClasses.ajaxPending );\n            addClass( $form, options.formOptions.cssClasses.ajaxComplete );\n            $form.querySelector('[type=\"submit\"]').disabled = false;\n        });\n\n}\n","\nimport { addClass, customEvents, dispatchCustomEvent, removeClass, runFunctionsSequence } from '../helpers';\nimport { ajaxCall } from '../ajaxCall';\n\nexport function submit( event ){\n\n    const $form = event.target,\n          instance = $form.formjs,\n          options = instance.options,\n          formCssClasses = options.formOptions.cssClasses,\n          isAjaxForm = options.formOptions.ajaxSubmit,\n          $btn = $form.querySelector('[type=\"submit\"]'),\n          eventPreventDefault = ( enableBtn = true ) => {\n              if( $btn && enableBtn ){ $btn.disabled = false; }\n              if( event ){ event.preventDefault(); }\n          };\n\n    if( isAjaxForm ){\n        eventPreventDefault(false);\n    }\n\n    if( $btn ){\n        if( $btn.disabled ){\n            eventPreventDefault(false);\n            return false;\n        }\n        $btn.disabled = true;\n    }\n\n    removeClass( $form, (formCssClasses.ajaxComplete + ' ' + formCssClasses.ajaxError + ' ' + formCssClasses.ajaxSuccess) );\n    addClass( $form, formCssClasses.submit );\n\n    instance.validateForm()\n        .then(fields => {\n\n            const beforeSendData = {\n                stopExecution: false,\n                formData: isAjaxForm ? instance.getFormData() : null\n            };\n\n            const rfsObject = {\n                  functionsList: options.formOptions.beforeSend,\n                  data: beforeSendData,\n                  stopConditionFn: function(data){ return data.stopExecution; }\n            };\n            return runFunctionsSequence(rfsObject);\n\n        }).then(dataList => {\n\n            if( dataList.filter(data => data.stopExecution).length > 0 ){\n                eventPreventDefault();\n                return false;\n            }\n            \n            if( isAjaxForm ){\n                const formData = dataList.pop().formData;\n                addClass( $form, formCssClasses.ajaxPending );\n                dispatchCustomEvent( $form, customEvents.form.submit, { detail: ajaxCall( $form, formData, options ) } );\n            }\n\n        })\n        .catch(fields => {\n            eventPreventDefault();\n            removeClass( $form, formCssClasses.submit );\n        });\n    \n}\n","\nimport { fieldsStringSelector, mergeValidateFieldDefault, isFieldForChangeEvent } from '../helpers';\n\nexport const validation = function( event ){\n\n    const isChangeEvent = event.type === 'change',\n          $field = event.target,\n          self = $field.closest('form').formjs;\n\n    if( $field.matches( fieldsStringSelector ) ){\n        const isFieldForChangeEventBoolean = isFieldForChangeEvent($field);\n        \n        if(\n            (isFieldForChangeEventBoolean && isChangeEvent) ||\n            (!isFieldForChangeEventBoolean && !isChangeEvent)\n        ){\n            \n            return self.validateField( $field )\n                .then(() => {\n                    const type = $field.type,\n                          $realtedEqualTo = $field.closest('form').querySelector('[data-equal-to=\"'+ $field.name +'\"]');\n\n                    if(\n                        // FIELD IS ( required OR data-validate-if-filled ) AND RELATED FIELD data-equal-to HAS A VALUE\n                        ($field.required || $field.matches('[data-validate-if-filled]')) && \n                        !(type === 'checkbox' || type === 'radio') && \n                        $realtedEqualTo && $realtedEqualTo.value.trim() !== ''\n                    ){\n                        self.validateField( $realtedEqualTo ).catch(errors => {});\n                    }\n\n                    return mergeValidateFieldDefault({ result: true, $field });\n                })\n                .catch(errors => mergeValidateFieldDefault({$field, errors}));\n\n        }\n    }\n    \n}\n","\nimport { addClass, removeClass } from '../helpers';\n\nexport const validationEnd = function( event ){\n\n    const eventDetail = event.detail,\n          $field = eventDetail.$field,\n          options = $field.closest('form').formjs.options.fieldOptions,\n          $container = $field.closest( options.questionContainer ),\n          isReqFrom = $field.matches('[data-required-from]'),\n          $reqMore = document.querySelector( $field.getAttribute('data-required-from') );\n\n    if( $container !== null ){\n        removeClass( $container, options.cssClasses.pending );\n    }\n\n    if( $container !== null && !options.skipUIfeedback ){\n\n        if( eventDetail.result ){\n\n            if( !isReqFrom || (isReqFrom && $reqMore.checked) ){\n                // IF FIELD IS VALID\n                const errorClasses = options.cssClasses.error + ' ' + options.cssClasses.errorEmpty + ' ' + options.cssClasses.errorRule;\n                removeClass( $container, errorClasses );\n                addClass( $container, options.cssClasses.valid );\n            }\n\n        } else {\n\n            // IF FIELD IS NOT VALID\n            let extraErrorClass = options.cssClasses.errorRule;\n\n            // HANDLE CASE OF FIELD data-checks\n            const isChecks = $field.matches('[data-checks]'),\n                  checkedElLength = (isChecks ? $container.querySelectorAll('[name=\"' + $field.name + '\"]:checked').length : 0);\n\n            if( (!isChecks && (eventDetail.errors && eventDetail.errors.empty)) || (isChecks && checkedElLength === 0) ){\n                extraErrorClass = options.cssClasses.errorEmpty;\n            }\n\n            let errorClasses = options.cssClasses.error + ' ' + extraErrorClass,\n                errorClassToRemove = options.cssClasses.errorEmpty + ' ' + options.cssClasses.errorRule;\n            removeClass( $container, options.cssClasses.valid + ' ' + errorClassToRemove );\n            addClass( $container, errorClasses );\n\n        }\n    }\n\n}\n","\nimport { customEvents } from './helpers';\nimport { dataTypeNumber, formValidationEnd, keypressMaxlength, pastePrevent, submit, validation, validationEnd } from './listenerCallbacks';\n\nexport function formStartup( $form, options ){\n\n    $form.noValidate = true;\n\n    const fieldOptions = options.fieldOptions,\n          formOptions = options.formOptions;\n        \n    // VALIDATION WITH ATTRIBUTES LIKE HTML ONES ( ALSO FOR BUG FIXING, EG: maxlength IN ANDROID )\n    if( fieldOptions.strictHtmlValidation ){\n        \n        // maxlength\n        // MAXLENGTH IS BUGGY IN ANDROID BROWSERS\n        $form.addEventListener('keypress', keypressMaxlength, false);\n\n        // data-type=\"number\"\n        // SINCE VALIDATING type=\"number\" WITH NON NUMERIC CHARS WILL RETURN EMPTY STRING IN SOME BROWSERS ( EG: FIREFOX )\n        $form.addEventListener('input', dataTypeNumber, false);\n        \n    }\n    \n    if( fieldOptions.preventPasteFields && $form.querySelectorAll( fieldOptions.preventPasteFields ).length ){\n        // INIT EVENT LISTENER FOR \"PASTE\" EVENT TO PREVENT IT ON SPECIFIED FIELDS\n        $form.addEventListener('paste', pastePrevent, false);\n    }\n\n    // INIT EVENTS LISTENER ( AS IN fieldOptions )\n    fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n        const useCapturing = eventName === 'blur' ? true : false;\n        $form.addEventListener(eventName, validation, useCapturing);\n    });\n\n    $form.addEventListener(customEvents.field.validation, validationEnd, false);\n    $form.addEventListener(customEvents.form.validation, formValidationEnd, false);\n    \n    // HANDLE FORM SUBMIT\n    if( formOptions.handleSubmit ){\n        // INIT FORM SUBMIT ( DEFAULT AND AJAX )\n        $form.addEventListener('submit', submit);\n\n        if( formOptions.ajaxSubmit ){\n            if( $form.getAttribute('enctype') ){\n                formOptions.ajaxOptions.headers['Content-Type'] = $form.getAttribute('enctype');\n            }\n\n            if( $form.getAttribute('method') ){\n                formOptions.ajaxOptions.method = $form.getAttribute('method').toUpperCase();\n            }\n\n            if( $form.getAttribute('action') ){\n                formOptions.ajaxOptions.url = $form.getAttribute('action');\n            }\n        }\n    }\n\n}\n","\nimport { getFilledFields, isFieldForChangeEvent } from './helpers';\nimport { validation } from './listenerCallbacks';\n\nexport const checkFilledFields = $form => {\n\n    const formFields = getFilledFields( $form );\n    // VALIDATE ALL FILLED FIELDS\n    return Promise.all( formFields.map($field => {\n\n        const isFieldForChangeEventBoolean = isFieldForChangeEvent($field);\n        const fakeEventObj = { target: $field, type: (isFieldForChangeEventBoolean ? 'change': '') };\n        return validation( fakeEventObj );\n\n    }) )\n    .then(fields => fields)\n    .catch(fields => fields);\n\n}\n","\nimport { fieldsStringSelector } from './fieldsStringSelector';\nimport { getUniqueFields } from './getUniqueFields';\n\nexport const getFilledFields = $form => {\n    return getUniqueFields( $form.querySelectorAll(fieldsStringSelector) )\n    .map($field => {\n\n        const name = $field.name,\n              type = $field.type,\n              isCheckboxOrRadio = type === 'checkbox' || type === 'radio',\n              fieldChecked = $form.querySelector('[name=\"' + name + '\"]:checked'),\n              isReqFrom = $field.matches('[data-required-from]'),\n              $reqMore = (isReqFrom ? $form.querySelector($field.getAttribute('data-required-from')) : null);\n\n        return (\n            isCheckboxOrRadio ? (fieldChecked || null) :\n            (isReqFrom && $reqMore.checked) || (!isReqFrom && $field.value) ? $field : null\n        );\n\n    })\n    .filter($field => $field !== null);\n}\n","\nimport { mergeValidateFieldDefault, isDOMNode, runFunctionsSequence } from './helpers';\nimport { isValid } from './isValid';\n\nexport function checkFieldValidity( $field, fieldOptions, validationRules, validationErrors ){\n\n    if( !isDOMNode($field) ){\n        const obj = mergeValidateFieldDefault({$field});\n        return Promise.resolve(obj);\n    }\n\n    const $form = $field.closest('form'),\n          isValidValue = $field.value.trim().length > 0;\n\n    // HANDLE FIELD data-required-from WHEN CHANGING ITS RELATED RADIO\n    if( $field.type === 'radio' ){\n        const $checked = $field.checked ? $field : $form.querySelector('[name=\"'+ $field.name +'\"]:checked'),\n              reqMoreIsChecked = $checked && $checked.matches('[data-require-more]'),\n              $findReqMore = reqMoreIsChecked ? $checked : $form.querySelector('[data-require-more][name=\"'+ $field.name +'\"]'),\n              $findReqFrom = $findReqMore ? $form.querySelector('[data-required-from=\"#'+ $findReqMore.id +'\"]') : null;\n        \n        if( $checked && $findReqFrom ){\n            $findReqFrom.required = $findReqMore.required && $findReqMore.checked;\n            if( !reqMoreIsChecked ){\n                $findReqFrom.value = '';\n            } else if( fieldOptions.focusOnRelated ) {\n                $findReqFrom.focus();\n            }\n        }\n    }\n\n    // HANDLE FIELD data-require-more & data-required-from WHEN *-from IT'S FILLED\n    if( $field.matches('[data-required-from]') && isValidValue ){\n        const $reqMore = $form.querySelector( $field.getAttribute('data-required-from') );\n        $reqMore.checked = true;\n        $field.required = $reqMore.required;\n    }\n\n    const needsValidation = $field.required || ($field.matches('[data-validate-if-filled]') && isValidValue);\n\n    return runFunctionsSequence({\n            functionsList: fieldOptions.beforeValidation,\n            data: {$field}\n        })\n        .then(data => {\n            const dataObj = data.pop();\n            return new Promise(resolve => {\n                if( !needsValidation ){\n                    dataObj.result = true;\n                }\n                resolve( needsValidation ? isValid($field, validationRules, validationErrors) : dataObj );\n            });\n        });\n\n}\n","\nimport { mergeValidateFieldDefault, mergeObjects, toCamelCase } from './helpers';\n\nexport function isValid( $field, validationRules, validationErrors ){\n\n    const fieldValue = $field.value,\n          obj = mergeValidateFieldDefault({result: fieldValue.trim().length > 0, $field}),\n          isRadioOrCheckbox = /^(radio|checkbox)$/.test($field.type),\n          hasSelectedInput = $field.closest('form').querySelectorAll('[name=\"'+ $field.name +'\"]:checked').length > 0;\n\n    if( (!isRadioOrCheckbox && !obj.result) || (isRadioOrCheckbox && !hasSelectedInput) ){\n        obj.result = false;\n        obj.errors = { empty: true };\n        return Promise.resolve(obj);\n    }\n\n    // COLLECT VALIDATION METHOD NAMES ( USED TO RUN VALIDATIONS AND GET ERRORS )\n    const validationMethods = Array.from($field.attributes).reduce((accList, attr) => {\n        const attrName = toCamelCase( attr.name.replace('data-', '') ),\n              attrValue = toCamelCase( attr.value ),\n              isAttrValueWithFn = (attrName === 'type' || attrName === 'subtype') && validationRules[attrValue],\n              isAttrNameWithFn = validationRules[attrName];\n\n        if( isAttrValueWithFn || isAttrNameWithFn ){\n            accList.push( isAttrValueWithFn ? attrValue : attrName );\n        }\n        return accList;\n    }, []);\n\n    return new Promise(resolve => {\n\n        // RUN VALIDATIONS\n        const validationsResult = validationMethods.reduce((accPromise, methodName) => {\n            return accPromise.then(accObj => {\n                return new Promise(resolveVal => {\n                    // RUN VALIDATION INSIDE A PROMISE IS USEFUL FOR ASYNC VALIDATIONS\n                    resolveVal( validationRules[methodName](fieldValue, $field) );\n                }).then(valObj => {\n                    // ADD CUSTOM ERROR-KEY FOR EACH VALIDATION RULE\n                    if( !valObj.result ){\n                        const errorObj = {};\n                        if( typeof valObj.errors === 'undefined' || typeof valObj.errors[methodName] === 'undefined' ){\n                            errorObj[methodName] = true;\n                        }\n                        valObj.errors = mergeObjects({}, valObj.errors, errorObj);\n                    }\n                    valObj = valObj.result ? {} : valObj;\n                    return mergeObjects(accObj, valObj);\n                });\n            });\n        }, Promise.resolve(obj));\n        resolve(validationsResult);\n\n    }).then(data => {\n\n        // GET ERRORS\n        if( !data.result ){\n            data.errors = validationMethods.reduce((accObj, methodName) => {\n                const errors = (validationErrors[methodName] && validationErrors[methodName](fieldValue, $field)) || {};\n                return mergeObjects(accObj, errors);\n            }, data.errors);\n        }\n        return data;\n\n    });\n\n}\n","\nimport { fieldsStringSelector, getUniqueFields, mergeValidateFieldDefault, mergeValidateFormDefault, mergeObjects } from './helpers';\nimport { checkFieldValidity } from './checkFieldValidity';\n\nexport function checkFormValidity( $form, fieldOptions, validationRules, validationErrors, fieldToSkip = null ){\n\n    fieldOptions = mergeObjects( {}, fieldOptions, {focusOnRelated: false} );\n    const $fieldsList = getUniqueFields( $form.querySelectorAll(fieldsStringSelector) );\n\n    return Promise.all( $fieldsList.map($field => {\n\n        if( fieldToSkip && $field === fieldToSkip ){\n            const obj = mergeValidateFieldDefault({$field, result: true});\n            return Promise.resolve(obj);\n        }\n        return checkFieldValidity( $field, fieldOptions, validationRules, validationErrors );\n\n    }) ).then(fields => {\n\n        const areAllFieldsValid = fields.filter(fieldObj => !fieldObj.result).length === 0;\n        return mergeValidateFormDefault({result: areAllFieldsValid, fields});\n\n    });\n\n}\n","\nimport { version }              from './modules/version';\nimport { checkFormEl, customEvents, dispatchCustomEvent, excludeSelector, finalizeFieldPromise, finalizeFormPromise, isNodeList, mergeObjects, removeClass } from './modules/helpers';\nimport { options }              from './modules/options';\nimport { validationRules }      from './modules/validationRules';\nimport { formStartup }          from './modules/formStartup';\nimport { destroy }              from './modules/destroy';\nimport { checkFilledFields }    from './modules/checkFilledFields';\nimport { checkFieldValidity }   from './modules/checkFieldValidity';\nimport { checkFormValidity }    from './modules/checkFormValidity';\n\nclass Form {\n\n    constructor( form, optionsObj ){\n        const argsL = arguments.length,\n              checkFormElem = checkFormEl(form);\n\n        if( argsL === 0 || (argsL > 0 && !form) ){\n            throw new Error('First argument \"form\" is missing or falsy!');\n        }\n        if( isNodeList(form) ){\n            throw new Error('First argument \"form\" must be a single DOM node or a form CSS selector, not a NodeList!');\n        }\n        if( !checkFormElem.result ){\n            throw new Error('First argument \"form\" is not a DOM node nor a form CSS selector!');\n        }\n\n        const self = this;\n\n        self.$form = checkFormElem.$el;\n        self.$form.formjs = self;\n        self.options = mergeObjects({}, Form.prototype.options, optionsObj);\n\n        // BINDING CONTEXT FOR FUTURE EXECUTION\n        const cbList = [\n            // IN fieldOptions\n            'beforeValidation',\n            // IN formOptions\n            'beforeSend',\n            'getFormData'\n        ];\n        cbList.forEach(cbName => {\n            const optionType = self.options.formOptions[cbName] ? 'formOptions' : 'fieldOptions';\n            let cbOpt = self.options[optionType][cbName];\n\n            if( cbOpt ){\n                self.options[optionType][cbName] = ( Array.isArray(cbOpt) ? cbOpt.map(cbFn => cbFn.bind(self)) : cbOpt.bind(self) );\n            }\n        });\n\n        formStartup( self.$form, self.options );\n    }\n\n    destroy(){\n        destroy(this.$form, this.options);\n    }\n    \n    getFormData(){\n        const $formFields = this.$form.querySelectorAll('input, select, textarea'),\n              $filteredFields = Array.from( $formFields ).filter( elem => elem.matches(excludeSelector) );\n        return this.options.formOptions.getFormData($filteredFields);\n    }\n\n    validateField( field, fieldOptions ){\n        const self = this;\n        const $field = typeof field === 'string' ? this.$form.querySelector(field) : field;\n        fieldOptions = mergeObjects({}, this.options.fieldOptions, fieldOptions);\n        const $form = this.$form;\n        return checkFieldValidity($field, fieldOptions, this.validationRules, this.validationErrors)\n            .then(obj => {\n                dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } );\n                if( obj.result && fieldOptions.onValidationCheckAll ){\n                    checkFormValidity( $form, fieldOptions, self.validationRules, self.validationErrors, obj.$field )\n                        .then(dataForm => {\n                            dispatchCustomEvent( $form, customEvents.form.validation, { detail: dataForm } );\n                        });\n                } else if( !obj.result ){\n                    removeClass( $form, self.options.formOptions.cssClasses.valid );\n                }\n                return obj;\n            })\n            .then(finalizeFieldPromise);\n    }\n\n    validateFilledFields(){\n        return checkFilledFields(this.$form);\n    }\n\n    validateForm( fieldOptions ){\n        const self = this;\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions);\n        const $form = self.$form;\n        return checkFormValidity($form, fieldOptions, self.validationRules, self.validationErrors)\n            .then(data => {\n                data.fields.forEach(obj => {\n                    dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } );\n                });\n                dispatchCustomEvent( $form, customEvents.form.validation, { detail: data } );\n                return data;\n            })\n            .then(finalizeFormPromise);\n    }\n    \n    static addValidationErrors( errorsObj ){\n        Form.prototype.validationErrors = mergeObjects({}, Form.prototype.validationErrors, errorsObj);\n    }\n\n    static addValidationRules( rulesObj ){\n        Form.prototype.validationRules = mergeObjects({}, Form.prototype.validationRules, rulesObj);\n    }\n    \n    static setOptions( optionsObj ){\n        Form.prototype.options = mergeObjects({}, Form.prototype.options, optionsObj);\n    }\n\n}\n\nForm.prototype.options = options;\nForm.prototype.validationErrors = {};\nForm.prototype.validationRules = validationRules;\nForm.prototype.version = version;\n\nexport default Form;\n","\nimport { customEvents } from './helpers';\nimport { dataTypeNumber, formValidationEnd, keypressMaxlength, pastePrevent, submit, validation, validationEnd } from './listenerCallbacks';\n\n\nexport function destroy( $form, options ){\n\n    if( options.fieldOptions.strictHtmlValidation ){\n        $form.removeEventListener('keypress', keypressMaxlength, false);\n        $form.removeEventListener('input', dataTypeNumber, false);\n    }\n\n    if( options.fieldOptions.preventPasteFields ){\n        $form.removeEventListener('paste', pastePrevent, false);\n    }\n\n    if( options.formOptions.handleSubmit ){\n        $form.removeEventListener('submit', submit);\n    }\n\n    options.fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n        const useCapturing = eventName === 'blur' ? true : false;\n        $form.removeEventListener(eventName, validation, useCapturing);\n    });\n\n    $form.removeEventListener(customEvents.field.validation, validationEnd, false);\n    $form.removeEventListener(customEvents.form.validation, formValidationEnd, false);\n\n    delete $form.formjs;\n    \n}\n","\nexport const excludeSelector = ':not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"file\"]):not([data-exclude-data])'\n"],"names":["addClass","element","cssClasses","split","forEach","className","classList","add","isNodeList","nodeList","NodeList","prototype","isPrototypeOf","removeClass","remove","isDOMNode","node","Element","checkFormEl","form","isString","isFormSelector","document","querySelector","tagName","toLowerCase","result","$el","customEvents","validation","submit","isPlainObject","object","Object","toString","call","mergeObjects","out","Array","from","arguments","slice","filter","arg","keys","key","isArray","concat","push","dispatchCustomEvent","elem","eventName","eventOptions","bubbles","eventObj","CustomEvent","dispatchEvent","fieldsStringSelector","finalizeFieldPromise","obj","Promise","resolve","reject","errors","finalizeFormPromise","fields","formatMap","dateArray","reverse","getDateAsNumber","dateString","dateFormat","separator","splitChar","match","length","indexOf","replace","join","getUniqueFields","$nodeList","currentFieldName","currentFieldType","$field","name","type","matches","mergeValidateFieldDefault","mergeValidateFormDefault","isFieldForChangeEvent","runFunctionsSequence","functionsList","data","stopConditionFn","reduce","acc","promiseFn","then","res","dataNew","dataList","serializeObject","_typeof","constructor","a","k","encodeURIComponent","toCamelCase","string","all","letter","toUpperCase","defaultCallbacksInOptions","fieldOptions","beforeValidation","fieldObj","this","options","$fields","$container","closest","questionContainer","value","dirty","checkDirtyField","skipUIfeedback","pending","formOptions","getFormData","$filteredFields","formData","$form","isCheckbox","isRadio","isSelect","checked","$checkboxes","querySelectorAll","field","$checkedRadio","$selectedOpts","option","selected","error","errorEmpty","errorRule","valid","focusOnRelated","handleFileUpload","onValidationCheckAll","preventPasteFields","strictHtmlValidation","validateOnEvents","ajaxOptions","cache","credentials","headers","method","mode","redirect","timeout","url","location","href","ajaxSubmit","beforeSend","ajaxComplete","ajaxError","ajaxPending","ajaxSuccess","handleSubmit","validationRules","date","test","email","number","checkbox","$dataChecks","attrValue","JSON","parse","getAttribute","checkedLength","isMinOk","isMaxOk","checks","minChecks","maxChecks","equalTo","exactLength","valueLength","minlength","maxlength","file","maxFileSize","MIMEtype","accept","RegExp","filesList","files","exceedMaxFileSize","size","isAcceptedFileType","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","max","maxVal","maxLength","min","minVal","minLength","pattern","radio","$fieldChecked","trim","dataTypeNumber","event","target","fieldValue","stopImmediatePropagation","valueReplaced","formValidationEnd","formEl","formjs","clMethodName","detail","keypressMaxlength","keyPressed","which","keyCode","pastePrevent","preventDefault","ajaxCall","formDataObj","timeoutTimer","isMultipart","body","formDataMultipart","FormData","append","idx","stringify","Headers","controller","AbortController","signal","window","setTimeout","abort","fetch","response","ok","fetchMethod","get","contentType","headerOpt","getFetchMethod","clearTimeout","disabled","instance","formCssClasses","isAjaxForm","$btn","eventPreventDefault","enableBtn","validateForm","beforeSendData","stopExecution","rfsObject","pop","isChangeEvent","self","isFieldForChangeEventBoolean","validateField","$realtedEqualTo","required","validationEnd","eventDetail","isReqFrom","$reqMore","errorClasses","extraErrorClass","isChecks","checkedElLength","empty","errorClassToRemove","formStartup","noValidate","addEventListener","useCapturing","checkFilledFields","formFields","map","isCheckboxOrRadio","fieldChecked","getFilledFields","checkFieldValidity","validationErrors","isValidValue","$checked","reqMoreIsChecked","$findReqMore","$findReqFrom","id","focus","needsValidation","dataObj","isRadioOrCheckbox","hasSelectedInput","validationMethods","attributes","accList","attr","attrName","isAttrValueWithFn","isAttrNameWithFn","accPromise","methodName","accObj","resolveVal","valObj","errorObj","isValid","checkFormValidity","fieldToSkip","$fieldsList","areAllFieldsValid","Form","optionsObj","argsL","checkFormElem","Error","cbList","cbName","optionType","cbOpt","cbFn","bind","errorsObj","rulesObj","removeEventListener","destroy","$formFields","dataForm","version"],"mappings":"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"}