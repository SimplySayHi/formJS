{"version":3,"file":"formjs.min.js","sources":["../src/modules/version.js","../src/modules/helpers/addClass.js","../src/modules/helpers/isNodeList.js","../src/modules/helpers/removeClass.js","../src/modules/helpers/isDOMNode.js","../src/modules/helpers/checkFormEl.js","../src/modules/helpers/customEvents.js","../src/modules/helpers/mergeObjects.js","../src/modules/helpers/dispatchCustomEvent.js","../src/modules/helpers/fieldsStringSelector.js","../src/modules/helpers/getSplitChar.js","../src/modules/helpers/getUniqueFields.js","../src/modules/helpers/getValidateFieldDefault.js","../src/modules/helpers/getValidateFormDefault.js","../src/modules/helpers/isFieldForChangeEvent.js","../src/modules/helpers/runFunctionsSequence.js","../src/modules/helpers/serializeObject.js","../src/modules/helpers/toCamelCase.js","../src/modules/optionsUtils.js","../src/modules/helpers/checkDirtyField.js","../src/modules/options.js","../src/modules/validationRules.js","../src/modules/validationRules/date.js","../src/modules/validationRules/email.js","../src/modules/validationRules/number.js","../src/modules/submit.js","../src/modules/ajaxCall.js","../src/modules/listenerCallbacks.js","../src/modules/formStartup.js","../src/modules/init.js","../src/modules/helpers/getFilledFields.js","../src/modules/validationRulesAttributes.js","../src/modules/validationRules/checkbox.js","../src/modules/validationRules/checks.js","../src/modules/validationRules/equalTo.js","../src/modules/validationRules/exactLength.js","../src/modules/validationRules/file.js","../src/modules/validationRules/length.js","../src/modules/validationRules/max.js","../src/modules/validationRules/maxlength.js","../src/modules/validationRules/min.js","../src/modules/validationRules/minlength.js","../src/modules/validationRules/pattern.js","../src/modules/validationRules/radio.js","../src/modules/validationRules/requiredFrom.js","../src/modules/checkFieldValidity.js","../src/modules/isValid.js","../src/modules/checkFormValidity.js","../src/index.js","../src/modules/constructor.js","../src/modules/destroy.js","../src/modules/helpers/excludeSelector.js","../src/modules/validationErrors.js"],"sourcesContent":["\nexport const version = '4.0.2';\n","\nexport const addClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.add( className );\n    });\n}\n","\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList );\n}\n","\nexport const removeClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.remove( className );\n    });\n}\n","\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node );\n}\n","\nimport { isDOMNode } from './isDOMNode';\n\nexport const checkFormEl = formEl => {\n    let isString = typeof formEl,\n        isValidNodeSelector = isString === 'string' && isDOMNode(document.querySelector(formEl)),\n        isFormSelector = isValidNodeSelector && document.querySelector(formEl).tagName.toLowerCase() === 'form',\n        obj = {\n            result: isDOMNode(formEl) || isFormSelector,\n            element: (isString === 'string' ? document.querySelector(formEl) : formEl)\n        };\n\n    return obj;\n}\n","\nexport const customEvents = {\n    field: {\n        validation: 'fjs.field:validation'\n    },\n    form: {\n        submit:     'fjs.form:submit',\n        validation: 'fjs.form:validation'\n    }\n}\n","\nexport const mergeObjects = function( out = {} ){\n    for(let i=1; i<arguments.length; i++){\n        let obj = arguments[i];\n\n        if(!obj){ continue; }\n\n        for(let key in obj){\n            let isArray = Object.prototype.toString.call(obj[key]) === \"[object Array]\";\n            let isObject = Object.prototype.toString.call(obj[key]) === \"[object Object]\";\n\n            // COPY ONLY ENUMERABLE PROPERTIES\n            if( obj.hasOwnProperty(key) ){\n                if( isArray ){\n\n                    if( typeof out[key] === 'undefined' ){\n                        out[key] = [];\n                    }\n                    out[key] = out[key].concat( obj[key].slice(0) );\n\n                } else if( isObject ){\n\n                    out[key] = mergeObjects(out[key], obj[key]);\n\n                } else {\n\n                    // * STRING | NUMBER | BOOLEAN | FUNCTION\n                    if( Array.isArray(out[key]) ){\n                        // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                        out[key].push(obj[key]);\n                    } else {\n                        out[key] = obj[key];\n                    }\n\n                }\n            }\n        }\n    }\n\n    return out;\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const dispatchCustomEvent = ( elem, eventName, data = {}, eventOptions = {} ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions);\n    const eventObj = new Event(eventName, eventOptions);\n    eventObj.data = data;\n    elem.dispatchEvent( eventObj );\n}\n","\nexport const fieldsStringSelector = 'input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"hidden\"]), select, textarea'\n","\nexport const getSplitChar = string => {\n    // MATCH ANY NON-DIGIT CHAR\n    const separator = string.match(/\\D/);\n    return (separator && separator.length > 0) ? separator[0] : null;\n}\n","\nexport const getUniqueFields = nodeList => {\n\n    let currentFieldName = '',\n        currentFieldType = '';\n\n    return Array.from( nodeList ).filter(fieldEl => {\n        const name = fieldEl.name,\n              type = fieldEl.type;\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false;\n        }\n        \n        if( !fieldEl.matches('[data-required-from]') ){\n            currentFieldName = name;\n            currentFieldType = type;\n        }\n        return true;\n    });\n    \n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const getValidateFieldDefault = obj => {\n    return mergeObjects({}, { result: false, fieldEl: null }, obj);\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const getValidateFormDefault = obj => {\n    return mergeObjects({}, { result: true, fields: [] }, obj);\n}\n","\nexport const isFieldForChangeEvent = fieldEl => {\n    return fieldEl.matches('select, [type=\"radio\"], [type=\"checkbox\"], [type=\"file\"]');\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const runFunctionsSequence = ( { functionsList = [], data = {}, stopConditionFn = () => false } = {} ) => {\n    return functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1]);\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res);\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result);\n                    return res;\n                });\n        });\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList);\n}\n","\nexport const serializeObject = obj => {\n    var objToString = (\n            (obj && typeof obj === 'object' && obj.constructor === Object) ? \n            Object.keys(obj)\n                .reduce((a,k) => {\n                    a.push(k+'='+encodeURIComponent(obj[k]));\n                    return a\n                },[]).join('&') : \n            obj\n    );\n    return objToString;\n}\n","\nexport const toCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase(); });\n}\n","\nimport { addClass, checkDirtyField } from './helpers';\n\nexport const defaultCallbacksInOptions = {\n    fieldOptions: {\n\n        beforeValidation: function beforeValidationDefault ( fieldObj ) {\n\n            const fieldOptions = this.options.fieldOptions;\n\n            checkDirtyField( fieldObj.fieldEl, fieldOptions.cssClasses.dirty );\n            if( !fieldOptions.skipUIfeedback ){\n                addClass( fieldObj.fieldEl.closest('[data-formjs-question]'), fieldOptions.cssClasses.pending );\n            }\n\n        }\n\n    },\n    formOptions: {\n\n        getFormData: function getFormDataDefault ( filteredFields ) {\n\n            const formData = {},\n                  formEl = this.formEl;\n\n            filteredFields.forEach(function( fieldEl ){\n                const isCheckbox = fieldEl.type === 'checkbox',\n                      isRadio = fieldEl.type === 'radio',\n                      isSelect = fieldEl.matches('select'),\n                      name = fieldEl.name;\n                let value = fieldEl.value;\n                                \n                if( isCheckbox ) {\n                    \n                    value = fieldEl.checked;\n                    let checkboxes = Array.from( formEl.querySelectorAll('[name=\"'+ name +'\"]') );\n                    if( checkboxes.length > 1 ){\n\n                        value = [];\n                        let checkedElems = checkboxes.filter(field => field.checked);\n                        checkedElems.forEach(fieldEl => {\n                            value.push( fieldEl.value );\n                        });\n\n                    }\n                        \n                } else if( isRadio ){\n                    \n                    let checkedRadio = formEl.querySelector('[name=\"'+ name +'\"]:checked');\n                    value = (checkedRadio === null ? null : checkedRadio.value);\n                    \n                } else if( isSelect ){\n\n                    let selectedOpts = Array.from( fieldEl.options ).filter(option => option.selected);\n                    if( selectedOpts.length > 1 ){\n\n                        value = [];\n                        selectedOpts.forEach(fieldEl => {\n                            value.push( fieldEl.value );\n                        });\n\n                    }\n                }\n\n                formData[ name ] = value;\n            });\n\n            return formData;\n\n        }\n\n    }\n}\n","\nimport { addClass } from './addClass';\nimport { isNodeList } from './isNodeList';\nimport { removeClass } from './removeClass';\n\nexport const checkDirtyField = ( fields, cssClasses ) => {\n\n    var fields = (isNodeList(fields) ? Array.from( fields ) : [fields]);\n    \n    fields.forEach(fieldEl => {\n        if( fieldEl.type !== 'checkbox' && fieldEl.type !== 'radio' ){\n            let containerEl = fieldEl.closest('[data-formjs-question]') || fieldEl;\n\n            if( fieldEl.value ){\n                \n                addClass( containerEl, cssClasses );\n                \n            } else {\n                \n                removeClass( containerEl, cssClasses );\n                \n            }\n        }\n    });\n    \n}\n","\nimport { defaultCallbacksInOptions } from './optionsUtils';\n\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [defaultCallbacksInOptions.fieldOptions.beforeValidation],\n        cssClasses: {\n            dirty:              'is-dirty',\n            error:              'has-error',\n            errorEmpty:         'has-error-empty',\n            errorRule:          'has-error-rule',\n            pending:            'is-pending',\n            valid:              'is-valid'\n        },\n        focusOnRelated:         true,\n        handleFileUpload:       true,\n        handleValidation:       true,\n        maxFileSize:            10,\n        onValidationCheckAll:   true,\n        preventPasteFields:     '[type=\"password\"], [data-equal-to]',\n        skipUIfeedback:         false,\n        strictHtmlValidation:   true,\n        validateOnEvents:       'input change'\n    },\n\n    formOptions: {\n        ajaxOptions:            {\n            cache:              'no-store',\n            credentials:        'same-origin',\n            headers: {\n                                'Content-Type': 'application/json',\n                                'Accept':       'application/json'\n            },\n            method:             'POST',\n            mode:               'same-origin',\n            redirect:           'follow',\n            timeout:            0,\n            url:                location.href\n        },\n        ajaxSubmit:             true,\n        beforeSend:             [],\n        cssClasses: {\n            ajaxComplete:       'ajax-complete',\n            ajaxError:          'ajax-error',\n            ajaxPending:        'ajax-pending',\n            ajaxSuccess:        'ajax-success',\n            submit:             'is-submitting',\n            valid:              'is-valid'\n        },\n        getFormData:            defaultCallbacksInOptions.formOptions.getFormData,\n        handleSubmit:           true\n    }\n    \n}\n","\nimport { date }         from './validationRules/date';\nimport { email }        from './validationRules/email';\nimport { number }       from './validationRules/number';\n\nexport const validationRules = {\n    date,\n    email,\n    number\n}\n","\n/*\n    DATE AS ISO 8601 DATE FORMAT:\n    YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n*/\n\nexport const date = function( string ){\n    let date = /^((((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13578]|1[02])[ \\/\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13456789]|1[012])[ \\/\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.]02[ \\/\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ \\/\\-.]02[ \\/\\-.]29))$/g.test( string ),\n        obj = {\n            result: date\n        };\n\n    return obj;\n}\n","\n// https://regex101.com/r/cdlyJy/3\n\nexport const email = function( string ){\n    let obj = {\n        result: /^[a-zA-Z_-]([\\w.-]?[a-zA-Z0-9])*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?){2,})+$/.test( string )\n    };\n\n    return obj;\n}\n","\n/*\n    ALL NUMBERS ( INTEGERS AND FLOATING )\n    VALID NUMBERS: 123 | 123.456 | .123\n*/\n\nexport const number = function( string ){\n    let obj = {\n        result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n    };\n\n    return obj;\n}","\nimport { addClass, customEvents, dispatchCustomEvent, getValidateFormDefault, removeClass, runFunctionsSequence } from './helpers';\nimport { ajaxCall } from './ajaxCall';\n\nexport function submit( event ){\n\n    const formEl = event.target,\n          instance = formEl.formjs,\n          options = instance.options,\n          formCssClasses = options.formOptions.cssClasses,\n          isAjaxForm = options.formOptions.ajaxSubmit,\n          btnEl = formEl.querySelector('[type=\"submit\"]'),\n          eventPreventDefault = ( enableBtn = true ) => {\n              if( btnEl && enableBtn ){ btnEl.disabled = false; }\n              if( event ){ event.preventDefault(); }\n          };\n\n    if( isAjaxForm ){\n        eventPreventDefault(false);\n    }\n\n    if( btnEl ){\n        if( btnEl.disabled ){\n            eventPreventDefault(false);\n            return false;\n        }\n        btnEl.disabled = true;\n    }\n\n    removeClass( formEl, (formCssClasses.ajaxComplete + ' ' + formCssClasses.ajaxError + ' ' + formCssClasses.ajaxSuccess) );\n    addClass( formEl, formCssClasses.submit );\n    \n    const handleValidation = options.fieldOptions.handleValidation,\n          formValidationPromise = (handleValidation ? instance.validateForm() : Promise.resolve(getValidateFormDefault()));\n\n    formValidationPromise.then(formValidation => {\n\n        let beforeSendData = { stopExecution: false, formData: {} };\n\n        if( !formValidation.result ){\n            eventPreventDefault();\n            removeClass( formEl, formCssClasses.submit );\n            beforeSendData.stopExecution = true;\n            return [beforeSendData];\n        }\n        \n        let formDataObj = (isAjaxForm ? instance.getFormData() : null),\n            callbacksBeforeSend = options.formOptions.beforeSend;\n\n        if( formDataObj ){\n            beforeSendData.formData = formDataObj;\n        }\n\n        const rfsObject = {\n            functionsList: callbacksBeforeSend,\n            data: beforeSendData,\n            stopConditionFn: function(data){ return data.stopExecution; }\n        };\n        return runFunctionsSequence(rfsObject);\n\n    }).then(dataList => {\n\n        if( dataList.filter(data => data.stopExecution).length > 0 ){\n            eventPreventDefault();\n            return false;\n        }\n        \n        if( isAjaxForm ){\n\n            const formData = dataList.pop().formData;\n            addClass( formEl, formCssClasses.ajaxPending );\n            dispatchCustomEvent( formEl, customEvents.form.submit, ajaxCall( formEl, formData, options ) );\n            \n        }\n\n    });\n    \n}\n","\nimport { addClass, mergeObjects, removeClass, serializeObject } from './helpers';\n\nconst getFetchMethod = (response, options) => {\n    const accept = options.headers.get('Accept');\n    const contentType = response.headers.get('Content-Type');\n    const headerOpt = accept || contentType || '';\n\n    if( headerOpt.indexOf('application/json') > -1 || headerOpt === '' ){\n        return 'json';\n    } else if( headerOpt.indexOf('text/') > -1 ){\n        return 'text';\n    } else {\n        return 'blob';\n    }\n};\n\nexport function ajaxCall( formEl, formDataObj, options ){\n\n    let btnEl = formEl.querySelector('[type=\"submit\"]'),\n        timeoutTimer,\n        ajaxOptions = mergeObjects( {}, options.formOptions.ajaxOptions ),\n        isMultipart = ajaxOptions.headers['Content-Type'] === 'multipart/form-data';\n\n    ajaxOptions.body = formDataObj;\n    \n    // POST A FormData OBJECT ( multipart )\n    if( isMultipart && options.fieldOptions.handleFileUpload ){\n        let formDataMultipart = new FormData();\n        \n        for(let key in ajaxOptions.body){\n            formDataMultipart.append( key, ajaxOptions.body[key] );\n        }\n        \n        Array.from( formEl.querySelectorAll('[type=\"file\"]') ).forEach(function( field ){\n            Array.from(field.files).forEach(function( file, idx ){\n                let name = field.name+'['+ idx +']';\n                formDataMultipart.append( name, file, file.name );\n            });\n        });\n        \n        ajaxOptions.body = formDataMultipart;\n    }\n\n    if( ajaxOptions.method === 'GET' ){\n\n        // FETCH WITH \"GET\" METHOD CAN'T HAVE \"body\". SO IT IS APPENDED TO THE URL\n        ajaxOptions.url += ( /\\?/.test(ajaxOptions.url) ? '&' : '?' ) + serializeObject( ajaxOptions.body );\n        delete ajaxOptions.body;\n\n    } else {\n\n        if( ajaxOptions.headers['Content-Type'].indexOf('application/x-www-form-urlencoded') > -1 ){\n            // POST A NORMAL FORM\n            ajaxOptions.body = serializeObject( ajaxOptions.body );\n        } else if( !isMultipart ){\n            // POST A JSON STRING\n            ajaxOptions.body = JSON.stringify(ajaxOptions.body);\n        }\n\n    }\n\n    ajaxOptions.headers = new Headers( ajaxOptions.headers );\n\n    if ( ajaxOptions.timeout > 0 ) {\n        const controller = new AbortController();\n        const signal = controller.signal;\n\n        ajaxOptions.signal = signal;\n\n        timeoutTimer = window.setTimeout(function() {\n            controller.abort();\n        }, ajaxOptions.timeout);\n    }\n\n    return fetch(ajaxOptions.url, ajaxOptions)\n        .then(function( response ){\n            if( !response.ok ){\n                return Promise.reject(response);\n            }\n\n            let fetchMethod = getFetchMethod(response, ajaxOptions);\n\n            return response[fetchMethod]();\n        })\n        .then(function( data ){\n            addClass( formEl, options.formOptions.cssClasses.ajaxSuccess );\n            return data;\n        })\n        .catch(function( error ){\n            addClass( formEl, options.formOptions.cssClasses.ajaxError );\n            return Promise.reject(error);\n        })\n        .finally(function(){\n            if( timeoutTimer ){\n                window.clearTimeout( timeoutTimer );\n            }\n            removeClass( formEl, options.formOptions.cssClasses.submit + ' ' + options.formOptions.cssClasses.ajaxPending );\n            addClass( formEl, options.formOptions.cssClasses.ajaxComplete );\n            btnEl.disabled = false;\n        });\n\n}\n","\nimport { addClass, fieldsStringSelector, isFieldForChangeEvent, removeClass } from './helpers';\nimport { submit } from './submit';\n\nexport const listenerCallbacks = {\n\n    dataTypeNumber: function( event ){\n\n        const fieldEl = event.target;\n        \n        if( fieldEl.matches('[data-type=\"number\"]') ){\n            let fieldValue = fieldEl.value,\n                hasInvalidChars = /[^\\d.,+\\-]/.test(fieldValue);\n            \n            if( hasInvalidChars ){\n                event.stopImmediatePropagation();\n                let valueReplaced = fieldValue.replace(/[^\\d.,+\\-]/g, '');\n                fieldEl.value = valueReplaced;\n            }\n        }\n\n    },\n\n    keypressMaxlength: function( event ){\n\n        const fieldEl = event.target;\n        \n        if( fieldEl.matches( '[maxlength]' ) ){\n            const maxLength = fieldEl.maxLength * 1,\n                keyPressed = event.which || event.keyCode,\n                allowedKeys = [8, 37, 38, 39, 46];\n\n            if( fieldEl.value.length >= maxLength && allowedKeys.indexOf(keyPressed) === -1 ){\n                return false;\n            }\n        }\n\n    },\n\n    pastePrevent: function( event ){\n\n        const fieldEl = event.target;\n        let fieldOptions = fieldEl.closest('form').formjs.options.fieldOptions;\n\n        if( fieldEl.matches( fieldOptions.preventPasteFields ) ){     \n            event.preventDefault();\n        }\n\n    },\n\n    submit: function( event ){\n        submit(event);\n    },\n\n    validation: function( event ){\n\n        const isChangeEvent = event.type === 'change',\n              fieldEl = event.target,\n              self = fieldEl.closest('form').formjs;\n\n        if( fieldEl.matches( fieldsStringSelector ) ){\n            const isFieldForChangeEventBoolean = isFieldForChangeEvent(fieldEl);\n            \n            if(\n                (isFieldForChangeEventBoolean && isChangeEvent) ||\n                (!isFieldForChangeEventBoolean && !isChangeEvent)\n            ){\n                \n                return self.validateField( fieldEl ).then(obj => {\n                    const type = obj.fieldEl.type,\n                          realtedFieldEqualTo = obj.fieldEl.closest('form').querySelector('[data-equal-to=\"'+ obj.fieldEl.name +'\"]');\n\n                    if(\n                        // FIELD IS ( required OR data-validate-if-filled ) AND RELATED FIELD data-equal-to HAS A VALUE\n                        (obj.fieldEl.required || obj.fieldEl.matches('[data-validate-if-filled]')) && \n                        !(type === 'checkbox' || type === 'radio') && \n                        realtedFieldEqualTo && realtedFieldEqualTo.value.trim() !== ''\n                    ){\n                        return self.validateField( realtedFieldEqualTo );\n                    } else {\n                        return obj;\n                    }\n                });\n\n            }\n        }\n        \n    },\n\n    validationEnd: function( event ){\n\n        const fieldsArray = event.data.fieldEl ? [event.data] : event.data.fields,\n              options = fieldsArray[0].fieldEl.closest('form').formjs.options.fieldOptions;\n\n        fieldsArray.forEach(function( obj ){\n            let fieldEl = obj.fieldEl;\n            if( fieldEl.matches( fieldsStringSelector ) ){\n                let containerEl = fieldEl.closest('[data-formjs-question]'),\n                    isReqFrom = fieldEl.matches('[data-required-from]'),\n                    reqMoreEl = document.querySelector( fieldEl.getAttribute('data-required-from') );\n\n                if( containerEl !== null ){\n                    removeClass( containerEl, options.cssClasses.pending );\n                }\n\n                if( containerEl !== null && !options.skipUIfeedback ){\n\n                    if( obj.result ){\n\n                        if( !isReqFrom || (isReqFrom && reqMoreEl.checked) ){\n                            // IF FIELD IS VALID\n                            let errorClasses = options.cssClasses.error + ' ' + options.cssClasses.errorEmpty + ' ' + options.cssClasses.errorRule;\n                            removeClass( containerEl, errorClasses );\n                            addClass( containerEl, options.cssClasses.valid );\n                        }\n\n                    } else {\n\n                        // IF FIELD IS NOT VALID\n                        let extraErrorClass = options.cssClasses.errorRule;\n\n                        // HANDLE CASE OF FIELD data-checks\n                        let isChecks = fieldEl.matches('[data-checks]'),\n                            checkedElLength = (isChecks ? containerEl.querySelectorAll('[name=\"' + fieldEl.name + '\"]:checked').length : 0);\n\n                        if( (!isChecks && (obj.errors && obj.errors.empty)) || (isChecks && checkedElLength === 0) ){\n                            extraErrorClass = options.cssClasses.errorEmpty;\n                        }\n\n                        let errorClasses = options.cssClasses.error + ' ' + extraErrorClass,\n                            errorClassToRemove = options.cssClasses.errorEmpty + ' ' + options.cssClasses.errorRule;\n                        removeClass( containerEl, options.cssClasses.valid + ' ' + errorClassToRemove );\n                        addClass( containerEl, errorClasses );\n\n                    }\n                }\n            }\n        });\n\n    }\n\n}\n","\nimport { customEvents } from './helpers';\nimport { listenerCallbacks } from './listenerCallbacks';\n\nexport function formStartup( formEl, options ){\n\n    formEl.noValidate = true;\n\n    let fieldOptions = options.fieldOptions,\n        formOptions = options.formOptions;\n\n    // HANDLE FIELD VALIDATION\n    if( fieldOptions.handleValidation ){\n        \n        // VALIDATION WITH ATTRIBUTES LIKE HTML ONES ( ALSO FOR BUG FIXING, EG: maxlength IN ANDROID )\n        if( fieldOptions.strictHtmlValidation ){\n            \n            // maxlength\n            // MAXLENGTH IS BUGGY IN ANDROID BROWSERS\n            formEl.addEventListener('keypress', listenerCallbacks.keypressMaxlength, false);\n\n            // data-type=\"number\"\n            // SINCE VALIDATING type=\"number\" WITH NON NUMERIC CHARS WILL RETURN EMPTY STRING IN SOME BROWSERS ( EG: FIREFOX )\n            formEl.addEventListener('input', listenerCallbacks.dataTypeNumber, false);\n            \n        }\n        \n        if( fieldOptions.preventPasteFields && formEl.querySelectorAll( fieldOptions.preventPasteFields ).length ){\n            // INIT EVENT LISTENER FOR \"PASTE\" EVENT TO PREVENT IT ON SPECIFIED FIELDS\n            formEl.addEventListener('paste', listenerCallbacks.pastePrevent, false);\n        }\n\n        // INIT EVENTS LISTENER ( AS IN fieldOptions )\n        fieldOptions.validateOnEvents.split(' ').forEach(function( eventName ){\n            let useCapturing = (eventName === 'blur' ? true : false);\n            formEl.addEventListener(eventName, listenerCallbacks.validation, useCapturing);\n        });\n\n        formEl.addEventListener(customEvents.field.validation, listenerCallbacks.validationEnd, false);\n\n    }\n    \n    // HANDLE FORM SUBMIT\n    if( formOptions.handleSubmit ){\n        // INIT FORM SUBMIT ( DEFAULT AND AJAX )\n        formEl.addEventListener('submit', listenerCallbacks.submit);\n\n        if( formOptions.ajaxSubmit ){\n            if( formEl.getAttribute('enctype') ){\n                formOptions.ajaxOptions.headers['Content-Type'] = formEl.getAttribute('enctype');\n            }\n\n            if( formEl.getAttribute('method') ){\n                formOptions.ajaxOptions.method = formEl.getAttribute('method').toUpperCase();\n            }\n\n            if( formEl.getAttribute('action') ){\n                formOptions.ajaxOptions.url = formEl.getAttribute('action');\n            }\n        }\n    }\n\n}\n","\nimport { getFilledFields, isFieldForChangeEvent } from './helpers';\nimport { listenerCallbacks } from './listenerCallbacks';\n\nexport const init = function( formEl ){\n\n    const instance = formEl.formjs;\n    const formFields = getFilledFields( formEl );\n\n    // VALIDATE ALL FILLED FIELDS\n    return Promise.all( formFields.map(fieldEl => {\n\n        const isFieldForChangeEventBoolean = isFieldForChangeEvent(fieldEl);\n        const fakeEventObj = { target: fieldEl, type: (isFieldForChangeEventBoolean ? 'change': '') };\n        return listenerCallbacks.validation( fakeEventObj );\n\n    }) ).then(fields => {\n        instance.isInitialized = true;\n        return { instance, fields };\n    });;\n\n}\n","\nimport { fieldsStringSelector } from './fieldsStringSelector';\nimport { getUniqueFields } from './getUniqueFields';\n\nexport const getFilledFields = formEl => {\n    return getUniqueFields( formEl.querySelectorAll(fieldsStringSelector) )\n    .map(fieldEl => {\n\n        const name = fieldEl.name,\n              type = fieldEl.type,\n              isCheckboxOrRadio = (type === 'checkbox' || type === 'radio'),\n              fieldChecked = formEl.querySelector('[name=\"' + name + '\"]:checked'),\n              isReqFrom = fieldEl.matches('[data-required-from]'),\n              reqMoreEl = (isReqFrom ? formEl.querySelector(fieldEl.getAttribute('data-required-from')) : null);\n\n        return (\n            isCheckboxOrRadio ? (fieldChecked || null) :\n            (isReqFrom && reqMoreEl.checked) || (!isReqFrom && fieldEl.value) ? fieldEl : null\n        );\n\n    })\n    .filter(fieldEl => fieldEl !== null);\n}\n","\nimport { checkbox }     from './validationRules/checkbox';\nimport { equalTo }      from './validationRules/equalTo';\nimport { exactLength }  from './validationRules/exactLength';\nimport { file }         from './validationRules/file';\nimport { length }       from './validationRules/length';\nimport { max }          from './validationRules/max';\nimport { maxlength }    from './validationRules/maxlength';\nimport { min }          from './validationRules/min';\nimport { minlength }    from './validationRules/minlength';\nimport { pattern }      from './validationRules/pattern';\nimport { radio }        from './validationRules/radio';\nimport { requiredFrom } from './validationRules/requiredFrom';\n\nexport const validationRulesAttributes = {\n    checkbox,\n    equalTo,\n    exactLength,\n    file,\n    length,\n    max,\n    maxlength,\n    min,\n    minlength,\n    pattern,\n    radio,\n    requiredFrom,\n}\n","\nimport { checks } from './checks';\n\nexport const checkbox = function( fieldEl ){\n    let dataChecksEl = fieldEl.closest('form').querySelector('[name=\"' + fieldEl.name + '\"][data-checks]');\n    return dataChecksEl ? checks(dataChecksEl): {result: fieldEl.checked};\n}\n","\nexport const checks = function( fieldEl ){\n    try {\n        let attrValue = JSON.parse( fieldEl.getAttribute('data-checks') ),\n            checkedElLength = fieldEl.closest('form').querySelectorAll('[name=\"' + fieldEl.name + '\"]:checked').length,\n            isMinOk = checkedElLength >= attrValue[0],\n            isMaxOk = checkedElLength <= attrValue[1],\n            obj = { result: isMinOk && isMaxOk };\n\n        if( !obj.result ){\n            obj.errors = { checks: true };\n            if( !isMinOk ){ obj.errors.minChecks = true; }\n            if( !isMaxOk ){ obj.errors.maxChecks = true; }\n        }\n\n        return obj;\n    } catch(e){\n        throw new Error('\"data-checks\" attribute is not a valid array!');\n    }\n}\n","\nexport const equalTo = function( fieldEl ){\n    let checkFromEl = fieldEl.closest('form').querySelector( '[name=\"' + fieldEl.getAttribute('data-equal-to') + '\"]' ),\n        obj = { result: !!checkFromEl && fieldEl.value === checkFromEl.value };\n\n    if( !obj.result ){\n        obj.errors = { equalTo: true };\n    }\n\n    return obj;\n}\n","\nexport const exactLength = function( fieldEl ){\n    try {\n        let valueLength = fieldEl.value.length,\n            exactLength = fieldEl.getAttribute('data-exact-length') * 1,\n            obj = { result: !Number.isNaN(exactLength) && valueLength === exactLength };\n\n        if( !obj.result ){\n            obj.errors = { exactLength: true };\n            if( valueLength < exactLength ){ obj.errors.minlength = true; }\n            else { obj.errors.maxlength = true; }\n        }\n\n        return obj;\n    }catch(e){\n        throw new Error('\"data-exact-length\" attribute is not a number!');\n    }\n}\n","\nexport const file = function( fieldEl, fieldOptions ){\n    let maxFileSize = (fieldEl.getAttribute('data-max-file-size') || fieldOptions.maxFileSize) * 1,\n        MIMEtype = (fieldEl.accept ? new RegExp(fieldEl.accept.replace( '*', '[^\\\\/,]+' )) : null),\n        filesList = Array.from(fieldEl.files),\n        obj = { result: true };\n\n    filesList.forEach(function( file ){\n        let exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize,\n            isAcceptedFileType = (MIMEtype !== null ? MIMEtype.test(file.type) : true);\n\n        if( exceedMaxFileSize || !isAcceptedFileType ){\n            obj.result = false;\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {};\n            }\n            obj.errors.file = true;\n            if( exceedMaxFileSize ){ obj.errors.maxFileSize = true; }\n            if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true; }\n\n        }\n    });\n\n    return obj;\n}\n","\nexport const length = function( fieldEl ){\n    try {\n        let valueL = fieldEl.value.length,\n            attrValue = JSON.parse( fieldEl.getAttribute('data-length') ),\n            isMinlengthOk = valueL >= attrValue[0],\n            isMaxlengthOk = valueL <= attrValue[1],\n            obj = { result: isMinlengthOk && isMaxlengthOk };\n\n        if( !obj.result ){\n            obj.errors = { stringLength: true };\n            if( !isMinlengthOk ){ obj.errors.minlength = true; }\n            if( !isMaxlengthOk ){ obj.errors.maxlength = true; }\n        }\n\n        return obj;\n    } catch(e){\n        throw new Error('\"data-length\" attribute is not a valid array!');\n    }\n}\n","\nimport { getSplitChar } from '../helpers';\n\nexport const max = function( fieldEl ){\n    let value = fieldEl.value,\n        maxVal = fieldEl.max;\n    \n    //  if( fieldEl.type === 'date' || fieldEl.getAttribute('data-date-format') ){\n    if( fieldEl.type === 'date' ){\n        let splitChar = getSplitChar( value );\n        value = value.split( splitChar ).join('');\n        maxVal = maxVal.split('-').join('');\n    }\n\n    value = value * 1;\n    maxVal = maxVal * 1;\n\n    let obj = { result: value <= maxVal };\n\n    if( !obj.result ){\n        obj.errors = { max: true };\n    }\n    \n    return obj;\n}\n","\nexport const maxlength = function( fieldEl ){\n    try {\n        const obj = { result: fieldEl.value.length <= fieldEl.maxLength * 1 };\n\n        if( !obj.result ){\n            obj.errors = { maxlength: true };\n        }\n\n        return obj;\n    }catch(e){\n        throw new Error('\"maxlength\" is not a number!');\n    }\n}\n","\nimport { getSplitChar } from '../helpers';\n\nexport const min = function( fieldEl ){\n    let value = fieldEl.value,\n        minVal = fieldEl.min;\n    \n    //  if( fieldEl.type === 'date' || fieldEl.getAttribute('data-date-format') ){\n    if( fieldEl.type === 'date' ){\n        let splitChar = getSplitChar( value );\n        value = value.split( splitChar ).join('');\n        minVal = minVal.split('-').join('');\n    }\n\n    value = value * 1;\n    minVal = minVal * 1;\n\n    let obj = { result: value >= minVal };\n\n    if( !obj.result ){\n        obj.errors = { min: true };\n    }\n    \n    return obj;\n}\n","\nexport const minlength = function( fieldEl ){\n    try {\n        const obj = { result: fieldEl.value.length >= fieldEl.minLength * 1 };\n\n        if( !obj.result ){\n            obj.errors = { minlength: true };\n        }\n\n        return obj;\n    }catch(e){\n        throw new Error('\"minlength\" is not a number!');\n    }\n}\n","\nexport const pattern = function( fieldEl ){\n    try {\n        let fieldPattern = fieldEl.pattern,\n            fieldRegex = new RegExp( fieldPattern ),\n            obj = { result: fieldRegex.test( fieldEl.value ) };\n\n        if( !obj.result ){\n            obj.errors = { pattern: true };\n        }\n\n        return obj;\n    }catch(e){\n        throw new Error('\"pattern\" is not a valid RegExp!');\n    }\n}\n","\nexport const radio = function( fieldEl ){\n    let fieldChecked = fieldEl.closest('form').querySelector( '[name=\"'+ fieldEl.name +'\"]:checked' ),\n        isValid = fieldChecked !== null && fieldChecked.value.trim().length > 0;\n\n    return { result: isValid };\n}\n","\nexport const requiredFrom = function( fieldEl ){\n    let formEl = fieldEl.closest('form'),\n        isValidValue = fieldEl.value.trim().length > 0,\n        reqMoreEl = formEl.querySelector( fieldEl.getAttribute('data-required-from') ),\n        checkedEl = formEl.querySelector( '[name=\"'+ reqMoreEl.name +'\"]:checked' ),\n        obj = { result: checkedEl !== null };\n\n    if( reqMoreEl.checked && reqMoreEl.required ){\n        obj.result = isValidValue;\n    }\n\n    if( !obj.result ){\n        obj.errors = { requiredFrom: true };\n    }\n    \n    return obj;\n}\n","\nimport { getValidateFieldDefault, isDOMNode, runFunctionsSequence } from './helpers';\nimport { isValid } from './isValid';\n\nexport function checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    if( !isDOMNode(fieldEl) ){\n        const obj = getValidateFieldDefault({fieldEl});\n        return Promise.resolve(obj);\n    }\n\n    const formEl = fieldEl.closest('form'),\n          isValidValue = fieldEl.value.trim().length > 0;\n\n     // HANDLE FIELDS radio/data-require-more\n     if( fieldEl.type === 'radio' ){\n        const checkedEl = fieldEl.checked ? fieldEl : formEl.querySelector('[name=\"'+ fieldEl.name +'\"]:checked'),\n              reqMoreIsChecked = checkedEl.matches('[data-require-more]'),\n              findReqMoreEl = reqMoreIsChecked ? checkedEl : formEl.querySelector('[data-require-more][name=\"'+ fieldEl.name +'\"]'),\n              findReqFromEl = findReqMoreEl ? formEl.querySelector('[data-required-from=\"#'+ findReqMoreEl.id +'\"]') : null;\n        \n        if( checkedEl && findReqFromEl ){\n            findReqFromEl.required = findReqMoreEl.required && findReqMoreEl.checked;\n            if( !reqMoreIsChecked ){\n                findReqFromEl.value = '';\n            } else if( fieldOptions.focusOnRelated ) {\n                findReqFromEl.focus();\n            }\n        }\n    }\n\n    // HANDLE FIELDS data-required-from\n    if( fieldEl.matches('[data-required-from]') && isValidValue ){\n        const reqMoreEl = formEl.querySelector( fieldEl.getAttribute('data-required-from') );\n        reqMoreEl.checked = true;\n        fieldEl.required = reqMoreEl.required;\n    }\n\n    const needsValidation = fieldEl.required || (fieldEl.matches('[data-validate-if-filled]') && isValidValue);\n\n    return runFunctionsSequence({\n            functionsList: fieldOptions.beforeValidation,\n            data: {fieldEl}\n        })\n        .then(data => {\n            let dataObj = data.pop();\n            return new Promise(resolve => {\n                if( !needsValidation ){\n                    dataObj.result = true;\n                }\n                resolve( needsValidation ? isValid(fieldEl, fieldOptions, validationRules, validationErrors) : dataObj );\n            });\n        });\n\n}\n","\nimport { getValidateFieldDefault, mergeObjects, toCamelCase } from './helpers';\nimport { validationRulesAttributes } from './validationRulesAttributes';\n\nexport function isValid( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    const fieldType = fieldEl.matches('[data-subtype]') ? toCamelCase(fieldEl.getAttribute('data-subtype')) : fieldEl.type,\n          fieldValue = fieldEl.value,\n          isValidValue = fieldValue.trim().length > 0;\n\n    let obj = getValidateFieldDefault({result: isValidValue, fieldEl});\n\n    if( !obj.result ){\n        obj.errors = { empty: true };\n        return Promise.resolve(obj);\n    }\n\n    let attrValidationsResult;\n\n    return new Promise(resolve => {\n\n        // RUN SPECIFIC VALIDATIONS FOR validationRulesAttributes\n        attrValidationsResult = Array.from(fieldEl.attributes).reduce((valResult, attr) => {\n            // FOR data-* ATTRIBUTES -> REMOVE \"data-\" AND TRANSFORM TO CAMELCASE\n            const attrName = toCamelCase( attr.name.replace('data-', '') ),\n                  attrValue = attr.value,\n                  isAttrValueWithFn = attrName === 'type' && typeof validationRulesAttributes[attrValue] === 'function',\n                  isAttrNameWithFn = typeof validationRulesAttributes[attrName] === 'function';\n\n            if( isAttrValueWithFn || isAttrNameWithFn ){\n                const method = isAttrValueWithFn ? attrValue : attrName;\n                const extraVal = validationRulesAttributes[method]( fieldEl, fieldOptions );\n                if( !extraVal.result ){\n                    obj = mergeObjects({}, obj, extraVal);\n                    return false;\n                }\n            }\n            return valResult;\n        }, isValidValue);\n\n        // RUN VALIDATION FOR validationRules\n        if( typeof validationRules[fieldType] === 'function' ){\n            resolve( validationRules[fieldType](fieldValue, fieldEl) );\n        } else {\n            resolve( obj );\n        }\n\n    }).then(data => {\n\n        obj = mergeObjects( {}, obj, data );\n        obj.result = obj.result && attrValidationsResult;\n\n        if( !obj.result ){\n            const fieldErrors = (typeof validationErrors[fieldType] === 'function' ? validationErrors[fieldType](fieldValue, fieldEl) : {});\n            obj.errors = mergeObjects({}, obj.errors || {}, fieldErrors);\n            obj.errors.rule = true;\n        }\n        \n        return obj;\n\n    });\n\n}\n","\nimport { fieldsStringSelector, getUniqueFields, getValidateFieldDefault, getValidateFormDefault, mergeObjects } from './helpers';\nimport { checkFieldValidity } from './checkFieldValidity';\n\nexport function checkFormValidity( formEl, fieldOptions, validationRules, validationErrors, fieldToSkip = null ){\n\n    fieldOptions = mergeObjects( {}, fieldOptions, {focusOnRelated: false} );\n\n    const obj = getValidateFormDefault(),\n          fieldsList = getUniqueFields( formEl.querySelectorAll(fieldsStringSelector) );\n\n    return Promise.all( fieldsList.map(fieldEl => {\n\n        if( fieldToSkip && fieldEl === fieldToSkip ){\n            const obj2 = getValidateFieldDefault({fieldEl, result: true});\n            return Promise.resolve(obj2);\n        }\n        \n        return checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors );\n\n    }) ).then(list => {\n\n        let areAllFieldsValid = list.filter(fieldObj => !fieldObj.result).length === 0;\n        obj.result = areAllFieldsValid;\n        obj.fields = list;\n\n        return obj;\n\n    });\n\n}\n","\nimport { version }              from './modules/version';\nimport { customEvents, dispatchCustomEvent, excludeSelector, mergeObjects, removeClass } from './modules/helpers';\nimport { options }              from './modules/options';\nimport { validationRules }      from './modules/validationRules';\nimport { validationErrors }     from './modules/validationErrors';\nimport { listenerCallbacks }    from './modules/listenerCallbacks';\nimport { constructorFn }        from './modules/constructor';\nimport { destroy }              from './modules/destroy';\nimport { init }                 from './modules/init';\nimport { checkFieldValidity }   from './modules/checkFieldValidity';\nimport { checkFormValidity }    from './modules/checkFormValidity';\n\nclass Form {\n\n    constructor( formEl, optionsObj ){\n        constructorFn(this, formEl, optionsObj);\n    }\n\n    destroy(){\n        destroy(this.formEl, this.options);\n    }\n    \n    getFormData(){\n        const formFieldsEl = this.formEl.querySelectorAll('input, select, textarea'),\n              filteredFields = Array.from( formFieldsEl ).filter( elem => elem.matches(excludeSelector) );\n        return this.options.formOptions.getFormData(filteredFields);\n    }\n\n    init(){\n        return init(this.formEl);\n    }\n\n    validateField( fieldEl, fieldOptions ){\n        fieldEl = (typeof fieldEl === 'string' ? this.formEl.querySelector(fieldEl) : fieldEl);\n        fieldOptions = mergeObjects({}, this.options.fieldOptions, fieldOptions);\n        const formEl = this.formEl;\n        const skipUIfeedback = this.options.fieldOptions.skipUIfeedback;\n        return checkFieldValidity(fieldEl, fieldOptions, this.validationRules, this.validationErrors)\n            .then(obj => {\n                return new Promise(resolve => {\n                    if( obj.fieldEl ){\n                        dispatchCustomEvent( obj.fieldEl, customEvents.field.validation, obj, { bubbles: false } );\n                        dispatchCustomEvent( formEl, customEvents.field.validation, obj );\n                        if( fieldOptions.onValidationCheckAll && obj.result ){\n                            // FORCE skipUIfeedback TO true\n                            fieldOptions.skipUIfeedback = true;\n                            resolve(\n                                checkFormValidity( formEl, fieldOptions, this.validationRules, this.validationErrors, obj.fieldEl )\n                                    .then(dataForm => {\n                                        const clMethodName = dataForm.result ? 'add' : 'remove';\n                                        formEl.classList[clMethodName]( this.options.formOptions.cssClasses.valid );\n                                        dispatchCustomEvent( formEl, customEvents.form.validation, dataForm );\n                                        // RESTORE skipUIfeedback TO THE ORIGINAL VALUE\n                                        fieldOptions.skipUIfeedback = skipUIfeedback;\n                                        return obj;\n                                    })\n                            );\n                        } else if( !obj.result ){\n                            removeClass( formEl, this.options.formOptions.cssClasses.valid );\n                        }\n                    }\n                    resolve( obj );\n                });\n            });\n    }\n\n    validateForm( fieldOptions ){\n        fieldOptions = mergeObjects({}, this.options.fieldOptions, fieldOptions);\n        const formEl = this.formEl;\n        return checkFormValidity(formEl, fieldOptions, this.validationRules, this.validationErrors)\n            .then(data => {\n                const clMethodName = data.result ? 'add' : 'remove';\n                formEl.classList[clMethodName]( this.options.formOptions.cssClasses.valid );\n                listenerCallbacks.validationEnd( {data} );\n                dispatchCustomEvent( formEl, customEvents.form.validation, data );\n                return data;\n            });\n\n    }\n    \n    static addValidationErrors( errorsObj ){\n        this.prototype.validationErrors = mergeObjects({}, this.prototype.validationErrors, errorsObj);\n    }\n\n    static addValidationRules( rulesObj ){\n        this.prototype.validationRules = mergeObjects({}, this.prototype.validationRules, rulesObj);\n    }\n    \n    static setOptions( optionsObj ){\n        this.prototype.options = mergeObjects({}, this.prototype.options, optionsObj);\n    }\n\n}\n\nForm.prototype.isInitialized = false;\nForm.prototype.options = options;\nForm.prototype.validationErrors = validationErrors;\nForm.prototype.validationRules = validationRules;\nForm.prototype.version = version;\n\nexport default Form;\n","\nimport { checkFormEl, isNodeList, mergeObjects }   from './helpers';\nimport { formStartup }                             from './formStartup';\n\nexport function constructorFn( self, formEl, optionsObj ){\n\n    let argsL = arguments.length,\n        checkFormElem = checkFormEl(formEl);\n\n    if( argsL === 0 || (argsL > 0 && !formEl) ){\n        throw new Error('First argument \"formEl\" is missing or falsy!');\n    }\n    if( isNodeList(formEl) ){\n        throw new Error('First argument \"formEl\" must be a single DOM node or a form CSS selector, not a NodeList!');\n    }\n    if( !checkFormElem.result ){\n        throw new Error('First argument \"formEl\" is not a DOM node nor a form CSS selector!');\n    }\n\n    self.formEl = checkFormElem.element;\n    self.formEl.formjs = self;\n    self.options = mergeObjects({}, self.constructor.prototype.options, optionsObj);\n\n    // BINDING CONTEXT FOR FUTURE EXECUTION\n    const cbList = [\n        // IN fieldOptions\n        'beforeValidation',\n        // IN formOptions\n        'beforeSend',\n        'getFormData'\n    ];\n    cbList.forEach(cbName => {\n        let optionType = self.options.formOptions[cbName] ? 'formOptions' : 'fieldOptions',\n            cbOpt = self.options[optionType][cbName];\n\n        if( cbOpt ){\n            self.options[optionType][cbName] = ( Array.isArray(cbOpt) ? cbOpt.map(cbFn => cbFn.bind(self)) : cbOpt.bind(self) );\n        }\n    });\n\n    formStartup( self.formEl, self.options );\n    \n}\n","\nimport { customEvents } from './helpers';\nimport { listenerCallbacks } from './listenerCallbacks';\n\n\nexport function destroy( formEl, options ){\n\n    if( options.fieldOptions.strictHtmlValidation ){\n        formEl.removeEventListener('keypress', listenerCallbacks.keypressMaxlength, false);\n        formEl.removeEventListener('input', listenerCallbacks.dataTypeNumber, false);\n    }\n\n    if( options.fieldOptions.preventPasteFields ){\n        formEl.removeEventListener('paste', listenerCallbacks.pastePrevent, false);\n    }\n\n    if( options.formOptions.handleSubmit ){\n        formEl.removeEventListener('submit', listenerCallbacks.submit);\n    }\n\n    options.fieldOptions.validateOnEvents.split(' ').forEach(function( eventName ){\n        let useCapturing = (eventName === 'blur' ? true : false);\n        formEl.removeEventListener(eventName, listenerCallbacks.validation, useCapturing);\n    });\n\n    formEl.removeEventListener(customEvents.field.validation, listenerCallbacks.validationEnd, false);\n\n    delete formEl.formjs;\n    \n}\n","\nexport const excludeSelector = ':not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"file\"]):not([data-exclude-data])'\n","\nexport const validationErrors = {\n\n    email: function ( string ) {\n        const obj = {};\n\n        if( string.indexOf('@') === -1 ){\n\n            // @ IS MISSING\n            obj.missingAtChar = true;\n\n        } else {\n\n            let splitAt_at = string.split('@');\n            if( splitAt_at[0].length === 0 ){\n\n                // USER NAME IS MISSING\n                obj.missingUserName = true;\n\n            }\n\n            if( splitAt_at[1].length === 0 ){\n\n                // IS EMPTY AFTER @\n                obj.missingDomain = true;\n                obj.missingExtensionDot = true;\n                obj.missingExtension = true;\n\n            } else if( splitAt_at[1].indexOf('.') === -1 ) {\n\n                // DOT IS MISSING\n                obj.missingExtensionDot = true;\n                obj.missingExtension = true;\n\n            } else {\n\n                // EXTENSION MISSING OR NOT LONG ENOUGH\n                let splitAt_dot = splitAt_at[1].split('.'),\n                    extLength = splitAt_dot[1].length;\n                if( extLength === 0 ) {\n                    obj.missingExtension = true;\n                } else if( extLength < 2 ){\n                    obj.minlengthExtension = true;\n                }\n\n            }\n        }\n\n        return obj;\n\n    }\n\n}"],"names":["addClass","element","cssClasses","split","forEach","className","classList","add","isNodeList","nodeList","NodeList","prototype","isPrototypeOf","removeClass","remove","isDOMNode","node","Element","checkFormEl","formEl","isString","isFormSelector","document","querySelector","tagName","toLowerCase","result","customEvents","validation","submit","mergeObjects","out","i","arguments","length","obj","key","isArray","Object","toString","call","isObject","hasOwnProperty","concat","slice","Array","push","dispatchCustomEvent","elem","eventName","data","eventOptions","bubbles","eventObj","Event","dispatchEvent","fieldsStringSelector","getSplitChar","string","separator","match","getUniqueFields","currentFieldName","currentFieldType","from","filter","fieldEl","name","type","matches","getValidateFieldDefault","getValidateFormDefault","fields","isFieldForChangeEvent","runFunctionsSequence","functionsList","stopConditionFn","reduce","acc","promiseFn","then","res","dataNew","Promise","resolve","dataList","serializeObject","_typeof","constructor","keys","a","k","encodeURIComponent","join","toCamelCase","replace","all","letter","toUpperCase","defaultCallbacksInOptions","fieldOptions","beforeValidation","fieldObj","this","options","dirty","containerEl","closest","value","skipUIfeedback","pending","formOptions","getFormData","filteredFields","formData","isCheckbox","isRadio","isSelect","checked","checkboxes","querySelectorAll","field","checkedRadio","selectedOpts","option","selected","error","errorEmpty","errorRule","valid","focusOnRelated","handleFileUpload","handleValidation","maxFileSize","onValidationCheckAll","preventPasteFields","strictHtmlValidation","validateOnEvents","ajaxOptions","cache","credentials","headers","method","mode","redirect","timeout","url","location","href","ajaxSubmit","beforeSend","ajaxComplete","ajaxError","ajaxPending","ajaxSuccess","handleSubmit","validationRules","date","test","email","number","event","target","instance","formjs","formCssClasses","isAjaxForm","btnEl","eventPreventDefault","enableBtn","disabled","preventDefault","validateForm","formValidation","beforeSendData","stopExecution","formDataObj","callbacksBeforeSend","pop","timeoutTimer","isMultipart","body","formDataMultipart","FormData","append","files","file","idx","indexOf","JSON","stringify","Headers","controller","AbortController","signal","window","setTimeout","abort","fetch","response","ok","reject","fetchMethod","accept","get","contentType","headerOpt","getFetchMethod","clearTimeout","ajaxCall","listenerCallbacks","fieldValue","stopImmediatePropagation","valueReplaced","maxLength","keyPressed","which","keyCode","isChangeEvent","self","isFieldForChangeEventBoolean","validateField","realtedFieldEqualTo","required","trim","fieldsArray","isReqFrom","reqMoreEl","getAttribute","errorClasses","extraErrorClass","isChecks","checkedElLength","errors","empty","errorClassToRemove","formStartup","noValidate","addEventListener","useCapturing","init","formFields","map","isCheckboxOrRadio","fieldChecked","getFilledFields","isInitialized","validationRulesAttributes","checkbox","dataChecksEl","attrValue","parse","isMinOk","isMaxOk","checks","minChecks","maxChecks","e","Error","equalTo","checkFromEl","exactLength","valueLength","Number","isNaN","minlength","maxlength","MIMEtype","RegExp","filesList","exceedMaxFileSize","size","isAcceptedFileType","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","stringLength","max","maxVal","splitChar","min","minVal","minLength","pattern","fieldPattern","radio","requiredFrom","isValidValue","checkFieldValidity","validationErrors","checkedEl","reqMoreIsChecked","findReqMoreEl","findReqFromEl","id","focus","needsValidation","dataObj","attrValidationsResult","fieldType","attributes","valResult","attr","attrName","isAttrValueWithFn","isAttrNameWithFn","extraVal","fieldErrors","rule","isValid","checkFormValidity","fieldToSkip","fieldsList","obj2","list","areAllFieldsValid","Form","optionsObj","argsL","checkFormElem","cbList","cbName","optionType","cbOpt","cbFn","bind","constructorFn","errorsObj","rulesObj","removeEventListener","destroy","formFieldsEl","_this","dataForm","clMethodName","_this2","missingAtChar","splitAt_at","missingUserName","missingDomain","missingExtensionDot","missingExtension","extLength","minlengthExtension","version"],"mappings":"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"}