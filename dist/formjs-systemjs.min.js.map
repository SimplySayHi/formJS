{"version":3,"file":"formjs-systemjs.min.js","sources":["../src/modules/version.js","../src/modules/helpers/addClass.js","../src/modules/helpers/isNodeList.js","../src/modules/helpers/removeClass.js","../src/modules/helpers/isDOMNode.js","../src/modules/helpers/checkFormEl.js","../src/modules/helpers/customEvents.js","../src/modules/helpers/isPlainObject.js","../src/modules/helpers/mergeObjects.js","../src/modules/helpers/dispatchCustomEvent.js","../src/modules/helpers/fieldsStringSelector.js","../src/modules/helpers/finalizeFieldPromise.js","../src/modules/helpers/finalizeFormPromise.js","../src/modules/helpers/getDateAsNumber.js","../src/modules/helpers/getSplitChar.js","../src/modules/helpers/getUniqueFields.js","../src/modules/helpers/mergeValidateFieldDefault.js","../src/modules/helpers/mergeValidateFormDefault.js","../src/modules/helpers/isFieldForChangeEvent.js","../src/modules/helpers/runFunctionsSequence.js","../src/modules/helpers/serializeObject.js","../src/modules/helpers/toCamelCase.js","../src/modules/optionsUtils.js","../src/modules/helpers/checkDirtyField.js","../src/modules/options.js","../src/modules/validationRules.js","../src/modules/validationRules/date.js","../src/modules/validationRules/email.js","../src/modules/validationRules/number.js","../src/modules/validationRules/checkbox.js","../src/modules/validationRules/checks.js","../src/modules/validationRules/equalTo.js","../src/modules/validationRules/exactLength.js","../src/modules/validationRules/file.js","../src/modules/validationRules/length.js","../src/modules/validationRules/max.js","../src/modules/validationRules/maxlength.js","../src/modules/validationRules/min.js","../src/modules/validationRules/minlength.js","../src/modules/validationRules/pattern.js","../src/modules/validationRules/radio.js","../src/modules/listenerCallbacks/dataTypeNumber.js","../src/modules/listenerCallbacks/keypressMaxlength.js","../src/modules/listenerCallbacks/pastePrevent.js","../src/modules/ajaxCall.js","../src/modules/listenerCallbacks/submit.js","../src/modules/listenerCallbacks/validation.js","../src/modules/listenerCallbacks/validationEnd.js","../src/modules/formStartup.js","../src/modules/checkFilledFields.js","../src/modules/helpers/getFilledFields.js","../src/modules/checkFieldValidity.js","../src/modules/isValid.js","../src/modules/checkFormValidity.js","../src/index.js","../src/modules/destroy.js","../src/modules/helpers/excludeSelector.js"],"sourcesContent":["\nexport const version = '5.0.0';\n","\nexport const addClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.add( className );\n    });\n}\n","\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList );\n}\n","\nexport const removeClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.remove( className );\n    });\n}\n","\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node );\n}\n","\nimport { isDOMNode } from './isDOMNode';\n\nexport const checkFormEl = formEl => {\n    let isString = typeof formEl,\n        isValidNodeSelector = isString === 'string' && isDOMNode(document.querySelector(formEl)),\n        isFormSelector = isValidNodeSelector && document.querySelector(formEl).tagName.toLowerCase() === 'form',\n        obj = {\n            result: isDOMNode(formEl) || isFormSelector,\n            element: (isString === 'string' ? document.querySelector(formEl) : formEl)\n        };\n\n    return obj;\n}\n","\nexport const customEvents = {\n    field: {\n        validation: 'fjs.field:validation'\n    },\n    form: {\n        submit:     'fjs.form:submit',\n        validation: 'fjs.form:validation'\n    }\n}\n","\nexport const isPlainObject = object => {\n    return Object.prototype.toString.call( object ) === '[object Object]';\n}\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const mergeObjects = function( out = {} ){\n    Array.from(arguments).slice(1).filter(arg => !!arg).forEach(arg => {\n        Object.keys(arg).forEach(key => {\n            if( Array.isArray(arg[key]) ){\n                out[key] = (out[key] || []).concat( arg[key].slice(0) );\n            } else if( isPlainObject(arg[key]) ){\n                out[key] = mergeObjects((out[key] || {}), arg[key]);\n            } else {\n                // * STRING | NUMBER | BOOLEAN | FUNCTION\n                if( Array.isArray(out[key]) ){\n                    // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                    out[key].push(arg[key]);\n                } else {\n                    out[key] = arg[key];\n                }\n            }\n        });\n    });\n\n    return out;\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const dispatchCustomEvent = ( elem, eventName, eventOptions ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions);\n    const eventObj = new CustomEvent(eventName, eventOptions);\n    elem.dispatchEvent( eventObj );\n}\n","\nexport const fieldsStringSelector = 'input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"hidden\"]), select, textarea'\n","\nexport const finalizeFieldPromise = obj => {\n    if( obj.result ){\n        return Promise.resolve();\n    }\n    return Promise.reject(obj.errors);\n}\n","\nexport const finalizeFormPromise = obj => {\n    if( obj.result ){\n        return Promise.resolve(obj.fields);\n    }\n    return Promise.reject(obj.fields);\n}\n","\nimport { getSplitChar } from './getSplitChar';\n\nconst formatMap = {\n    'YYYY-MM-DD': function(dateArray){\n        return dateArray;\n    },\n    'MM-DD-YYYY': function(dateArray){\n        return [dateArray[2], dateArray[0], dateArray[1]];\n    },\n    'DD-MM-YYYY': function(dateArray){\n        return dateArray.reverse();\n    }\n};\n\nexport const getDateAsNumber = ( dateString, dateFormat ) => {\n    dateFormat = dateFormat || 'YYYY-MM-DD';\n    const splitChar = getSplitChar(dateString);\n\n    if( dateFormat.indexOf(splitChar) < 0 ){\n        return;\n    }\n\n    dateFormat = dateFormat.replace(/[^YMD]/g, '-');\n    dateString = dateString.split(splitChar);\n    dateString = formatMap[dateFormat](dateString).join('');\n    \n    return dateString;\n}\n","\nexport const getSplitChar = string => {\n    // MATCH ANY NON-DIGIT CHAR\n    const separator = string.match(/\\D/);\n    return (separator && separator.length > 0) ? separator[0] : null;\n}\n","\nexport const getUniqueFields = nodeList => {\n\n    let currentFieldName = '',\n        currentFieldType = '';\n\n    return Array.from( nodeList ).filter(fieldEl => {\n        const name = fieldEl.name,\n              type = fieldEl.type;\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false;\n        }\n        \n        if( !fieldEl.matches('[data-required-from]') ){\n            currentFieldName = name;\n            currentFieldType = type;\n        }\n        return true;\n    });\n    \n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const mergeValidateFieldDefault = obj => {\n    return mergeObjects({}, { result: false, fieldEl: null }, obj);\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const mergeValidateFormDefault = obj => {\n    return mergeObjects({}, { result: true, fields: [] }, obj);\n}\n","\nexport const isFieldForChangeEvent = fieldEl => {\n    return fieldEl.matches('select, [type=\"radio\"], [type=\"checkbox\"], [type=\"file\"]');\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const runFunctionsSequence = ( { functionsList = [], data = {}, stopConditionFn = () => false } = {} ) => {\n    return functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1]);\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res);\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result);\n                    return res;\n                });\n        });\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList);\n}\n","\nexport const serializeObject = obj => {\n    var objToString = (\n            (obj && typeof obj === 'object' && obj.constructor === Object) ? \n            Object.keys(obj)\n                .reduce((a,k) => {\n                    a.push(k+'='+encodeURIComponent(obj[k]));\n                    return a\n                },[]).join('&') : \n            obj\n    );\n    return objToString;\n}\n","\nexport const toCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase(); });\n}\n","\nimport { addClass, checkDirtyField } from './helpers';\n\nexport const defaultCallbacksInOptions = {\n    fieldOptions: {\n\n        beforeValidation: function beforeValidationDefault ( fieldObj ) {\n\n            const fieldOptions = this.options.fieldOptions;\n\n            checkDirtyField( fieldObj.fieldEl, fieldOptions );\n            if( !fieldOptions.skipUIfeedback ){\n                addClass( fieldObj.fieldEl.closest( fieldOptions.questionContainer ), fieldOptions.cssClasses.pending );\n            }\n\n        }\n\n    },\n    formOptions: {\n\n        getFormData: function getFormDataDefault ( filteredFields ) {\n\n            const formData = {},\n                  formEl = this.formEl;\n\n            filteredFields.forEach(fieldEl => {\n                const isCheckbox = fieldEl.type === 'checkbox',\n                      isRadio = fieldEl.type === 'radio',\n                      isSelect = fieldEl.matches('select'),\n                      name = fieldEl.name;\n                let value = fieldEl.value;\n                                \n                if( isCheckbox ) {\n                    \n                    value = fieldEl.checked;\n                    let checkboxes = Array.from( formEl.querySelectorAll('[name=\"'+ name +'\"]') );\n                    if( checkboxes.length > 1 ){\n\n                        value = [];\n                        let checkedElems = checkboxes.filter(field => field.checked);\n                        checkedElems.forEach(fieldEl => {\n                            value.push( fieldEl.value );\n                        });\n\n                    }\n                        \n                } else if( isRadio ){\n                    \n                    const checkedRadio = formEl.querySelector('[name=\"'+ name +'\"]:checked');\n                    value = (checkedRadio === null ? null : checkedRadio.value);\n                    \n                } else if( isSelect ){\n\n                    const selectedOpts = Array.from( fieldEl.options ).filter(option => option.selected);\n                    if( selectedOpts.length > 1 ){\n\n                        value = [];\n                        selectedOpts.forEach(fieldEl => {\n                            value.push( fieldEl.value );\n                        });\n\n                    }\n                }\n\n                formData[ name ] = value;\n            });\n\n            return formData;\n\n        }\n\n    }\n}\n","\nimport { addClass } from './addClass';\nimport { isNodeList } from './isNodeList';\nimport { removeClass } from './removeClass';\n\nexport const checkDirtyField = ( fields, fieldOptions ) => {\n\n    fields = isNodeList(fields) ? Array.from( fields ) : [fields];\n    fields.forEach(fieldEl => {\n        if( fieldEl.type !== 'checkbox' && fieldEl.type !== 'radio' ){\n            const containerEl = fieldEl.closest( fieldOptions.questionContainer ) || fieldEl;\n            if( fieldEl.value ){\n                addClass( containerEl, fieldOptions.cssClasses.dirty );\n            } else {\n                removeClass( containerEl, fieldOptions.cssClasses.dirty );\n            }\n        }\n    });\n    \n}\n","\nimport { defaultCallbacksInOptions } from './optionsUtils';\n\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [defaultCallbacksInOptions.fieldOptions.beforeValidation],\n        cssClasses: {\n            dirty:              'is-dirty',\n            error:              'has-error',\n            errorEmpty:         'has-error-empty',\n            errorRule:          'has-error-rule',\n            pending:            'is-pending',\n            valid:              'is-valid'\n        },\n        focusOnRelated:         true,\n        handleFileUpload:       true,\n        onValidationCheckAll:   false,\n        preventPasteFields:     '[type=\"password\"], [data-equal-to]',\n        questionContainer:      '[data-formjs-question]',\n        skipUIfeedback:         false,\n        strictHtmlValidation:   true,\n        validateOnEvents:       'input change'\n    },\n\n    formOptions: {\n        ajaxOptions:            {\n            cache:              'no-store',\n            credentials:        'same-origin',\n            headers: {\n                                'Content-Type': 'application/json',\n                                'Accept':       'application/json'\n            },\n            method:             'POST',\n            mode:               'same-origin',\n            redirect:           'follow',\n            timeout:            0,\n            url:                location.href\n        },\n        ajaxSubmit:             true,\n        beforeSend:             [],\n        cssClasses: {\n            ajaxComplete:       'ajax-complete',\n            ajaxError:          'ajax-error',\n            ajaxPending:        'ajax-pending',\n            ajaxSuccess:        'ajax-success',\n            submit:             'is-submitting',\n            valid:              'is-valid'\n        },\n        getFormData:            defaultCallbacksInOptions.formOptions.getFormData,\n        handleSubmit:           true\n    }\n    \n}\n","\nimport { date }         from './validationRules/date';\nimport { email }        from './validationRules/email';\nimport { number }       from './validationRules/number';\n\nimport { checkbox }     from './validationRules/checkbox';\nimport { equalTo }      from './validationRules/equalTo';\nimport { exactLength }  from './validationRules/exactLength';\nimport { file }         from './validationRules/file';\nimport { length }       from './validationRules/length';\nimport { max }          from './validationRules/max';\nimport { maxlength }    from './validationRules/maxlength';\nimport { min }          from './validationRules/min';\nimport { minlength }    from './validationRules/minlength';\nimport { pattern }      from './validationRules/pattern';\nimport { radio }        from './validationRules/radio';\n\nexport const validationRules = {\n    date,\n    email,\n    number,\n\n    checkbox,\n    equalTo,\n    exactLength,\n    file,\n    length,\n    max,\n    maxlength,\n    min,\n    minlength,\n    pattern,\n    radio\n}\n","\n/*\n    DATE AS ISO 8601 DATE FORMAT:\n    YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n*/\n\nexport const date = function( string ){\n    return {\n        result: /^((((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13578]|1[02])[ \\/\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13456789]|1[012])[ \\/\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.]02[ \\/\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ \\/\\-.]02[ \\/\\-.]29))$/g.test( string )\n    };\n}\n","\n// https://regex101.com/r/cdlyJy/3\n\nexport const email = function( string ){\n    return {\n        result: /^[a-zA-Z_-]([\\w.-]?[a-zA-Z0-9])*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?){2,})+$/.test( string )\n    };\n}\n","\n/*\n    ALL NUMBERS ( INTEGERS AND FLOATING )\n    VALID NUMBERS: 123 | 123.456 | .123\n*/\n\nexport const number = function( string ){\n    return {\n        result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n    };\n}","\nimport { checks } from './checks';\n\nexport const checkbox = function( value, fieldEl ){\n    const dataChecksEl = fieldEl.closest('form').querySelector('[name=\"' + fieldEl.name + '\"][data-checks]');\n    return dataChecksEl ? checks(dataChecksEl) : { result: fieldEl.checked };\n}\n","\nexport const checks = function( fieldEl ){\n    const attrValue = JSON.parse( fieldEl.getAttribute('data-checks') ),\n          checkedElLength = fieldEl.closest('form').querySelectorAll('[name=\"' + fieldEl.name + '\"]:checked').length,\n          isMinOk = checkedElLength >= attrValue[0],\n          isMaxOk = checkedElLength <= attrValue[1],\n          obj = { result: isMinOk && isMaxOk };\n\n    if( !obj.result ){\n        obj.errors = { checks: true };\n        if( !isMinOk ){ obj.errors.minChecks = true; }\n        if( !isMaxOk ){ obj.errors.maxChecks = true; }\n    }\n\n    return obj;\n}\n","\nexport const equalTo = function( value, fieldEl ){\n    const checkFromEl = fieldEl.closest('form').querySelector( '[name=\"' + fieldEl.getAttribute('data-equal-to') + '\"]' );\n    return { result: value === checkFromEl.value };\n}\n","\nexport const exactLength = function( value, fieldEl ){\n    const valueLength = value.length,\n          exactLength = fieldEl.getAttribute('data-exact-length') * 1,\n          obj = { result: valueLength === exactLength };\n\n    if( !obj.result ){\n        obj.errors = {};\n        if( valueLength < exactLength ){ obj.errors.minlength = true; }\n        else { obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nexport const file = function( value, fieldEl ){\n    const maxFileSize = (fieldEl.getAttribute('data-max-file-size') || 0) * 1,\n          MIMEtype = fieldEl.accept ? new RegExp(fieldEl.accept.replace( '*', '[^\\\\/,]+' )) : null,\n          filesList = Array.from(fieldEl.files),\n          obj = { result: true };\n\n    filesList.forEach(file => {\n        const exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize,\n              isAcceptedFileType = MIMEtype !== null ? MIMEtype.test(file.type) : true;\n\n        if( exceedMaxFileSize || !isAcceptedFileType ){\n            obj.result = false;\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {};\n            }\n            if( exceedMaxFileSize ){ obj.errors.maxFileSize = true; }\n            if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true; }\n\n        }\n    });\n\n    return obj;\n}\n","\nexport const length = function( value, fieldEl ){\n    const valueL = value.length,\n          attrValue = JSON.parse( fieldEl.getAttribute('data-length') ),\n          isMinlengthOk = valueL >= attrValue[0],\n          isMaxlengthOk = valueL <= attrValue[1],\n          obj = { result: isMinlengthOk && isMaxlengthOk };\n\n    if( !obj.result ){\n        obj.errors = {};\n        if( !isMinlengthOk ){ obj.errors.minlength = true; }\n        if( !isMaxlengthOk ){ obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const max = function( value, fieldEl ){\n    let maxVal = fieldEl.max;\n    const dateFormat = fieldEl.getAttribute('data-date-format');\n    \n    if( fieldEl.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat );\n        maxVal = maxVal.split('-').join('');\n    }\n\n    value = value * 1;\n    maxVal = maxVal * 1;\n    \n    return { result: value <= maxVal };\n}\n","\nexport const maxlength = function( value, fieldEl ){\n    return { result: value.length <= fieldEl.maxLength * 1 };\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const min = function( value, fieldEl ){\n    let minVal = fieldEl.min;\n    const dateFormat = fieldEl.getAttribute('data-date-format');\n    \n    if( fieldEl.type === 'date' || fieldEl.getAttribute('data-date-format') ){\n        value = getDateAsNumber( value, dateFormat );\n        minVal = minVal.split('-').join('');\n    }\n\n    value = value * 1;\n    minVal = minVal * 1;\n    \n    return { result: value >= minVal };\n}\n","\nexport const minlength = function( value, fieldEl ){\n    return { result: value.length >= fieldEl.minLength * 1 };\n}\n","\nexport const pattern = function( value, fieldEl ){\n    return { result: new RegExp(fieldEl.pattern).test(value) };\n}\n","\nexport const radio = function( value, fieldEl ){\n    const fieldChecked = fieldEl.closest('form').querySelector( '[name=\"'+ fieldEl.name +'\"]:checked' ),\n          isValid = fieldChecked !== null && fieldChecked.value.trim().length > 0;\n\n    return { result: isValid };\n}\n","\nexport const dataTypeNumber = function( event ){\n\n    const fieldEl = event.target;\n    \n    if( fieldEl.matches('[data-type=\"number\"]') ){\n        let fieldValue = fieldEl.value;\n        const hasInvalidChars = /[^\\d.,+\\-]/.test(fieldValue);\n        \n        if( hasInvalidChars ){\n            event.stopImmediatePropagation();\n            let valueReplaced = fieldValue.replace(/[^\\d.,+\\-]/g, '');\n            fieldEl.value = valueReplaced;\n        }\n    }\n\n}\n","\nexport const keypressMaxlength = function( event ){\n\n    const fieldEl = event.target;\n    \n    if( fieldEl.matches( '[maxlength]' ) ){\n        const maxLength = fieldEl.maxLength * 1,\n              keyPressed = event.which || event.keyCode,\n              allowedKeys = [8, 37, 38, 39, 46];\n\n        if( fieldEl.value.length >= maxLength && allowedKeys.indexOf(keyPressed) === -1 ){\n            return false;\n        }\n    }\n\n}\n","\nexport const pastePrevent = function( event ){\n\n    const fieldEl = event.target;\n    const fieldOptions = fieldEl.closest('form').formjs.options.fieldOptions;\n\n    if( fieldEl.matches( fieldOptions.preventPasteFields ) ){     \n        event.preventDefault();\n    }\n\n}\n","\nimport { addClass, mergeObjects, removeClass, serializeObject } from './helpers';\n\nconst getFetchMethod = (response, options) => {\n    const accept = options.headers.get('Accept'),\n          contentType = response.headers.get('Content-Type'),\n          headerOpt = accept || contentType || '';\n\n    if( headerOpt.indexOf('application/json') > -1 || headerOpt === '' ){\n        return 'json';\n    } else if( headerOpt.indexOf('text/') > -1 ){\n        return 'text';\n    } else {\n        return 'blob';\n    }\n};\n\nexport function ajaxCall( formEl, formDataObj, options ){\n\n    let timeoutTimer;\n    const ajaxOptions = mergeObjects( {}, options.formOptions.ajaxOptions ),\n          isMultipart = ajaxOptions.headers['Content-Type'] === 'multipart/form-data';\n\n    ajaxOptions.body = formDataObj;\n    \n    // POST A FormData OBJECT ( multipart )\n    if( isMultipart && options.fieldOptions.handleFileUpload ){\n        let formDataMultipart = new FormData();\n        \n        for(let key in ajaxOptions.body){\n            formDataMultipart.append( key, ajaxOptions.body[key] );\n        }\n        \n        Array.from( formEl.querySelectorAll('[type=\"file\"]') ).forEach(field => {\n            Array.from(field.files).forEach((file, idx) => {\n                const name = field.name+'['+ idx +']';\n                formDataMultipart.append( name, file, file.name );\n            });\n        });\n        \n        ajaxOptions.body = formDataMultipart;\n    }\n\n    if( ajaxOptions.method === 'GET' ){\n\n        // FETCH WITH \"GET\" METHOD CAN'T HAVE \"body\". SO IT IS APPENDED TO THE URL\n        ajaxOptions.url += ( /\\?/.test(ajaxOptions.url) ? '&' : '?' ) + serializeObject( ajaxOptions.body );\n        delete ajaxOptions.body;\n\n    } else {\n\n        if( ajaxOptions.headers['Content-Type'].indexOf('application/x-www-form-urlencoded') > -1 ){\n            // POST A NORMAL FORM\n            ajaxOptions.body = serializeObject( ajaxOptions.body );\n        } else if( !isMultipart ){\n            // POST A JSON STRING\n            ajaxOptions.body = JSON.stringify(ajaxOptions.body);\n        }\n\n    }\n\n    ajaxOptions.headers = new Headers( ajaxOptions.headers );\n\n    if ( ajaxOptions.timeout > 0 ) {\n        const controller = new AbortController(),\n              signal = controller.signal;\n\n        ajaxOptions.signal = signal;\n        timeoutTimer = window.setTimeout(() => {\n            controller.abort();\n        }, ajaxOptions.timeout);\n    }\n\n    return fetch(ajaxOptions.url, ajaxOptions)\n        .then(response => {\n            if( !response.ok ){\n                return Promise.reject(response);\n            }\n            const fetchMethod = getFetchMethod(response, ajaxOptions);\n            return response[fetchMethod]();\n        })\n        .then(data => {\n            addClass( formEl, options.formOptions.cssClasses.ajaxSuccess );\n            return data;\n        })\n        .catch(error => {\n            addClass( formEl, options.formOptions.cssClasses.ajaxError );\n            return Promise.reject(error);\n        })\n        .finally(() => {\n            if( timeoutTimer ){\n                window.clearTimeout( timeoutTimer );\n            }\n            removeClass( formEl, options.formOptions.cssClasses.submit + ' ' + options.formOptions.cssClasses.ajaxPending );\n            addClass( formEl, options.formOptions.cssClasses.ajaxComplete );\n            formEl.querySelector('[type=\"submit\"]').disabled = false;\n        });\n\n}\n","\nimport { addClass, customEvents, dispatchCustomEvent, removeClass, runFunctionsSequence } from '../helpers';\nimport { ajaxCall } from '../ajaxCall';\n\nexport function submit( event ){\n\n    const formEl = event.target,\n          instance = formEl.formjs,\n          options = instance.options,\n          formCssClasses = options.formOptions.cssClasses,\n          isAjaxForm = options.formOptions.ajaxSubmit,\n          btnEl = formEl.querySelector('[type=\"submit\"]'),\n          eventPreventDefault = ( enableBtn = true ) => {\n              if( btnEl && enableBtn ){ btnEl.disabled = false; }\n              if( event ){ event.preventDefault(); }\n          };\n\n    if( isAjaxForm ){\n        eventPreventDefault(false);\n    }\n\n    if( btnEl ){\n        if( btnEl.disabled ){\n            eventPreventDefault(false);\n            return false;\n        }\n        btnEl.disabled = true;\n    }\n\n    removeClass( formEl, (formCssClasses.ajaxComplete + ' ' + formCssClasses.ajaxError + ' ' + formCssClasses.ajaxSuccess) );\n    addClass( formEl, formCssClasses.submit );\n\n    instance.validateForm()\n        .then(fields => {\n\n            const beforeSendData = {\n                stopExecution: false,\n                formData: isAjaxForm ? instance.getFormData() : null\n            };\n\n            const rfsObject = {\n                  functionsList: options.formOptions.beforeSend,\n                  data: beforeSendData,\n                  stopConditionFn: function(data){ return data.stopExecution; }\n            };\n            return runFunctionsSequence(rfsObject);\n\n        }).then(dataList => {\n\n            if( dataList.filter(data => data.stopExecution).length > 0 ){\n                eventPreventDefault();\n                return false;\n            }\n            \n            if( isAjaxForm ){\n                const formData = dataList.pop().formData;\n                addClass( formEl, formCssClasses.ajaxPending );\n                dispatchCustomEvent( formEl, customEvents.form.submit, { detail: ajaxCall( formEl, formData, options ) } );\n            }\n\n        })\n        .catch(fields => {\n            eventPreventDefault();\n            removeClass( formEl, formCssClasses.submit );\n        });\n    \n}\n","\nimport { fieldsStringSelector, mergeValidateFieldDefault, isFieldForChangeEvent } from '../helpers';\n\nexport const validation = function( event ){\n\n    const isChangeEvent = event.type === 'change',\n          fieldEl = event.target,\n          self = fieldEl.closest('form').formjs;\n\n    if( fieldEl.matches( fieldsStringSelector ) ){\n        const isFieldForChangeEventBoolean = isFieldForChangeEvent(fieldEl);\n        \n        if(\n            (isFieldForChangeEventBoolean && isChangeEvent) ||\n            (!isFieldForChangeEventBoolean && !isChangeEvent)\n        ){\n            \n            return self.validateField( fieldEl )\n                .then(() => {\n                    const type = fieldEl.type,\n                          realtedFieldEqualTo = fieldEl.closest('form').querySelector('[data-equal-to=\"'+ fieldEl.name +'\"]');\n\n                    if(\n                        // FIELD IS ( required OR data-validate-if-filled ) AND RELATED FIELD data-equal-to HAS A VALUE\n                        (fieldEl.required || fieldEl.matches('[data-validate-if-filled]')) && \n                        !(type === 'checkbox' || type === 'radio') && \n                        realtedFieldEqualTo && realtedFieldEqualTo.value.trim() !== ''\n                    ){\n                        self.validateField( realtedFieldEqualTo ).catch(errors => {});\n                    }\n\n                    return mergeValidateFieldDefault({ result: true, fieldEl });\n                })\n                .catch(errors => mergeValidateFieldDefault({fieldEl, errors}));\n\n        }\n    }\n    \n}\n","\nimport { addClass, fieldsStringSelector, removeClass } from '../helpers';\n\nexport const validationEnd = function( event ){\n\n    const fieldsArray = event.detail.fieldEl ? [event.detail] : event.detail.fields,\n          options = fieldsArray[0].fieldEl.closest('form').formjs.options.fieldOptions;\n\n    fieldsArray.forEach(obj => {\n        const fieldEl = obj.fieldEl;\n        if( fieldEl.matches( fieldsStringSelector ) ){\n            const containerEl = fieldEl.closest( options.questionContainer ),\n                isReqFrom = fieldEl.matches('[data-required-from]'),\n                reqMoreEl = document.querySelector( fieldEl.getAttribute('data-required-from') );\n\n            if( containerEl !== null ){\n                removeClass( containerEl, options.cssClasses.pending );\n            }\n\n            if( containerEl !== null && !options.skipUIfeedback ){\n\n                if( obj.result ){\n\n                    if( !isReqFrom || (isReqFrom && reqMoreEl.checked) ){\n                        // IF FIELD IS VALID\n                        const errorClasses = options.cssClasses.error + ' ' + options.cssClasses.errorEmpty + ' ' + options.cssClasses.errorRule;\n                        removeClass( containerEl, errorClasses );\n                        addClass( containerEl, options.cssClasses.valid );\n                    }\n\n                } else {\n\n                    // IF FIELD IS NOT VALID\n                    let extraErrorClass = options.cssClasses.errorRule;\n\n                    // HANDLE CASE OF FIELD data-checks\n                    const isChecks = fieldEl.matches('[data-checks]'),\n                          checkedElLength = (isChecks ? containerEl.querySelectorAll('[name=\"' + fieldEl.name + '\"]:checked').length : 0);\n\n                    if( (!isChecks && (obj.errors && obj.errors.empty)) || (isChecks && checkedElLength === 0) ){\n                        extraErrorClass = options.cssClasses.errorEmpty;\n                    }\n\n                    const errorClasses = options.cssClasses.error + ' ' + extraErrorClass,\n                          errorClassToRemove = options.cssClasses.errorEmpty + ' ' + options.cssClasses.errorRule;\n                    removeClass( containerEl, options.cssClasses.valid + ' ' + errorClassToRemove );\n                    addClass( containerEl, errorClasses );\n\n                }\n            }\n        }\n    });\n\n}\n","\nimport { customEvents } from './helpers';\nimport { keypressMaxlength, dataTypeNumber, pastePrevent, submit, validation, validationEnd } from './listenerCallbacks';\n\nexport function formStartup( formEl, options ){\n\n    formEl.noValidate = true;\n\n    const fieldOptions = options.fieldOptions,\n          formOptions = options.formOptions;\n        \n    // VALIDATION WITH ATTRIBUTES LIKE HTML ONES ( ALSO FOR BUG FIXING, EG: maxlength IN ANDROID )\n    if( fieldOptions.strictHtmlValidation ){\n        \n        // maxlength\n        // MAXLENGTH IS BUGGY IN ANDROID BROWSERS\n        formEl.addEventListener('keypress', keypressMaxlength, false);\n\n        // data-type=\"number\"\n        // SINCE VALIDATING type=\"number\" WITH NON NUMERIC CHARS WILL RETURN EMPTY STRING IN SOME BROWSERS ( EG: FIREFOX )\n        formEl.addEventListener('input', dataTypeNumber, false);\n        \n    }\n    \n    if( fieldOptions.preventPasteFields && formEl.querySelectorAll( fieldOptions.preventPasteFields ).length ){\n        // INIT EVENT LISTENER FOR \"PASTE\" EVENT TO PREVENT IT ON SPECIFIED FIELDS\n        formEl.addEventListener('paste', pastePrevent, false);\n    }\n\n    // INIT EVENTS LISTENER ( AS IN fieldOptions )\n    fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n        const useCapturing = eventName === 'blur' ? true : false;\n        formEl.addEventListener(eventName, validation, useCapturing);\n    });\n\n    formEl.addEventListener(customEvents.field.validation, validationEnd, false);\n    \n    // HANDLE FORM SUBMIT\n    if( formOptions.handleSubmit ){\n        // INIT FORM SUBMIT ( DEFAULT AND AJAX )\n        formEl.addEventListener('submit', submit);\n\n        if( formOptions.ajaxSubmit ){\n            if( formEl.getAttribute('enctype') ){\n                formOptions.ajaxOptions.headers['Content-Type'] = formEl.getAttribute('enctype');\n            }\n\n            if( formEl.getAttribute('method') ){\n                formOptions.ajaxOptions.method = formEl.getAttribute('method').toUpperCase();\n            }\n\n            if( formEl.getAttribute('action') ){\n                formOptions.ajaxOptions.url = formEl.getAttribute('action');\n            }\n        }\n    }\n\n}\n","\nimport { getFilledFields, isFieldForChangeEvent } from './helpers';\nimport { validation } from './listenerCallbacks';\n\nexport const checkFilledFields = formEl => {\n\n    const formFields = getFilledFields( formEl );\n    // VALIDATE ALL FILLED FIELDS\n    return Promise.all( formFields.map(fieldEl => {\n\n        const isFieldForChangeEventBoolean = isFieldForChangeEvent(fieldEl);\n        const fakeEventObj = { target: fieldEl, type: (isFieldForChangeEventBoolean ? 'change': '') };\n        return validation( fakeEventObj );\n\n    }) )\n    .then(fields => fields)\n    .catch(fields => fields);\n\n}\n","\nimport { fieldsStringSelector } from './fieldsStringSelector';\nimport { getUniqueFields } from './getUniqueFields';\n\nexport const getFilledFields = formEl => {\n    return getUniqueFields( formEl.querySelectorAll(fieldsStringSelector) )\n    .map(fieldEl => {\n\n        const name = fieldEl.name,\n              type = fieldEl.type,\n              isCheckboxOrRadio = (type === 'checkbox' || type === 'radio'),\n              fieldChecked = formEl.querySelector('[name=\"' + name + '\"]:checked'),\n              isReqFrom = fieldEl.matches('[data-required-from]'),\n              reqMoreEl = (isReqFrom ? formEl.querySelector(fieldEl.getAttribute('data-required-from')) : null);\n\n        return (\n            isCheckboxOrRadio ? (fieldChecked || null) :\n            (isReqFrom && reqMoreEl.checked) || (!isReqFrom && fieldEl.value) ? fieldEl : null\n        );\n\n    })\n    .filter(fieldEl => fieldEl !== null);\n}\n","\nimport { mergeValidateFieldDefault, isDOMNode, runFunctionsSequence } from './helpers';\nimport { isValid } from './isValid';\n\nexport function checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    if( !isDOMNode(fieldEl) ){\n        const obj = mergeValidateFieldDefault({fieldEl});\n        return Promise.resolve(obj);\n    }\n\n    const formEl = fieldEl.closest('form'),\n          isValidValue = fieldEl.value.trim().length > 0;\n\n    // HANDLE FIELD data-required-from WHEN CHANGING ITS RELATED RADIO\n    if( fieldEl.type === 'radio' ){\n        const checkedEl = fieldEl.checked ? fieldEl : formEl.querySelector('[name=\"'+ fieldEl.name +'\"]:checked'),\n              reqMoreIsChecked = checkedEl && checkedEl.matches('[data-require-more]'),\n              findReqMoreEl = reqMoreIsChecked ? checkedEl : formEl.querySelector('[data-require-more][name=\"'+ fieldEl.name +'\"]'),\n              findReqFromEl = findReqMoreEl ? formEl.querySelector('[data-required-from=\"#'+ findReqMoreEl.id +'\"]') : null;\n        \n        if( checkedEl && findReqFromEl ){\n            findReqFromEl.required = findReqMoreEl.required && findReqMoreEl.checked;\n            if( !reqMoreIsChecked ){\n                findReqFromEl.value = '';\n            } else if( fieldOptions.focusOnRelated ) {\n                findReqFromEl.focus();\n            }\n        }\n    }\n\n    // HANDLE FIELD data-require-more & data-required-from WHEN *-from IT'S FILLED\n    if( fieldEl.matches('[data-required-from]') && isValidValue ){\n        const reqMoreEl = formEl.querySelector( fieldEl.getAttribute('data-required-from') );\n        reqMoreEl.checked = true;\n        fieldEl.required = reqMoreEl.required;\n    }\n\n    const needsValidation = fieldEl.required || (fieldEl.matches('[data-validate-if-filled]') && isValidValue);\n\n    return runFunctionsSequence({\n            functionsList: fieldOptions.beforeValidation,\n            data: {fieldEl}\n        })\n        .then(data => {\n            const dataObj = data.pop();\n            return new Promise(resolve => {\n                if( !needsValidation ){\n                    dataObj.result = true;\n                }\n                resolve( needsValidation ? isValid(fieldEl, validationRules, validationErrors) : dataObj );\n            });\n        });\n\n}\n","\nimport { mergeValidateFieldDefault, mergeObjects, toCamelCase } from './helpers';\n\nexport function isValid( fieldEl, validationRules, validationErrors ){\n\n    const fieldValue = fieldEl.value,\n          obj = mergeValidateFieldDefault({result: fieldValue.trim().length > 0, fieldEl}),\n          isRadioOrCheckbox = /^(radio|checkbox)$/.test(fieldEl.type),\n          hasSelectedInput = fieldEl.closest('form').querySelectorAll('[name=\"'+ fieldEl.name +'\"]:checked').length > 0;\n\n    if( (!isRadioOrCheckbox && !obj.result) || (isRadioOrCheckbox && !hasSelectedInput) ){\n        obj.result = false;\n        obj.errors = { empty: true };\n        return Promise.resolve(obj);\n    }\n\n    // COLLECT VALIDATION METHOD NAMES ( USED TO RUN VALIDATIONS AND GET ERRORS )\n    const validationMethods = Array.from(fieldEl.attributes).reduce((accList, attr) => {\n        const attrName = toCamelCase( attr.name.replace('data-', '') ),\n              attrValue = toCamelCase( attr.value ),\n              isAttrValueWithFn = (attrName === 'type' || attrName === 'subtype') && validationRules[attrValue],\n              isAttrNameWithFn = validationRules[attrName];\n\n        if( isAttrValueWithFn || isAttrNameWithFn ){\n            accList.push( isAttrValueWithFn ? attrValue : attrName );\n        }\n        return accList;\n    }, []);\n\n    return new Promise(resolve => {\n\n        // RUN VALIDATIONS\n        const validationsResult = validationMethods.reduce((accPromise, methodName) => {\n            return accPromise.then(accObj => {\n                return new Promise(resolveVal => {\n                    // RUN VALIDATION INSIDE A PROMISE IS USEFUL FOR ASYNC VALIDATIONS\n                    resolveVal( validationRules[methodName](fieldValue, fieldEl) );\n                }).then(valObj => {\n                    // ADD CUSTOM ERROR-KEY FOR EACH VALIDATION RULE\n                    if( !valObj.result ){\n                        const errorObj = {};\n                        if( typeof valObj.errors === 'undefined' || typeof valObj.errors[methodName] === 'undefined' ){\n                            errorObj[methodName] = true;\n                        }\n                        valObj.errors = mergeObjects({}, valObj.errors, errorObj);\n                    }\n                    valObj = valObj.result ? {} : valObj;\n                    return mergeObjects(accObj, valObj);\n                });\n            });\n        }, Promise.resolve(obj));\n        resolve(validationsResult);\n\n    }).then(data => {\n\n        // GET ERRORS\n        if( !data.result ){\n            data.errors = validationMethods.reduce((accObj, methodName) => {\n                const errors = (validationErrors[methodName] && validationErrors[methodName](fieldValue, fieldEl)) || {};\n                return mergeObjects(accObj, errors);\n            }, data.errors);\n        }\n        return data;\n\n    });\n\n}\n","\nimport { fieldsStringSelector, getUniqueFields, mergeValidateFieldDefault, mergeValidateFormDefault, mergeObjects } from './helpers';\nimport { checkFieldValidity } from './checkFieldValidity';\n\nexport function checkFormValidity( formEl, fieldOptions, validationRules, validationErrors, fieldToSkip = null ){\n\n    fieldOptions = mergeObjects( {}, fieldOptions, {focusOnRelated: false} );\n    const fieldsList = getUniqueFields( formEl.querySelectorAll(fieldsStringSelector) );\n\n    return Promise.all( fieldsList.map(fieldEl => {\n\n        if( fieldToSkip && fieldEl === fieldToSkip ){\n            const obj = mergeValidateFieldDefault({fieldEl, result: true});\n            return Promise.resolve(obj);\n        }\n        return checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors );\n\n    }) ).then(fields => {\n\n        const areAllFieldsValid = fields.filter(fieldObj => !fieldObj.result).length === 0;\n        return mergeValidateFormDefault({result: areAllFieldsValid, fields});\n\n    });\n\n}\n","\nimport { version }              from './modules/version';\nimport { checkFormEl, customEvents, dispatchCustomEvent, excludeSelector, finalizeFieldPromise, finalizeFormPromise, isNodeList, mergeObjects, removeClass } from './modules/helpers';\nimport { options }              from './modules/options';\nimport { validationRules }      from './modules/validationRules';\nimport { validationEnd }        from './modules/listenerCallbacks';\nimport { formStartup }          from './modules/formStartup';\nimport { destroy }              from './modules/destroy';\nimport { checkFilledFields }    from './modules/checkFilledFields';\nimport { checkFieldValidity }   from './modules/checkFieldValidity';\nimport { checkFormValidity }    from './modules/checkFormValidity';\n\nclass Form {\n\n    constructor( formEl, optionsObj ){\n        const argsL = arguments.length,\n              checkFormElem = checkFormEl(formEl);\n\n        if( argsL === 0 || (argsL > 0 && !formEl) ){\n            throw new Error('First argument \"formEl\" is missing or falsy!');\n        }\n        if( isNodeList(formEl) ){\n            throw new Error('First argument \"formEl\" must be a single DOM node or a form CSS selector, not a NodeList!');\n        }\n        if( !checkFormElem.result ){\n            throw new Error('First argument \"formEl\" is not a DOM node nor a form CSS selector!');\n        }\n\n        const self = this;\n\n        self.formEl = checkFormElem.element;\n        self.formEl.formjs = self;\n        self.options = mergeObjects({}, Form.prototype.options, optionsObj);\n\n        // BINDING CONTEXT FOR FUTURE EXECUTION\n        const cbList = [\n            // IN fieldOptions\n            'beforeValidation',\n            // IN formOptions\n            'beforeSend',\n            'getFormData'\n        ];\n        cbList.forEach(cbName => {\n            const optionType = self.options.formOptions[cbName] ? 'formOptions' : 'fieldOptions';\n            let cbOpt = self.options[optionType][cbName];\n\n            if( cbOpt ){\n                self.options[optionType][cbName] = ( Array.isArray(cbOpt) ? cbOpt.map(cbFn => cbFn.bind(self)) : cbOpt.bind(self) );\n            }\n        });\n\n        formStartup( self.formEl, self.options );\n    }\n\n    destroy(){\n        destroy(this.formEl, this.options);\n    }\n    \n    getFormData(){\n        const formFieldsEl = this.formEl.querySelectorAll('input, select, textarea'),\n              filteredFields = Array.from( formFieldsEl ).filter( elem => elem.matches(excludeSelector) );\n        return this.options.formOptions.getFormData(filteredFields);\n    }\n\n    validateField( fieldEl, fieldOptions ){\n        const self = this;\n        fieldEl = typeof fieldEl === 'string' ? this.formEl.querySelector(fieldEl) : fieldEl;\n        fieldOptions = mergeObjects({}, this.options.fieldOptions, fieldOptions);\n        const formEl = this.formEl;\n        return checkFieldValidity(fieldEl, fieldOptions, this.validationRules, this.validationErrors)\n            .then(obj => {\n                return new Promise(resolve => {\n                    dispatchCustomEvent( obj.fieldEl, customEvents.field.validation, { bubbles: false, detail: obj } );\n                    dispatchCustomEvent( formEl, customEvents.field.validation, { detail: obj } );\n                    if( obj.result && fieldOptions.onValidationCheckAll ){\n                        // FORCE skipUIfeedback TO BE TEMPORARY true\n                        fieldOptions.skipUIfeedback = true;\n                        checkFormValidity( formEl, fieldOptions, self.validationRules, self.validationErrors, obj.fieldEl )\n                            .then(dataForm => {\n                                const clMethodName = dataForm.result ? 'add' : 'remove';\n                                formEl.classList[clMethodName]( self.options.formOptions.cssClasses.valid );\n                                dispatchCustomEvent( formEl, customEvents.form.validation, { detail: dataForm } );\n                            });\n                    } else if( !obj.result ){\n                        removeClass( formEl, self.options.formOptions.cssClasses.valid );\n                    }\n                    return obj;\n                });\n            })\n            .then(finalizeFieldPromise);\n    }\n\n    validateFilledFields(){\n        return checkFilledFields(this.formEl);\n    }\n\n    validateForm( fieldOptions ){\n        const self = this;\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions);\n        const formEl = self.formEl;\n        return checkFormValidity(formEl, fieldOptions, self.validationRules, self.validationErrors)\n            .then(data => {\n                const clMethodName = data.result ? 'add' : 'remove';\n                formEl.classList[clMethodName]( self.options.formOptions.cssClasses.valid );\n                validationEnd( {detail:data} );\n                dispatchCustomEvent( formEl, customEvents.form.validation, { detail: data } );\n                return data;\n            })\n            .then(finalizeFormPromise);\n    }\n    \n    static addValidationErrors( errorsObj ){\n        Form.prototype.validationErrors = mergeObjects({}, Form.prototype.validationErrors, errorsObj);\n    }\n\n    static addValidationRules( rulesObj ){\n        Form.prototype.validationRules = mergeObjects({}, Form.prototype.validationRules, rulesObj);\n    }\n    \n    static setOptions( optionsObj ){\n        Form.prototype.options = mergeObjects({}, Form.prototype.options, optionsObj);\n    }\n\n}\n\nForm.prototype.options = options;\nForm.prototype.validationErrors = {};\nForm.prototype.validationRules = validationRules;\nForm.prototype.version = version;\n\nexport default Form;\n","\nimport { customEvents } from './helpers';\nimport { keypressMaxlength, dataTypeNumber, pastePrevent, submit, validation, validationEnd } from './listenerCallbacks';\n\n\nexport function destroy( formEl, options ){\n\n    if( options.fieldOptions.strictHtmlValidation ){\n        formEl.removeEventListener('keypress', keypressMaxlength, false);\n        formEl.removeEventListener('input', dataTypeNumber, false);\n    }\n\n    if( options.fieldOptions.preventPasteFields ){\n        formEl.removeEventListener('paste', pastePrevent, false);\n    }\n\n    if( options.formOptions.handleSubmit ){\n        formEl.removeEventListener('submit', submit);\n    }\n\n    options.fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n        const useCapturing = eventName === 'blur' ? true : false;\n        formEl.removeEventListener(eventName, validation, useCapturing);\n    });\n\n    formEl.removeEventListener(customEvents.field.validation, validationEnd, false);\n\n    delete formEl.formjs;\n    \n}\n","\nexport const excludeSelector = ':not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"file\"]):not([data-exclude-data])'\n"],"names":["addClass","element","cssClasses","split","forEach","className","classList","add","isNodeList","nodeList","NodeList","prototype","isPrototypeOf","removeClass","remove","isDOMNode","node","Element","checkFormEl","formEl","isString","isFormSelector","document","querySelector","tagName","toLowerCase","result","customEvents","validation","submit","isPlainObject","object","Object","toString","call","mergeObjects","out","Array","from","arguments","slice","filter","arg","keys","key","isArray","concat","push","dispatchCustomEvent","elem","eventName","eventOptions","bubbles","eventObj","CustomEvent","dispatchEvent","fieldsStringSelector","finalizeFieldPromise","obj","Promise","resolve","reject","errors","finalizeFormPromise","fields","formatMap","dateArray","reverse","getDateAsNumber","dateString","dateFormat","separator","splitChar","match","length","indexOf","replace","join","getUniqueFields","currentFieldName","currentFieldType","fieldEl","name","type","matches","mergeValidateFieldDefault","mergeValidateFormDefault","isFieldForChangeEvent","runFunctionsSequence","functionsList","data","stopConditionFn","reduce","acc","promiseFn","then","res","dataNew","dataList","serializeObject","_typeof","constructor","a","k","encodeURIComponent","toCamelCase","string","all","letter","toUpperCase","defaultCallbacksInOptions","fieldOptions","beforeValidation","fieldObj","this","options","containerEl","closest","questionContainer","value","dirty","checkDirtyField","skipUIfeedback","pending","formOptions","getFormData","filteredFields","formData","isCheckbox","isRadio","isSelect","checked","checkboxes","querySelectorAll","field","checkedRadio","selectedOpts","option","selected","error","errorEmpty","errorRule","valid","focusOnRelated","handleFileUpload","onValidationCheckAll","preventPasteFields","strictHtmlValidation","validateOnEvents","ajaxOptions","cache","credentials","headers","method","mode","redirect","timeout","url","location","href","ajaxSubmit","beforeSend","ajaxComplete","ajaxError","ajaxPending","ajaxSuccess","handleSubmit","validationRules","date","test","email","number","checkbox","dataChecksEl","attrValue","JSON","parse","getAttribute","checkedElLength","isMinOk","isMaxOk","checks","minChecks","maxChecks","equalTo","exactLength","valueLength","minlength","maxlength","file","maxFileSize","MIMEtype","accept","RegExp","filesList","files","exceedMaxFileSize","size","isAcceptedFileType","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","max","maxVal","maxLength","min","minVal","minLength","pattern","radio","fieldChecked","trim","dataTypeNumber","event","target","fieldValue","stopImmediatePropagation","valueReplaced","keypressMaxlength","keyPressed","which","keyCode","pastePrevent","formjs","preventDefault","ajaxCall","formDataObj","timeoutTimer","isMultipart","body","formDataMultipart","FormData","append","idx","stringify","Headers","controller","AbortController","signal","window","setTimeout","abort","fetch","response","ok","fetchMethod","get","contentType","headerOpt","getFetchMethod","clearTimeout","disabled","instance","formCssClasses","isAjaxForm","btnEl","eventPreventDefault","enableBtn","validateForm","beforeSendData","stopExecution","rfsObject","pop","detail","isChangeEvent","self","isFieldForChangeEventBoolean","validateField","realtedFieldEqualTo","required","validationEnd","fieldsArray","isReqFrom","reqMoreEl","errorClasses","extraErrorClass","isChecks","empty","errorClassToRemove","formStartup","noValidate","addEventListener","useCapturing","checkFilledFields","formFields","map","isCheckboxOrRadio","getFilledFields","checkFieldValidity","validationErrors","isValidValue","checkedEl","reqMoreIsChecked","findReqMoreEl","findReqFromEl","id","focus","needsValidation","dataObj","isRadioOrCheckbox","hasSelectedInput","validationMethods","attributes","accList","attr","attrName","isAttrValueWithFn","isAttrNameWithFn","accPromise","methodName","accObj","resolveVal","valObj","errorObj","isValid","checkFormValidity","fieldToSkip","fieldsList","areAllFieldsValid","Form","optionsObj","argsL","checkFormElem","Error","cbList","cbName","optionType","cbOpt","cbFn","bind","errorsObj","rulesObj","removeEventListener","destroy","formFieldsEl","dataForm","clMethodName","version"],"mappings":"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"}