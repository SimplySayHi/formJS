{"version":3,"file":"formjs-systemjs.min.js","sources":["../src/modules/helpers/addClass.js","../src/modules/helpers/isNodeList.js","../src/modules/helpers/removeClass.js","../src/modules/helpers/isDOMNode.js","../src/modules/helpers/customEvents.js","../src/modules/helpers/isPlainObject.js","../src/modules/helpers/mergeObjects.js","../src/modules/helpers/dispatchCustomEvent.js","../src/modules/helpers/fieldsStringSelector.js","../src/modules/helpers/finalizeFormPromise.js","../src/modules/helpers/getDateAsNumber.js","../src/modules/helpers/getSplitChar.js","../src/modules/helpers/getJSONobjectFromFieldAttribute.js","../src/modules/helpers/getUniqueFields.js","../src/modules/helpers/mergeValidateFieldDefault.js","../src/modules/helpers/mergeValidateFormDefault.js","../src/modules/helpers/isFieldForChangeEvent.js","../src/modules/helpers/runFunctionsSequence.js","../src/modules/helpers/serializeObject.js","../src/modules/helpers/toCamelCase.js","../src/modules/options.js","../src/modules/optionsUtils/beforeValidation.js","../src/modules/helpers/checkDirtyField.js","../src/modules/optionsUtils/getFormData.js","../src/modules/validationRules.js","../src/modules/validationRules/date.js","../src/modules/validationRules/email.js","../src/modules/validationRules/number.js","../src/modules/validationRules/checkbox.js","../src/modules/validationRules/checks.js","../src/modules/validationRules/equalTo.js","../src/modules/validationRules/exactLength.js","../src/modules/validationRules/file.js","../src/modules/validationRules/length.js","../src/modules/validationRules/max.js","../src/modules/validationRules/maxlength.js","../src/modules/validationRules/min.js","../src/modules/validationRules/minlength.js","../src/modules/validationRules/pattern.js","../src/modules/validationRules/radio.js","../src/modules/listenerCallbacks/dataTypeNumber.js","../src/modules/listenerCallbacks/formValidationEnd.js","../src/modules/listenerCallbacks/keypressMaxlength.js","../src/modules/listenerCallbacks/pastePrevent.js","../src/modules/ajaxCall.js","../src/modules/listenerCallbacks/submit.js","../src/modules/listenerCallbacks/groupValidationEnd.js","../src/modules/listenerCallbacks/validation.js","../src/modules/listenerCallbacks/validationEnd.js","../src/modules/checkFieldValidity.js","../src/modules/isValid.js","../src/modules/checkFieldsValidity.js","../src/index.js","../src/modules/helpers/checkFormEl.js","../src/modules/formStartup.js","../src/modules/destroy.js","../src/modules/helpers/excludeSelector.js","../src/modules/helpers/finalizeFieldPromise.js","../src/modules/helpers/finalizeFieldsGroupPromise.js","../src/modules/helpers/getFilledFields.js"],"sourcesContent":["\nexport const addClass = ( element, cssClasses ) => {\n    element.classList.add( ...cssClasses.split(' ') )\n}\n","\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList )\n}\n","\nexport const removeClass = ( element, cssClasses ) => {\n    element.classList.remove( ...cssClasses.split(' ') )\n}\n","\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node )\n}\n","\nexport const customEvents = {\n    field: {\n        validation: 'fjs.field:validation'\n    },\n    form: {\n        destroy:    'fjs.form:destroy',\n        init:       'fjs.form:init',\n        submit:     'fjs.form:submit',\n        validation: 'fjs.form:validation'\n    },\n    group: {\n        validation: 'fjs.group:validation'\n    }\n}\n","\nexport const isPlainObject = object => {\n    return Object.prototype.toString.call( object ) === '[object Object]'\n}\n","\nimport { isPlainObject } from './isPlainObject'\n\nexport const mergeObjects = function( out = {} ){\n    Array.from(arguments).slice(1).filter(arg => !!arg).forEach(arg => {\n        Object.keys(arg).forEach(key => {\n            if( Array.isArray(arg[key]) ){\n                out[key] = (out[key] || []).concat( arg[key].slice(0) )\n            } else if( isPlainObject(arg[key]) ){\n                out[key] = mergeObjects((out[key] || {}), arg[key])\n            } else {\n                // * STRING | NUMBER | BOOLEAN | FUNCTION\n                if( Array.isArray(out[key]) ){\n                    // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                    out[key].push(arg[key])\n                } else {\n                    out[key] = arg[key]\n                }\n            }\n        })\n    })\n\n    return out\n}\n","\nimport { mergeObjects } from './mergeObjects'\n\nexport const dispatchCustomEvent = ( elem, eventName, eventOptions ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions)\n    const eventObj = new CustomEvent(eventName, eventOptions)\n    elem.dispatchEvent( eventObj )\n}\n","\nexport const fieldsStringSelector = 'input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"hidden\"]), select, textarea'\n","\nexport const finalizeFormPromise = ({fields, result}) => {\n    if( result ){\n        return Promise.resolve(fields)\n    }\n    return Promise.reject(fields)\n}\n","\nimport { getSplitChar } from './getSplitChar'\n\nconst formatMap = {\n    'YYYY-MM-DD': function(dateArray){\n        return dateArray\n    },\n    'MM-DD-YYYY': function(dateArray){\n        return [dateArray[2], dateArray[0], dateArray[1]]\n    },\n    'DD-MM-YYYY': function(dateArray){\n        return dateArray.reverse()\n    }\n}\n\nexport const getDateAsNumber = ( dateString, dateFormat ) => {\n    dateFormat = dateFormat || 'YYYY-MM-DD'\n    const splitChar = getSplitChar(dateString)\n\n    if( dateFormat.indexOf(splitChar) < 0 ){\n        return\n    }\n\n    dateFormat = dateFormat.replace(/[^YMD]/g, '-')\n    dateString = dateString.split(splitChar)\n    dateString = formatMap[dateFormat](dateString).join('')\n    \n    return dateString\n}\n","\nexport const getSplitChar = string => {\n    // MATCH ANY NON-DIGIT CHAR\n    const separator = string.match(/\\D/)\n    return (separator && separator.length > 0) ? separator[0] : null\n}\n","\nexport const getJSONobjectFromFieldAttribute = ( $field, attrName ) => {\n    const $customAttr = $field.closest(`[${attrName}]`)\n    return ($customAttr && JSON.parse($customAttr.getAttribute(attrName))) || {}\n}\n","\nexport const getUniqueFields = $nodeList => {\n\n    let currentFieldName = ''\n    let currentFieldType = ''\n\n    return Array.from( $nodeList ).filter($field => {\n        const name = $field.name\n        const type = $field.type\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false\n        }\n        \n        if( !$field.matches('[data-required-from]') ){\n            currentFieldName = name\n            currentFieldType = type\n        }\n        \n        return true\n    })\n    \n}\n","\nimport { mergeObjects } from './mergeObjects'\n\nexport const mergeValidateFieldDefault = obj => {\n    return mergeObjects({}, { result: false, $field: null }, obj)\n}\n","\nimport { mergeObjects } from './mergeObjects'\n\nexport const mergeValidateFormDefault = obj => {\n    return mergeObjects({}, { result: true, fields: [] }, obj)\n}\n","\nexport const isFieldForChangeEvent = $field => {\n    return $field.matches('select, [type=\"radio\"], [type=\"checkbox\"], [type=\"file\"]')\n}\n","\nimport { mergeObjects } from './mergeObjects'\n\nexport const runFunctionsSequence = ( { functionsList = [], data = {}, stopConditionFn = () => false } = {} ) => {\n    return functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1])\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res)\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result)\n                    return res\n                })\n        })\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList)\n}\n","\nexport const serializeObject = obj => {\n    const objToString = (\n            (obj && typeof obj === 'object' && obj.constructor === Object) ? \n            Object.keys(obj)\n                .reduce((a,k) => {\n                    a.push(k+'='+encodeURIComponent(obj[k]))\n                    return a\n                },[]).join('&') : \n            obj\n    )\n    return objToString\n}\n","\nexport const toCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase() })\n}\n","\nimport { beforeValidation } from './optionsUtils/beforeValidation'\nimport { getFormData } from './optionsUtils/getFormData'\n\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [beforeValidation],\n        cssClasses: {\n            dirty:              'is-dirty',\n            error:              'has-error',\n            errorEmpty:         'has-error-empty',\n            errorRule:          'has-error-rule',\n            pending:            'is-pending',\n            valid:              'is-valid'\n        },\n        focusOnRelated:         true,\n        maxFileSize:            10,\n        onValidationCheckAll:   false,\n        preventPasteFields:     '[type=\"password\"], [data-equal-to]',\n        questionContainer:      '[data-formjs-question]',\n        skipUIfeedback:         false,\n        strictHtmlValidation:   true,\n        trimValue:              false,\n        validateOnEvents:       'input change'\n    },\n\n    formOptions: {\n        ajaxOptions:            {\n            cache:              'no-store',\n            credentials:        'same-origin',\n            headers: {\n                                'Content-Type': 'application/json',\n                                'Accept':       'application/json'\n            },\n            method:             'POST',\n            mode:               'same-origin',\n            redirect:           'follow',\n            timeout:            0,\n            url:                location.href\n        },\n        ajaxSubmit:             true,\n        beforeSend:             [],\n        cssClasses: {\n            ajaxComplete:       'ajax-complete',\n            ajaxError:          'ajax-error',\n            ajaxPending:        'ajax-pending',\n            ajaxSuccess:        'ajax-success',\n            submit:             'is-submitting',\n            valid:              'is-valid'\n        },\n        getFormData:            getFormData,\n        groups:                 [],\n        handleFileUpload:       true,\n        handleSubmit:           true,\n        onInitCheckFilled:      true\n    }\n    \n}\n","\nimport { addClass, checkDirtyField, isFieldForChangeEvent } from '../helpers'\n\nexport const beforeValidation = function beforeValidationDefault ( { $field, fieldOptions } ) {\n\n    if( fieldOptions.trimValue && !isFieldForChangeEvent($field) ){\n        $field.value = $field.value.trim()\n    }\n\n    checkDirtyField( $field, fieldOptions )\n\n    if( !fieldOptions.skipUIfeedback ){\n        addClass( $field.closest( fieldOptions.questionContainer ), fieldOptions.cssClasses.pending )\n    }\n\n}\n","\nimport { addClass } from './addClass'\nimport { isNodeList } from './isNodeList'\nimport { removeClass } from './removeClass'\n\nexport const checkDirtyField = ( $fields, fieldOptions ) => {\n\n    $fields = isNodeList($fields) ? Array.from( $fields ) : [$fields]\n\n    $fields.forEach($field => {\n        const isNotCheckboxOrRadio = !['checkbox', 'radio'].includes($field.type)\n        if( isNotCheckboxOrRadio ){\n            const $container = $field.closest( fieldOptions.questionContainer ) || $field\n            if( $field.value ){\n                addClass( $container, fieldOptions.cssClasses.dirty )\n            } else {\n                removeClass( $container, fieldOptions.cssClasses.dirty )\n            }\n        }\n    })\n    \n}\n","\nexport const getFormData = function getFormDataDefault( $filteredFields, trimValues ){\n\n    const formData = {}\n    const $form = this.$form\n    let prevObj = formData\n  \n    $filteredFields.forEach($field => {\n        const isCheckbox = $field.type === 'checkbox'\n        const isRadio = $field.type === 'radio'\n        const isSelect = $field.matches('select')\n        const name = $field.name\n        let value = trimValues ? $field.value.trim() : $field.value\n  \n        if( isCheckbox ){\n\n            value = $field.checked\n            let $checkboxes = Array.from( $form.querySelectorAll(`[name=\"${name}\"]`) )\n            if( $checkboxes.length > 1 ){\n                value = []\n                let $checked = $checkboxes.filter((field) => field.checked)\n                $checked.forEach($field => {\n                    value.push($field.value)\n                })\n            }\n\n        } else if( isRadio ){\n\n            const $checkedRadio = $form.querySelector(`[name=\"${name}\"]:checked`)\n            value = $checkedRadio === null ? null : $checkedRadio.value\n\n        } else if( isSelect ){\n\n            const $selectedOpts = Array.from($field.options).filter(option => option.selected)\n            if( $selectedOpts.length > 1 ){\n                value = []\n                $selectedOpts.forEach($field => { \n                    value.push($field.value)\n                })\n            }\n        }\n  \n        const nameSplit = name.split('.')\n        nameSplit.forEach((keyName, index, list) => {\n            const isLastKeyName = index + 1 === list.length\n  \n            if( Array.isArray(prevObj) ){\n                const keyNameSplit = keyName.split('___')\n                const arrPos = keyNameSplit[0] - 1\n                const arrayHasItemAtIndex = typeof prevObj[arrPos] !== 'undefined'\n                const arrItemKeyName = keyNameSplit[1]\n  \n                if( !arrayHasItemAtIndex ){\n                    prevObj.push({})\n                }\n  \n                keyName = arrItemKeyName\n\n                if( isLastKeyName ){\n                    prevObj[arrPos][keyName] = value\n                } else if( typeof prevObj[arrPos][keyName] === 'undefined' ) {\n                    prevObj[arrPos][keyName] = {}\n                }\n                \n                if( !isLastKeyName ){\n                    prevObj = prevObj[arrPos][keyName]\n                    return\n                }\n            } else {\n                const isKeyNameArray = keyName.endsWith('[]')\n                keyName = keyName.replace('[]', '')\n  \n                if( isLastKeyName ){\n                    prevObj[keyName] = value\n                } else if( typeof prevObj[keyName] === 'undefined' ){\n                    if( isKeyNameArray ){\n                        prevObj[keyName] = []\n                    } else {\n                        prevObj[keyName] = {}\n                    }\n                }\n            }\n  \n            prevObj = isLastKeyName ? formData : prevObj[keyName]\n        })\n    })\n  \n    return formData\n\n}\n","\nimport { date }         from './validationRules/date'\nimport { email }        from './validationRules/email'\nimport { number }       from './validationRules/number'\n\nimport { checkbox }     from './validationRules/checkbox'\nimport { equalTo }      from './validationRules/equalTo'\nimport { exactLength }  from './validationRules/exactLength'\nimport { file }         from './validationRules/file'\nimport { length }       from './validationRules/length'\nimport { max }          from './validationRules/max'\nimport { maxlength }    from './validationRules/maxlength'\nimport { min }          from './validationRules/min'\nimport { minlength }    from './validationRules/minlength'\nimport { pattern }      from './validationRules/pattern'\nimport { radio }        from './validationRules/radio'\n\nexport const validationRules = {\n    date,\n    email,\n    number,\n\n    checkbox,\n    equalTo,\n    exactLength,\n    file,\n    length,\n    max,\n    maxlength,\n    min,\n    minlength,\n    pattern,\n    radio\n}\n","\n/*\n    DATE AS ISO 8601 DATE FORMAT:\n    YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n*/\n\nexport const date = function( string ){\n    return {\n        result: /^((((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13578]|1[02])[ \\/\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13456789]|1[012])[ \\/\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.]02[ \\/\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ \\/\\-.]02[ \\/\\-.]29))$/g.test( string )\n    }\n}\n","\n// https://regex101.com/r/cdlyJy/3\n\nexport const email = function( string ){\n    return {\n        result: /^[a-zA-Z_-]([\\w.-]?[a-zA-Z0-9])*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?){2,})+$/.test( string )\n    }\n}\n","\n/*\n    ALL NUMBERS ( INTEGERS AND FLOATING )\n    VALID NUMBERS: 123 | 123.456 | .123\n*/\n\nexport const number = function( string ){\n    return {\n        result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n    }\n}","\nimport { checks } from './checks'\n\nexport const checkbox = function( value, $field ){\n    const $dataChecks = $field.form.querySelector(`[name=\"${$field.name}\"][data-checks]`)\n    return $dataChecks ? checks($dataChecks) : { result: $field.checked }\n}\n","\nexport const checks = function( $field ){\n    const attrValue = JSON.parse( $field.dataset.checks )\n    const checkedLength = $field.form.querySelectorAll(`[name=\"${$field.name}\"]:checked`).length\n    const isMinOk = checkedLength >= attrValue[0]\n    const isMaxOk = checkedLength <= attrValue[1]\n    const obj = { result: isMinOk && isMaxOk }\n\n    if( !obj.result ){\n        obj.errors = { checks: true }\n        if( !isMinOk ){ obj.errors.minChecks = true }\n        if( !isMaxOk ){ obj.errors.maxChecks = true }\n    }\n\n    return obj\n}\n","\nexport const equalTo = function( value, $field ){\n    const $checkFrom = $field.form.querySelector( `[name=\"${$field.dataset.equalTo}\"]` )\n    return { result: value === $checkFrom.value }\n}\n","\nexport const exactLength = function( value, $field ){\n    const valueLength = value.length\n    const exactLength = $field.dataset.exactLength * 1\n    const obj = { result: valueLength === exactLength }\n\n    if( !obj.result ){\n        obj.errors = {}\n        if( valueLength < exactLength ){ obj.errors.minlength = true }\n        else { obj.errors.maxlength = true }\n    }\n\n    return obj\n}\n","\nexport const file = function( value, $field, fieldOptions ){\n    const maxFileSize = ($field.getAttribute('data-max-file-size') || fieldOptions.maxFileSize) * 1\n    const MIMEtype = $field.accept ? new RegExp($field.accept.replace( '*', '[^\\\\/,]+' )) : null\n    const filesList = Array.from($field.files)\n    const obj = { result: true }\n\n    filesList.forEach(file => {\n        const exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize\n        const isAcceptedFileType = MIMEtype !== null ? MIMEtype.test(file.type) : true\n\n        if( exceedMaxFileSize || !isAcceptedFileType ){\n            obj.result = false\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {}\n            }\n            if( exceedMaxFileSize ){ obj.errors.maxFileSize = true }\n            if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true }\n\n        }\n    })\n\n    return obj\n}\n","\nexport const length = function( value, $field ){\n    const valueL = value.length\n    const attrValue = JSON.parse( $field.dataset.length )\n    const isMinlengthOk = valueL >= attrValue[0]\n    const isMaxlengthOk = valueL <= attrValue[1]\n    const obj = { result: isMinlengthOk && isMaxlengthOk }\n\n    if( !obj.result ){\n        obj.errors = {}\n        if( !isMinlengthOk ){ obj.errors.minlength = true }\n        if( !isMaxlengthOk ){ obj.errors.maxlength = true }\n    }\n\n    return obj\n}\n","\nimport { getDateAsNumber } from '../helpers'\n\nexport const max = function( value, $field ){\n    let maxVal = $field.max\n    const dateFormat = $field.dataset.dateFormat\n    \n    if( $field.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat )\n        maxVal = maxVal.split('-').join('')\n    }\n\n    value = value * 1\n    maxVal = maxVal * 1\n    \n    return { result: value <= maxVal }\n}\n","\nexport const maxlength = function( value, $field ){\n    return { result: value.length <= $field.maxLength * 1 }\n}\n","\nimport { getDateAsNumber } from '../helpers'\n\nexport const min = function( value, $field ){\n    let minVal = $field.min\n    const dateFormat = $field.dataset.dateFormat\n    \n    if( $field.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat )\n        minVal = minVal.split('-').join('')\n    }\n\n    value = value * 1\n    minVal = minVal * 1\n    \n    return { result: value >= minVal }\n}\n","\nexport const minlength = function( value, $field ){\n    return { result: value.length >= $field.minLength * 1 }\n}\n","\nexport const pattern = function( value, $field ){\n    return { result: new RegExp($field.pattern).test(value) }\n}\n","\nexport const radio = function( value, $field ){\n    const $fieldChecked = $field.form.querySelector( `[name=\"${$field.name}\"]:checked` )\n    const isValid = $fieldChecked !== null && $fieldChecked.value.trim().length > 0\n\n    return { result: isValid }\n}\n","\nexport const dataTypeNumber = function( event ){\n\n    const $field = event.target\n    \n    if( $field.matches('[data-type=\"number\"]') ){\n        let fieldValue = $field.value\n        const hasInvalidChars = /[^\\d.,+\\-]/.test(fieldValue)\n        \n        if( hasInvalidChars ){\n            event.stopImmediatePropagation()\n            let valueReplaced = fieldValue.replace(/[^\\d.,+\\-]/g, '')\n            $field.value = valueReplaced\n        }\n    }\n\n}\n","\nexport const formValidationEnd = function( event ){\n    const $form = event.target\n    const options = $form.formjs.options\n    \n    if( !options.fieldOptions.skipUIfeedback ){\n        const clMethodName = event.detail.result ? 'add' : 'remove'\n        $form.classList[clMethodName]( options.formOptions.cssClasses.valid )\n    }\n}\n","\nexport const keypressMaxlength = function( event ){\n\n    const $field = event.target\n    \n    if( $field.matches( '[maxlength]' ) ){\n        const maxLength = $field.maxLength * 1\n        const keyPressed = event.which || event.keyCode\n        const allowedKeys = [8, 37, 38, 39, 46]\n\n        if( $field.value.length >= maxLength && allowedKeys.indexOf(keyPressed) === -1 ){\n            return false\n        }\n    }\n\n}\n","\nexport const pastePrevent = function( event ){\n\n    const $field = event.target\n    const fieldOptions = $field.form.formjs.options.fieldOptions\n\n    if( $field.matches( fieldOptions.preventPasteFields ) ){     \n        event.preventDefault()\n    }\n\n}\n","\nimport { addClass, mergeObjects, removeClass, serializeObject } from './helpers'\n\nconst getFetchMethod = (response, options) => {\n    const accept = options.headers.get('Accept')\n    const contentType = response.headers.get('Content-Type')\n    const headerOpt = accept || contentType || ''\n\n    if( headerOpt.indexOf('application/json') > -1 || headerOpt === '' ){\n        return 'json'\n    } else if( headerOpt.indexOf('text/') > -1 ){\n        return 'text'\n    } else {\n        return 'blob'\n    }\n}\n\nexport async function ajaxCall( $form, formDataObj, options ){\n\n    let timeoutTimer\n    const ajaxOptions = mergeObjects( {}, options.formOptions.ajaxOptions )\n    const isMultipart = ajaxOptions.headers['Content-Type'] === 'multipart/form-data'\n\n    ajaxOptions.body = formDataObj\n    \n    // POST A FormData OBJECT ( multipart )\n    if( isMultipart && options.formOptions.handleFileUpload ){\n        let formDataMultipart = new FormData()\n        \n        for(let key in ajaxOptions.body){\n            formDataMultipart.append( key, ajaxOptions.body[key] )\n        }\n        \n        Array.from( $form.querySelectorAll('[type=\"file\"]') ).forEach($field => {\n            Array.from($field.files).forEach((file, idx) => {\n                const name = `${$field.name}[${idx}]`\n                formDataMultipart.append( name, file, file.name )\n            })\n        })\n        \n        ajaxOptions.body = formDataMultipart\n    }\n\n    if( ajaxOptions.method === 'GET' ){\n\n        // FETCH WITH \"GET\" METHOD CAN'T HAVE \"body\". SO IT IS APPENDED TO THE URL\n        ajaxOptions.url += ( /\\?/.test(ajaxOptions.url) ? '&' : '?' ) + serializeObject( ajaxOptions.body )\n        delete ajaxOptions.body\n\n    } else {\n\n        if( ajaxOptions.headers['Content-Type'].indexOf('application/x-www-form-urlencoded') > -1 ){\n            // POST A NORMAL FORM\n            ajaxOptions.body = serializeObject( ajaxOptions.body )\n        } else if( !isMultipart ){\n            // POST A JSON STRING\n            ajaxOptions.body = JSON.stringify(ajaxOptions.body)\n        }\n\n    }\n\n    ajaxOptions.headers = new Headers( ajaxOptions.headers )\n\n    if ( ajaxOptions.timeout > 0 ) {\n        const controller = new AbortController()\n        const signal = controller.signal\n\n        ajaxOptions.signal = signal\n        timeoutTimer = window.setTimeout(() => {\n            controller.abort()\n        }, ajaxOptions.timeout)\n    }\n\n    return fetch(ajaxOptions.url, ajaxOptions)\n        .then(response => {\n            if( !response.ok ){\n                throw new Error(response.statusText)\n            }\n            const fetchMethod = getFetchMethod(response, ajaxOptions)\n            return response[fetchMethod]()\n        })\n        .then(data => {\n            addClass( $form, options.formOptions.cssClasses.ajaxSuccess )\n            return data\n        })\n        .catch(error => {\n            addClass( $form, options.formOptions.cssClasses.ajaxError )\n            throw new Error(error.message)\n        })\n        .finally(() => {\n            if( timeoutTimer ){\n                window.clearTimeout( timeoutTimer )\n            }\n            removeClass( $form, `${options.formOptions.cssClasses.submit} ${options.formOptions.cssClasses.ajaxPending}` )\n            addClass( $form, options.formOptions.cssClasses.ajaxComplete )\n            $form.querySelector('[type=\"submit\"]').disabled = false\n        })\n\n}\n","\nimport { addClass, customEvents, dispatchCustomEvent, removeClass, runFunctionsSequence } from '../helpers'\nimport { ajaxCall } from '../ajaxCall'\n\nexport function submit( event ){\n\n    const $form = event.target\n    const instance = $form.formjs\n    const options = instance.options\n    const formCssClasses = options.formOptions.cssClasses\n    const isAjaxForm = options.formOptions.ajaxSubmit\n    const $btn = $form.querySelector('[type=\"submit\"]')\n\n    const eventPreventDefault = ( enableBtn = true ) => {\n        if( $btn && enableBtn ){ $btn.disabled = false }\n        if( event ){ event.preventDefault() }\n    }\n\n    if( isAjaxForm ){\n        eventPreventDefault(false)\n    }\n\n    if( $btn ){\n        if( $btn.disabled ){\n            eventPreventDefault(false)\n            return false\n        }\n        $btn.disabled = true\n    }\n\n    removeClass( $form, `${formCssClasses.ajaxComplete} ${formCssClasses.ajaxError} ${formCssClasses.ajaxSuccess}` )\n    addClass( $form, formCssClasses.submit )\n\n    instance.validateForm()\n        .then(data => {\n            \n            const hasGroup = typeof data.group !== 'undefined'\n\n            if( hasGroup && !data.canSubmit ){\n                return [{ stopExecution: true }]\n            }\n\n            const beforeSendData = {\n                stopExecution: false,\n                formData: isAjaxForm ? instance.getFormData() : null\n            }\n\n            const rfsObject = {\n                  functionsList: options.formOptions.beforeSend,\n                  data: beforeSendData,\n                  stopConditionFn: function(data){ return data.stopExecution }\n            }\n            return runFunctionsSequence(rfsObject)\n\n        }).then(dataList => {\n\n            if( dataList.some(({stopExecution}) => stopExecution) ){\n                eventPreventDefault()\n                return false\n            }\n            \n            if( isAjaxForm ){\n                const formData = dataList.pop().formData\n                addClass( $form, formCssClasses.ajaxPending )\n                dispatchCustomEvent( $form, customEvents.form.submit, { detail: ajaxCall( $form, formData, options ) } )\n            }\n\n        })\n        .catch(fields => {\n            eventPreventDefault()\n            removeClass( $form, formCssClasses.submit )\n        })\n    \n}\n","\nexport const groupValidationEnd = function( event ){\n\n    const detail = event.detail\n\n    if( detail.result ){\n        event.target.formjs.currentGroup = detail.group.next\n    }\n    \n}\n","\nimport { fieldsStringSelector, isFieldForChangeEvent } from '../helpers'\n\nexport const validation = function( event ){\n\n    const isChangeEvent = event.type === 'change'\n    const $field = event.target\n    const self = $field.form.formjs\n\n    if( $field.matches( fieldsStringSelector ) ){\n        const isFieldForChangeEventBoolean = isFieldForChangeEvent($field)\n        const hasOnlyChangeEvent = self.options.fieldOptions.validateOnEvents === 'change'\n        \n        if(\n            (isFieldForChangeEventBoolean && isChangeEvent) ||\n            (!isFieldForChangeEventBoolean && (!isChangeEvent || hasOnlyChangeEvent))\n        ){\n            \n            self.validateField( $field )\n                .then(() => {\n                    const type = $field.type\n                    const $relatedEqualTo = $field.form.querySelector(`[data-equal-to=\"${$field.name}\"]`)\n\n                    if(\n                        // FIELD IS ( required OR data-validate-if-filled ) AND RELATED FIELD data-equal-to HAS A VALUE\n                        ($field.required || $field.matches('[data-validate-if-filled]')) && \n                        !(type === 'checkbox' || type === 'radio') && \n                        $relatedEqualTo && $relatedEqualTo.value.trim() !== ''\n                    ){\n                        self.validateField( $relatedEqualTo ).catch(errors => {})\n                    }\n                })\n                .catch(errors => {})\n\n        }\n    }\n    \n}\n","\nimport { addClass, getJSONobjectFromFieldAttribute, removeClass, mergeObjects } from '../helpers'\n\nexport const validationEnd = function( event ){\n\n    const eventDetail = event.detail\n    const $field = eventDetail.$field\n    const dataFieldOptions = getJSONobjectFromFieldAttribute( $field, 'data-field-options' )\n    const fieldOptions = mergeObjects({}, $field.form.formjs.options.fieldOptions, dataFieldOptions)\n    const $container = $field.closest( fieldOptions.questionContainer )\n    const isReqFrom = $field.matches('[data-required-from]')\n    const $reqMore = document.querySelector( $field.dataset.requiredFrom )\n\n    if( $container && !fieldOptions.skipUIfeedback ){\n\n        if( eventDetail.result ){\n\n            if( !isReqFrom || (isReqFrom && $reqMore.checked) ){\n                // IF FIELD IS VALID\n                const errorClasses = `${fieldOptions.cssClasses.error} ${fieldOptions.cssClasses.errorEmpty} ${fieldOptions.cssClasses.errorRule}`\n                removeClass( $container, errorClasses )\n                addClass( $container, fieldOptions.cssClasses.valid )\n            }\n\n        } else {\n\n            // IF FIELD IS NOT VALID\n            let extraErrorClass = fieldOptions.cssClasses.errorRule\n\n            // HANDLE CASE OF FIELD data-checks\n            const isChecks = $field.matches('[data-checks]')\n            const checkedElLength = (isChecks ? $container.querySelectorAll(`[name=\"${$field.name}\"]:checked`).length : 0)\n\n            if( (!isChecks && (eventDetail.errors && eventDetail.errors.empty)) || (isChecks && checkedElLength === 0) ){\n                extraErrorClass = fieldOptions.cssClasses.errorEmpty\n            }\n\n            let errorClasses = `${fieldOptions.cssClasses.error} ${extraErrorClass}`\n            let errorClassToRemove = `${fieldOptions.cssClasses.errorEmpty} ${fieldOptions.cssClasses.errorRule}`\n            removeClass( $container, `${fieldOptions.cssClasses.valid} ${errorClassToRemove}` )\n            addClass( $container, errorClasses )\n\n        }\n    }\n\n}\n","\nimport {    \n    getJSONobjectFromFieldAttribute,\n    isDOMNode,\n    mergeObjects,\n    mergeValidateFieldDefault,\n    removeClass,\n    runFunctionsSequence\n}                   from './helpers'\nimport { isValid }  from './isValid'\n\nexport async function checkFieldValidity( $field, fieldOptions, validationRules, validationErrors ){\n\n    if( !isDOMNode($field) ){\n        const obj = mergeValidateFieldDefault({$field})\n        return Promise.resolve(obj)\n    }\n\n    const $form = $field.form\n    const isValidValue = $field.value.trim().length > 0\n    const dataFieldOptions = getJSONobjectFromFieldAttribute( $field, 'data-field-options' )\n\n    fieldOptions = mergeObjects( fieldOptions, dataFieldOptions )\n\n    // HANDLE FIELD data-required-from WHEN CHANGING ITS RELATED RADIO\n    if( $field.type === 'radio' ){\n        const $checked = $field.checked ? $field : $form.querySelector(`[name=\"${$field.name}\"]:checked`)\n        const reqMoreIsChecked = $checked && $checked.matches('[data-require-more]')\n        const $findReqMore = reqMoreIsChecked ? $checked : $form.querySelector(`[data-require-more][name=\"${$field.name}\"]`)\n        const $findReqFrom = $findReqMore ? $form.querySelector(`[data-required-from=\"#${$findReqMore.id}\"]`) : null\n        \n        if( $checked && $findReqFrom ){\n            $findReqFrom.required = $findReqMore.required && $findReqMore.checked\n            if( !reqMoreIsChecked ){\n                $findReqFrom.value = ''\n            } else if( fieldOptions.focusOnRelated ) {\n                $findReqFrom.focus()\n            }\n        }\n    }\n\n    // HANDLE FIELD data-require-more & data-required-from WHEN *-from IT'S FILLED\n    if( $field.matches('[data-required-from]') && isValidValue ){\n        const $reqMore = $form.querySelector( $field.dataset.requiredFrom )\n        $reqMore.checked = true\n        $field.required = $reqMore.required\n    }\n\n    const dataBeforeValidation = await runFunctionsSequence({\n        functionsList: fieldOptions.beforeValidation,\n        data: { $field, fieldOptions }\n    })\n\n    const dataObj = dataBeforeValidation.pop()\n    const needsValidation = $field.required || ($field.matches('[data-validate-if-filled]') && isValidValue)\n\n    if( !needsValidation ){\n        dataObj.result = true\n    }\n    \n    const validationResult = needsValidation ? await isValid($field, fieldOptions, validationRules, validationErrors) : dataObj\n\n    const $container = fieldOptions.questionContainer && validationResult.$field.closest( fieldOptions.questionContainer )\n    if( $container ){\n        removeClass( $container, fieldOptions.cssClasses.pending )\n    }\n    \n    return validationResult\n\n}\n","\nimport { mergeValidateFieldDefault, mergeObjects, toCamelCase } from './helpers'\n\nexport async function isValid( $field, fieldOptions, validationRules, validationErrors ){\n\n    const fieldValue = $field.value\n    const obj = mergeValidateFieldDefault({result: fieldValue.trim().length > 0, $field})\n    const isCheckboxOrRadio = ['checkbox', 'radio'].includes($field.type)\n    const hasSelectedInput = $field.form.querySelectorAll(`[name=\"${$field.name}\"]:checked`).length > 0\n\n    if( (!isCheckboxOrRadio && !obj.result) || (isCheckboxOrRadio && !hasSelectedInput) ){\n        obj.result = false\n        obj.errors = { empty: true }\n        return Promise.resolve(obj)\n    }\n\n    // COLLECT VALIDATION METHOD NAMES ( USED TO RUN VALIDATIONS AND GET ERRORS )\n    const validationMethods = Array.from($field.attributes).reduce((accList, attr) => {\n        const attrName = toCamelCase( attr.name.replace('data-', '') )\n        const attrValue = toCamelCase( attr.value )\n        const isAttrValueWithFn = ['type', 'subtype'].includes(attrName) && validationRules[attrValue]\n        const isAttrNameWithFn = validationRules[attrName]\n\n        if( isAttrValueWithFn || isAttrNameWithFn ){\n            accList.push( isAttrValueWithFn ? attrValue : attrName )\n        }\n        return accList\n    }, [])\n\n    const validity = await new Promise(resolve => {\n\n        // RUN VALIDATIONS\n        const validationsResult = validationMethods.reduce((accPromise, methodName) => {\n            return accPromise.then(accObj => {\n                return new Promise(resolveVal => {\n                    // RUN VALIDATION INSIDE A PROMISE IS USEFUL FOR ASYNC VALIDATIONS\n                    resolveVal( validationRules[methodName](fieldValue, $field, fieldOptions) )\n                }).then(valObj => {\n                    // ADD CUSTOM ERROR-KEY FOR EACH VALIDATION RULE\n                    if( !valObj.result ){\n                        const errorObj = {}\n                        if( typeof valObj.errors === 'undefined' || typeof valObj.errors[methodName] === 'undefined' ){\n                            errorObj[methodName] = true\n                        }\n                        valObj.errors = mergeObjects({}, valObj.errors, errorObj)\n                    }\n                    valObj = valObj.result ? {} : valObj\n                    return mergeObjects(accObj, valObj)\n                })\n            })\n        }, Promise.resolve(obj))\n        resolve(validationsResult)\n\n    })\n\n    if( !validity.result ){\n        validity.errors = validationMethods.reduce((accObj, methodName) => {\n            const errors = (validationErrors[methodName] && validationErrors[methodName](fieldValue, $field)) || {}\n            return mergeObjects(accObj, errors)\n        }, validity.errors)\n    }\n\n    return validity\n\n}\n","\nimport { getUniqueFields, mergeValidateFieldDefault, mergeValidateFormDefault, mergeObjects } from './helpers'\nimport { checkFieldValidity } from './checkFieldValidity'\n\nexport async function checkFieldsValidity( $fields, fieldOptions, validationRules, validationErrors, fieldToSkip = null ){\n\n    fieldOptions = mergeObjects( {}, fieldOptions, {focusOnRelated: false} )\n    const $fieldsList = getUniqueFields( $fields )\n\n    const fieldsValidity = await Promise.all( $fieldsList.map($field => {\n\n        if( fieldToSkip && $field === fieldToSkip ){\n            const obj = mergeValidateFieldDefault({$field, result: true})\n            return Promise.resolve(obj)\n        }\n        \n        return checkFieldValidity( $field, fieldOptions, validationRules, validationErrors )\n\n    }) )\n\n    const areAllFieldsValid = fieldsValidity.every(({result}) => result)\n\n    return mergeValidateFormDefault({result: areAllFieldsValid, fields:fieldsValidity})\n\n}\n","\nimport { version }              from '../package.json'\nimport { \n    checkFormEl, \n    customEvents, \n    dispatchCustomEvent, \n    excludeSelector, \n    fieldsStringSelector, \n    finalizeFieldPromise, \n    finalizeFieldsGroupPromise, \n    finalizeFormPromise, \n    getFilledFields, \n    isNodeList,\n    mergeObjects, \n    removeClass }               from './modules/helpers'\nimport { options }              from './modules/options'\nimport { validationRules }      from './modules/validationRules'\nimport { formStartup }          from './modules/formStartup'\nimport { destroy }              from './modules/destroy'\nimport { checkFieldValidity }   from './modules/checkFieldValidity'\nimport { checkFieldsValidity }  from './modules/checkFieldsValidity'\n\nclass Form {\n\n    constructor( form, optionsObj ){\n        const argsL = arguments.length\n        const checkFormElem = checkFormEl(form)\n\n        if( argsL === 0 || (argsL > 0 && !form) ){\n            throw new Error('First argument \"form\" is missing or falsy!')\n        }\n        if( isNodeList(form) ){\n            throw new Error('First argument \"form\" must be a single DOM node or a form CSS selector, not a NodeList!')\n        }\n        if( !checkFormElem.result ){\n            throw new Error('First argument \"form\" is not a DOM node nor a form CSS selector!')\n        }\n\n        const self = this\n\n        self.$form = checkFormElem.$el\n        self.$form.formjs = self\n        self.options = mergeObjects({}, Form.prototype.options, optionsObj)\n        self.currentGroup = self.options.formOptions.groups[0]\n\n        // BINDING CONTEXT FOR FUTURE EXECUTION\n        const cbList = [\n            // IN fieldOptions\n            'beforeValidation',\n            // IN formOptions\n            'beforeSend',\n            'getFormData'\n        ]\n        cbList.forEach(cbName => {\n            const optionType = self.options.formOptions[cbName] ? 'formOptions' : 'fieldOptions'\n            let cbOpt = self.options[optionType][cbName]\n\n            if( cbOpt ){\n                self.options[optionType][cbName] = ( Array.isArray(cbOpt) ? cbOpt.map(cbFn => cbFn.bind(self)) : cbOpt.bind(self) )\n            }\n        })\n\n        formStartup( self.$form, self.options )\n\n        const initOptions = {}\n        if( self.options.formOptions.onInitCheckFilled ){\n            initOptions.detail = self.validateFilledFields().catch(fields => {})\n        }\n        dispatchCustomEvent( self.$form, customEvents.form.init, initOptions )\n    }\n\n    destroy(){\n        destroy(this.$form, this.options)\n        dispatchCustomEvent( this.$form, customEvents.form.destroy )\n    }\n    \n    getFormData( trimValues = this.options.fieldOptions.trimValue ){\n        const $formFields = this.$form.querySelectorAll('input, select, textarea')\n        const $filteredFields = Array.from( $formFields ).filter( elem => elem.matches(excludeSelector) )\n        return this.options.formOptions.getFormData( $filteredFields, trimValues )\n    }\n\n    async validateField( field, fieldOptions ){\n        const self = this\n        const $form = self.$form\n        const $field = typeof field === 'string' ? $form.querySelector(field) : field\n\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions)\n\n        const fieldValidity = await checkFieldValidity($field, fieldOptions, self.validationRules, self.validationErrors)\n\n        dispatchCustomEvent( fieldValidity.$field, customEvents.field.validation, { detail: fieldValidity } )\n        \n        if( fieldValidity.result ){\n            if( fieldOptions.onValidationCheckAll ){\n                const selector = self.currentGroup || fieldsStringSelector\n                const $fields = $form.querySelectorAll(selector)\n                checkFieldsValidity( $fields, fieldOptions, self.validationRules, self.validationErrors, fieldValidity.$field )\n                    .then(dataForm => {\n                        const groups = self.options.formOptions.groups\n                        const validationEventName = self.currentGroup ? customEvents.group.validation : customEvents.form.validation\n                        if( groups.length > 0 ){\n                            dataForm.group = {\n                                prev: groups[groups.indexOf(selector) - 1],\n                                current: selector,\n                                next: groups[groups.indexOf(selector) + 1]\n                            }\n                            dataForm.canSubmit = dataForm.result && !dataForm.group.next\n                        }\n                        dispatchCustomEvent( $form, validationEventName, { detail: dataForm } )\n                    })\n            }\n        } else {\n            removeClass( $form, self.options.formOptions.cssClasses.valid )\n        }\n\n        return finalizeFieldPromise(fieldValidity)\n    }\n\n    async validateFieldsGroup( group = this.currentGroup, fieldOptions ){\n        const self = this\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions)\n        const $fields = self.$form.querySelectorAll(group)\n\n        const groupValidity = await checkFieldsValidity($fields, fieldOptions, self.validationRules, self.validationErrors)\n\n        groupValidity.fields.forEach(obj => {\n            obj.isCheckingGroup = true\n            dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } )\n        })\n\n        const groups = self.options.formOptions.groups\n        if( groups.length > 0 ){\n            groupValidity.group = {\n                prev: groups[groups.indexOf(group) - 1],\n                current: group,\n                next: groups[groups.indexOf(group) + 1]\n            }\n            groupValidity.canSubmit = groupValidity.result && !groupValidity.group.next\n        }\n\n        dispatchCustomEvent( self.$form, customEvents.group.validation, { detail: groupValidity } )\n        \n        return finalizeFieldsGroupPromise(groupValidity)\n    }\n\n    async validateFilledFields( fieldOptions ){\n        const self = this\n        const $filledFields = getFilledFields( self.$form )\n\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions)\n\n        const filledFieldsValidity = checkFieldsValidity($filledFields, fieldOptions, self.validationRules, self.validationErrors)\n\n        filledFieldsValidity.fields.forEach(obj => {\n            dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } )\n        })\n        \n        return finalizeFormPromise(filledFieldsValidity)\n    }\n\n    async validateForm( fieldOptions ){\n        const self = this\n\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions)\n\n        if( self.currentGroup ){\n            return self.validateFieldsGroup( self.currentGroup, fieldOptions )\n        }\n\n        const $form = self.$form\n        const $fields = $form.querySelectorAll(fieldsStringSelector)\n\n        const formVaidity = await checkFieldsValidity($fields, fieldOptions, self.validationRules, self.validationErrors)\n\n        formVaidity.fields.forEach(obj => {\n            obj.isCheckingForm = true\n            dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } )\n        })\n\n        dispatchCustomEvent( $form, customEvents.form.validation, { detail: formVaidity } )\n\n        return finalizeFormPromise(formVaidity)\n    }\n    \n    static addValidationErrors( errorsObj ){\n        Form.prototype.validationErrors = mergeObjects({}, Form.prototype.validationErrors, errorsObj)\n    }\n\n    static addValidationRules( rulesObj ){\n        Form.prototype.validationRules = mergeObjects({}, Form.prototype.validationRules, rulesObj)\n    }\n    \n    static setOptions( optionsObj ){\n        Form.prototype.options = mergeObjects({}, Form.prototype.options, optionsObj)\n    }\n\n}\n\nForm.prototype.options = options\nForm.prototype.validationErrors = {}\nForm.prototype.validationRules = validationRules\nForm.prototype.version = version\n\nexport default Form\n","\nimport { isDOMNode } from './isDOMNode'\n\nexport const checkFormEl = form => {\n    const typeofForm = typeof form\n    const isValidNodeSelector = typeofForm === 'string' && isDOMNode(document.querySelector(form))\n    const isFormSelector = isValidNodeSelector && document.querySelector(form).tagName.toLowerCase() === 'form'\n    \n    return {\n        result: isDOMNode(form) || isFormSelector,\n        $el: (typeofForm === 'string' ? document.querySelector(form) : form)\n    }\n}\n","\nimport { customEvents } from './helpers'\nimport { \n    dataTypeNumber,\n    formValidationEnd,\n    groupValidationEnd,\n    keypressMaxlength,\n    pastePrevent,\n    submit,\n    validation, \n    validationEnd \n} from './listenerCallbacks'\n\nexport function formStartup( $form, options ){\n\n    $form.noValidate = true\n\n    const fieldOptions = options.fieldOptions\n    const formOptions = options.formOptions\n        \n    // VALIDATION WITH ATTRIBUTES LIKE HTML ONES ( ALSO FOR BUG FIXING, EG: maxlength IN ANDROID )\n    if( fieldOptions.strictHtmlValidation ){\n        \n        // maxlength\n        // MAXLENGTH IS BUGGY IN ANDROID BROWSERS\n        $form.addEventListener('keypress', keypressMaxlength, false)\n\n        // data-type=\"number\"\n        // SINCE VALIDATING type=\"number\" WITH NON NUMERIC CHARS WILL RETURN EMPTY STRING IN SOME BROWSERS ( EG: FIREFOX )\n        $form.addEventListener('input', dataTypeNumber, false)\n        \n    }\n    \n    if( fieldOptions.preventPasteFields && $form.querySelectorAll( fieldOptions.preventPasteFields ).length ){\n        // INIT EVENT LISTENER FOR \"PASTE\" EVENT TO PREVENT IT ON SPECIFIED FIELDS\n        $form.addEventListener('paste', pastePrevent, false)\n    }\n\n    // INIT EVENTS LISTENER ( AS IN fieldOptions )\n    fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n        const useCapture = ['blur', 'focus'].includes(eventName)\n        $form.addEventListener(eventName, validation, useCapture)\n    })\n\n    $form.addEventListener(customEvents.field.validation, validationEnd, false)\n    if( formOptions.groups.length > 0 ){\n        $form.addEventListener(customEvents.group.validation, groupValidationEnd, false)\n    }\n    $form.addEventListener(customEvents.form.validation, formValidationEnd, false)\n    \n    // HANDLE FORM SUBMIT\n    if( formOptions.handleSubmit ){\n        // INIT FORM SUBMIT ( DEFAULT AND AJAX )\n        $form.addEventListener('submit', submit)\n\n        if( formOptions.ajaxSubmit ){\n            if( $form.getAttribute('enctype') ){\n                formOptions.ajaxOptions.headers['Content-Type'] = $form.getAttribute('enctype')\n            }\n\n            if( $form.getAttribute('method') ){\n                formOptions.ajaxOptions.method = $form.getAttribute('method').toUpperCase()\n            }\n\n            if( $form.getAttribute('action') ){\n                formOptions.ajaxOptions.url = $form.getAttribute('action')\n            }\n        }\n    }\n\n}\n","\nimport { customEvents } from './helpers'\nimport { dataTypeNumber, formValidationEnd, groupValidationEnd, keypressMaxlength, pastePrevent, submit, validation, validationEnd } from './listenerCallbacks'\n\n\nexport function destroy( $form, options ){\n\n    if( options.fieldOptions.strictHtmlValidation ){\n        $form.removeEventListener('keypress', keypressMaxlength, false)\n        $form.removeEventListener('input', dataTypeNumber, false)\n    }\n\n    if( options.fieldOptions.preventPasteFields ){\n        $form.removeEventListener('paste', pastePrevent, false)\n    }\n\n    if( options.formOptions.handleSubmit ){\n        $form.removeEventListener('submit', submit)\n    }\n\n    options.fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n        const useCapturing = eventName === 'blur' ? true : false\n        $form.removeEventListener(eventName, validation, useCapturing)\n    })\n\n    $form.removeEventListener(customEvents.field.validation, validationEnd, false)\n    if( options.formOptions.groups.length > 0 ){\n        $form.removeEventListener(customEvents.group.validation, groupValidationEnd, false)\n    }\n    $form.removeEventListener(customEvents.form.validation, formValidationEnd, false)\n\n    delete $form.formjs\n    \n}\n","\nexport const excludeSelector = ':not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"file\"]):not([data-exclude-data])'\n","\nexport const finalizeFieldPromise = ({errors, result}) => {\n    if( result ){\n        return Promise.resolve()\n    }\n    return Promise.reject(errors)\n}\n","\nexport const finalizeFieldsGroupPromise = ({canSubmit, fields, group, result}) => {\n    if( result ){\n        return Promise.resolve({canSubmit, fields, group})\n    }\n    return Promise.reject({fields, group})\n}\n","\nimport { fieldsStringSelector } from './fieldsStringSelector'\nimport { getUniqueFields } from './getUniqueFields'\n\nexport const getFilledFields = $form => {\n    return getUniqueFields( $form.querySelectorAll(fieldsStringSelector) )\n    .map($field => {\n\n        const name = $field.name\n        const type = $field.type\n        const isCheckboxOrRadio = ['checkbox', 'radio'].includes(type)\n        const fieldChecked = $form.querySelector(`[name=\"${name}\"]:checked`)\n        const isReqFrom = $field.matches('[data-required-from]')\n        const $reqMore = (isReqFrom ? $form.querySelector($field.dataset.requiredFrom) : null)\n\n        return (\n            isCheckboxOrRadio ? (fieldChecked || null) :\n            (isReqFrom && $reqMore.checked) || (!isReqFrom && $field.value) ? $field : null\n        )\n\n    })\n    .filter($field => $field !== null)\n}\n"],"names":["addClass","element","cssClasses","classList","add","split","isNodeList","nodeList","NodeList","prototype","isPrototypeOf","removeClass","remove","isDOMNode","node","Element","customEvents","validation","destroy","init","submit","isPlainObject","object","Object","toString","call","mergeObjects","out","Array","from","arguments","slice","filter","arg","forEach","keys","key","isArray","concat","push","dispatchCustomEvent","elem","eventName","eventOptions","bubbles","eventObj","CustomEvent","dispatchEvent","fieldsStringSelector","finalizeFormPromise","_ref","fields","result","Promise","resolve","reject","formatMap","YYYY-MM-DD","dateArray","MM-DD-YYYY","DD-MM-YYYY","reverse","getDateAsNumber","dateString","dateFormat","splitChar","string","separator","match","length","getSplitChar","indexOf","replace","join","getJSONobjectFromFieldAttribute","$field","attrName","$customAttr","closest","JSON","parse","getAttribute","getUniqueFields","$nodeList","currentFieldName","currentFieldType","name","type","matches","mergeValidateFieldDefault","obj","mergeValidateFormDefault","isFieldForChangeEvent","runFunctionsSequence","functionsList","data","stopConditionFn","reduce","acc","promiseFn","then","res","dataNew","dataList","serializeObject","constructor","a","k","encodeURIComponent","toCamelCase","all","letter","toUpperCase","options","fieldOptions","beforeValidation","trimValue","value","trim","$fields","includes","$container","questionContainer","dirty","checkDirtyField","skipUIfeedback","pending","error","errorEmpty","errorRule","valid","focusOnRelated","maxFileSize","onValidationCheckAll","preventPasteFields","strictHtmlValidation","validateOnEvents","formOptions","ajaxOptions","cache","credentials","headers","Content-Type","Accept","method","mode","redirect","timeout","url","location","href","ajaxSubmit","beforeSend","ajaxComplete","ajaxError","ajaxPending","ajaxSuccess","getFormData","$filteredFields","trimValues","formData","$form","this","prevObj","isCheckbox","isRadio","isSelect","checked","$checkboxes","querySelectorAll","field","$checkedRadio","querySelector","$selectedOpts","option","selected","keyName","index","list","isLastKeyName","keyNameSplit","arrPos","arrayHasItemAtIndex","arrItemKeyName","isKeyNameArray","endsWith","groups","handleFileUpload","handleSubmit","onInitCheckFilled","validationRules","date","test","email","number","checkbox","$dataChecks","form","attrValue","dataset","checks","checkedLength","isMinOk","isMaxOk","errors","minChecks","maxChecks","equalTo","exactLength","valueLength","minlength","maxlength","file","MIMEtype","accept","RegExp","filesList","files","exceedMaxFileSize","size","isAcceptedFileType","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","max","maxVal","maxLength","min","minVal","minLength","pattern","radio","$fieldChecked","dataTypeNumber","event","target","fieldValue","stopImmediatePropagation","valueReplaced","formValidationEnd","formjs","clMethodName","detail","keypressMaxlength","keyPressed","which","keyCode","allowedKeys","pastePrevent","preventDefault","async","ajaxCall","formDataObj","timeoutTimer","isMultipart","body","formDataMultipart","FormData","append","idx","stringify","Headers","controller","AbortController","signal","window","setTimeout","abort","fetch","response","ok","Error","statusText","fetchMethod","get","contentType","headerOpt","getFetchMethod","catch","message","finally","clearTimeout","disabled","instance","formCssClasses","isAjaxForm","$btn","eventPreventDefault","enableBtn","validateForm","group","canSubmit","stopExecution","beforeSendData","rfsObject","some","pop","groupValidationEnd","currentGroup","next","isChangeEvent","self","isFieldForChangeEventBoolean","hasOnlyChangeEvent","validateField","$relatedEqualTo","required","validationEnd","eventDetail","dataFieldOptions","isReqFrom","$reqMore","document","requiredFrom","errorClasses","extraErrorClass","isChecks","checkedElLength","empty","errorClassToRemove","checkFieldValidity","validationErrors","isValidValue","$checked","reqMoreIsChecked","$findReqMore","$findReqFrom","id","focus","dataObj","needsValidation","validationResult","isCheckboxOrRadio","hasSelectedInput","validationMethods","attributes","accList","attr","isAttrValueWithFn","isAttrNameWithFn","validity","accPromise","methodName","accObj","resolveVal","valObj","errorObj","isValid","checkFieldsValidity","fieldToSkip","$fieldsList","fieldsValidity","map","areAllFieldsValid","every","Form","optionsObj","argsL","checkFormElem","typeofForm","isFormSelector","tagName","toLowerCase","$el","checkFormEl","cbName","optionType","cbOpt","cbFn","bind","noValidate","addEventListener","useCapture","formStartup","initOptions","validateFilledFields","removeEventListener","useCapturing","undefined","$formFields","[object Object]","fieldValidity","selector","dataForm","validationEventName","prev","current","finalizeFieldPromise","groupValidity","isCheckingGroup","finalizeFieldsGroupPromise","filledFieldsValidity","fieldChecked","validateFieldsGroup","formVaidity","isCheckingForm","errorsObj","rulesObj","exports","version"],"mappings":";uEACO,MAAMA,EAAW,CAAEC,EAASC,KAC/BD,EAAQE,UAAUC,OAAQF,EAAWG,MAAM,OCDlCC,EAAaC,GACfC,SAASC,UAAUC,cAAeH,GCDhCI,EAAc,CAAEV,EAASC,KAClCD,EAAQE,UAAUS,UAAWV,EAAWG,MAAM,OCDrCQ,EAAYC,GACdC,QAAQN,UAAUC,cAAeI,GCD/BE,EACF,CACHC,WAAY,wBAFPD,EAIH,CACFE,QAAY,mBACZC,KAAY,gBACZC,OAAY,kBACZH,WAAY,uBARPD,EAUF,CACHC,WAAY,wBCXPI,EAAgBC,GAC2B,oBAA7CC,OAAOd,UAAUe,SAASC,KAAMH,GCC9BI,EAAe,WAAoB,IAAVC,yDAAM,GAmBxC,OAlBAC,MAAMC,KAAKC,WAAWC,MAAM,GAAGC,OAAOC,KAASA,GAAKC,QAAQD,IACxDV,OAAOY,KAAKF,GAAKC,QAAQE,IACjBR,MAAMS,QAAQJ,EAAIG,IAClBT,EAAIS,IAAQT,EAAIS,IAAQ,IAAIE,OAAQL,EAAIG,GAAKL,MAAM,IAC5CV,EAAcY,EAAIG,IACzBT,EAAIS,GAAOV,EAAcC,EAAIS,IAAQ,GAAKH,EAAIG,IAG1CR,MAAMS,QAAQV,EAAIS,IAElBT,EAAIS,GAAKG,KAAKN,EAAIG,IAElBT,EAAIS,GAAOH,EAAIG,OAMxBT,GCnBEa,EAAsB,CAAEC,EAAMC,EAAWC,KAClDA,EAAejB,EAAa,GAAI,CAAEkB,SAAS,GAAQD,GACnD,MAAME,EAAW,IAAIC,YAAYJ,EAAWC,GAC5CF,EAAKM,cAAeF,ICLXG,EAAuB,6GCAvBC,EAAsBC,IAAsB,IAArBC,OAACA,EAADC,OAASA,GAAYF,EACrD,OAAIE,EACOC,QAAQC,QAAQH,GAEpBE,QAAQE,OAAOJ,ICFpBK,EAAY,CACdC,aAAc,SAASC,GACnB,OAAOA,GAEXC,aAAc,SAASD,GACnB,MAAO,CAACA,EAAU,GAAIA,EAAU,GAAIA,EAAU,KAElDE,aAAc,SAASF,GACnB,OAAOA,EAAUG,YAIZC,EAAkB,CAAEC,EAAYC,KACzCA,EAAaA,GAAc,aAC3B,MAAMC,EChBkBC,CAAAA,IAExB,MAAMC,EAAYD,EAAOE,MAAM,MAC/B,OAAQD,GAAaA,EAAUE,OAAS,EAAKF,EAAU,GAAK,MDa1CG,CAAaP,GAE/B,KAAIC,EAAWO,QAAQN,GAAa,GAQpC,OAJAD,EAAaA,EAAWQ,QAAQ,UAAW,KAC3CT,EAAaA,EAAW1D,MAAM4D,GAC9BF,EAAaP,EAAUQ,GAAYD,GAAYU,KAAK,KExB3CC,EAAkC,CAAEC,EAAQC,KACrD,MAAMC,EAAcF,EAAOG,QAAS,IAAGF,MACvC,OAAQC,GAAeE,KAAKC,MAAMH,EAAYI,aAAaL,KAAe,ICFjEM,EAAkBC,IAE3B,IAAIC,EAAmB,GACnBC,EAAmB,GAEvB,OAAOzD,MAAMC,KAAMsD,GAAYnD,OAAO2C,IAClC,MAAMW,EAAOX,EAAOW,KACdC,EAAOZ,EAAOY,KAEpB,OAAID,IAASF,GAAoBG,IAASF,KAIrCV,EAAOa,QAAQ,0BAChBJ,EAAmBE,EACnBD,EAAmBE,IAGhB,MChBFE,EAA4BC,GAC9BhE,EAAa,GAAI,CAAE0B,QAAQ,EAAOuB,OAAQ,MAAQe,GCDhDC,EAA2BD,GAC7BhE,EAAa,GAAI,CAAE0B,QAAQ,EAAMD,OAAQ,IAAMuC,GCH7CE,EAAwBjB,GAC1BA,EAAOa,QAAQ,4DCCbK,EAAuB,WAA6E,IAA3EC,cAAEA,EAAgB,GAAlBC,KAAsBA,EAAO,GAA7BC,gBAAiCA,EAAkB,MAAM,2DAAU,GACrG,OAAOF,EAAcG,OAAO,CAACC,EAAKC,IACvBD,EAAIE,KAAKC,IACZ,IAAIC,EAAU5E,EAAa,GAAI2E,EAAIA,EAAIhC,OAAS,IAChD,OAAI2B,EAAgBM,GACTjD,QAAQC,QAAQ+C,GAEpB,IAAIhD,QAAQC,IAAaA,EAAQ6C,EAAUG,MAC7CF,MAAK,WAAsB,IAArBhD,yDAASkD,EAEZ,OADAD,EAAI9D,KAAKa,GACFiD,OAGpBhD,QAAQC,QAAQ,CAACyC,KACfK,KAAKG,GAAYA,EAASlC,OAAS,EAAIkC,EAASxE,MAAM,GAAKwE,IChBvDC,EAAkBd,GAElBA,GAAsB,iBAARA,GAAoBA,EAAIe,cAAgBlF,OACvDA,OAAOY,KAAKuD,GACPO,OAAO,CAACS,EAAEC,KACPD,EAAEnE,KAAKoE,EAAE,IAAIC,mBAAmBlB,EAAIiB,KAC7BD,GACT,IAAIjC,KAAK,KACfiB,ECRCmB,EAAc3C,GAChBA,EAAOM,QAAQ,aAAc,CAACsC,EAAKC,IAAoBA,EAAOC,eCE5DC,EAAU,CAEnBC,aAAc,CACVC,iBAAwB,CCJA,SAA8DjE,GAAA,IAA3ByB,OAAEA,EAAFuC,aAAUA,GAAiBhE,EAEtFgE,EAAaE,YAAcxB,EAAsBjB,KACjDA,EAAO0C,MAAQ1C,EAAO0C,MAAMC,QCDL,EAAEC,EAASL,MAEtCK,EAAUjH,EAAWiH,GAAW3F,MAAMC,KAAM0F,GAAY,CAACA,IAEjDrF,QAAQyC,IAEZ,IAD8B,CAAC,WAAY,SAAS6C,SAAS7C,EAAOY,MAC1C,CACtB,MAAMkC,EAAa9C,EAAOG,QAASoC,EAAaQ,oBAAuB/C,EACnEA,EAAO0C,MACPrH,EAAUyH,EAAYP,EAAahH,WAAWyH,OAE9ChH,EAAa8G,EAAYP,EAAahH,WAAWyH,WDP7DC,CAAiBjD,EAAQuC,GAEpBA,EAAaW,gBACd7H,EAAU2E,EAAOG,QAASoC,EAAaQ,mBAAqBR,EAAahH,WAAW4H,WDJpF5H,WAAY,CACRyH,MAAoB,WACpBI,MAAoB,YACpBC,WAAoB,kBACpBC,UAAoB,iBACpBH,QAAoB,aACpBI,MAAoB,YAExBC,gBAAwB,EACxBC,YAAwB,GACxBC,sBAAwB,EACxBC,mBAAwB,qCACxBZ,kBAAwB,yBACxBG,gBAAwB,EACxBU,sBAAwB,EACxBnB,WAAwB,EACxBoB,iBAAwB,gBAG5BC,YAAa,CACTC,YAAwB,CACpBC,MAAoB,WACpBC,YAAoB,cACpBC,QAAS,CACWC,eAAgB,mBAChBC,OAAgB,oBAEpCC,OAAoB,OACpBC,KAAoB,cACpBC,SAAoB,SACpBC,QAAoB,EACpBC,IAAoBC,SAASC,MAEjCC,YAAwB,EACxBC,WAAwB,GACxBtJ,WAAY,CACRuJ,aAAoB,gBACpBC,UAAoB,aACpBC,YAAoB,eACpBC,YAAoB,eACpBxI,OAAoB,gBACpB8G,MAAoB,YAExB2B,YGlDmB,SAA6BC,EAAiBC,GAErE,MAAMC,EAAW,GACXC,EAAQC,KAAKD,MACnB,IAAIE,EAAUH,EAkFd,OAhFAF,EAAgB5H,QAAQyC,IACpB,MAAMyF,EAA6B,aAAhBzF,EAAOY,KACpB8E,EAA0B,UAAhB1F,EAAOY,KACjB+E,EAAW3F,EAAOa,QAAQ,UAC1BF,EAAOX,EAAOW,KACpB,IAAI+B,EAAQ0C,EAAapF,EAAO0C,MAAMC,OAAS3C,EAAO0C,MAEtD,GAAI+C,EAAY,CAEZ/C,EAAQ1C,EAAO4F,QACf,IAAIC,EAAc5I,MAAMC,KAAMoI,EAAMQ,iBAAkB,UAASnF,QAC/D,GAAIkF,EAAYnG,OAAS,EAAG,CACxBgD,EAAQ,GACOmD,EAAYxI,OAAQ0I,GAAUA,EAAMH,SAC1CrI,QAAQyC,IACb0C,EAAM9E,KAAKoC,EAAO0C,eAIvB,GAAIgD,EAAS,CAEhB,MAAMM,EAAgBV,EAAMW,cAAe,UAAStF,eACpD+B,EAA0B,OAAlBsD,EAAyB,KAAOA,EAActD,WAEnD,GAAIiD,EAAU,CAEjB,MAAMO,EAAgBjJ,MAAMC,KAAK8C,EAAOsC,SAASjF,OAAO8I,GAAUA,EAAOC,UACrEF,EAAcxG,OAAS,IACvBgD,EAAQ,GACRwD,EAAc3I,QAAQyC,IAClB0C,EAAM9E,KAAKoC,EAAO0C,UAKZ/B,EAAKjF,MAAM,KACnB6B,QAAQ,CAAC8I,EAASC,EAAOC,KAC/B,MAAMC,EAAgBF,EAAQ,IAAMC,EAAK7G,OAEzC,GAAIzC,MAAMS,QAAQ8H,GAAU,CACxB,MAAMiB,EAAeJ,EAAQ3K,MAAM,OAC7BgL,EAASD,EAAa,GAAK,EAC3BE,OAAiD,IAApBnB,EAAQkB,GACrCE,EAAiBH,EAAa,GAcpC,GAZKE,GACDnB,EAAQ5H,KAAK,IAGjByI,EAAUO,EAENJ,EACAhB,EAAQkB,GAAQL,GAAW3D,OACgB,IAA7B8C,EAAQkB,GAAQL,KAC9Bb,EAAQkB,GAAQL,GAAW,KAG1BG,EAED,YADAhB,EAAUA,EAAQkB,GAAQL,QAG3B,CACH,MAAMQ,EAAiBR,EAAQS,SAAS,MACxCT,EAAUA,EAAQxG,QAAQ,KAAM,IAE5B2G,EACAhB,EAAQa,GAAW3D,OACgB,IAArB8C,EAAQa,KAElBb,EAAQa,GADRQ,EACmB,GAEA,IAK/BrB,EAAUgB,EAAgBnB,EAAWG,EAAQa,OAI9ChB,GHnCH0B,OAAwB,GACxBC,kBAAwB,EACxBC,cAAwB,EACxBC,mBAAwB,IItCnBC,EAAkB,CAC3BC,KCZgB,SAAU7H,GAC1B,MAAO,CACHd,OAAQ,iUAAiU4I,KAAM9H,KDWnV+H,MEhBiB,SAAU/H,GAC3B,MAAO,CACHd,OAAQ,4IAA4I4I,KAAM9H,KFe9JgI,OGdkB,SAAUhI,GAC5B,MAAO,CACHd,OAAQ,0BAA0B4I,KAAM9H,KHc5CiI,SInBoB,SAAU9E,EAAO1C,GACrC,MAAMyH,EAAczH,EAAO0H,KAAKzB,cAAe,UAASjG,EAAOW,uBAC/D,OAAO8G,ECJW,SAAUzH,GAC5B,MAAM2H,EAAYvH,KAAKC,MAAOL,EAAO4H,QAAQC,QACvCC,EAAgB9H,EAAO0H,KAAK5B,iBAAkB,UAAS9F,EAAOW,kBAAkBjB,OAChFqI,EAAUD,GAAiBH,EAAU,GACrCK,EAAUF,GAAiBH,EAAU,GACrC5G,EAAM,CAAEtC,OAAQsJ,GAAWC,GAQjC,OANKjH,EAAItC,SACLsC,EAAIkH,OAAS,CAAEJ,QAAQ,GAClBE,IAAWhH,EAAIkH,OAAOC,WAAY,GAClCF,IAAWjH,EAAIkH,OAAOE,WAAY,IAGpCpH,EDTc8G,CAAOJ,GAAe,CAAEhJ,OAAQuB,EAAO4F,UJkB5DwC,QMtBmB,SAAU1F,EAAO1C,GAEpC,MAAO,CAAEvB,OAAQiE,IADE1C,EAAO0H,KAAKzB,cAAgB,UAASjG,EAAO4H,QAAQQ,aACjC1F,QNqBtC2F,YOvBuB,SAAU3F,EAAO1C,GACxC,MAAMsI,EAAc5F,EAAMhD,OACpB2I,EAA2C,EAA7BrI,EAAO4H,QAAQS,YAC7BtH,EAAM,CAAEtC,OAAQ6J,IAAgBD,GAQtC,OANKtH,EAAItC,SACLsC,EAAIkH,OAAS,GACTK,EAAcD,EAAetH,EAAIkH,OAAOM,WAAY,EACjDxH,EAAIkH,OAAOO,WAAY,GAG3BzH,GPaP0H,KQxBgB,SAAU/F,EAAO1C,EAAQuC,GACzC,MAAMkB,EAAwF,GAAzEzD,EAAOM,aAAa,uBAAyBiC,EAAakB,aACzEiF,EAAW1I,EAAO2I,OAAS,IAAIC,OAAO5I,EAAO2I,OAAO9I,QAAS,IAAK,aAAgB,KAClFgJ,EAAY5L,MAAMC,KAAK8C,EAAO8I,OAC9B/H,EAAM,CAAEtC,QAAQ,GAiBtB,OAfAoK,EAAUtL,QAAQkL,IACd,MAAMM,EAAoBtF,EAAc,GAAMgF,EAAKO,KAAK,KAAK,KAAQvF,EAC/DwF,EAAkC,OAAbP,GAAoBA,EAASrB,KAAKoB,EAAK7H,OAE9DmI,GAAsBE,IACtBlI,EAAItC,QAAS,OACa,IAAfsC,EAAIkH,SACXlH,EAAIkH,OAAS,IAEbc,IAAqBhI,EAAIkH,OAAOxE,aAAc,GAC7CwF,IAAsBlI,EAAIkH,OAAOiB,kBAAmB,MAK1DnI,GRIPrB,OSzBkB,SAAUgD,EAAO1C,GACnC,MAAMmJ,EAASzG,EAAMhD,OACfiI,EAAYvH,KAAKC,MAAOL,EAAO4H,QAAQlI,QACvC0J,EAAgBD,GAAUxB,EAAU,GACpC0B,EAAgBF,GAAUxB,EAAU,GACpC5G,EAAM,CAAEtC,OAAQ2K,GAAiBC,GAQvC,OANKtI,EAAItC,SACLsC,EAAIkH,OAAS,GACRmB,IAAiBrI,EAAIkH,OAAOM,WAAY,GACxCc,IAAiBtI,EAAIkH,OAAOO,WAAY,IAG1CzH,GTaPuI,IUxBe,SAAU5G,EAAO1C,GAChC,IAAIuJ,EAASvJ,EAAOsJ,IACpB,MAAMjK,EAAaW,EAAO4H,QAAQvI,WAUlC,OARoB,SAAhBW,EAAOY,MAAmBvB,KAC1BqD,EAAQvD,EAAiBuD,EAAOrD,GAChCkK,EAASA,EAAO7N,MAAM,KAAKoE,KAAK,KAIpCyJ,GAAkB,EAEX,CAAE9K,QAHTiE,GAAgB,IAGU6G,IVa1Bf,UW3BqB,SAAU9F,EAAO1C,GACtC,MAAO,CAAEvB,OAAQiE,EAAMhD,QAA6B,EAAnBM,EAAOwJ,YX2BxCC,IY1Be,SAAU/G,EAAO1C,GAChC,IAAI0J,EAAS1J,EAAOyJ,IACpB,MAAMpK,EAAaW,EAAO4H,QAAQvI,WAUlC,OARoB,SAAhBW,EAAOY,MAAmBvB,KAC1BqD,EAAQvD,EAAiBuD,EAAOrD,GAChCqK,EAASA,EAAOhO,MAAM,KAAKoE,KAAK,KAIpC4J,GAAkB,EAEX,CAAEjL,QAHTiE,GAAgB,IAGUgH,IZe1BnB,Ua7BqB,SAAU7F,EAAO1C,GACtC,MAAO,CAAEvB,OAAQiE,EAAMhD,QAA6B,EAAnBM,EAAO2J,Yb6BxCC,Qc9BmB,SAAUlH,EAAO1C,GACpC,MAAO,CAAEvB,OAAQ,IAAImK,OAAO5I,EAAO4J,SAASvC,KAAK3E,Kd8BjDmH,Me/BiB,SAAUnH,EAAO1C,GAClC,MAAM8J,EAAgB9J,EAAO0H,KAAKzB,cAAgB,UAASjG,EAAOW,kBAGlE,MAAO,CAAElC,OAFyB,OAAlBqL,GAA0BA,EAAcpH,MAAMC,OAAOjD,OAAS,KCFrEqK,EAAiB,SAAUC,GAEpC,MAAMhK,EAASgK,EAAMC,OAErB,GAAIjK,EAAOa,QAAQ,wBAAyB,CACxC,IAAIqJ,EAAalK,EAAO0C,MAGxB,GAFwB,aAAa2E,KAAK6C,GAErB,CACjBF,EAAMG,2BACN,IAAIC,EAAgBF,EAAWrK,QAAQ,cAAe,IACtDG,EAAO0C,MAAQ0H,KCXdC,EAAoB,SAAUL,GACvC,MAAM1E,EAAQ0E,EAAMC,OACd3H,EAAUgD,EAAMgF,OAAOhI,QAE7B,IAAKA,EAAQC,aAAaW,eAAgB,CACtC,MAAMqH,EAAeP,EAAMQ,OAAO/L,OAAS,MAAQ,SACnD6G,EAAM9J,UAAU+O,GAAejI,EAAQwB,YAAYvI,WAAWgI,SCNzDkH,EAAoB,SAAUT,GAEvC,MAAMhK,EAASgK,EAAMC,OAErB,GAAIjK,EAAOa,QAAS,eAAiB,CACjC,MAAM2I,EAA+B,EAAnBxJ,EAAOwJ,UACnBkB,EAAaV,EAAMW,OAASX,EAAMY,QAClCC,EAAc,CAAC,EAAG,GAAI,GAAI,GAAI,IAEpC,GAAI7K,EAAO0C,MAAMhD,QAAU8J,IAAkD,IAArCqB,EAAYjL,QAAQ8K,GACxD,OAAO,ICVNI,EAAe,SAAUd,GAElC,MAAMhK,EAASgK,EAAMC,OACf1H,EAAevC,EAAO0H,KAAK4C,OAAOhI,QAAQC,aAE5CvC,EAAOa,QAAS0B,EAAaoB,qBAC7BqG,EAAMe,kBCUPC,eAAeC,EAAU3F,EAAO4F,EAAa5I,GAEhD,IAAI6I,EACJ,MAAMpH,EAAchH,EAAc,GAAIuF,EAAQwB,YAAYC,aACpDqH,EAAsD,wBAAxCrH,EAAYG,QAAQ,gBAKxC,GAHAH,EAAYsH,KAAOH,EAGfE,GAAe9I,EAAQwB,YAAYkD,iBAAkB,CACrD,IAAIsE,EAAoB,IAAIC,SAE5B,IAAI,IAAI9N,KAAOsG,EAAYsH,KACvBC,EAAkBE,OAAQ/N,EAAKsG,EAAYsH,KAAK5N,IAGpDR,MAAMC,KAAMoI,EAAMQ,iBAAiB,kBAAmBvI,QAAQyC,IAC1D/C,MAAMC,KAAK8C,EAAO8I,OAAOvL,QAAQ,CAACkL,EAAMgD,KACpC,MAAM9K,EAAQ,GAAEX,EAAOW,QAAQ8K,KAC/BH,EAAkBE,OAAQ7K,EAAM8H,EAAMA,EAAK9H,UAInDoD,EAAYsH,KAAOC,EAuBvB,GApB2B,QAAvBvH,EAAYM,QAGZN,EAAYU,MAAS,KAAK4C,KAAKtD,EAAYU,KAAO,IAAM,KAAQ5C,EAAiBkC,EAAYsH,aACtFtH,EAAYsH,MAIftH,EAAYG,QAAQ,gBAAgBtE,QAAQ,sCAAwC,EAEpFmE,EAAYsH,KAAOxJ,EAAiBkC,EAAYsH,MACxCD,IAERrH,EAAYsH,KAAOjL,KAAKsL,UAAU3H,EAAYsH,OAKtDtH,EAAYG,QAAU,IAAIyH,QAAS5H,EAAYG,SAE1CH,EAAYS,QAAU,EAAI,CAC3B,MAAMoH,EAAa,IAAIC,gBACjBC,EAASF,EAAWE,OAE1B/H,EAAY+H,OAASA,EACrBX,EAAeY,OAAOC,WAAW,KAC7BJ,EAAWK,SACZlI,EAAYS,SAGnB,OAAO0H,MAAMnI,EAAYU,IAAKV,GACzBtC,KAAK0K,IACF,IAAKA,EAASC,GACV,MAAM,IAAIC,MAAMF,EAASG,YAE7B,MAAMC,EA3EK,EAACJ,EAAU7J,KAC9B,MAAMqG,EAASrG,EAAQ4B,QAAQsI,IAAI,UAC7BC,EAAcN,EAASjI,QAAQsI,IAAI,gBACnCE,EAAY/D,GAAU8D,GAAe,GAE3C,OAAIC,EAAU9M,QAAQ,qBAAuB,GAAmB,KAAd8M,EACvC,OACAA,EAAU9M,QAAQ,UAAY,EAC9B,OAEA,QAiEiB+M,CAAeR,EAAUpI,GAC7C,OAAOoI,EAASI,OAEnB9K,KAAKL,IACF/F,EAAUiK,EAAOhD,EAAQwB,YAAYvI,WAAW0J,aACzC7D,IAEVwL,MAAMxJ,IAEH,MADA/H,EAAUiK,EAAOhD,EAAQwB,YAAYvI,WAAWwJ,WAC1C,IAAIsH,MAAMjJ,EAAMyJ,WAEzBC,QAAQ,KACD3B,GACAY,OAAOgB,aAAc5B,GAEzBnP,EAAasJ,EAAQ,GAAEhD,EAAQwB,YAAYvI,WAAWkB,UAAU6F,EAAQwB,YAAYvI,WAAWyJ,eAC/F3J,EAAUiK,EAAOhD,EAAQwB,YAAYvI,WAAWuJ,cAChDQ,EAAMW,cAAc,mBAAmB+G,UAAW,IC3FvD,SAASvQ,EAAQuN,GAEpB,MAAM1E,EAAQ0E,EAAMC,OACdgD,EAAW3H,EAAMgF,OACjBhI,EAAU2K,EAAS3K,QACnB4K,EAAiB5K,EAAQwB,YAAYvI,WACrC4R,EAAa7K,EAAQwB,YAAYc,WACjCwI,EAAO9H,EAAMW,cAAc,mBAE3BoH,EAAsB,WAAwB,IAAtBC,6DACtBF,GAAQE,IAAaF,EAAKJ,UAAW,GACrChD,GAASA,EAAMe,kBAOvB,GAJIoC,GACAE,GAAoB,GAGpBD,EAAM,CACN,GAAIA,EAAKJ,SAEL,OADAK,GAAoB,IACb,EAEXD,EAAKJ,UAAW,EAGpBhR,EAAasJ,EAAQ,GAAE4H,EAAepI,gBAAgBoI,EAAenI,aAAamI,EAAejI,eACjG5J,EAAUiK,EAAO4H,EAAezQ,QAEhCwQ,EAASM,eACJ9L,KAAKL,IAIF,QAFuC,IAAfA,EAAKoM,QAEZpM,EAAKqM,UAClB,MAAO,CAAC,CAAEC,eAAe,IAG7B,MAAMC,EAAiB,CACnBD,eAAe,EACfrI,SAAU8H,EAAaF,EAAS/H,cAAgB,MAG9C0I,EAAY,CACZzM,cAAemB,EAAQwB,YAAYe,WACnCzD,KAAMuM,EACNtM,gBAAiB,SAASD,GAAO,OAAOA,EAAKsM,gBAEnD,OAAOxM,EAAqB0M,KAE7BnM,KAAKG,IAEJ,GAAIA,EAASiM,KAAKtP,IAAA,IAACmP,cAACA,GAAFnP,EAAA,OAAqBmP,IAEnC,OADAL,KACO,EAGX,GAAIF,EAAY,CACZ,MAAM9H,EAAWzD,EAASkM,MAAMzI,SAChChK,EAAUiK,EAAO4H,EAAelI,aAChCnH,EAAqByH,EAAOjJ,EAAkBI,OAAQ,CAAE+N,OAAQS,EAAU3F,EAAOD,EAAU/C,QAIlGsK,MAAMpO,IACH6O,IACArR,EAAasJ,EAAO4H,EAAezQ,UCrExC,MAAMsR,EAAqB,SAAU/D,GAExC,MAAMQ,EAASR,EAAMQ,OAEjBA,EAAO/L,SACPuL,EAAMC,OAAOK,OAAO0D,aAAexD,EAAOgD,MAAMS,OCH3C3R,EAAa,SAAU0N,GAEhC,MAAMkE,EAA+B,WAAflE,EAAMpJ,KACtBZ,EAASgK,EAAMC,OACfkE,EAAOnO,EAAO0H,KAAK4C,OAEzB,GAAItK,EAAOa,QAASxC,GAAwB,CACxC,MAAM+P,EAA+BnN,EAAsBjB,GACrDqO,EAAoE,WAA/CF,EAAK7L,QAAQC,aAAasB,kBAGhDuK,GAAgCF,IAC/BE,KAAkCF,GAAiBG,KAGrDF,EAAKG,cAAetO,GACfyB,KAAK,KACF,MAAMb,EAAOZ,EAAOY,KACd2N,EAAkBvO,EAAO0H,KAAKzB,cAAe,mBAAkBjG,EAAOW,WAIvEX,EAAOwO,UAAYxO,EAAOa,QAAQ,+BACxB,aAATD,GAAgC,UAATA,GACzB2N,GAAoD,KAAjCA,EAAgB7L,MAAMC,QAEzCwL,EAAKG,cAAeC,GAAkB3B,MAAM3E,SAGnD2E,MAAM3E,SC7BVwG,EAAgB,SAAUzE,GAEnC,MAAM0E,EAAc1E,EAAMQ,OACpBxK,EAAS0O,EAAY1O,OACrB2O,EAAmB5O,EAAiCC,EAAQ,sBAC5DuC,EAAexF,EAAa,GAAIiD,EAAO0H,KAAK4C,OAAOhI,QAAQC,aAAcoM,GACzE7L,EAAa9C,EAAOG,QAASoC,EAAaQ,mBAC1C6L,EAAY5O,EAAOa,QAAQ,wBAC3BgO,EAAWC,SAAS7I,cAAejG,EAAO4H,QAAQmH,cAExD,GAAIjM,IAAeP,EAAaW,eAE5B,GAAIwL,EAAYjQ,QAEZ,IAAKmQ,GAAcA,GAAaC,EAASjJ,QAAU,CAE/C,MAAMoJ,EAAgB,GAAEzM,EAAahH,WAAW6H,SAASb,EAAahH,WAAW8H,cAAcd,EAAahH,WAAW+H,YACvHtH,EAAa8G,EAAYkM,GACzB3T,EAAUyH,EAAYP,EAAahH,WAAWgI,YAG/C,CAGH,IAAI0L,EAAkB1M,EAAahH,WAAW+H,UAG9C,MAAM4L,EAAWlP,EAAOa,QAAQ,iBAC1BsO,EAAmBD,EAAWpM,EAAWgD,iBAAkB,UAAS9F,EAAOW,kBAAkBjB,OAAS,IAEtGwP,GAAaR,EAAYzG,QAAUyG,EAAYzG,OAAOmH,OAAYF,GAAgC,IAApBC,KAChFF,EAAkB1M,EAAahH,WAAW8H,YAG9C,IAAI2L,EAAgB,GAAEzM,EAAahH,WAAW6H,SAAS6L,IACnDI,EAAsB,GAAE9M,EAAahH,WAAW8H,cAAcd,EAAahH,WAAW+H,YAC1FtH,EAAa8G,EAAa,GAAEP,EAAahH,WAAWgI,SAAS8L,KAC7DhU,EAAUyH,EAAYkM,KC7B3BhE,eAAesE,EAAoBtP,EAAQuC,EAAc4E,EAAiBoI,GAE7E,IAAKrT,EAAU8D,GAAS,CACpB,MAAMe,EAAMD,EAA0B,CAACd,OAAAA,IACvC,OAAOtB,QAAQC,QAAQoC,GAG3B,MAAMuE,EAAQtF,EAAO0H,KACf8H,EAAexP,EAAO0C,MAAMC,OAAOjD,OAAS,EAC5CiP,EAAmB5O,EAAiCC,EAAQ,sBAKlE,GAHAuC,EAAexF,EAAcwF,EAAcoM,GAGvB,UAAhB3O,EAAOY,KAAkB,CACzB,MAAM6O,EAAWzP,EAAO4F,QAAU5F,EAASsF,EAAMW,cAAe,UAASjG,EAAOW,kBAC1E+O,EAAmBD,GAAYA,EAAS5O,QAAQ,uBAChD8O,EAAeD,EAAmBD,EAAWnK,EAAMW,cAAe,6BAA4BjG,EAAOW,UACrGiP,EAAeD,EAAerK,EAAMW,cAAe,yBAAwB0J,EAAaE,QAAU,KAEpGJ,GAAYG,IACZA,EAAapB,SAAWmB,EAAanB,UAAYmB,EAAa/J,QACzD8J,EAEMnN,EAAaiB,gBACpBoM,EAAaE,QAFbF,EAAalN,MAAQ,IAQjC,GAAI1C,EAAOa,QAAQ,yBAA2B2O,EAAc,CACxD,MAAMX,EAAWvJ,EAAMW,cAAejG,EAAO4H,QAAQmH,cACrDF,EAASjJ,SAAU,EACnB5F,EAAOwO,SAAWK,EAASL,SAG/B,MAKMuB,SAL6B7O,EAAqB,CACpDC,cAAeoB,EAAaC,iBAC5BpB,KAAM,CAAEpB,OAAAA,EAAQuC,aAAAA,MAGiBuL,MAC/BkC,EAAkBhQ,EAAOwO,UAAaxO,EAAOa,QAAQ,8BAAgC2O,EAEtFQ,IACDD,EAAQtR,QAAS,GAGrB,MAAMwR,EAAmBD,QCzDtBhF,eAAwBhL,EAAQuC,EAAc4E,EAAiBoI,GAElE,MAAMrF,EAAalK,EAAO0C,MACpB3B,EAAMD,EAA0B,CAACrC,OAAQyL,EAAWvH,OAAOjD,OAAS,EAAGM,OAAAA,IACvEkQ,EAAoB,CAAC,WAAY,SAASrN,SAAS7C,EAAOY,MAC1DuP,EAAmBnQ,EAAO0H,KAAK5B,iBAAkB,UAAS9F,EAAOW,kBAAkBjB,OAAS,EAElG,IAAMwQ,IAAsBnP,EAAItC,QAAYyR,IAAsBC,EAG9D,OAFApP,EAAItC,QAAS,EACbsC,EAAIkH,OAAS,CAAEmH,OAAO,GACf1Q,QAAQC,QAAQoC,GAI3B,MAAMqP,EAAoBnT,MAAMC,KAAK8C,EAAOqQ,YAAY/O,OAAO,CAACgP,EAASC,KACrE,MAAMtQ,EAAWiC,EAAaqO,EAAK5P,KAAKd,QAAQ,QAAS,KACnD8H,EAAYzF,EAAaqO,EAAK7N,OAC9B8N,EAAoB,CAAC,OAAQ,WAAW3N,SAAS5C,IAAakH,EAAgBQ,GAC9E8I,EAAmBtJ,EAAgBlH,GAKzC,OAHIuQ,GAAqBC,IACrBH,EAAQ1S,KAAM4S,EAAoB7I,EAAY1H,GAE3CqQ,GACR,IAEGI,QAAiB,IAAIhS,QAAQC,IAsB/BA,EAnB0ByR,EAAkB9O,OAAO,CAACqP,EAAYC,IACrDD,EAAWlP,KAAKoP,GACZ,IAAInS,QAAQoS,IAEfA,EAAY3J,EAAgByJ,GAAY1G,EAAYlK,EAAQuC,MAC7Dd,KAAKsP,IAEJ,IAAKA,EAAOtS,OAAQ,CAChB,MAAMuS,EAAW,QACY,IAAlBD,EAAO9I,aAA+D,IAA9B8I,EAAO9I,OAAO2I,KAC7DI,EAASJ,IAAc,GAE3BG,EAAO9I,OAASlL,EAAa,GAAIgU,EAAO9I,OAAQ+I,GAGpD,OADAD,EAASA,EAAOtS,OAAS,GAAKsS,EACvBhU,EAAa8T,EAAQE,MAGrCrS,QAAQC,QAAQoC,OAYvB,OAPK2P,EAASjS,SACViS,EAASzI,OAASmI,EAAkB9O,OAAO,CAACuP,EAAQD,KAChD,MAAM3I,EAAUsH,EAAiBqB,IAAerB,EAAiBqB,GAAY1G,EAAYlK,IAAY,GACrG,OAAOjD,EAAa8T,EAAQ5I,IAC7ByI,EAASzI,SAGTyI,EDF0CO,CAAQjR,EAAQuC,EAAc4E,EAAiBoI,GAAoBQ,EAE9GjN,EAAaP,EAAaQ,mBAAqBkN,EAAiBjQ,OAAOG,QAASoC,EAAaQ,mBAKnG,OAJID,GACA9G,EAAa8G,EAAYP,EAAahH,WAAW4H,SAG9C8M,EE/DJjF,eAAekG,EAAqBtO,EAASL,EAAc4E,EAAiBoI,GAAsC,IAApB4B,yDAAc,KAE/G5O,EAAexF,EAAc,GAAIwF,EAAc,CAACiB,gBAAgB,IAChE,MAAM4N,EAAc7Q,EAAiBqC,GAE/ByO,QAAuB3S,QAAQyD,IAAKiP,EAAYE,IAAItR,IAEtD,GAAImR,GAAenR,IAAWmR,EAAa,CACvC,MAAMpQ,EAAMD,EAA0B,CAACd,OAAAA,EAAQvB,QAAQ,IACvD,OAAOC,QAAQC,QAAQoC,GAG3B,OAAOuO,EAAoBtP,EAAQuC,EAAc4E,EAAiBoI,MAIhEgC,EAAoBF,EAAeG,MAAMjT,IAAA,IAACE,OAACA,GAAFF,EAAA,OAAcE,IAE7D,OAAOuC,EAAyB,CAACvC,OAAQ8S,EAAmB/S,OAAO6S,ICAvE,MAAMI,EAEF3P,YAAa4F,EAAMgK,GACf,MAAMC,EAAQxU,UAAUuC,OAClBkS,ECvBalK,CAAAA,IACvB,MAAMmK,SAAoBnK,EAEpBoK,EADqC,WAAfD,GAA2B3V,EAAU4S,SAAS7I,cAAcyB,KACa,SAAvDoH,SAAS7I,cAAcyB,GAAMqK,QAAQC,cAEnF,MAAO,CACHvT,OAAQvC,EAAUwL,IAASoK,EAC3BG,IAAqB,WAAfJ,EAA0B/C,SAAS7I,cAAcyB,GAAQA,IDgBzCwK,CAAYxK,GAElC,GAAc,IAAViK,GAAgBA,EAAQ,IAAMjK,EAC9B,MAAM,IAAI2E,MAAM,8CAEpB,GAAI1Q,EAAW+L,GACX,MAAM,IAAI2E,MAAM,2FAEpB,IAAKuF,EAAcnT,OACf,MAAM,IAAI4N,MAAM,oEAGpB,MAAM8B,EAAO5I,KAEb4I,EAAK7I,MAAQsM,EAAcK,IAC3B9D,EAAK7I,MAAMgF,OAAS6D,EACpBA,EAAK7L,QAAUvF,EAAa,GAAI0U,EAAK3V,UAAUwG,QAASoP,GACxDvD,EAAKH,aAAeG,EAAK7L,QAAQwB,YAAYiD,OAAO,GAGrC,CAEX,mBAEA,aACA,eAEGxJ,QAAQ4U,IACX,MAAMC,EAAajE,EAAK7L,QAAQwB,YAAYqO,GAAU,cAAgB,eACtE,IAAIE,EAAQlE,EAAK7L,QAAQ8P,GAAYD,GAEjCE,IACAlE,EAAK7L,QAAQ8P,GAAYD,GAAYlV,MAAMS,QAAQ2U,GAASA,EAAMf,IAAIgB,GAAQA,EAAKC,KAAKpE,IAASkE,EAAME,KAAKpE,ME7CrH,SAAsB7I,EAAOhD,GAEhCgD,EAAMkN,YAAa,EAEnB,MAAMjQ,EAAeD,EAAQC,aACvBuB,EAAcxB,EAAQwB,YAGxBvB,EAAaqB,uBAIb0B,EAAMmN,iBAAiB,WAAYhI,GAAmB,GAItDnF,EAAMmN,iBAAiB,QAAS1I,GAAgB,IAIhDxH,EAAaoB,oBAAsB2B,EAAMQ,iBAAkBvD,EAAaoB,oBAAqBjE,QAE7F4F,EAAMmN,iBAAiB,QAAS3H,GAAc,GAIlDvI,EAAasB,iBAAiBnI,MAAM,KAAK6B,QAAQQ,IAC7C,MAAM2U,EAAa,CAAC,OAAQ,SAAS7P,SAAS9E,GAC9CuH,EAAMmN,iBAAiB1U,EAAWzB,EAAYoW,KAGlDpN,EAAMmN,iBAAiBpW,EAAmBC,WAAYmS,GAAe,GACjE3K,EAAYiD,OAAOrH,OAAS,GAC5B4F,EAAMmN,iBAAiBpW,EAAmBC,WAAYyR,GAAoB,GAE9EzI,EAAMmN,iBAAiBpW,EAAkBC,WAAY+N,GAAmB,GAGpEvG,EAAYmD,eAEZ3B,EAAMmN,iBAAiB,SAAUhW,GAE7BqH,EAAYc,aACRU,EAAMhF,aAAa,aACnBwD,EAAYC,YAAYG,QAAQ,gBAAkBoB,EAAMhF,aAAa,YAGrEgF,EAAMhF,aAAa,YACnBwD,EAAYC,YAAYM,OAASiB,EAAMhF,aAAa,UAAU+B,eAG9DiD,EAAMhF,aAAa,YACnBwD,EAAYC,YAAYU,IAAMa,EAAMhF,aAAa,aFHzDqS,CAAaxE,EAAK7I,MAAO6I,EAAK7L,SAE9B,MAAMsQ,EAAc,GAChBzE,EAAK7L,QAAQwB,YAAYoD,oBACzB0L,EAAYpI,OAAS2D,EAAK0E,uBAAuBjG,MAAMpO,QAE3DX,EAAqBsQ,EAAK7I,MAAOjJ,EAAkBG,KAAMoW,GAG7DrW,WGlEG,SAAkB+I,EAAOhD,GAExBA,EAAQC,aAAaqB,uBACrB0B,EAAMwN,oBAAoB,WAAYrI,GAAmB,GACzDnF,EAAMwN,oBAAoB,QAAS/I,GAAgB,IAGnDzH,EAAQC,aAAaoB,oBACrB2B,EAAMwN,oBAAoB,QAAShI,GAAc,GAGjDxI,EAAQwB,YAAYmD,cACpB3B,EAAMwN,oBAAoB,SAAUrW,GAGxC6F,EAAQC,aAAasB,iBAAiBnI,MAAM,KAAK6B,QAAQQ,IACrD,MAAMgV,EAA6B,SAAdhV,EACrBuH,EAAMwN,oBAAoB/U,EAAWzB,EAAYyW,KAGrDzN,EAAMwN,oBAAoBzW,EAAmBC,WAAYmS,GAAe,GACpEnM,EAAQwB,YAAYiD,OAAOrH,OAAS,GACpC4F,EAAMwN,oBAAoBzW,EAAmBC,WAAYyR,GAAoB,GAEjFzI,EAAMwN,oBAAoBzW,EAAkBC,WAAY+N,GAAmB,UAEpE/E,EAAMgF,OHyCT/N,CAAQgJ,KAAKD,MAAOC,KAAKjD,SACzBzE,EAAqB0H,KAAKD,MAAOjJ,EAAkBE,SAGvD2I,cAA+D,IAAlDE,EAAajI,UAAAuC,OAAA,QAAAsT,IAAA7V,UAAA,GAAAA,UAAA,GAAAoI,KAAKjD,QAAQC,aAAaE,UAChD,MAAMwQ,EAAc1N,KAAKD,MAAMQ,iBAAiB,2BAC1CX,EAAkBlI,MAAMC,KAAM+V,GAAc5V,OAAQS,GAAQA,EAAK+C,QI7EhD,+GJ8EvB,OAAO0E,KAAKjD,QAAQwB,YAAYoB,YAAaC,EAAiBC,GAG/C8N,oBAAEnN,EAAOxD,GACxB,MAAM4L,EAAO5I,KACPD,EAAQ6I,EAAK7I,MACbtF,EAA0B,iBAAV+F,EAAqBT,EAAMW,cAAcF,GAASA,EAExExD,EAAexF,EAAa,GAAIoR,EAAK7L,QAAQC,aAAcA,GAE3D,MAAM4Q,QAAsB7D,EAAmBtP,EAAQuC,EAAc4L,EAAKhH,gBAAiBgH,EAAKoB,kBAIhG,GAFA1R,EAAqBsV,EAAcnT,OAAQ3D,EAAmBC,WAAY,CAAEkO,OAAQ2I,IAEhFA,EAAc1U,QACd,GAAI8D,EAAamB,qBAAsB,CACnC,MAAM0P,EAAWjF,EAAKH,cAAgB3P,EAEtC6S,EADgB5L,EAAMQ,iBAAiBsN,GACT7Q,EAAc4L,EAAKhH,gBAAiBgH,EAAKoB,iBAAkB4D,EAAcnT,QAClGyB,KAAK4R,IACF,MAAMtM,EAASoH,EAAK7L,QAAQwB,YAAYiD,OAClCuM,EAAsBnF,EAAKH,aAAe3R,EAAmBC,WAAaD,EAAkBC,WAC9FyK,EAAOrH,OAAS,IAChB2T,EAAS7F,MAAQ,CACb+F,KAAMxM,EAAOA,EAAOnH,QAAQwT,GAAY,GACxCI,QAASJ,EACTnF,KAAMlH,EAAOA,EAAOnH,QAAQwT,GAAY,IAE5CC,EAAS5F,UAAY4F,EAAS5U,SAAW4U,EAAS7F,MAAMS,MAE5DpQ,EAAqByH,EAAOgO,EAAqB,CAAE9I,OAAQ6I,YAIvErX,EAAasJ,EAAO6I,EAAK7L,QAAQwB,YAAYvI,WAAWgI,OAG5D,MKnH4BhF,CAAAA,IAAsB,IAArB0J,OAACA,EAADxJ,OAASA,GAAYF,EACtD,OAAIE,EACOC,QAAQC,UAEZD,QAAQE,OAAOqJ,IL+GXwL,CAAqBN,GAGPD,4BAA2C,IAAzC1F,EAAQrQ,UAAAuC,OAAA,QAAAsT,IAAA7V,UAAA,GAAAA,UAAA,GAAAoI,KAAKyI,aAAczL,EAAcpF,UAAAuC,OAAA,EAAAvC,UAAA,QAAA6V,EAChE,MAAM7E,EAAO5I,KACbhD,EAAexF,EAAa,GAAIoR,EAAK7L,QAAQC,aAAcA,GAC3D,MAAMK,EAAUuL,EAAK7I,MAAMQ,iBAAiB0H,GAEtCkG,QAAsBxC,EAAoBtO,EAASL,EAAc4L,EAAKhH,gBAAiBgH,EAAKoB,kBAElGmE,EAAclV,OAAOjB,QAAQwD,IACzBA,EAAI4S,iBAAkB,EACtB9V,EAAqBkD,EAAIf,OAAQ3D,EAAmBC,WAAY,CAAEkO,OAAQzJ,MAG9E,MAAMgG,EAASoH,EAAK7L,QAAQwB,YAAYiD,OAYxC,OAXIA,EAAOrH,OAAS,IAChBgU,EAAclG,MAAQ,CAClB+F,KAAMxM,EAAOA,EAAOnH,QAAQ4N,GAAS,GACrCgG,QAAShG,EACTS,KAAMlH,EAAOA,EAAOnH,QAAQ4N,GAAS,IAEzCkG,EAAcjG,UAAYiG,EAAcjV,SAAWiV,EAAclG,MAAMS,MAG3EpQ,EAAqBsQ,EAAK7I,MAAOjJ,EAAmBC,WAAY,CAAEkO,OAAQkJ,IM5IxCnV,CAAAA,IAAwC,IAAvCkP,UAACA,EAADjP,OAAYA,EAAZgP,MAAoBA,EAApB/O,OAA2BA,GAAYF,EAC9E,OAAIE,EACOC,QAAQC,QAAQ,CAAC8O,UAAAA,EAAWjP,OAAAA,EAAQgP,MAAAA,IAExC9O,QAAQE,OAAO,CAACJ,OAAAA,EAAQgP,MAAAA,KN0IpBoG,CAA2BF,GAGZR,2BAAE3Q,GACxB,MAAM4L,EAAO5I,KO/IUD,IAAAA,EPoJvB,MAAMuO,EAAuB3C,GOpJN5L,EPgJgB6I,EAAK7I,MO/IzC/E,EAAiB+E,EAAMQ,iBAAiBzH,IAC9CiT,IAAItR,IAED,MAAMW,EAAOX,EAAOW,KACdC,EAAOZ,EAAOY,KACdsP,EAAoB,CAAC,WAAY,SAASrN,SAASjC,GACnDkT,EAAexO,EAAMW,cAAe,UAAStF,eAC7CiO,EAAY5O,EAAOa,QAAQ,wBAC3BgO,EAAYD,EAAYtJ,EAAMW,cAAcjG,EAAO4H,QAAQmH,cAAgB,KAEjF,OACImB,EAAqB4D,GAAgB,KACpClF,GAAaC,EAASjJ,UAAcgJ,GAAa5O,EAAO0C,MAAS1C,EAAS,OAIlF3C,OAAO2C,GAAqB,OAAXA,IPiIduC,EAAexF,EAAa,GAAIoR,EAAK7L,QAAQC,aAAcA,GAEmB4L,EAAKhH,gBAAiBgH,EAAKoB,kBAMzG,OAJAsE,EAAqBrV,OAAOjB,QAAQwD,IAChClD,EAAqBkD,EAAIf,OAAQ3D,EAAmBC,WAAY,CAAEkO,OAAQzJ,MAGvEzC,EAAoBuV,GAGbX,mBAAE3Q,GAChB,MAAM4L,EAAO5I,KAIb,GAFAhD,EAAexF,EAAa,GAAIoR,EAAK7L,QAAQC,aAAcA,GAEvD4L,EAAKH,aACL,OAAOG,EAAK4F,oBAAqB5F,EAAKH,aAAczL,GAGxD,MAAM+C,EAAQ6I,EAAK7I,MACb1C,EAAU0C,EAAMQ,iBAAiBzH,GAEjC2V,QAAoB9C,EAAoBtO,EAASL,EAAc4L,EAAKhH,gBAAiBgH,EAAKoB,kBAShG,OAPAyE,EAAYxV,OAAOjB,QAAQwD,IACvBA,EAAIkT,gBAAiB,EACrBpW,EAAqBkD,EAAIf,OAAQ3D,EAAmBC,WAAY,CAAEkO,OAAQzJ,MAG9ElD,EAAqByH,EAAOjJ,EAAkBC,WAAY,CAAEkO,OAAQwJ,IAE7D1V,EAAoB0V,GAGLd,2BAAEgB,GACxBzC,EAAK3V,UAAUyT,iBAAmBxS,EAAa,GAAI0U,EAAK3V,UAAUyT,iBAAkB2E,GAG/DhB,0BAAEiB,GACvB1C,EAAK3V,UAAUqL,gBAAkBpK,EAAa,GAAI0U,EAAK3V,UAAUqL,gBAAiBgN,GAGrEjB,kBAAExB,GACfD,EAAK3V,UAAUwG,QAAUvF,EAAa,GAAI0U,EAAK3V,UAAUwG,QAASoP,IA5K/D0C,EAAA,UAAA3C,GAiLXA,EAAK3V,UAAUwG,QAAUA,EACzBmP,EAAK3V,UAAUyT,iBAAmB,GAClCkC,EAAK3V,UAAUqL,gBAAkBA,EACjCsK,EAAK3V,UAAUuY"}