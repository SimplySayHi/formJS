{"version":3,"file":"formjs-systemjs.min.js","sources":["../src/modules/helpers/addClass.js","../src/modules/helpers/isNodeList.js","../src/modules/helpers/removeClass.js","../src/modules/helpers/isDOMNode.js","../src/modules/helpers/checkFormEl.js","../src/modules/helpers/customEvents.js","../src/modules/helpers/isPlainObject.js","../src/modules/helpers/mergeObjects.js","../src/modules/helpers/dispatchCustomEvent.js","../src/modules/helpers/excludeSelector.js","../src/modules/helpers/fieldsStringSelector.js","../src/modules/helpers/finalizeFieldPromise.js","../src/modules/helpers/finalizeFieldsGroupPromise.js","../src/modules/helpers/finalizeFormPromise.js","../src/modules/helpers/getDateAsNumber.js","../src/modules/helpers/getSplitChar.js","../src/modules/helpers/getJSONobjectFromFieldAttribute.js","../src/modules/helpers/getUniqueFields.js","../src/modules/helpers/mergeValidateFieldDefault.js","../src/modules/helpers/mergeValidateFormDefault.js","../src/modules/helpers/isFieldForChangeEvent.js","../src/modules/helpers/runFunctionsSequence.js","../src/modules/helpers/serializeObject.js","../src/modules/helpers/toCamelCase.js","../src/modules/options.js","../src/modules/optionsUtils/beforeValidation.js","../src/modules/helpers/checkDirtyField.js","../src/modules/optionsUtils/getFormData.js","../src/modules/validationRules.js","../src/modules/validationRules/date.js","../src/modules/validationRules/email.js","../src/modules/validationRules/number.js","../src/modules/validationRules/checkbox.js","../src/modules/validationRules/checks.js","../src/modules/validationRules/equalTo.js","../src/modules/validationRules/exactLength.js","../src/modules/validationRules/file.js","../src/modules/validationRules/length.js","../src/modules/validationRules/max.js","../src/modules/validationRules/maxlength.js","../src/modules/validationRules/min.js","../src/modules/validationRules/minlength.js","../src/modules/validationRules/pattern.js","../src/modules/validationRules/radio.js","../src/modules/listenerCallbacks/dataTypeNumber.js","../src/modules/listenerCallbacks/formValidationEnd.js","../src/modules/listenerCallbacks/keypressMaxlength.js","../src/modules/listenerCallbacks/pastePrevent.js","../src/modules/ajaxCall.js","../src/modules/listenerCallbacks/submit.js","../src/modules/listenerCallbacks/groupValidationEnd.js","../src/modules/listenerCallbacks/validation.js","../src/modules/listenerCallbacks/validationEnd.js","../src/modules/formStartup.js","../src/modules/checkFieldValidity.js","../src/modules/isValid.js","../src/modules/checkFieldsValidity.js","../src/index.js","../src/modules/destroy.js","../src/modules/helpers/getFilledFields.js"],"sourcesContent":["\nexport const addClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.add( className );\n    });\n}\n","\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList );\n}\n","\nexport const removeClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.remove( className );\n    });\n}\n","\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node );\n}\n","\nimport { isDOMNode } from './isDOMNode';\n\nexport const checkFormEl = form => {\n    let isString = typeof form,\n        isValidNodeSelector = isString === 'string' && isDOMNode(document.querySelector(form)),\n        isFormSelector = isValidNodeSelector && document.querySelector(form).tagName.toLowerCase() === 'form',\n        obj = {\n            result: isDOMNode(form) || isFormSelector,\n            $el: (isString === 'string' ? document.querySelector(form) : form)\n        };\n\n    return obj;\n}\n","\nexport const customEvents = {\n    field: {\n        validation: 'fjs.field:validation'\n    },\n    form: {\n        destroy:    'fjs.form:destroy',\n        init:       'fjs.form:init',\n        submit:     'fjs.form:submit',\n        validation: 'fjs.form:validation'\n    },\n    group: {\n        validation: 'fjs.group:validation'\n    }\n}\n","\nexport const isPlainObject = object => {\n    return Object.prototype.toString.call( object ) === '[object Object]';\n}\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const mergeObjects = function( out = {} ){\n    Array.from(arguments).slice(1).filter(arg => !!arg).forEach(arg => {\n        Object.keys(arg).forEach(key => {\n            if( Array.isArray(arg[key]) ){\n                out[key] = (out[key] || []).concat( arg[key].slice(0) );\n            } else if( isPlainObject(arg[key]) ){\n                out[key] = mergeObjects((out[key] || {}), arg[key]);\n            } else {\n                // * STRING | NUMBER | BOOLEAN | FUNCTION\n                if( Array.isArray(out[key]) ){\n                    // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                    out[key].push(arg[key]);\n                } else {\n                    out[key] = arg[key];\n                }\n            }\n        });\n    });\n\n    return out;\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const dispatchCustomEvent = ( elem, eventName, eventOptions ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions);\n    const eventObj = new CustomEvent(eventName, eventOptions);\n    elem.dispatchEvent( eventObj );\n}\n","\nexport const excludeSelector = ':not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"file\"]):not([data-exclude-data])'\n","\nexport const fieldsStringSelector = 'input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"hidden\"]), select, textarea'\n","\nexport const finalizeFieldPromise = ({errors, result}) => {\n    if( result ){\n        return Promise.resolve();\n    }\n    return Promise.reject(errors);\n}\n","\nexport const finalizeFieldsGroupPromise = ({canSubmit, fields, group, result}) => {\n    if( result ){\n        return Promise.resolve({canSubmit, fields, group});\n    }\n    return Promise.reject({fields, group});\n}\n","\nexport const finalizeFormPromise = ({fields, result}) => {\n    if( result ){\n        return Promise.resolve(fields);\n    }\n    return Promise.reject(fields);\n}\n","\nimport { getSplitChar } from './getSplitChar';\n\nconst formatMap = {\n    'YYYY-MM-DD': function(dateArray){\n        return dateArray;\n    },\n    'MM-DD-YYYY': function(dateArray){\n        return [dateArray[2], dateArray[0], dateArray[1]];\n    },\n    'DD-MM-YYYY': function(dateArray){\n        return dateArray.reverse();\n    }\n};\n\nexport const getDateAsNumber = ( dateString, dateFormat ) => {\n    dateFormat = dateFormat || 'YYYY-MM-DD';\n    const splitChar = getSplitChar(dateString);\n\n    if( dateFormat.indexOf(splitChar) < 0 ){\n        return;\n    }\n\n    dateFormat = dateFormat.replace(/[^YMD]/g, '-');\n    dateString = dateString.split(splitChar);\n    dateString = formatMap[dateFormat](dateString).join('');\n    \n    return dateString;\n}\n","\nexport const getSplitChar = string => {\n    // MATCH ANY NON-DIGIT CHAR\n    const separator = string.match(/\\D/);\n    return (separator && separator.length > 0) ? separator[0] : null;\n}\n","\nexport const getJSONobjectFromFieldAttribute = ( fieldEl, attrName ) => {\n    const customAttrEl = fieldEl.closest('['+ attrName +']');\n    return (customAttrEl && JSON.parse(customAttrEl.getAttribute(attrName))) || {};\n}\n","\nexport const getUniqueFields = $nodeList => {\n\n    let currentFieldName = '',\n        currentFieldType = '';\n\n    return Array.from( $nodeList ).filter($field => {\n        const name = $field.name,\n              type = $field.type;\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false;\n        }\n        \n        if( !$field.matches('[data-required-from]') ){\n            currentFieldName = name;\n            currentFieldType = type;\n        }\n        return true;\n    });\n    \n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const mergeValidateFieldDefault = obj => {\n    return mergeObjects({}, { result: false, $field: null }, obj);\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const mergeValidateFormDefault = obj => {\n    return mergeObjects({}, { result: true, fields: [] }, obj);\n}\n","\nexport const isFieldForChangeEvent = $field => {\n    return $field.matches('select, [type=\"radio\"], [type=\"checkbox\"], [type=\"file\"]');\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const runFunctionsSequence = ( { functionsList = [], data = {}, stopConditionFn = () => false } = {} ) => {\n    return functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1]);\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res);\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result);\n                    return res;\n                });\n        });\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList);\n}\n","\nexport const serializeObject = obj => {\n    const objToString = (\n            (obj && typeof obj === 'object' && obj.constructor === Object) ? \n            Object.keys(obj)\n                .reduce((a,k) => {\n                    a.push(k+'='+encodeURIComponent(obj[k]));\n                    return a\n                },[]).join('&') : \n            obj\n    );\n    return objToString;\n}\n","\nexport const toCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase(); });\n}\n","\nimport { beforeValidation } from './optionsUtils/beforeValidation';\nimport { getFormData } from './optionsUtils/getFormData';\n\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [beforeValidation],\n        cssClasses: {\n            dirty:              'is-dirty',\n            error:              'has-error',\n            errorEmpty:         'has-error-empty',\n            errorRule:          'has-error-rule',\n            pending:            'is-pending',\n            valid:              'is-valid'\n        },\n        focusOnRelated:         true,\n        maxFileSize:            10,\n        onValidationCheckAll:   false,\n        preventPasteFields:     '[type=\"password\"], [data-equal-to]',\n        questionContainer:      '[data-formjs-question]',\n        skipUIfeedback:         false,\n        strictHtmlValidation:   true,\n        trimValue:              false,\n        validateOnEvents:       'input change'\n    },\n\n    formOptions: {\n        ajaxOptions:            {\n            cache:              'no-store',\n            credentials:        'same-origin',\n            headers: {\n                                'Content-Type': 'application/json',\n                                'Accept':       'application/json'\n            },\n            method:             'POST',\n            mode:               'same-origin',\n            redirect:           'follow',\n            timeout:            0,\n            url:                location.href\n        },\n        ajaxSubmit:             true,\n        beforeSend:             [],\n        cssClasses: {\n            ajaxComplete:       'ajax-complete',\n            ajaxError:          'ajax-error',\n            ajaxPending:        'ajax-pending',\n            ajaxSuccess:        'ajax-success',\n            submit:             'is-submitting',\n            valid:              'is-valid'\n        },\n        getFormData:            getFormData,\n        groups:                 [],\n        handleFileUpload:       true,\n        handleSubmit:           true,\n        onInitCheckFilled:      true\n    }\n    \n}\n","\nimport { addClass, checkDirtyField, isFieldForChangeEvent } from '../helpers';\n\nexport const beforeValidation = function beforeValidationDefault ( { $field, fieldOptions } ) {\n\n    if( fieldOptions.trimValue && !isFieldForChangeEvent($field) ){\n        $field.value = $field.value.trim();\n    }\n\n    checkDirtyField( $field, fieldOptions );\n\n    if( !fieldOptions.skipUIfeedback ){\n        addClass( $field.closest( fieldOptions.questionContainer ), fieldOptions.cssClasses.pending );\n    }\n\n}\n","\nimport { addClass } from './addClass';\nimport { isNodeList } from './isNodeList';\nimport { removeClass } from './removeClass';\n\nexport const checkDirtyField = ( $fields, fieldOptions ) => {\n\n    $fields = isNodeList($fields) ? Array.from( $fields ) : [$fields];\n    $fields.forEach($field => {\n        if( $field.type !== 'checkbox' && $field.type !== 'radio' ){\n            const $container = $field.closest( fieldOptions.questionContainer ) || $field;\n            if( $field.value ){\n                addClass( $container, fieldOptions.cssClasses.dirty );\n            } else {\n                removeClass( $container, fieldOptions.cssClasses.dirty );\n            }\n        }\n    });\n    \n}\n","\nexport const getFormData = function getFormDataDefault( $filteredFields, trimValues ){\n\n    const formData = {};\n    const $form = this.$form;\n    let prevObj = formData;\n  \n    $filteredFields.forEach($field => {\n        const isCheckbox = $field.type === \"checkbox\";\n        const isRadio = $field.type === \"radio\";\n        const isSelect = $field.matches(\"select\");\n        const name = $field.name;\n        let value = trimValues ? $field.value.trim() : $field.value;\n  \n        if( isCheckbox ){\n\n            value = $field.checked;\n            let $checkboxes = Array.from( $form.querySelectorAll('[name=\"' + name + '\"]') );\n            if( $checkboxes.length > 1 ){\n                value = [];\n                let $checked = $checkboxes.filter((field) => field.checked);\n                $checked.forEach($field => {\n                    value.push($field.value);\n                });\n            }\n\n        } else if( isRadio ){\n\n            const $checkedRadio = $form.querySelector('[name=\"' + name + '\"]:checked');\n            value = $checkedRadio === null ? null : $checkedRadio.value;\n\n        } else if( isSelect ){\n\n            const $selectedOpts = Array.from($field.options).filter(option => option.selected);\n            if( $selectedOpts.length > 1 ){\n                value = [];\n                $selectedOpts.forEach($field => { \n                    value.push($field.value); \n                });\n            }\n        }\n  \n        const nameSplit = name.split(\".\");\n        nameSplit.forEach((keyName, index, list) => {\n            const isLastKeyName = index + 1 === list.length;\n  \n            if( Array.isArray(prevObj) ){\n                const keyNameSplit = keyName.split(\"___\");\n                const arrPos = keyNameSplit[0] - 1;\n                const arrayHasItemAtIndex = typeof prevObj[arrPos] !== \"undefined\";\n                const arrItemKeyName = keyNameSplit[1];\n  \n                if( !arrayHasItemAtIndex ){\n                    prevObj.push({});\n                }\n  \n                keyName = arrItemKeyName;\n\n                if( isLastKeyName ){\n                    prevObj[arrPos][keyName] = value;\n                } else if( typeof prevObj[arrPos][keyName] === 'undefined' ) {\n                    prevObj[arrPos][keyName] = {};\n                }\n                \n                if( !isLastKeyName ){\n                    prevObj = prevObj[arrPos][keyName];\n                    return;\n                }\n            } else {\n                const isKeyNameArray = keyName.endsWith(\"[]\");\n                keyName = keyName.replace(\"[]\", \"\");\n  \n                if( isLastKeyName ){\n                    prevObj[keyName] = value;\n                } else if( typeof prevObj[keyName] === \"undefined\" ){\n                    if( isKeyNameArray ){\n                        prevObj[keyName] = [];\n                    } else {\n                        prevObj[keyName] = {};\n                    }\n                }\n            }\n  \n            prevObj = isLastKeyName ? formData : prevObj[keyName];\n        });\n    });\n  \n    return formData;\n\n}\n","\nimport { date }         from './validationRules/date';\nimport { email }        from './validationRules/email';\nimport { number }       from './validationRules/number';\n\nimport { checkbox }     from './validationRules/checkbox';\nimport { equalTo }      from './validationRules/equalTo';\nimport { exactLength }  from './validationRules/exactLength';\nimport { file }         from './validationRules/file';\nimport { length }       from './validationRules/length';\nimport { max }          from './validationRules/max';\nimport { maxlength }    from './validationRules/maxlength';\nimport { min }          from './validationRules/min';\nimport { minlength }    from './validationRules/minlength';\nimport { pattern }      from './validationRules/pattern';\nimport { radio }        from './validationRules/radio';\n\nexport const validationRules = {\n    date,\n    email,\n    number,\n\n    checkbox,\n    equalTo,\n    exactLength,\n    file,\n    length,\n    max,\n    maxlength,\n    min,\n    minlength,\n    pattern,\n    radio\n}\n","\n/*\n    DATE AS ISO 8601 DATE FORMAT:\n    YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n*/\n\nexport const date = function( string ){\n    return {\n        result: /^((((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13578]|1[02])[ \\/\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13456789]|1[012])[ \\/\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.]02[ \\/\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ \\/\\-.]02[ \\/\\-.]29))$/g.test( string )\n    };\n}\n","\n// https://regex101.com/r/cdlyJy/3\n\nexport const email = function( string ){\n    return {\n        result: /^[a-zA-Z_-]([\\w.-]?[a-zA-Z0-9])*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?){2,})+$/.test( string )\n    };\n}\n","\n/*\n    ALL NUMBERS ( INTEGERS AND FLOATING )\n    VALID NUMBERS: 123 | 123.456 | .123\n*/\n\nexport const number = function( string ){\n    return {\n        result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n    };\n}","\nimport { checks } from './checks';\n\nexport const checkbox = function( value, $field ){\n    const $dataChecks = $field.closest('form').querySelector('[name=\"' + $field.name + '\"][data-checks]');\n    return $dataChecks ? checks($dataChecks) : { result: $field.checked };\n}\n","\nexport const checks = function( $field ){\n    const attrValue = JSON.parse( $field.getAttribute('data-checks') ),\n          checkedLength = $field.closest('form').querySelectorAll('[name=\"' + $field.name + '\"]:checked').length,\n          isMinOk = checkedLength >= attrValue[0],\n          isMaxOk = checkedLength <= attrValue[1],\n          obj = { result: isMinOk && isMaxOk };\n\n    if( !obj.result ){\n        obj.errors = { checks: true };\n        if( !isMinOk ){ obj.errors.minChecks = true; }\n        if( !isMaxOk ){ obj.errors.maxChecks = true; }\n    }\n\n    return obj;\n}\n","\nexport const equalTo = function( value, $field ){\n    const $checkFrom = $field.closest('form').querySelector( '[name=\"' + $field.getAttribute('data-equal-to') + '\"]' );\n    return { result: value === $checkFrom.value };\n}\n","\nexport const exactLength = function( value, $field ){\n    const valueLength = value.length,\n          exactLength = $field.getAttribute('data-exact-length') * 1,\n          obj = { result: valueLength === exactLength };\n\n    if( !obj.result ){\n        obj.errors = {};\n        if( valueLength < exactLength ){ obj.errors.minlength = true; }\n        else { obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nexport const file = function( value, $field, fieldOptions ){\n    const maxFileSize = ($field.getAttribute('data-max-file-size') || fieldOptions.maxFileSize) * 1,\n          MIMEtype = $field.accept ? new RegExp($field.accept.replace( '*', '[^\\\\/,]+' )) : null,\n          filesList = Array.from($field.files),\n          obj = { result: true };\n\n    filesList.forEach(file => {\n        const exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize,\n              isAcceptedFileType = MIMEtype !== null ? MIMEtype.test(file.type) : true;\n\n        if( exceedMaxFileSize || !isAcceptedFileType ){\n            obj.result = false;\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {};\n            }\n            if( exceedMaxFileSize ){ obj.errors.maxFileSize = true; }\n            if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true; }\n\n        }\n    });\n\n    return obj;\n}\n","\nexport const length = function( value, $field ){\n    const valueL = value.length,\n          attrValue = JSON.parse( $field.getAttribute('data-length') ),\n          isMinlengthOk = valueL >= attrValue[0],\n          isMaxlengthOk = valueL <= attrValue[1],\n          obj = { result: isMinlengthOk && isMaxlengthOk };\n\n    if( !obj.result ){\n        obj.errors = {};\n        if( !isMinlengthOk ){ obj.errors.minlength = true; }\n        if( !isMaxlengthOk ){ obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const max = function( value, $field ){\n    let maxVal = $field.max;\n    const dateFormat = $field.getAttribute('data-date-format');\n    \n    if( $field.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat );\n        maxVal = maxVal.split('-').join('');\n    }\n\n    value = value * 1;\n    maxVal = maxVal * 1;\n    \n    return { result: value <= maxVal };\n}\n","\nexport const maxlength = function( value, $field ){\n    return { result: value.length <= $field.maxLength * 1 };\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const min = function( value, $field ){\n    let minVal = $field.min;\n    const dateFormat = $field.getAttribute('data-date-format');\n    \n    if( $field.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat );\n        minVal = minVal.split('-').join('');\n    }\n\n    value = value * 1;\n    minVal = minVal * 1;\n    \n    return { result: value >= minVal };\n}\n","\nexport const minlength = function( value, $field ){\n    return { result: value.length >= $field.minLength * 1 };\n}\n","\nexport const pattern = function( value, $field ){\n    return { result: new RegExp($field.pattern).test(value) };\n}\n","\nexport const radio = function( value, $field ){\n    const $fieldChecked = $field.closest('form').querySelector( '[name=\"'+ $field.name +'\"]:checked' ),\n          isValid = $fieldChecked !== null && $fieldChecked.value.trim().length > 0;\n\n    return { result: isValid };\n}\n","\nexport const dataTypeNumber = function( event ){\n\n    const $field = event.target;\n    \n    if( $field.matches('[data-type=\"number\"]') ){\n        let fieldValue = $field.value;\n        const hasInvalidChars = /[^\\d.,+\\-]/.test(fieldValue);\n        \n        if( hasInvalidChars ){\n            event.stopImmediatePropagation();\n            let valueReplaced = fieldValue.replace(/[^\\d.,+\\-]/g, '');\n            $field.value = valueReplaced;\n        }\n    }\n\n}\n","\nexport const formValidationEnd = function( event ){\n    const formEl = event.target;\n    const options = formEl.formjs.options;\n    \n    if( !options.fieldOptions.skipUIfeedback ){\n        const clMethodName = event.detail.result ? 'add' : 'remove';\n        formEl.classList[clMethodName]( options.formOptions.cssClasses.valid );\n    }\n}\n","\nexport const keypressMaxlength = function( event ){\n\n    const $field = event.target;\n    \n    if( $field.matches( '[maxlength]' ) ){\n        const maxLength = $field.maxLength * 1,\n              keyPressed = event.which || event.keyCode,\n              allowedKeys = [8, 37, 38, 39, 46];\n\n        if( $field.value.length >= maxLength && allowedKeys.indexOf(keyPressed) === -1 ){\n            return false;\n        }\n    }\n\n}\n","\nexport const pastePrevent = function( event ){\n\n    const $field = event.target;\n    const fieldOptions = $field.closest('form').formjs.options.fieldOptions;\n\n    if( $field.matches( fieldOptions.preventPasteFields ) ){     \n        event.preventDefault();\n    }\n\n}\n","\nimport { addClass, mergeObjects, removeClass, serializeObject } from './helpers';\n\nconst getFetchMethod = (response, options) => {\n    const accept = options.headers.get('Accept'),\n          contentType = response.headers.get('Content-Type'),\n          headerOpt = accept || contentType || '';\n\n    if( headerOpt.indexOf('application/json') > -1 || headerOpt === '' ){\n        return 'json';\n    } else if( headerOpt.indexOf('text/') > -1 ){\n        return 'text';\n    } else {\n        return 'blob';\n    }\n};\n\nexport function ajaxCall( $form, formDataObj, options ){\n\n    let timeoutTimer;\n    const ajaxOptions = mergeObjects( {}, options.formOptions.ajaxOptions ),\n          isMultipart = ajaxOptions.headers['Content-Type'] === 'multipart/form-data';\n\n    ajaxOptions.body = formDataObj;\n    \n    // POST A FormData OBJECT ( multipart )\n    if( isMultipart && options.formOptions.handleFileUpload ){\n        let formDataMultipart = new FormData();\n        \n        for(let key in ajaxOptions.body){\n            formDataMultipart.append( key, ajaxOptions.body[key] );\n        }\n        \n        Array.from( $form.querySelectorAll('[type=\"file\"]') ).forEach($field => {\n            Array.from($field.files).forEach((file, idx) => {\n                const name = $field.name+'['+ idx +']';\n                formDataMultipart.append( name, file, file.name );\n            });\n        });\n        \n        ajaxOptions.body = formDataMultipart;\n    }\n\n    if( ajaxOptions.method === 'GET' ){\n\n        // FETCH WITH \"GET\" METHOD CAN'T HAVE \"body\". SO IT IS APPENDED TO THE URL\n        ajaxOptions.url += ( /\\?/.test(ajaxOptions.url) ? '&' : '?' ) + serializeObject( ajaxOptions.body );\n        delete ajaxOptions.body;\n\n    } else {\n\n        if( ajaxOptions.headers['Content-Type'].indexOf('application/x-www-form-urlencoded') > -1 ){\n            // POST A NORMAL FORM\n            ajaxOptions.body = serializeObject( ajaxOptions.body );\n        } else if( !isMultipart ){\n            // POST A JSON STRING\n            ajaxOptions.body = JSON.stringify(ajaxOptions.body);\n        }\n\n    }\n\n    ajaxOptions.headers = new Headers( ajaxOptions.headers );\n\n    if ( ajaxOptions.timeout > 0 ) {\n        const controller = new AbortController(),\n              signal = controller.signal;\n\n        ajaxOptions.signal = signal;\n        timeoutTimer = window.setTimeout(() => {\n            controller.abort();\n        }, ajaxOptions.timeout);\n    }\n\n    return fetch(ajaxOptions.url, ajaxOptions)\n        .then(response => {\n            if( !response.ok ){\n                throw new Error(response.statusText);\n            }\n            const fetchMethod = getFetchMethod(response, ajaxOptions);\n            return response[fetchMethod]();\n        })\n        .then(data => {\n            addClass( $form, options.formOptions.cssClasses.ajaxSuccess );\n            return data;\n        })\n        .catch(error => {\n            addClass( $form, options.formOptions.cssClasses.ajaxError );\n            throw new Error(error.message);\n        })\n        .finally(() => {\n            if( timeoutTimer ){\n                window.clearTimeout( timeoutTimer );\n            }\n            removeClass( $form, options.formOptions.cssClasses.submit + ' ' + options.formOptions.cssClasses.ajaxPending );\n            addClass( $form, options.formOptions.cssClasses.ajaxComplete );\n            $form.querySelector('[type=\"submit\"]').disabled = false;\n        });\n\n}\n","\nimport { addClass, customEvents, dispatchCustomEvent, removeClass, runFunctionsSequence } from '../helpers';\nimport { ajaxCall } from '../ajaxCall';\n\nexport function submit( event ){\n\n    const $form = event.target,\n          instance = $form.formjs,\n          options = instance.options,\n          formCssClasses = options.formOptions.cssClasses,\n          isAjaxForm = options.formOptions.ajaxSubmit,\n          $btn = $form.querySelector('[type=\"submit\"]'),\n          eventPreventDefault = ( enableBtn = true ) => {\n              if( $btn && enableBtn ){ $btn.disabled = false; }\n              if( event ){ event.preventDefault(); }\n          };\n\n    if( isAjaxForm ){\n        eventPreventDefault(false);\n    }\n\n    if( $btn ){\n        if( $btn.disabled ){\n            eventPreventDefault(false);\n            return false;\n        }\n        $btn.disabled = true;\n    }\n\n    removeClass( $form, (formCssClasses.ajaxComplete + ' ' + formCssClasses.ajaxError + ' ' + formCssClasses.ajaxSuccess) );\n    addClass( $form, formCssClasses.submit );\n\n    instance.validateForm()\n        .then(data => {\n            \n            const hasGroup = typeof data.group !== 'undefined';\n\n            if( hasGroup && !data.canSubmit ){\n                return [{ stopExecution: true }]\n            }\n\n            const beforeSendData = {\n                stopExecution: false,\n                formData: isAjaxForm ? instance.getFormData() : null\n            };\n\n            const rfsObject = {\n                  functionsList: options.formOptions.beforeSend,\n                  data: beforeSendData,\n                  stopConditionFn: function(data){ return data.stopExecution; }\n            };\n            return runFunctionsSequence(rfsObject);\n\n        }).then(dataList => {\n\n            if( dataList.some(({stopExecution}) => stopExecution) ){\n                eventPreventDefault();\n                return false;\n            }\n            \n            if( isAjaxForm ){\n                const formData = dataList.pop().formData;\n                addClass( $form, formCssClasses.ajaxPending );\n                dispatchCustomEvent( $form, customEvents.form.submit, { detail: ajaxCall( $form, formData, options ) } );\n            }\n\n        })\n        .catch(fields => {\n            eventPreventDefault();\n            removeClass( $form, formCssClasses.submit );\n        });\n    \n}\n","\nexport const groupValidationEnd = function( event ){\n\n    const detail = event.detail;\n\n    if( detail.result ){\n        event.target.formjs.currentGroup = detail.group.next;\n    }\n    \n}\n","\nimport { fieldsStringSelector, isFieldForChangeEvent } from '../helpers';\n\nexport const validation = function( event ){\n\n    const isChangeEvent = event.type === 'change',\n          $field = event.target,\n          self = $field.closest('form').formjs;\n\n    if( $field.matches( fieldsStringSelector ) ){\n        const isFieldForChangeEventBoolean = isFieldForChangeEvent($field);\n        const hasOnlyChangeEvent = self.options.fieldOptions.validateOnEvents === 'change';\n        \n        if(\n            (isFieldForChangeEventBoolean && isChangeEvent) ||\n            (!isFieldForChangeEventBoolean && (!isChangeEvent || hasOnlyChangeEvent))\n        ){\n            \n            self.validateField( $field )\n                .then(() => {\n                    const type = $field.type;\n                    const $relatedEqualTo = $field.closest('form').querySelector('[data-equal-to=\"'+ $field.name +'\"]');\n\n                    if(\n                        // FIELD IS ( required OR data-validate-if-filled ) AND RELATED FIELD data-equal-to HAS A VALUE\n                        ($field.required || $field.matches('[data-validate-if-filled]')) && \n                        !(type === 'checkbox' || type === 'radio') && \n                        $relatedEqualTo && $relatedEqualTo.value.trim() !== ''\n                    ){\n                        self.validateField( $relatedEqualTo ).catch(errors => {});\n                    }\n                })\n                .catch(errors => {});\n\n        }\n    }\n    \n}\n","\nimport { addClass, getJSONobjectFromFieldAttribute, removeClass, mergeObjects } from '../helpers';\n\nexport const validationEnd = function( event ){\n\n    const eventDetail = event.detail,\n          $field = eventDetail.$field,\n          dataFieldOptions = getJSONobjectFromFieldAttribute( $field, 'data-field-options' ),\n          fieldOptions = mergeObjects({}, $field.closest('form').formjs.options.fieldOptions, dataFieldOptions),\n          $container = $field.closest( fieldOptions.questionContainer ),\n          isReqFrom = $field.matches('[data-required-from]'),\n          $reqMore = document.querySelector( $field.getAttribute('data-required-from') );\n\n    if( $container && !fieldOptions.skipUIfeedback ){\n\n        if( eventDetail.result ){\n\n            if( !isReqFrom || (isReqFrom && $reqMore.checked) ){\n                // IF FIELD IS VALID\n                const errorClasses = fieldOptions.cssClasses.error + ' ' + fieldOptions.cssClasses.errorEmpty + ' ' + fieldOptions.cssClasses.errorRule;\n                removeClass( $container, errorClasses );\n                addClass( $container, fieldOptions.cssClasses.valid );\n            }\n\n        } else {\n\n            // IF FIELD IS NOT VALID\n            let extraErrorClass = fieldOptions.cssClasses.errorRule;\n\n            // HANDLE CASE OF FIELD data-checks\n            const isChecks = $field.matches('[data-checks]'),\n                  checkedElLength = (isChecks ? $container.querySelectorAll('[name=\"' + $field.name + '\"]:checked').length : 0);\n\n            if( (!isChecks && (eventDetail.errors && eventDetail.errors.empty)) || (isChecks && checkedElLength === 0) ){\n                extraErrorClass = fieldOptions.cssClasses.errorEmpty;\n            }\n\n            let errorClasses = fieldOptions.cssClasses.error + ' ' + extraErrorClass,\n                errorClassToRemove = fieldOptions.cssClasses.errorEmpty + ' ' + fieldOptions.cssClasses.errorRule;\n            removeClass( $container, fieldOptions.cssClasses.valid + ' ' + errorClassToRemove );\n            addClass( $container, errorClasses );\n\n        }\n    }\n\n}\n","\nimport { customEvents } from './helpers';\nimport { \n    dataTypeNumber,\n    formValidationEnd,\n    groupValidationEnd,\n    keypressMaxlength,\n    pastePrevent,\n    submit,\n    validation, \n    validationEnd \n} from './listenerCallbacks';\n\nexport function formStartup( $form, options ){\n\n    $form.noValidate = true;\n\n    const fieldOptions = options.fieldOptions,\n          formOptions = options.formOptions;\n        \n    // VALIDATION WITH ATTRIBUTES LIKE HTML ONES ( ALSO FOR BUG FIXING, EG: maxlength IN ANDROID )\n    if( fieldOptions.strictHtmlValidation ){\n        \n        // maxlength\n        // MAXLENGTH IS BUGGY IN ANDROID BROWSERS\n        $form.addEventListener('keypress', keypressMaxlength, false);\n\n        // data-type=\"number\"\n        // SINCE VALIDATING type=\"number\" WITH NON NUMERIC CHARS WILL RETURN EMPTY STRING IN SOME BROWSERS ( EG: FIREFOX )\n        $form.addEventListener('input', dataTypeNumber, false);\n        \n    }\n    \n    if( fieldOptions.preventPasteFields && $form.querySelectorAll( fieldOptions.preventPasteFields ).length ){\n        // INIT EVENT LISTENER FOR \"PASTE\" EVENT TO PREVENT IT ON SPECIFIED FIELDS\n        $form.addEventListener('paste', pastePrevent, false);\n    }\n\n    // INIT EVENTS LISTENER ( AS IN fieldOptions )\n    fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n        const useCapture = /^(blur|focus)$/.test(eventName);\n        $form.addEventListener(eventName, validation, useCapture);\n    });\n\n    $form.addEventListener(customEvents.field.validation, validationEnd, false);\n    $form.addEventListener(customEvents.group.validation, groupValidationEnd, false);\n    $form.addEventListener(customEvents.form.validation, formValidationEnd, false);\n    \n    // HANDLE FORM SUBMIT\n    if( formOptions.handleSubmit ){\n        // INIT FORM SUBMIT ( DEFAULT AND AJAX )\n        $form.addEventListener('submit', submit);\n\n        if( formOptions.ajaxSubmit ){\n            if( $form.getAttribute('enctype') ){\n                formOptions.ajaxOptions.headers['Content-Type'] = $form.getAttribute('enctype');\n            }\n\n            if( $form.getAttribute('method') ){\n                formOptions.ajaxOptions.method = $form.getAttribute('method').toUpperCase();\n            }\n\n            if( $form.getAttribute('action') ){\n                formOptions.ajaxOptions.url = $form.getAttribute('action');\n            }\n        }\n    }\n\n}\n","\nimport {    getJSONobjectFromFieldAttribute,\n            isDOMNode,\n            mergeObjects,\n            mergeValidateFieldDefault,\n            removeClass,\n            runFunctionsSequence\n        }           from './helpers';\nimport { isValid }  from './isValid';\n\nexport function checkFieldValidity( $field, fieldOptions, validationRules, validationErrors ){\n\n    if( !isDOMNode($field) ){\n        const obj = mergeValidateFieldDefault({$field});\n        return Promise.resolve(obj);\n    }\n\n    const $form = $field.closest('form'),\n          isValidValue = $field.value.trim().length > 0,\n          dataFieldOptions = getJSONobjectFromFieldAttribute( $field, 'data-field-options' );\n\n    fieldOptions = mergeObjects( fieldOptions, dataFieldOptions );\n\n    // HANDLE FIELD data-required-from WHEN CHANGING ITS RELATED RADIO\n    if( $field.type === 'radio' ){\n        const $checked = $field.checked ? $field : $form.querySelector('[name=\"'+ $field.name +'\"]:checked'),\n              reqMoreIsChecked = $checked && $checked.matches('[data-require-more]'),\n              $findReqMore = reqMoreIsChecked ? $checked : $form.querySelector('[data-require-more][name=\"'+ $field.name +'\"]'),\n              $findReqFrom = $findReqMore ? $form.querySelector('[data-required-from=\"#'+ $findReqMore.id +'\"]') : null;\n        \n        if( $checked && $findReqFrom ){\n            $findReqFrom.required = $findReqMore.required && $findReqMore.checked;\n            if( !reqMoreIsChecked ){\n                $findReqFrom.value = '';\n            } else if( fieldOptions.focusOnRelated ) {\n                $findReqFrom.focus();\n            }\n        }\n    }\n\n    // HANDLE FIELD data-require-more & data-required-from WHEN *-from IT'S FILLED\n    if( $field.matches('[data-required-from]') && isValidValue ){\n        const $reqMore = $form.querySelector( $field.getAttribute('data-required-from') );\n        $reqMore.checked = true;\n        $field.required = $reqMore.required;\n    }\n\n    const needsValidation = $field.required || ($field.matches('[data-validate-if-filled]') && isValidValue);\n\n    return runFunctionsSequence({\n            functionsList: fieldOptions.beforeValidation,\n            data: { $field, fieldOptions }\n        })\n        .then(data => {\n            const dataObj = data.pop();\n            return new Promise(resolve => {\n                if( !needsValidation ){\n                    dataObj.result = true;\n                }\n                resolve( needsValidation ? isValid($field, fieldOptions, validationRules, validationErrors) : dataObj );\n            });\n        })\n        .then(data => {\n            const $container = fieldOptions.questionContainer && data.$field.closest( fieldOptions.questionContainer );\n            if( $container ){\n                removeClass( $container, fieldOptions.cssClasses.pending );\n            }\n            return data;\n        })\n        ;\n\n}\n","\nimport { mergeValidateFieldDefault, mergeObjects, toCamelCase } from './helpers';\n\nexport function isValid( $field, fieldOptions, validationRules, validationErrors ){\n\n    const fieldValue = $field.value,\n          obj = mergeValidateFieldDefault({result: fieldValue.trim().length > 0, $field}),\n          isRadioOrCheckbox = /^(radio|checkbox)$/.test($field.type),\n          hasSelectedInput = $field.closest('form').querySelectorAll('[name=\"'+ $field.name +'\"]:checked').length > 0;\n\n    if( (!isRadioOrCheckbox && !obj.result) || (isRadioOrCheckbox && !hasSelectedInput) ){\n        obj.result = false;\n        obj.errors = { empty: true };\n        return Promise.resolve(obj);\n    }\n\n    // COLLECT VALIDATION METHOD NAMES ( USED TO RUN VALIDATIONS AND GET ERRORS )\n    const validationMethods = Array.from($field.attributes).reduce((accList, attr) => {\n        const attrName = toCamelCase( attr.name.replace('data-', '') ),\n              attrValue = toCamelCase( attr.value ),\n              isAttrValueWithFn = (attrName === 'type' || attrName === 'subtype') && validationRules[attrValue],\n              isAttrNameWithFn = validationRules[attrName];\n\n        if( isAttrValueWithFn || isAttrNameWithFn ){\n            accList.push( isAttrValueWithFn ? attrValue : attrName );\n        }\n        return accList;\n    }, []);\n\n    return new Promise(resolve => {\n\n        // RUN VALIDATIONS\n        const validationsResult = validationMethods.reduce((accPromise, methodName) => {\n            return accPromise.then(accObj => {\n                return new Promise(resolveVal => {\n                    // RUN VALIDATION INSIDE A PROMISE IS USEFUL FOR ASYNC VALIDATIONS\n                    resolveVal( validationRules[methodName](fieldValue, $field, fieldOptions) );\n                }).then(valObj => {\n                    // ADD CUSTOM ERROR-KEY FOR EACH VALIDATION RULE\n                    if( !valObj.result ){\n                        const errorObj = {};\n                        if( typeof valObj.errors === 'undefined' || typeof valObj.errors[methodName] === 'undefined' ){\n                            errorObj[methodName] = true;\n                        }\n                        valObj.errors = mergeObjects({}, valObj.errors, errorObj);\n                    }\n                    valObj = valObj.result ? {} : valObj;\n                    return mergeObjects(accObj, valObj);\n                });\n            });\n        }, Promise.resolve(obj));\n        resolve(validationsResult);\n\n    }).then(data => {\n\n        // GET ERRORS\n        if( !data.result ){\n            data.errors = validationMethods.reduce((accObj, methodName) => {\n                const errors = (validationErrors[methodName] && validationErrors[methodName](fieldValue, $field)) || {};\n                return mergeObjects(accObj, errors);\n            }, data.errors);\n        }\n        return data;\n\n    });\n\n}\n","\nimport { getUniqueFields, mergeValidateFieldDefault, mergeValidateFormDefault, mergeObjects } from './helpers';\nimport { checkFieldValidity } from './checkFieldValidity';\n\nexport function checkFieldsValidity( $fields, fieldOptions, validationRules, validationErrors, fieldToSkip = null ){\n\n    fieldOptions = mergeObjects( {}, fieldOptions, {focusOnRelated: false} );\n    const $fieldsList = getUniqueFields( $fields );\n\n    return Promise.all( $fieldsList.map($field => {\n\n        if( fieldToSkip && $field === fieldToSkip ){\n            const obj = mergeValidateFieldDefault({$field, result: true});\n            return Promise.resolve(obj);\n        }\n        return checkFieldValidity( $field, fieldOptions, validationRules, validationErrors );\n\n    }) ).then(fields => {\n\n        const areAllFieldsValid = fields.every(({result}) => result);\n        return mergeValidateFormDefault({result: areAllFieldsValid, fields});\n\n    });\n\n}\n","\nimport { version }              from '../package.json';\nimport { \n    checkFormEl, \n    customEvents, \n    dispatchCustomEvent, \n    excludeSelector, \n    fieldsStringSelector, \n    finalizeFieldPromise, \n    finalizeFieldsGroupPromise, \n    finalizeFormPromise, \n    getFilledFields, \n    isInteger, \n    isNodeList,\n    isValidSelector, \n    mergeObjects, \n    removeClass }               from './modules/helpers';\nimport { options }              from './modules/options';\nimport { validationRules }      from './modules/validationRules';\nimport { formStartup }          from './modules/formStartup';\nimport { destroy }              from './modules/destroy';\nimport { checkFieldValidity }   from './modules/checkFieldValidity';\nimport { checkFieldsValidity }  from './modules/checkFieldsValidity';\n\nclass Form {\n\n    constructor( form, optionsObj ){\n        const argsL = arguments.length,\n              checkFormElem = checkFormEl(form);\n\n        if( argsL === 0 || (argsL > 0 && !form) ){\n            throw new Error('First argument \"form\" is missing or falsy!');\n        }\n        if( isNodeList(form) ){\n            throw new Error('First argument \"form\" must be a single DOM node or a form CSS selector, not a NodeList!');\n        }\n        if( !checkFormElem.result ){\n            throw new Error('First argument \"form\" is not a DOM node nor a form CSS selector!');\n        }\n\n        const self = this;\n\n        self.$form = checkFormElem.$el;\n        self.$form.formjs = self;\n        self.options = mergeObjects({}, Form.prototype.options, optionsObj);\n        self.currentGroup = self.options.formOptions.groups[0];\n\n        // BINDING CONTEXT FOR FUTURE EXECUTION\n        const cbList = [\n            // IN fieldOptions\n            'beforeValidation',\n            // IN formOptions\n            'beforeSend',\n            'getFormData'\n        ];\n        cbList.forEach(cbName => {\n            const optionType = self.options.formOptions[cbName] ? 'formOptions' : 'fieldOptions';\n            let cbOpt = self.options[optionType][cbName];\n\n            if( cbOpt ){\n                self.options[optionType][cbName] = ( Array.isArray(cbOpt) ? cbOpt.map(cbFn => cbFn.bind(self)) : cbOpt.bind(self) );\n            }\n        });\n\n        formStartup( self.$form, self.options );\n\n        const initOptions = {};\n        if( self.options.formOptions.onInitCheckFilled ){\n            initOptions.detail = self.validateFilledFields().catch(fields => {});\n        }\n        dispatchCustomEvent( self.$form, customEvents.form.init, initOptions );\n    }\n\n    destroy(){\n        destroy(this.$form, this.options);\n        dispatchCustomEvent( this.$form, customEvents.form.destroy );\n    }\n    \n    getFormData( trimValues = this.options.fieldOptions.trimValue ){\n        const $formFields = this.$form.querySelectorAll('input, select, textarea'),\n              $filteredFields = Array.from( $formFields ).filter( elem => elem.matches(excludeSelector) );\n        return this.options.formOptions.getFormData( $filteredFields, trimValues );\n    }\n\n    validateField( field, fieldOptions ){\n        const self = this;\n        const $form = self.$form;\n        const $field = typeof field === 'string' ? $form.querySelector(field) : field;\n\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions);\n        \n        return checkFieldValidity($field, fieldOptions, self.validationRules, self.validationErrors)\n            .then(obj => {\n                dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } );\n                if( obj.result ){\n                    if( fieldOptions.onValidationCheckAll ){\n                        const selector = self.currentGroup || fieldsStringSelector;\n                        const $fields = $form.querySelectorAll(selector);\n                        const groups = self.options.formOptions.groups;\n                        checkFieldsValidity( $fields, fieldOptions, self.validationRules, self.validationErrors, obj.$field )\n                            .then(dataForm => {\n                                const validationEventName = self.currentGroup ? customEvents.group.validation : customEvents.form.validation;\n                                if( self.currentGroup ){\n                                    dataForm.group = {\n                                        prev: groups[groups.indexOf(selector) - 1],\n                                        current: selector,\n                                        next: groups[groups.indexOf(selector) + 1]\n                                    }\n                                    if( dataForm.result ){\n                                        self.currentGroup = dataForm.group.next;\n                                    }\n                                    dataForm.canSubmit = !self.currentGroup;\n                                }\n                                dispatchCustomEvent( $form, validationEventName, { detail: dataForm } );\n                            });\n                    }\n                } else {\n                    removeClass( $form, self.options.formOptions.cssClasses.valid );\n                }\n                return obj;\n            })\n            .then(finalizeFieldPromise);\n    }\n\n    validateFieldsGroup( group = this.currentGroup, fieldOptions ){\n        const self = this;\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions);\n        const $fields = self.$form.querySelectorAll(group);\n\n        return checkFieldsValidity($fields, fieldOptions, self.validationRules, self.validationErrors)\n            .then(data => {\n                data.fields.forEach(obj => {\n                    obj.isCheckingGroup = true;\n                    dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } );\n                });\n                const groups = self.options.formOptions.groups;\n                if( groups.length > 0 ){\n                    data.group = {\n                        prev: groups[groups.indexOf(group) - 1],\n                        current: group,\n                        next: groups[groups.indexOf(group) + 1]\n                    }\n                    data.canSubmit = !data.group.next;\n                }\n                dispatchCustomEvent( self.$form, customEvents.group.validation, { detail: data } );\n                return data;\n            })\n            .then(finalizeFieldsGroupPromise);\n    }\n\n    validateFilledFields( fieldOptions ){\n        const self = this;\n        const $filledFields = getFilledFields( self.$form );\n\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions);\n\n        return checkFieldsValidity($filledFields, fieldOptions, self.validationRules, self.validationErrors)\n            .then(data => {\n                data.fields.forEach(obj => {\n                    dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } );\n                });\n                return data;\n            })\n            .then(finalizeFormPromise);\n    }\n\n    validateForm( fieldOptions ){\n        const self = this;\n\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions);\n\n        if( self.currentGroup ){\n            return self.validateFieldsGroup( self.currentGroup, fieldOptions )\n        }\n\n        const $form = self.$form;\n        const $fields = $form.querySelectorAll(fieldsStringSelector);\n\n        return checkFieldsValidity($fields, fieldOptions, self.validationRules, self.validationErrors)\n            .then(data => {\n                data.fields.forEach(obj => {\n                    obj.isCheckingForm = true;\n                    dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } );\n                });\n                dispatchCustomEvent( $form, customEvents.form.validation, { detail: data } );\n                return data;\n            })\n            .then(finalizeFormPromise);\n    }\n    \n    static addValidationErrors( errorsObj ){\n        Form.prototype.validationErrors = mergeObjects({}, Form.prototype.validationErrors, errorsObj);\n    }\n\n    static addValidationRules( rulesObj ){\n        Form.prototype.validationRules = mergeObjects({}, Form.prototype.validationRules, rulesObj);\n    }\n    \n    static setOptions( optionsObj ){\n        Form.prototype.options = mergeObjects({}, Form.prototype.options, optionsObj);\n    }\n\n}\n\nForm.prototype.options = options;\nForm.prototype.validationErrors = {};\nForm.prototype.validationRules = validationRules;\nForm.prototype.version = version;\n\nexport default Form;\n","\nimport { customEvents } from './helpers';\nimport { dataTypeNumber, formValidationEnd, keypressMaxlength, pastePrevent, submit, validation, validationEnd } from './listenerCallbacks';\n\n\nexport function destroy( $form, options ){\n\n    if( options.fieldOptions.strictHtmlValidation ){\n        $form.removeEventListener('keypress', keypressMaxlength, false);\n        $form.removeEventListener('input', dataTypeNumber, false);\n    }\n\n    if( options.fieldOptions.preventPasteFields ){\n        $form.removeEventListener('paste', pastePrevent, false);\n    }\n\n    if( options.formOptions.handleSubmit ){\n        $form.removeEventListener('submit', submit);\n    }\n\n    options.fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n        const useCapturing = eventName === 'blur' ? true : false;\n        $form.removeEventListener(eventName, validation, useCapturing);\n    });\n\n    $form.removeEventListener(customEvents.field.validation, validationEnd, false);\n    $form.removeEventListener(customEvents.form.validation, formValidationEnd, false);\n\n    delete $form.formjs;\n    \n}\n","\nimport { fieldsStringSelector } from './fieldsStringSelector';\nimport { getUniqueFields } from './getUniqueFields';\n\nexport const getFilledFields = $form => {\n    return getUniqueFields( $form.querySelectorAll(fieldsStringSelector) )\n    .map($field => {\n\n        const name = $field.name,\n              type = $field.type,\n              isCheckboxOrRadio = type === 'checkbox' || type === 'radio',\n              fieldChecked = $form.querySelector('[name=\"' + name + '\"]:checked'),\n              isReqFrom = $field.matches('[data-required-from]'),\n              $reqMore = (isReqFrom ? $form.querySelector($field.getAttribute('data-required-from')) : null);\n\n        return (\n            isCheckboxOrRadio ? (fieldChecked || null) :\n            (isReqFrom && $reqMore.checked) || (!isReqFrom && $field.value) ? $field : null\n        );\n\n    })\n    .filter($field => $field !== null);\n}\n"],"names":["addClass","element","cssClasses","split","forEach","className","classList","add","isNodeList","nodeList","NodeList","prototype","isPrototypeOf","removeClass","remove","isDOMNode","node","Element","checkFormEl","form","isString","isFormSelector","document","querySelector","tagName","toLowerCase","result","$el","customEvents","validation","destroy","init","submit","isPlainObject","object","Object","toString","call","mergeObjects","out","Array","from","arguments","slice","filter","arg","keys","key","isArray","concat","push","dispatchCustomEvent","elem","eventName","eventOptions","bubbles","eventObj","CustomEvent","dispatchEvent","excludeSelector","fieldsStringSelector","finalizeFieldPromise","errors","Promise","resolve","reject","finalizeFieldsGroupPromise","canSubmit","fields","group","finalizeFormPromise","formatMap","dateArray","reverse","getDateAsNumber","dateString","dateFormat","separator","splitChar","match","length","indexOf","replace","join","getJSONobjectFromFieldAttribute","fieldEl","attrName","customAttrEl","closest","JSON","parse","getAttribute","getUniqueFields","$nodeList","currentFieldName","currentFieldType","$field","name","type","matches","mergeValidateFieldDefault","obj","mergeValidateFormDefault","isFieldForChangeEvent","runFunctionsSequence","functionsList","data","stopConditionFn","reduce","acc","promiseFn","then","res","dataNew","dataList","serializeObject","_typeof","constructor","a","k","encodeURIComponent","toCamelCase","string","all","letter","toUpperCase","options","fieldOptions","beforeValidation","trimValue","value","trim","$fields","$container","questionContainer","dirty","checkDirtyField","skipUIfeedback","pending","error","errorEmpty","errorRule","valid","focusOnRelated","maxFileSize","onValidationCheckAll","preventPasteFields","strictHtmlValidation","validateOnEvents","formOptions","ajaxOptions","cache","credentials","headers","method","mode","redirect","timeout","url","location","href","ajaxSubmit","beforeSend","ajaxComplete","ajaxError","ajaxPending","ajaxSuccess","getFormData","$filteredFields","trimValues","formData","$form","this","prevObj","isCheckbox","isRadio","isSelect","checked","$checkboxes","querySelectorAll","field","$checkedRadio","$selectedOpts","option","selected","keyName","index","list","isLastKeyName","keyNameSplit","arrPos","arrayHasItemAtIndex","arrItemKeyName","isKeyNameArray","endsWith","groups","handleFileUpload","handleSubmit","onInitCheckFilled","validationRules","date","test","email","number","checkbox","$dataChecks","attrValue","checkedLength","isMinOk","isMaxOk","checks","minChecks","maxChecks","equalTo","exactLength","valueLength","minlength","maxlength","file","MIMEtype","accept","RegExp","filesList","files","exceedMaxFileSize","size","isAcceptedFileType","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","max","maxVal","maxLength","min","minVal","minLength","pattern","radio","$fieldChecked","dataTypeNumber","event","target","fieldValue","stopImmediatePropagation","valueReplaced","formValidationEnd","formEl","formjs","clMethodName","detail","keypressMaxlength","keyPressed","which","keyCode","pastePrevent","preventDefault","ajaxCall","formDataObj","timeoutTimer","isMultipart","body","formDataMultipart","FormData","append","idx","stringify","Headers","controller","AbortController","signal","window","setTimeout","abort","fetch","response","ok","Error","statusText","fetchMethod","get","contentType","headerOpt","getFetchMethod","message","clearTimeout","disabled","instance","formCssClasses","isAjaxForm","$btn","eventPreventDefault","enableBtn","validateForm","stopExecution","beforeSendData","rfsObject","some","pop","groupValidationEnd","currentGroup","next","isChangeEvent","self","isFieldForChangeEventBoolean","hasOnlyChangeEvent","validateField","$relatedEqualTo","required","validationEnd","eventDetail","dataFieldOptions","isReqFrom","$reqMore","errorClasses","extraErrorClass","isChecks","checkedElLength","empty","errorClassToRemove","formStartup","noValidate","addEventListener","useCapture","checkFieldValidity","validationErrors","isValidValue","$checked","reqMoreIsChecked","$findReqMore","$findReqFrom","id","focus","needsValidation","dataObj","isRadioOrCheckbox","hasSelectedInput","validationMethods","attributes","accList","attr","isAttrValueWithFn","isAttrNameWithFn","accPromise","methodName","accObj","resolveVal","valObj","errorObj","isValid","checkFieldsValidity","fieldToSkip","$fieldsList","map","areAllFieldsValid","every","Form","optionsObj","argsL","checkFormElem","cbList","cbName","optionType","cbOpt","cbFn","bind","initOptions","validateFilledFields","errorsObj","rulesObj","removeEventListener","useCapturing","$formFields","selector","dataForm","validationEventName","prev","current","isCheckingGroup","isCheckboxOrRadio","fieldChecked","validateFieldsGroup","isCheckingForm","version"],"mappings":"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"}