{"version":3,"file":"formjs-systemjs.min.js","sources":["../src/modules/helpers/addClass.js","../src/modules/helpers/isNodeList.js","../src/modules/helpers/removeClass.js","../src/modules/helpers/isDOMNode.js","../src/modules/helpers/customEvents.js","../src/modules/helpers/isPlainObject.js","../src/modules/helpers/mergeObjects.js","../src/modules/helpers/dispatchCustomEvent.js","../src/modules/helpers/fieldsStringSelector.js","../src/modules/helpers/finalizeFieldsGroupPromise.js","../src/modules/helpers/finalizeFormPromise.js","../src/modules/helpers/getDateAsNumber.js","../src/modules/helpers/getSplitChar.js","../src/modules/helpers/getJSONobjectFromFieldAttribute.js","../src/modules/helpers/getUniqueFields.js","../src/modules/helpers/mergeValidateFieldDefault.js","../src/modules/helpers/isFieldForChangeEvent.js","../src/modules/helpers/runFunctionsSequence.js","../src/modules/helpers/serializeObject.js","../src/modules/helpers/toCamelCase.js","../src/modules/options.js","../src/modules/optionsUtils/beforeValidation.js","../src/modules/helpers/checkDirtyField.js","../src/modules/optionsUtils/getFormData.js","../src/modules/validationRules.js","../src/modules/validationRules/date.js","../src/modules/validationRules/email.js","../src/modules/validationRules/number.js","../src/modules/validationRules/checkbox.js","../src/modules/validationRules/checks.js","../src/modules/validationRules/equalTo.js","../src/modules/validationRules/exactLength.js","../src/modules/validationRules/file.js","../src/modules/validationRules/length.js","../src/modules/validationRules/max.js","../src/modules/validationRules/maxlength.js","../src/modules/validationRules/min.js","../src/modules/validationRules/minlength.js","../src/modules/validationRules/pattern.js","../src/modules/validationRules/radio.js","../src/modules/listenerCallbacks/dataTypeNumber.js","../src/modules/listenerCallbacks/formValidationEnd.js","../src/modules/listenerCallbacks/keypressMaxlength.js","../src/modules/listenerCallbacks/pastePrevent.js","../src/modules/ajaxCall.js","../src/modules/listenerCallbacks/submit.js","../src/modules/listenerCallbacks/groupValidationEnd.js","../src/modules/listenerCallbacks/validation.js","../src/modules/listenerCallbacks/validationEnd.js","../src/modules/checkFieldValidity.js","../src/modules/isValid.js","../src/modules/checkFieldsValidity.js","../src/modules/helpers/mergeValidateFormDefault.js","../src/index.js","../src/modules/helpers/checkFormEl.js","../src/modules/formStartup.js","../src/modules/destroy.js","../src/modules/helpers/excludeSelector.js","../src/modules/helpers/finalizeFieldPromise.js","../src/modules/helpers/getFilledFields.js"],"sourcesContent":["\nexport const addClass = ( element, cssClasses ) => {\n    element.classList.add( ...cssClasses.split(' ') )\n}\n","\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList )\n}\n","\nexport const removeClass = ( element, cssClasses ) => {\n    element.classList.remove( ...cssClasses.split(' ') )\n}\n","\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node )\n}\n","\nexport const customEvents = {\n    field: {\n        validation: 'fjs.field:validation'\n    },\n    form: {\n        destroy:    'fjs.form:destroy',\n        init:       'fjs.form:init',\n        submit:     'fjs.form:submit',\n        validation: 'fjs.form:validation'\n    },\n    group: {\n        validation: 'fjs.group:validation'\n    }\n}\n","\nexport const isPlainObject = object => {\n    return Object.prototype.toString.call( object ) === '[object Object]'\n}\n","\nimport { isPlainObject } from './isPlainObject'\n\nexport const mergeObjects = function( out = {} ){\n    Array.from(arguments).slice(1).filter(arg => !!arg).forEach(arg => {\n        Object.keys(arg).forEach(key => {\n            if( Array.isArray(arg[key]) ){\n                out[key] = (out[key] || []).concat( arg[key].slice(0) )\n            } else if( isPlainObject(arg[key]) ){\n                out[key] = mergeObjects((out[key] || {}), arg[key])\n            } else {\n                // * STRING | NUMBER | BOOLEAN | FUNCTION\n                if( Array.isArray(out[key]) ){\n                    // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                    out[key].push(arg[key])\n                } else {\n                    out[key] = arg[key]\n                }\n            }\n        })\n    })\n\n    return out\n}\n","\nimport { mergeObjects } from './mergeObjects'\n\nexport const dispatchCustomEvent = ( elem, eventName, eventOptions ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions)\n    const eventObj = new CustomEvent(eventName, eventOptions)\n    elem.dispatchEvent( eventObj )\n}\n","\nexport const fieldsStringSelector = 'input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"hidden\"]), select, textarea'\n","\nexport const finalizeFieldsGroupPromise = ({canSubmit, fields, group, result}) => {\n    if( result ){\n        return Promise.resolve({canSubmit, fields, group})\n    }\n    return Promise.reject({fields, group})\n}\n","\nexport const finalizeFormPromise = ({fields, result}) => {\n    if( result ){\n        return Promise.resolve(fields)\n    }\n    return Promise.reject(fields)\n}\n","\nimport { getSplitChar } from './getSplitChar'\n\nconst formatMap = {\n    'YYYY-MM-DD': function(dateArray){\n        return dateArray\n    },\n    'MM-DD-YYYY': function(dateArray){\n        return [dateArray[2], dateArray[0], dateArray[1]]\n    },\n    'DD-MM-YYYY': function(dateArray){\n        return dateArray.reverse()\n    }\n}\n\nexport const getDateAsNumber = ( dateString, dateFormat ) => {\n    dateFormat = dateFormat || 'YYYY-MM-DD'\n    const splitChar = getSplitChar(dateString)\n\n    if( dateFormat.indexOf(splitChar) < 0 ){\n        return\n    }\n\n    dateFormat = dateFormat.replace(/[^YMD]/g, '-')\n    dateString = dateString.split(splitChar)\n    dateString = formatMap[dateFormat](dateString).join('')\n    \n    return dateString\n}\n","\nexport const getSplitChar = string => {\n    // MATCH ANY NON-DIGIT CHAR\n    const separator = string.match(/\\D/)\n    return (separator && separator.length > 0) ? separator[0] : null\n}\n","\nexport const getJSONobjectFromFieldAttribute = ( $field, attrName ) => {\n    const $customAttr = $field.closest(`[${attrName}]`)\n    return ($customAttr && JSON.parse($customAttr.getAttribute(attrName))) || {}\n}\n","\nexport const getUniqueFields = $nodeList => {\n\n    let currentFieldName = ''\n    let currentFieldType = ''\n\n    return Array.from( $nodeList ).filter($field => {\n        const name = $field.name\n        const type = $field.type\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false\n        }\n        \n        if( !$field.matches('[data-required-from]') ){\n            currentFieldName = name\n            currentFieldType = type\n        }\n        \n        return true\n    })\n    \n}\n","\nimport { mergeObjects } from './mergeObjects'\n\nexport const mergeValidateFieldDefault = obj => {\n    return mergeObjects({}, { result: false, $field: null }, obj)\n}\n","\nexport const isFieldForChangeEvent = $field => {\n    return $field.matches('select, [type=\"radio\"], [type=\"checkbox\"], [type=\"file\"]')\n}\n","\nimport { mergeObjects } from './mergeObjects'\n\nexport const runFunctionsSequence = ( { functionsList = [], data = {}, stopConditionFn = () => false } = {} ) => {\n    return functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1])\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res)\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result)\n                    return res\n                })\n        })\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList)\n}\n","\nexport const serializeObject = obj => {\n    const objToString = (\n            (obj && typeof obj === 'object' && obj.constructor === Object) ? \n            Object.keys(obj)\n                .reduce((a,k) => {\n                    a.push(k+'='+encodeURIComponent(obj[k]))\n                    return a\n                },[]).join('&') : \n            obj\n    )\n    return objToString\n}\n","\nexport const toCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase() })\n}\n","\nimport { beforeValidation } from './optionsUtils/beforeValidation'\nimport { getFormData } from './optionsUtils/getFormData'\n\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [beforeValidation],\n        cssClasses: {\n            dirty:              'is-dirty',\n            error:              'has-error',\n            errorEmpty:         'has-error-empty',\n            errorRule:          'has-error-rule',\n            pending:            'is-pending',\n            valid:              'is-valid'\n        },\n        focusOnRelated:         true,\n        maxFileSize:            10,\n        onValidationCheckAll:   false,\n        preventPasteFields:     '[type=\"password\"], [data-equal-to]',\n        questionContainer:      '[data-formjs-question]',\n        skipUIfeedback:         false,\n        strictHtmlValidation:   true,\n        trimValue:              false,\n        validateOnEvents:       'input change'\n    },\n\n    formOptions: {\n        ajaxOptions:            {\n            cache:              'no-store',\n            credentials:        'same-origin',\n            headers: {\n                                'Content-Type': 'application/json',\n                                'Accept':       'application/json'\n            },\n            method:             'POST',\n            mode:               'same-origin',\n            redirect:           'follow',\n            timeout:            0,\n            url:                location.href\n        },\n        ajaxSubmit:             true,\n        beforeSend:             [],\n        cssClasses: {\n            ajaxComplete:       'ajax-complete',\n            ajaxError:          'ajax-error',\n            ajaxPending:        'ajax-pending',\n            ajaxSuccess:        'ajax-success',\n            submit:             'is-submitting',\n            valid:              'is-valid'\n        },\n        getFormData:            getFormData,\n        groups:                 [],\n        handleFileUpload:       true,\n        handleSubmit:           true,\n        onInitCheckFilled:      true\n    }\n    \n}\n","\nimport { addClass, checkDirtyField, isFieldForChangeEvent } from '../helpers'\n\nexport const beforeValidation = function beforeValidationDefault ( { $field, fieldOptions } ) {\n\n    if( fieldOptions.trimValue && !isFieldForChangeEvent($field) ){\n        $field.value = $field.value.trim()\n    }\n\n    checkDirtyField( $field, fieldOptions )\n\n    if( !fieldOptions.skipUIfeedback ){\n        addClass( $field.closest( fieldOptions.questionContainer ), fieldOptions.cssClasses.pending )\n    }\n\n}\n","\nimport { addClass } from './addClass'\nimport { isNodeList } from './isNodeList'\nimport { removeClass } from './removeClass'\n\nexport const checkDirtyField = ( $fields, fieldOptions ) => {\n\n    $fields = isNodeList($fields) ? Array.from( $fields ) : [$fields]\n    $fields.forEach($field => {\n        if( $field.type !== 'checkbox' && $field.type !== 'radio' ){\n            const $container = $field.closest( fieldOptions.questionContainer ) || $field\n            if( $field.value ){\n                addClass( $container, fieldOptions.cssClasses.dirty )\n            } else {\n                removeClass( $container, fieldOptions.cssClasses.dirty )\n            }\n        }\n    })\n    \n}\n","\nexport const getFormData = function getFormDataDefault( $filteredFields, trimValues ){\n\n    const formData = {}\n    const $form = this.$form\n    let prevObj = formData\n  \n    $filteredFields.forEach($field => {\n        const isCheckbox = $field.type === 'checkbox'\n        const isRadio = $field.type === 'radio'\n        const isSelect = $field.matches('select')\n        const name = $field.name\n        let value = trimValues ? $field.value.trim() : $field.value\n  \n        if( isCheckbox ){\n\n            value = $field.checked\n            let $checkboxes = Array.from( $form.querySelectorAll(`[name=\"${name}\"]`) )\n            if( $checkboxes.length > 1 ){\n                value = []\n                let $checked = $checkboxes.filter((field) => field.checked)\n                $checked.forEach($field => {\n                    value.push($field.value)\n                })\n            }\n\n        } else if( isRadio ){\n\n            const $checkedRadio = $form.querySelector(`[name=\"${name}\"]:checked`)\n            value = $checkedRadio === null ? null : $checkedRadio.value\n\n        } else if( isSelect ){\n\n            const $selectedOpts = Array.from($field.options).filter(option => option.selected)\n            if( $selectedOpts.length > 1 ){\n                value = []\n                $selectedOpts.forEach($field => { \n                    value.push($field.value)\n                })\n            }\n        }\n  \n        const nameSplit = name.split('.')\n        nameSplit.forEach((keyName, index, list) => {\n            const isLastKeyName = index + 1 === list.length\n  \n            if( Array.isArray(prevObj) ){\n                const keyNameSplit = keyName.split('___')\n                const arrPos = keyNameSplit[0] - 1\n                const arrayHasItemAtIndex = typeof prevObj[arrPos] !== 'undefined'\n                const arrItemKeyName = keyNameSplit[1]\n  \n                if( !arrayHasItemAtIndex ){\n                    prevObj.push({})\n                }\n  \n                keyName = arrItemKeyName\n\n                if( isLastKeyName ){\n                    prevObj[arrPos][keyName] = value\n                } else if( typeof prevObj[arrPos][keyName] === 'undefined' ) {\n                    prevObj[arrPos][keyName] = {}\n                }\n                \n                if( !isLastKeyName ){\n                    prevObj = prevObj[arrPos][keyName]\n                    return\n                }\n            } else {\n                const isKeyNameArray = keyName.endsWith('[]')\n                keyName = keyName.replace('[]', '')\n  \n                if( isLastKeyName ){\n                    prevObj[keyName] = value\n                } else if( typeof prevObj[keyName] === 'undefined' ){\n                    if( isKeyNameArray ){\n                        prevObj[keyName] = []\n                    } else {\n                        prevObj[keyName] = {}\n                    }\n                }\n            }\n  \n            prevObj = isLastKeyName ? formData : prevObj[keyName]\n        })\n    })\n  \n    return formData\n\n}\n","\nimport { date }         from './validationRules/date'\nimport { email }        from './validationRules/email'\nimport { number }       from './validationRules/number'\n\nimport { checkbox }     from './validationRules/checkbox'\nimport { equalTo }      from './validationRules/equalTo'\nimport { exactLength }  from './validationRules/exactLength'\nimport { file }         from './validationRules/file'\nimport { length }       from './validationRules/length'\nimport { max }          from './validationRules/max'\nimport { maxlength }    from './validationRules/maxlength'\nimport { min }          from './validationRules/min'\nimport { minlength }    from './validationRules/minlength'\nimport { pattern }      from './validationRules/pattern'\nimport { radio }        from './validationRules/radio'\n\nexport const validationRules = {\n    date,\n    email,\n    number,\n\n    checkbox,\n    equalTo,\n    exactLength,\n    file,\n    length,\n    max,\n    maxlength,\n    min,\n    minlength,\n    pattern,\n    radio\n}\n","\n/*\n    DATE AS ISO 8601 DATE FORMAT:\n    YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n*/\n\nexport const date = function( string ){\n    return {\n        result: /^((((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13578]|1[02])[ \\/\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13456789]|1[012])[ \\/\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.]02[ \\/\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ \\/\\-.]02[ \\/\\-.]29))$/g.test( string )\n    }\n}\n","\n// https://regex101.com/r/cdlyJy/3\n\nexport const email = function( string ){\n    return {\n        result: /^[a-zA-Z_-]([\\w.-]?[a-zA-Z0-9])*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?){2,})+$/.test( string )\n    }\n}\n","\n/*\n    ALL NUMBERS ( INTEGERS AND FLOATING )\n    VALID NUMBERS: 123 | 123.456 | .123\n*/\n\nexport const number = function( string ){\n    return {\n        result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n    }\n}","\nimport { checks } from './checks'\n\nexport const checkbox = function( value, $field ){\n    const $dataChecks = $field.form.querySelector(`[name=\"${$field.name}\"][data-checks]`)\n    return $dataChecks ? checks($dataChecks) : { result: $field.checked }\n}\n","\nexport const checks = function( $field ){\n    const attrValue = JSON.parse( $field.getAttribute('data-checks') )\n    const checkedLength = $field.form.querySelectorAll(`[name=\"${$field.name}\"]:checked`).length\n    const isMinOk = checkedLength >= attrValue[0]\n    const isMaxOk = checkedLength <= attrValue[1]\n    const obj = { result: isMinOk && isMaxOk }\n\n    if( !obj.result ){\n        obj.errors = { checks: true }\n        if( !isMinOk ){ obj.errors.minChecks = true }\n        if( !isMaxOk ){ obj.errors.maxChecks = true }\n    }\n\n    return obj\n}\n","\nexport const equalTo = function( value, $field ){\n    const $checkFrom = $field.form.querySelector( `[name=\"${$field.getAttribute('data-equal-to')}\"]` )\n    return { result: value === $checkFrom.value }\n}\n","\nexport const exactLength = function( value, $field ){\n    const valueLength = value.length\n    const exactLength = $field.getAttribute('data-exact-length') * 1\n    const obj = { result: valueLength === exactLength }\n\n    if( !obj.result ){\n        obj.errors = {}\n        if( valueLength < exactLength ){ obj.errors.minlength = true }\n        else { obj.errors.maxlength = true }\n    }\n\n    return obj\n}\n","\nexport const file = function( value, $field, fieldOptions ){\n    const maxFileSize = ($field.getAttribute('data-max-file-size') || fieldOptions.maxFileSize) * 1\n    const MIMEtype = $field.accept ? new RegExp($field.accept.replace( '*', '[^\\\\/,]+' )) : null\n    const filesList = Array.from($field.files)\n    const obj = { result: true }\n\n    filesList.forEach(file => {\n        const exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize\n        const isAcceptedFileType = MIMEtype !== null ? MIMEtype.test(file.type) : true\n\n        if( exceedMaxFileSize || !isAcceptedFileType ){\n            obj.result = false\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {}\n            }\n            if( exceedMaxFileSize ){ obj.errors.maxFileSize = true }\n            if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true }\n\n        }\n    })\n\n    return obj\n}\n","\nexport const length = function( value, $field ){\n    const valueL = value.length\n    const attrValue = JSON.parse( $field.getAttribute('data-length') )\n    const isMinlengthOk = valueL >= attrValue[0]\n    const isMaxlengthOk = valueL <= attrValue[1]\n    const obj = { result: isMinlengthOk && isMaxlengthOk }\n\n    if( !obj.result ){\n        obj.errors = {}\n        if( !isMinlengthOk ){ obj.errors.minlength = true }\n        if( !isMaxlengthOk ){ obj.errors.maxlength = true }\n    }\n\n    return obj\n}\n","\nimport { getDateAsNumber } from '../helpers'\n\nexport const max = function( value, $field ){\n    let maxVal = $field.max\n    const dateFormat = $field.getAttribute('data-date-format')\n    \n    if( $field.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat )\n        maxVal = maxVal.split('-').join('')\n    }\n\n    value = value * 1\n    maxVal = maxVal * 1\n    \n    return { result: value <= maxVal }\n}\n","\nexport const maxlength = function( value, $field ){\n    return { result: value.length <= $field.maxLength * 1 }\n}\n","\nimport { getDateAsNumber } from '../helpers'\n\nexport const min = function( value, $field ){\n    let minVal = $field.min\n    const dateFormat = $field.getAttribute('data-date-format')\n    \n    if( $field.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat )\n        minVal = minVal.split('-').join('')\n    }\n\n    value = value * 1\n    minVal = minVal * 1\n    \n    return { result: value >= minVal }\n}\n","\nexport const minlength = function( value, $field ){\n    return { result: value.length >= $field.minLength * 1 }\n}\n","\nexport const pattern = function( value, $field ){\n    return { result: new RegExp($field.pattern).test(value) }\n}\n","\nexport const radio = function( value, $field ){\n    const $fieldChecked = $field.form.querySelector( `[name=\"${$field.name}\"]:checked` )\n    const isValid = $fieldChecked !== null && $fieldChecked.value.trim().length > 0\n\n    return { result: isValid }\n}\n","\nexport const dataTypeNumber = function( event ){\n\n    const $field = event.target\n    \n    if( $field.matches('[data-type=\"number\"]') ){\n        let fieldValue = $field.value\n        const hasInvalidChars = /[^\\d.,+\\-]/.test(fieldValue)\n        \n        if( hasInvalidChars ){\n            event.stopImmediatePropagation()\n            let valueReplaced = fieldValue.replace(/[^\\d.,+\\-]/g, '')\n            $field.value = valueReplaced\n        }\n    }\n\n}\n","\nexport const formValidationEnd = function( event ){\n    const formEl = event.target\n    const options = formEl.formjs.options\n    \n    if( !options.fieldOptions.skipUIfeedback ){\n        const clMethodName = event.detail.result ? 'add' : 'remove'\n        formEl.classList[clMethodName]( options.formOptions.cssClasses.valid )\n    }\n}\n","\nexport const keypressMaxlength = function( event ){\n\n    const $field = event.target\n    \n    if( $field.matches( '[maxlength]' ) ){\n        const maxLength = $field.maxLength * 1\n        const keyPressed = event.which || event.keyCode\n        const allowedKeys = [8, 37, 38, 39, 46]\n\n        if( $field.value.length >= maxLength && allowedKeys.indexOf(keyPressed) === -1 ){\n            return false\n        }\n    }\n\n}\n","\nexport const pastePrevent = function( event ){\n\n    const $field = event.target\n    const fieldOptions = $field.form.formjs.options.fieldOptions\n\n    if( $field.matches( fieldOptions.preventPasteFields ) ){     \n        event.preventDefault()\n    }\n\n}\n","\nimport { addClass, mergeObjects, removeClass, serializeObject } from './helpers'\n\nconst getFetchMethod = (response, options) => {\n    const accept = options.headers.get('Accept')\n    const contentType = response.headers.get('Content-Type')\n    const headerOpt = accept || contentType || ''\n\n    if( headerOpt.indexOf('application/json') > -1 || headerOpt === '' ){\n        return 'json'\n    } else if( headerOpt.indexOf('text/') > -1 ){\n        return 'text'\n    } else {\n        return 'blob'\n    }\n}\n\nexport function ajaxCall( $form, formDataObj, options ){\n\n    let timeoutTimer\n    const ajaxOptions = mergeObjects( {}, options.formOptions.ajaxOptions )\n    const isMultipart = ajaxOptions.headers['Content-Type'] === 'multipart/form-data'\n\n    ajaxOptions.body = formDataObj\n    \n    // POST A FormData OBJECT ( multipart )\n    if( isMultipart && options.formOptions.handleFileUpload ){\n        let formDataMultipart = new FormData()\n        \n        for(let key in ajaxOptions.body){\n            formDataMultipart.append( key, ajaxOptions.body[key] )\n        }\n        \n        Array.from( $form.querySelectorAll('[type=\"file\"]') ).forEach($field => {\n            Array.from($field.files).forEach((file, idx) => {\n                const name = `${$field.name}[${idx}]`\n                formDataMultipart.append( name, file, file.name )\n            })\n        })\n        \n        ajaxOptions.body = formDataMultipart\n    }\n\n    if( ajaxOptions.method === 'GET' ){\n\n        // FETCH WITH \"GET\" METHOD CAN'T HAVE \"body\". SO IT IS APPENDED TO THE URL\n        ajaxOptions.url += ( /\\?/.test(ajaxOptions.url) ? '&' : '?' ) + serializeObject( ajaxOptions.body )\n        delete ajaxOptions.body\n\n    } else {\n\n        if( ajaxOptions.headers['Content-Type'].indexOf('application/x-www-form-urlencoded') > -1 ){\n            // POST A NORMAL FORM\n            ajaxOptions.body = serializeObject( ajaxOptions.body )\n        } else if( !isMultipart ){\n            // POST A JSON STRING\n            ajaxOptions.body = JSON.stringify(ajaxOptions.body)\n        }\n\n    }\n\n    ajaxOptions.headers = new Headers( ajaxOptions.headers )\n\n    if ( ajaxOptions.timeout > 0 ) {\n        const controller = new AbortController()\n        const signal = controller.signal\n\n        ajaxOptions.signal = signal\n        timeoutTimer = window.setTimeout(() => {\n            controller.abort()\n        }, ajaxOptions.timeout)\n    }\n\n    return fetch(ajaxOptions.url, ajaxOptions)\n        .then(response => {\n            if( !response.ok ){\n                throw new Error(response.statusText)\n            }\n            const fetchMethod = getFetchMethod(response, ajaxOptions)\n            return response[fetchMethod]()\n        })\n        .then(data => {\n            addClass( $form, options.formOptions.cssClasses.ajaxSuccess )\n            return data\n        })\n        .catch(error => {\n            addClass( $form, options.formOptions.cssClasses.ajaxError )\n            throw new Error(error.message)\n        })\n        .finally(() => {\n            if( timeoutTimer ){\n                window.clearTimeout( timeoutTimer )\n            }\n            removeClass( $form, `${options.formOptions.cssClasses.submit} ${options.formOptions.cssClasses.ajaxPending}` )\n            addClass( $form, options.formOptions.cssClasses.ajaxComplete )\n            $form.querySelector('[type=\"submit\"]').disabled = false\n        })\n\n}\n","\nimport { addClass, customEvents, dispatchCustomEvent, removeClass, runFunctionsSequence } from '../helpers'\nimport { ajaxCall } from '../ajaxCall'\n\nexport function submit( event ){\n\n    const $form = event.target\n    const instance = $form.formjs\n    const options = instance.options\n    const formCssClasses = options.formOptions.cssClasses\n    const isAjaxForm = options.formOptions.ajaxSubmit\n    const $btn = $form.querySelector('[type=\"submit\"]')\n\n    const eventPreventDefault = ( enableBtn = true ) => {\n        if( $btn && enableBtn ){ $btn.disabled = false }\n        if( event ){ event.preventDefault() }\n    }\n\n    if( isAjaxForm ){\n        eventPreventDefault(false)\n    }\n\n    if( $btn ){\n        if( $btn.disabled ){\n            eventPreventDefault(false)\n            return false\n        }\n        $btn.disabled = true\n    }\n\n    removeClass( $form, `${formCssClasses.ajaxComplete} ${formCssClasses.ajaxError} ${formCssClasses.ajaxSuccess}` )\n    addClass( $form, formCssClasses.submit )\n\n    instance.validateForm()\n        .then(data => {\n            \n            const hasGroup = typeof data.group !== 'undefined'\n\n            if( hasGroup && !data.canSubmit ){\n                return [{ stopExecution: true }]\n            }\n\n            const beforeSendData = {\n                stopExecution: false,\n                formData: isAjaxForm ? instance.getFormData() : null\n            }\n\n            const rfsObject = {\n                  functionsList: options.formOptions.beforeSend,\n                  data: beforeSendData,\n                  stopConditionFn: function(data){ return data.stopExecution }\n            }\n            return runFunctionsSequence(rfsObject)\n\n        }).then(dataList => {\n\n            if( dataList.some(({stopExecution}) => stopExecution) ){\n                eventPreventDefault()\n                return false\n            }\n            \n            if( isAjaxForm ){\n                const formData = dataList.pop().formData\n                addClass( $form, formCssClasses.ajaxPending )\n                dispatchCustomEvent( $form, customEvents.form.submit, { detail: ajaxCall( $form, formData, options ) } )\n            }\n\n        })\n        .catch(fields => {\n            eventPreventDefault()\n            removeClass( $form, formCssClasses.submit )\n        })\n    \n}\n","\nexport const groupValidationEnd = function( event ){\n\n    const detail = event.detail\n\n    if( detail.result ){\n        event.target.formjs.currentGroup = detail.group.next\n    }\n    \n}\n","\nimport { fieldsStringSelector, isFieldForChangeEvent } from '../helpers'\n\nexport const validation = function( event ){\n\n    const isChangeEvent = event.type === 'change'\n    const $field = event.target\n    const self = $field.form.formjs\n\n    if( $field.matches( fieldsStringSelector ) ){\n        const isFieldForChangeEventBoolean = isFieldForChangeEvent($field)\n        const hasOnlyChangeEvent = self.options.fieldOptions.validateOnEvents === 'change'\n        \n        if(\n            (isFieldForChangeEventBoolean && isChangeEvent) ||\n            (!isFieldForChangeEventBoolean && (!isChangeEvent || hasOnlyChangeEvent))\n        ){\n            \n            self.validateField( $field )\n                .then(() => {\n                    const type = $field.type\n                    const $relatedEqualTo = $field.form.querySelector(`[data-equal-to=\"${$field.name}\"]`)\n\n                    if(\n                        // FIELD IS ( required OR data-validate-if-filled ) AND RELATED FIELD data-equal-to HAS A VALUE\n                        ($field.required || $field.matches('[data-validate-if-filled]')) && \n                        !(type === 'checkbox' || type === 'radio') && \n                        $relatedEqualTo && $relatedEqualTo.value.trim() !== ''\n                    ){\n                        self.validateField( $relatedEqualTo ).catch(errors => {})\n                    }\n                })\n                .catch(errors => {})\n\n        }\n    }\n    \n}\n","\nimport { addClass, getJSONobjectFromFieldAttribute, removeClass, mergeObjects } from '../helpers'\n\nexport const validationEnd = function( event ){\n\n    const eventDetail = event.detail\n    const $field = eventDetail.$field\n    const dataFieldOptions = getJSONobjectFromFieldAttribute( $field, 'data-field-options' )\n    const fieldOptions = mergeObjects({}, $field.form.formjs.options.fieldOptions, dataFieldOptions)\n    const $container = $field.closest( fieldOptions.questionContainer )\n    const isReqFrom = $field.matches('[data-required-from]')\n    const $reqMore = document.querySelector( $field.getAttribute('data-required-from') )\n\n    if( $container && !fieldOptions.skipUIfeedback ){\n\n        if( eventDetail.result ){\n\n            if( !isReqFrom || (isReqFrom && $reqMore.checked) ){\n                // IF FIELD IS VALID\n                const errorClasses = `${fieldOptions.cssClasses.error} ${fieldOptions.cssClasses.errorEmpty} ${fieldOptions.cssClasses.errorRule}`\n                removeClass( $container, errorClasses )\n                addClass( $container, fieldOptions.cssClasses.valid )\n            }\n\n        } else {\n\n            // IF FIELD IS NOT VALID\n            let extraErrorClass = fieldOptions.cssClasses.errorRule\n\n            // HANDLE CASE OF FIELD data-checks\n            const isChecks = $field.matches('[data-checks]')\n            const checkedElLength = (isChecks ? $container.querySelectorAll(`[name=\"${$field.name}\"]:checked`).length : 0)\n\n            if( (!isChecks && (eventDetail.errors && eventDetail.errors.empty)) || (isChecks && checkedElLength === 0) ){\n                extraErrorClass = fieldOptions.cssClasses.errorEmpty\n            }\n\n            let errorClasses = `${fieldOptions.cssClasses.error} ${extraErrorClass}`\n            let errorClassToRemove = `${fieldOptions.cssClasses.errorEmpty} ${fieldOptions.cssClasses.errorRule}`\n            removeClass( $container, `${fieldOptions.cssClasses.valid} ${errorClassToRemove}` )\n            addClass( $container, errorClasses )\n\n        }\n    }\n\n}\n","\nimport {    getJSONobjectFromFieldAttribute,\n            isDOMNode,\n            mergeObjects,\n            mergeValidateFieldDefault,\n            removeClass,\n            runFunctionsSequence\n        }           from './helpers'\nimport { isValid }  from './isValid'\n\nexport async function checkFieldValidity( $field, fieldOptions, validationRules, validationErrors ){\n\n    if( !isDOMNode($field) ){\n        const obj = mergeValidateFieldDefault({$field})\n        return Promise.resolve(obj)\n    }\n\n    const $form = $field.form\n    const isValidValue = $field.value.trim().length > 0\n    const dataFieldOptions = getJSONobjectFromFieldAttribute( $field, 'data-field-options' )\n\n    fieldOptions = mergeObjects( fieldOptions, dataFieldOptions )\n\n    // HANDLE FIELD data-required-from WHEN CHANGING ITS RELATED RADIO\n    if( $field.type === 'radio' ){\n        const $checked = $field.checked ? $field : $form.querySelector(`[name=\"${$field.name}\"]:checked`)\n        const reqMoreIsChecked = $checked && $checked.matches('[data-require-more]')\n        const $findReqMore = reqMoreIsChecked ? $checked : $form.querySelector(`[data-require-more][name=\"${$field.name}\"]`)\n        const $findReqFrom = $findReqMore ? $form.querySelector(`[data-required-from=\"#${$findReqMore.id}\"]`) : null\n        \n        if( $checked && $findReqFrom ){\n            $findReqFrom.required = $findReqMore.required && $findReqMore.checked\n            if( !reqMoreIsChecked ){\n                $findReqFrom.value = ''\n            } else if( fieldOptions.focusOnRelated ) {\n                $findReqFrom.focus()\n            }\n        }\n    }\n\n    // HANDLE FIELD data-require-more & data-required-from WHEN *-from IT'S FILLED\n    if( $field.matches('[data-required-from]') && isValidValue ){\n        const $reqMore = $form.querySelector( $field.getAttribute('data-required-from') )\n        $reqMore.checked = true\n        $field.required = $reqMore.required\n    }\n\n    const dataBeforeValidation = await runFunctionsSequence({\n        functionsList: fieldOptions.beforeValidation,\n        data: { $field, fieldOptions }\n    })\n\n    const dataObj = dataBeforeValidation.pop()\n    const needsValidation = $field.required || ($field.matches('[data-validate-if-filled]') && isValidValue)\n\n    if( !needsValidation ){\n        dataObj.result = true\n    }\n    \n    const validationResult = needsValidation ? await isValid($field, fieldOptions, validationRules, validationErrors) : dataObj\n\n    const $container = fieldOptions.questionContainer && validationResult.$field.closest( fieldOptions.questionContainer )\n    if( $container ){\n        removeClass( $container, fieldOptions.cssClasses.pending )\n    }\n    \n    return validationResult\n\n}\n","\nimport { mergeValidateFieldDefault, mergeObjects, toCamelCase } from './helpers'\n\nexport function isValid( $field, fieldOptions, validationRules, validationErrors ){\n\n    const fieldValue = $field.value\n    const obj = mergeValidateFieldDefault({result: fieldValue.trim().length > 0, $field})\n    const isRadioOrCheckbox = /^(radio|checkbox)$/.test($field.type)\n    const hasSelectedInput = $field.form.querySelectorAll(`[name=\"${$field.name}\"]:checked`).length > 0\n\n    if( (!isRadioOrCheckbox && !obj.result) || (isRadioOrCheckbox && !hasSelectedInput) ){\n        obj.result = false\n        obj.errors = { empty: true }\n        return Promise.resolve(obj)\n    }\n\n    // COLLECT VALIDATION METHOD NAMES ( USED TO RUN VALIDATIONS AND GET ERRORS )\n    const validationMethods = Array.from($field.attributes).reduce((accList, attr) => {\n        const attrName = toCamelCase( attr.name.replace('data-', '') )\n        const attrValue = toCamelCase( attr.value )\n        const isAttrValueWithFn = ['type', 'subtype'].includes(attrName) && validationRules[attrValue]\n        const isAttrNameWithFn = validationRules[attrName]\n\n        if( isAttrValueWithFn || isAttrNameWithFn ){\n            accList.push( isAttrValueWithFn ? attrValue : attrName )\n        }\n        return accList\n    }, [])\n\n    return new Promise(resolve => {\n\n        // RUN VALIDATIONS\n        const validationsResult = validationMethods.reduce((accPromise, methodName) => {\n            return accPromise.then(accObj => {\n                return new Promise(resolveVal => {\n                    // RUN VALIDATION INSIDE A PROMISE IS USEFUL FOR ASYNC VALIDATIONS\n                    resolveVal( validationRules[methodName](fieldValue, $field, fieldOptions) )\n                }).then(valObj => {\n                    // ADD CUSTOM ERROR-KEY FOR EACH VALIDATION RULE\n                    if( !valObj.result ){\n                        const errorObj = {}\n                        if( typeof valObj.errors === 'undefined' || typeof valObj.errors[methodName] === 'undefined' ){\n                            errorObj[methodName] = true\n                        }\n                        valObj.errors = mergeObjects({}, valObj.errors, errorObj)\n                    }\n                    valObj = valObj.result ? {} : valObj\n                    return mergeObjects(accObj, valObj)\n                })\n            })\n        }, Promise.resolve(obj))\n        resolve(validationsResult)\n\n    }).then(data => {\n\n        // GET ERRORS\n        if( !data.result ){\n            data.errors = validationMethods.reduce((accObj, methodName) => {\n                const errors = (validationErrors[methodName] && validationErrors[methodName](fieldValue, $field)) || {}\n                return mergeObjects(accObj, errors)\n            }, data.errors)\n        }\n        return data\n\n    })\n\n}\n","\nimport { getUniqueFields, mergeValidateFieldDefault, mergeValidateFormDefault, mergeObjects } from './helpers'\nimport { checkFieldValidity } from './checkFieldValidity'\n\nexport function checkFieldsValidity( $fields, fieldOptions, validationRules, validationErrors, fieldToSkip = null ){\n\n    fieldOptions = mergeObjects( {}, fieldOptions, {focusOnRelated: false} )\n    const $fieldsList = getUniqueFields( $fields )\n\n    return Promise.all( $fieldsList.map($field => {\n\n        if( fieldToSkip && $field === fieldToSkip ){\n            const obj = mergeValidateFieldDefault({$field, result: true})\n            return Promise.resolve(obj)\n        }\n        return checkFieldValidity( $field, fieldOptions, validationRules, validationErrors )\n\n    }) ).then(fields => {\n\n        const areAllFieldsValid = fields.every(({result}) => result)\n        return mergeValidateFormDefault({result: areAllFieldsValid, fields})\n\n    })\n\n}\n","\nimport { mergeObjects } from './mergeObjects'\n\nexport const mergeValidateFormDefault = obj => {\n    return mergeObjects({}, { result: true, fields: [] }, obj)\n}\n","\nimport { version }              from '../package.json'\nimport { \n    checkFormEl, \n    customEvents, \n    dispatchCustomEvent, \n    excludeSelector, \n    fieldsStringSelector, \n    finalizeFieldPromise, \n    finalizeFieldsGroupPromise, \n    finalizeFormPromise, \n    getFilledFields, \n    isNodeList,\n    mergeObjects, \n    removeClass }               from './modules/helpers'\nimport { options }              from './modules/options'\nimport { validationRules }      from './modules/validationRules'\nimport { formStartup }          from './modules/formStartup'\nimport { destroy }              from './modules/destroy'\nimport { checkFieldValidity }   from './modules/checkFieldValidity'\nimport { checkFieldsValidity }  from './modules/checkFieldsValidity'\n\nclass Form {\n\n    constructor( form, optionsObj ){\n        const argsL = arguments.length\n        const checkFormElem = checkFormEl(form)\n\n        if( argsL === 0 || (argsL > 0 && !form) ){\n            throw new Error('First argument \"form\" is missing or falsy!')\n        }\n        if( isNodeList(form) ){\n            throw new Error('First argument \"form\" must be a single DOM node or a form CSS selector, not a NodeList!')\n        }\n        if( !checkFormElem.result ){\n            throw new Error('First argument \"form\" is not a DOM node nor a form CSS selector!')\n        }\n\n        const self = this\n\n        self.$form = checkFormElem.$el\n        self.$form.formjs = self\n        self.options = mergeObjects({}, Form.prototype.options, optionsObj)\n        self.currentGroup = self.options.formOptions.groups[0]\n\n        // BINDING CONTEXT FOR FUTURE EXECUTION\n        const cbList = [\n            // IN fieldOptions\n            'beforeValidation',\n            // IN formOptions\n            'beforeSend',\n            'getFormData'\n        ]\n        cbList.forEach(cbName => {\n            const optionType = self.options.formOptions[cbName] ? 'formOptions' : 'fieldOptions'\n            let cbOpt = self.options[optionType][cbName]\n\n            if( cbOpt ){\n                self.options[optionType][cbName] = ( Array.isArray(cbOpt) ? cbOpt.map(cbFn => cbFn.bind(self)) : cbOpt.bind(self) )\n            }\n        })\n\n        formStartup( self.$form, self.options )\n\n        const initOptions = {}\n        if( self.options.formOptions.onInitCheckFilled ){\n            initOptions.detail = self.validateFilledFields().catch(fields => {})\n        }\n        dispatchCustomEvent( self.$form, customEvents.form.init, initOptions )\n    }\n\n    destroy(){\n        destroy(this.$form, this.options)\n        dispatchCustomEvent( this.$form, customEvents.form.destroy )\n    }\n    \n    getFormData( trimValues = this.options.fieldOptions.trimValue ){\n        const $formFields = this.$form.querySelectorAll('input, select, textarea')\n        const $filteredFields = Array.from( $formFields ).filter( elem => elem.matches(excludeSelector) )\n        return this.options.formOptions.getFormData( $filteredFields, trimValues )\n    }\n\n    async validateField( field, fieldOptions ){\n        const self = this\n        const $form = self.$form\n        const $field = typeof field === 'string' ? $form.querySelector(field) : field\n\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions)\n\n        const fieldValidity = await checkFieldValidity($field, fieldOptions, self.validationRules, self.validationErrors)\n\n        dispatchCustomEvent( fieldValidity.$field, customEvents.field.validation, { detail: fieldValidity } )\n        \n        if( fieldValidity.result ){\n            if( fieldOptions.onValidationCheckAll ){\n                const selector = self.currentGroup || fieldsStringSelector\n                const $fields = $form.querySelectorAll(selector)\n                checkFieldsValidity( $fields, fieldOptions, self.validationRules, self.validationErrors, fieldValidity.$field )\n                    .then(dataForm => {\n                        const groups = self.options.formOptions.groups\n                        const validationEventName = self.currentGroup ? customEvents.group.validation : customEvents.form.validation\n                        if( groups.length > 0 ){\n                            dataForm.group = {\n                                prev: groups[groups.indexOf(selector) - 1],\n                                current: selector,\n                                next: groups[groups.indexOf(selector) + 1]\n                            }\n                            dataForm.canSubmit = dataForm.result && !dataForm.group.next\n                        }\n                        dispatchCustomEvent( $form, validationEventName, { detail: dataForm } )\n                    })\n            }\n        } else {\n            removeClass( $form, self.options.formOptions.cssClasses.valid )\n        }\n\n        return finalizeFieldPromise(fieldValidity)\n    }\n\n    validateFieldsGroup( group = this.currentGroup, fieldOptions ){\n        const self = this\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions)\n        const $fields = self.$form.querySelectorAll(group)\n\n        return checkFieldsValidity($fields, fieldOptions, self.validationRules, self.validationErrors)\n            .then(data => {\n                data.fields.forEach(obj => {\n                    obj.isCheckingGroup = true\n                    dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } )\n                })\n                const groups = self.options.formOptions.groups\n                if( groups.length > 0 ){\n                    data.group = {\n                        prev: groups[groups.indexOf(group) - 1],\n                        current: group,\n                        next: groups[groups.indexOf(group) + 1]\n                    }\n                    data.canSubmit = data.result && !data.group.next\n                }\n                dispatchCustomEvent( self.$form, customEvents.group.validation, { detail: data } )\n                return data\n            })\n            .then(finalizeFieldsGroupPromise)\n    }\n\n    validateFilledFields( fieldOptions ){\n        const self = this\n        const $filledFields = getFilledFields( self.$form )\n\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions)\n\n        return checkFieldsValidity($filledFields, fieldOptions, self.validationRules, self.validationErrors)\n            .then(data => {\n                data.fields.forEach(obj => {\n                    dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } )\n                })\n                return data\n            })\n            .then(finalizeFormPromise)\n    }\n\n    validateForm( fieldOptions ){\n        const self = this\n\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions)\n\n        if( self.currentGroup ){\n            return self.validateFieldsGroup( self.currentGroup, fieldOptions )\n        }\n\n        const $form = self.$form\n        const $fields = $form.querySelectorAll(fieldsStringSelector)\n\n        return checkFieldsValidity($fields, fieldOptions, self.validationRules, self.validationErrors)\n            .then(data => {\n                data.fields.forEach(obj => {\n                    obj.isCheckingForm = true\n                    dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } )\n                })\n                dispatchCustomEvent( $form, customEvents.form.validation, { detail: data } )\n                return data\n            })\n            .then(finalizeFormPromise)\n    }\n    \n    static addValidationErrors( errorsObj ){\n        Form.prototype.validationErrors = mergeObjects({}, Form.prototype.validationErrors, errorsObj)\n    }\n\n    static addValidationRules( rulesObj ){\n        Form.prototype.validationRules = mergeObjects({}, Form.prototype.validationRules, rulesObj)\n    }\n    \n    static setOptions( optionsObj ){\n        Form.prototype.options = mergeObjects({}, Form.prototype.options, optionsObj)\n    }\n\n}\n\nForm.prototype.options = options\nForm.prototype.validationErrors = {}\nForm.prototype.validationRules = validationRules\nForm.prototype.version = version\n\nexport default Form\n","\nimport { isDOMNode } from './isDOMNode'\n\nexport const checkFormEl = form => {\n    const isString = typeof form\n    const isValidNodeSelector = isString === 'string' && isDOMNode(document.querySelector(form))\n    const isFormSelector = isValidNodeSelector && document.querySelector(form).tagName.toLowerCase() === 'form'\n    \n    return {\n        result: isDOMNode(form) || isFormSelector,\n        $el: (isString === 'string' ? document.querySelector(form) : form)\n    }\n}\n","\nimport { customEvents } from './helpers'\nimport { \n    dataTypeNumber,\n    formValidationEnd,\n    groupValidationEnd,\n    keypressMaxlength,\n    pastePrevent,\n    submit,\n    validation, \n    validationEnd \n} from './listenerCallbacks'\n\nexport function formStartup( $form, options ){\n\n    $form.noValidate = true\n\n    const fieldOptions = options.fieldOptions\n    const formOptions = options.formOptions\n        \n    // VALIDATION WITH ATTRIBUTES LIKE HTML ONES ( ALSO FOR BUG FIXING, EG: maxlength IN ANDROID )\n    if( fieldOptions.strictHtmlValidation ){\n        \n        // maxlength\n        // MAXLENGTH IS BUGGY IN ANDROID BROWSERS\n        $form.addEventListener('keypress', keypressMaxlength, false)\n\n        // data-type=\"number\"\n        // SINCE VALIDATING type=\"number\" WITH NON NUMERIC CHARS WILL RETURN EMPTY STRING IN SOME BROWSERS ( EG: FIREFOX )\n        $form.addEventListener('input', dataTypeNumber, false)\n        \n    }\n    \n    if( fieldOptions.preventPasteFields && $form.querySelectorAll( fieldOptions.preventPasteFields ).length ){\n        // INIT EVENT LISTENER FOR \"PASTE\" EVENT TO PREVENT IT ON SPECIFIED FIELDS\n        $form.addEventListener('paste', pastePrevent, false)\n    }\n\n    // INIT EVENTS LISTENER ( AS IN fieldOptions )\n    fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n        const useCapture = /^(blur|focus)$/.test(eventName)\n        $form.addEventListener(eventName, validation, useCapture)\n    })\n\n    $form.addEventListener(customEvents.field.validation, validationEnd, false)\n    if( formOptions.groups.length > 0 ){\n        $form.addEventListener(customEvents.group.validation, groupValidationEnd, false)\n    }\n    $form.addEventListener(customEvents.form.validation, formValidationEnd, false)\n    \n    // HANDLE FORM SUBMIT\n    if( formOptions.handleSubmit ){\n        // INIT FORM SUBMIT ( DEFAULT AND AJAX )\n        $form.addEventListener('submit', submit)\n\n        if( formOptions.ajaxSubmit ){\n            if( $form.getAttribute('enctype') ){\n                formOptions.ajaxOptions.headers['Content-Type'] = $form.getAttribute('enctype')\n            }\n\n            if( $form.getAttribute('method') ){\n                formOptions.ajaxOptions.method = $form.getAttribute('method').toUpperCase()\n            }\n\n            if( $form.getAttribute('action') ){\n                formOptions.ajaxOptions.url = $form.getAttribute('action')\n            }\n        }\n    }\n\n}\n","\nimport { customEvents } from './helpers'\nimport { dataTypeNumber, formValidationEnd, groupValidationEnd, keypressMaxlength, pastePrevent, submit, validation, validationEnd } from './listenerCallbacks'\n\n\nexport function destroy( $form, options ){\n\n    if( options.fieldOptions.strictHtmlValidation ){\n        $form.removeEventListener('keypress', keypressMaxlength, false)\n        $form.removeEventListener('input', dataTypeNumber, false)\n    }\n\n    if( options.fieldOptions.preventPasteFields ){\n        $form.removeEventListener('paste', pastePrevent, false)\n    }\n\n    if( options.formOptions.handleSubmit ){\n        $form.removeEventListener('submit', submit)\n    }\n\n    options.fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n        const useCapturing = eventName === 'blur' ? true : false\n        $form.removeEventListener(eventName, validation, useCapturing)\n    })\n\n    $form.removeEventListener(customEvents.field.validation, validationEnd, false)\n    if( options.formOptions.groups.length > 0 ){\n        $form.removeEventListener(customEvents.group.validation, groupValidationEnd, false)\n    }\n    $form.removeEventListener(customEvents.form.validation, formValidationEnd, false)\n\n    delete $form.formjs\n    \n}\n","\nexport const excludeSelector = ':not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"file\"]):not([data-exclude-data])'\n","\nexport const finalizeFieldPromise = ({errors, result}) => {\n    if( result ){\n        return Promise.resolve()\n    }\n    return Promise.reject(errors)\n}\n","\nimport { fieldsStringSelector } from './fieldsStringSelector'\nimport { getUniqueFields } from './getUniqueFields'\n\nexport const getFilledFields = $form => {\n    return getUniqueFields( $form.querySelectorAll(fieldsStringSelector) )\n    .map($field => {\n\n        const name = $field.name\n        const type = $field.type\n        const isCheckboxOrRadio = ['checkbox', 'radio'].includes(type)\n        const fieldChecked = $form.querySelector(`[name=\"${name}\"]:checked`)\n        const isReqFrom = $field.matches('[data-required-from]')\n        const $reqMore = (isReqFrom ? $form.querySelector($field.getAttribute('data-required-from')) : null)\n\n        return (\n            isCheckboxOrRadio ? (fieldChecked || null) :\n            (isReqFrom && $reqMore.checked) || (!isReqFrom && $field.value) ? $field : null\n        )\n\n    })\n    .filter($field => $field !== null)\n}\n"],"names":["addClass","element","cssClasses","classList","add","split","isNodeList","nodeList","NodeList","prototype","isPrototypeOf","removeClass","remove","isDOMNode","node","Element","customEvents","validation","destroy","init","submit","isPlainObject","object","Object","toString","call","mergeObjects","out","Array","from","arguments","slice","filter","arg","forEach","keys","key","isArray","concat","push","dispatchCustomEvent","elem","eventName","eventOptions","bubbles","eventObj","CustomEvent","dispatchEvent","fieldsStringSelector","finalizeFieldsGroupPromise","canSubmit","fields","group","result","Promise","resolve","reject","finalizeFormPromise","formatMap","YYYY-MM-DD","dateArray","MM-DD-YYYY","DD-MM-YYYY","reverse","getDateAsNumber","dateString","dateFormat","splitChar","string","separator","match","length","getSplitChar","indexOf","replace","join","getJSONobjectFromFieldAttribute","$field","attrName","$customAttr","closest","JSON","parse","getAttribute","getUniqueFields","$nodeList","currentFieldName","currentFieldType","name","type","matches","mergeValidateFieldDefault","obj","isFieldForChangeEvent","runFunctionsSequence","functionsList","data","stopConditionFn","reduce","acc","promiseFn","then","res","dataNew","dataList","serializeObject","constructor","a","k","encodeURIComponent","toCamelCase","all","letter","toUpperCase","options","fieldOptions","beforeValidation","trimValue","value","trim","$fields","$container","questionContainer","dirty","checkDirtyField","skipUIfeedback","pending","error","errorEmpty","errorRule","valid","focusOnRelated","maxFileSize","onValidationCheckAll","preventPasteFields","strictHtmlValidation","validateOnEvents","formOptions","ajaxOptions","cache","credentials","headers","Content-Type","Accept","method","mode","redirect","timeout","url","location","href","ajaxSubmit","beforeSend","ajaxComplete","ajaxError","ajaxPending","ajaxSuccess","getFormData","$filteredFields","trimValues","formData","$form","this","prevObj","isCheckbox","isRadio","isSelect","checked","$checkboxes","querySelectorAll","field","$checkedRadio","querySelector","$selectedOpts","option","selected","keyName","index","list","isLastKeyName","keyNameSplit","arrPos","arrayHasItemAtIndex","arrItemKeyName","isKeyNameArray","endsWith","groups","handleFileUpload","handleSubmit","onInitCheckFilled","validationRules","date","test","email","number","checkbox","$dataChecks","form","attrValue","checkedLength","isMinOk","isMaxOk","errors","checks","minChecks","maxChecks","equalTo","exactLength","valueLength","minlength","maxlength","file","MIMEtype","accept","RegExp","filesList","files","exceedMaxFileSize","size","isAcceptedFileType","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","max","maxVal","maxLength","min","minVal","minLength","pattern","radio","$fieldChecked","dataTypeNumber","event","target","fieldValue","stopImmediatePropagation","valueReplaced","formValidationEnd","formEl","formjs","clMethodName","detail","keypressMaxlength","keyPressed","which","keyCode","allowedKeys","pastePrevent","preventDefault","ajaxCall","formDataObj","timeoutTimer","isMultipart","body","formDataMultipart","FormData","append","idx","stringify","Headers","controller","AbortController","signal","window","setTimeout","abort","fetch","response","ok","Error","statusText","fetchMethod","get","contentType","headerOpt","getFetchMethod","catch","message","finally","clearTimeout","disabled","instance","formCssClasses","isAjaxForm","$btn","eventPreventDefault","enableBtn","validateForm","stopExecution","beforeSendData","rfsObject","some","pop","groupValidationEnd","currentGroup","next","isChangeEvent","self","isFieldForChangeEventBoolean","hasOnlyChangeEvent","validateField","$relatedEqualTo","required","validationEnd","eventDetail","dataFieldOptions","isReqFrom","$reqMore","document","errorClasses","extraErrorClass","isChecks","checkedElLength","empty","errorClassToRemove","async","checkFieldValidity","validationErrors","isValidValue","$checked","reqMoreIsChecked","$findReqMore","$findReqFrom","id","focus","dataObj","needsValidation","validationResult","isRadioOrCheckbox","hasSelectedInput","validationMethods","attributes","accList","attr","isAttrValueWithFn","includes","isAttrNameWithFn","accPromise","methodName","accObj","resolveVal","valObj","errorObj","isValid","checkFieldsValidity","fieldToSkip","$fieldsList","map","areAllFieldsValid","every","Form","optionsObj","argsL","checkFormElem","isString","isFormSelector","tagName","toLowerCase","$el","checkFormEl","cbName","optionType","cbOpt","cbFn","bind","noValidate","addEventListener","useCapture","formStartup","initOptions","validateFilledFields","removeEventListener","useCapturing","$formFields","[object Object]","fieldValidity","selector","dataForm","validationEventName","prev","current","finalizeFieldPromise","validateFieldsGroup","isCheckingGroup","isCheckboxOrRadio","fieldChecked","isCheckingForm","errorsObj","rulesObj","exports","version"],"mappings":"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"}