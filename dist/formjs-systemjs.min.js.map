{"version":3,"file":"formjs-systemjs.min.js","sources":["../src/modules/version.js","../src/modules/helpers/addClass.js","../src/modules/helpers/isNodeList.js","../src/modules/helpers/removeClass.js","../src/modules/helpers/isDOMNode.js","../src/modules/helpers/checkFormEl.js","../src/modules/helpers/customEvents.js","../src/modules/helpers/mergeObjects.js","../src/modules/helpers/dispatchCustomEvent.js","../src/modules/helpers/fieldsStringSelector.js","../src/modules/helpers/getDateAsNumber.js","../src/modules/helpers/getSplitChar.js","../src/modules/helpers/getUniqueFields.js","../src/modules/helpers/getValidateFieldDefault.js","../src/modules/helpers/getValidateFormDefault.js","../src/modules/helpers/isFieldForChangeEvent.js","../src/modules/helpers/runFunctionsSequence.js","../src/modules/helpers/serializeObject.js","../src/modules/helpers/toCamelCase.js","../src/modules/optionsUtils.js","../src/modules/helpers/checkDirtyField.js","../src/modules/options.js","../src/modules/validationRules.js","../src/modules/validationRules/date.js","../src/modules/validationRules/email.js","../src/modules/validationRules/number.js","../src/modules/validationRules/checkbox.js","../src/modules/validationRules/checks.js","../src/modules/validationRules/equalTo.js","../src/modules/validationRules/exactLength.js","../src/modules/validationRules/file.js","../src/modules/validationRules/length.js","../src/modules/validationRules/max.js","../src/modules/validationRules/maxlength.js","../src/modules/validationRules/min.js","../src/modules/validationRules/minlength.js","../src/modules/validationRules/pattern.js","../src/modules/validationRules/radio.js","../src/modules/submit.js","../src/modules/ajaxCall.js","../src/modules/listenerCallbacks.js","../src/modules/formStartup.js","../src/modules/init.js","../src/modules/helpers/getFilledFields.js","../src/modules/checkFieldValidity.js","../src/modules/isValid.js","../src/modules/checkFormValidity.js","../src/index.js","../src/modules/constructor.js","../src/modules/destroy.js","../src/modules/helpers/excludeSelector.js","../src/modules/validationErrors.js"],"sourcesContent":["\nexport const version = '4.1.0';\n","\nexport const addClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.add( className );\n    });\n}\n","\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList );\n}\n","\nexport const removeClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.remove( className );\n    });\n}\n","\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node );\n}\n","\nimport { isDOMNode } from './isDOMNode';\n\nexport const checkFormEl = formEl => {\n    let isString = typeof formEl,\n        isValidNodeSelector = isString === 'string' && isDOMNode(document.querySelector(formEl)),\n        isFormSelector = isValidNodeSelector && document.querySelector(formEl).tagName.toLowerCase() === 'form',\n        obj = {\n            result: isDOMNode(formEl) || isFormSelector,\n            element: (isString === 'string' ? document.querySelector(formEl) : formEl)\n        };\n\n    return obj;\n}\n","\nexport const customEvents = {\n    field: {\n        validation: 'fjs.field:validation'\n    },\n    form: {\n        submit:     'fjs.form:submit',\n        validation: 'fjs.form:validation'\n    }\n}\n","\nexport const mergeObjects = function( out = {} ){\n    for(let i=1; i<arguments.length; i++){\n        let obj = arguments[i];\n\n        if(!obj){ continue; }\n\n        for(let key in obj){\n            let isArray = Object.prototype.toString.call(obj[key]) === \"[object Array]\";\n            let isObject = Object.prototype.toString.call(obj[key]) === \"[object Object]\";\n\n            // COPY ONLY ENUMERABLE PROPERTIES\n            if( obj.hasOwnProperty(key) ){\n                if( isArray ){\n\n                    if( typeof out[key] === 'undefined' ){\n                        out[key] = [];\n                    }\n                    out[key] = out[key].concat( obj[key].slice(0) );\n\n                } else if( isObject ){\n\n                    out[key] = mergeObjects(out[key], obj[key]);\n\n                } else {\n\n                    // * STRING | NUMBER | BOOLEAN | FUNCTION\n                    if( Array.isArray(out[key]) ){\n                        // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                        out[key].push(obj[key]);\n                    } else {\n                        out[key] = obj[key];\n                    }\n\n                }\n            }\n        }\n    }\n\n    return out;\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const dispatchCustomEvent = ( elem, eventName, data = {}, eventOptions = {} ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions);\n    const eventObj = new Event(eventName, eventOptions);\n    eventObj.data = data;\n    elem.dispatchEvent( eventObj );\n}\n","\nexport const fieldsStringSelector = 'input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"hidden\"]), select, textarea'\n","\nimport { getSplitChar } from './getSplitChar';\n\nconst formatMap = {\n    'YYYY-MM-DD': function(dateArray){\n        return dateArray;\n    },\n    'MM-DD-YYYY': function(dateArray){\n        return [dateArray[2], dateArray[0], dateArray[1]];\n    },\n    'DD-MM-YYYY': function(dateArray){\n        return dateArray.reverse();\n    }\n};\n\nexport const getDateAsNumber = ( dateString, dateFormat ) => {\n    dateFormat = dateFormat || 'YYYY-MM-DD';\n    const splitChar = getSplitChar(dateString);\n\n    if( dateFormat.indexOf(splitChar) < 0 ){\n        return;\n    }\n\n    dateFormat = dateFormat.replace(/[^YMD]/g, '-');\n    dateString = dateString.split(splitChar);\n    dateString = formatMap[dateFormat](dateString).join('');\n    \n    return dateString;\n}\n","\nexport const getSplitChar = string => {\n    // MATCH ANY NON-DIGIT CHAR\n    const separator = string.match(/\\D/);\n    return (separator && separator.length > 0) ? separator[0] : null;\n}\n","\nexport const getUniqueFields = nodeList => {\n\n    let currentFieldName = '',\n        currentFieldType = '';\n\n    return Array.from( nodeList ).filter(fieldEl => {\n        const name = fieldEl.name,\n              type = fieldEl.type;\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false;\n        }\n        \n        if( !fieldEl.matches('[data-required-from]') ){\n            currentFieldName = name;\n            currentFieldType = type;\n        }\n        return true;\n    });\n    \n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const getValidateFieldDefault = obj => {\n    return mergeObjects({}, { result: false, fieldEl: null }, obj);\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const getValidateFormDefault = obj => {\n    return mergeObjects({}, { result: true, fields: [] }, obj);\n}\n","\nexport const isFieldForChangeEvent = fieldEl => {\n    return fieldEl.matches('select, [type=\"radio\"], [type=\"checkbox\"], [type=\"file\"]');\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const runFunctionsSequence = ( { functionsList = [], data = {}, stopConditionFn = () => false } = {} ) => {\n    return functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1]);\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res);\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result);\n                    return res;\n                });\n        });\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList);\n}\n","\nexport const serializeObject = obj => {\n    var objToString = (\n            (obj && typeof obj === 'object' && obj.constructor === Object) ? \n            Object.keys(obj)\n                .reduce((a,k) => {\n                    a.push(k+'='+encodeURIComponent(obj[k]));\n                    return a\n                },[]).join('&') : \n            obj\n    );\n    return objToString;\n}\n","\nexport const toCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase(); });\n}\n","\nimport { addClass, checkDirtyField } from './helpers';\n\nexport const defaultCallbacksInOptions = {\n    fieldOptions: {\n\n        beforeValidation: function beforeValidationDefault ( fieldObj ) {\n\n            const fieldOptions = this.options.fieldOptions;\n\n            checkDirtyField( fieldObj.fieldEl, fieldOptions );\n            if( !fieldOptions.skipUIfeedback ){\n                addClass( fieldObj.fieldEl.closest( fieldOptions.questionContainer ), fieldOptions.cssClasses.pending );\n            }\n\n        }\n\n    },\n    formOptions: {\n\n        getFormData: function getFormDataDefault ( filteredFields ) {\n\n            const formData = {},\n                  formEl = this.formEl;\n\n            filteredFields.forEach(function( fieldEl ){\n                const isCheckbox = fieldEl.type === 'checkbox',\n                      isRadio = fieldEl.type === 'radio',\n                      isSelect = fieldEl.matches('select'),\n                      name = fieldEl.name;\n                let value = fieldEl.value;\n                                \n                if( isCheckbox ) {\n                    \n                    value = fieldEl.checked;\n                    let checkboxes = Array.from( formEl.querySelectorAll('[name=\"'+ name +'\"]') );\n                    if( checkboxes.length > 1 ){\n\n                        value = [];\n                        let checkedElems = checkboxes.filter(field => field.checked);\n                        checkedElems.forEach(fieldEl => {\n                            value.push( fieldEl.value );\n                        });\n\n                    }\n                        \n                } else if( isRadio ){\n                    \n                    let checkedRadio = formEl.querySelector('[name=\"'+ name +'\"]:checked');\n                    value = (checkedRadio === null ? null : checkedRadio.value);\n                    \n                } else if( isSelect ){\n\n                    let selectedOpts = Array.from( fieldEl.options ).filter(option => option.selected);\n                    if( selectedOpts.length > 1 ){\n\n                        value = [];\n                        selectedOpts.forEach(fieldEl => {\n                            value.push( fieldEl.value );\n                        });\n\n                    }\n                }\n\n                formData[ name ] = value;\n            });\n\n            return formData;\n\n        }\n\n    }\n}\n","\nimport { addClass } from './addClass';\nimport { isNodeList } from './isNodeList';\nimport { removeClass } from './removeClass';\n\nexport const checkDirtyField = ( fields, fieldOptions ) => {\n\n    fields = isNodeList(fields) ? Array.from( fields ) : [fields];\n    fields.forEach(fieldEl => {\n        if( fieldEl.type !== 'checkbox' && fieldEl.type !== 'radio' ){\n            const containerEl = fieldEl.closest( fieldOptions.questionContainer ) || fieldEl;\n            if( fieldEl.value ){\n                addClass( containerEl, fieldOptions.cssClasses.dirty );\n            } else {\n                removeClass( containerEl, fieldOptions.cssClasses.dirty );\n            }\n        }\n    });\n    \n}\n","\nimport { defaultCallbacksInOptions } from './optionsUtils';\n\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [defaultCallbacksInOptions.fieldOptions.beforeValidation],\n        cssClasses: {\n            dirty:              'is-dirty',\n            error:              'has-error',\n            errorEmpty:         'has-error-empty',\n            errorRule:          'has-error-rule',\n            pending:            'is-pending',\n            valid:              'is-valid'\n        },\n        focusOnRelated:         true,\n        handleFileUpload:       true,\n        handleValidation:       true,\n        maxFileSize:            10,\n        onValidationCheckAll:   true,\n        preventPasteFields:     '[type=\"password\"], [data-equal-to]',\n        questionContainer:      '[data-formjs-question]',\n        skipUIfeedback:         false,\n        strictHtmlValidation:   true,\n        validateOnEvents:       'input change'\n    },\n\n    formOptions: {\n        ajaxOptions:            {\n            cache:              'no-store',\n            credentials:        'same-origin',\n            headers: {\n                                'Content-Type': 'application/json',\n                                'Accept':       'application/json'\n            },\n            method:             'POST',\n            mode:               'same-origin',\n            redirect:           'follow',\n            timeout:            0,\n            url:                location.href\n        },\n        ajaxSubmit:             true,\n        beforeSend:             [],\n        cssClasses: {\n            ajaxComplete:       'ajax-complete',\n            ajaxError:          'ajax-error',\n            ajaxPending:        'ajax-pending',\n            ajaxSuccess:        'ajax-success',\n            submit:             'is-submitting',\n            valid:              'is-valid'\n        },\n        getFormData:            defaultCallbacksInOptions.formOptions.getFormData,\n        handleSubmit:           true\n    }\n    \n}\n","\nimport { date }         from './validationRules/date';\nimport { email }        from './validationRules/email';\nimport { number }       from './validationRules/number';\n\nimport { checkbox }     from './validationRules/checkbox';\nimport { equalTo }      from './validationRules/equalTo';\nimport { exactLength }  from './validationRules/exactLength';\nimport { file }         from './validationRules/file';\nimport { length }       from './validationRules/length';\nimport { max }          from './validationRules/max';\nimport { maxlength }    from './validationRules/maxlength';\nimport { min }          from './validationRules/min';\nimport { minlength }    from './validationRules/minlength';\nimport { pattern }      from './validationRules/pattern';\nimport { radio }        from './validationRules/radio';\n\nexport const validationRules = {\n    date,\n    email,\n    number,\n\n    checkbox,\n    equalTo,\n    exactLength,\n    file,\n    length,\n    max,\n    maxlength,\n    min,\n    minlength,\n    pattern,\n    radio\n}\n","\n/*\n    DATE AS ISO 8601 DATE FORMAT:\n    YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n*/\n\nexport const date = function( string ){\n    let date = /^((((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13578]|1[02])[ \\/\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13456789]|1[012])[ \\/\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.]02[ \\/\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ \\/\\-.]02[ \\/\\-.]29))$/g.test( string ),\n        obj = {\n            result: date\n        };\n\n    return obj;\n}\n","\n// https://regex101.com/r/cdlyJy/3\n\nexport const email = function( string ){\n    let obj = {\n        result: /^[a-zA-Z_-]([\\w.-]?[a-zA-Z0-9])*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?){2,})+$/.test( string )\n    };\n\n    return obj;\n}\n","\n/*\n    ALL NUMBERS ( INTEGERS AND FLOATING )\n    VALID NUMBERS: 123 | 123.456 | .123\n*/\n\nexport const number = function( string ){\n    let obj = {\n        result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n    };\n\n    return obj;\n}","\nimport { checks } from './checks';\n\nexport const checkbox = function( value, fieldEl ){\n    let dataChecksEl = fieldEl.closest('form').querySelector('[name=\"' + fieldEl.name + '\"][data-checks]');\n    return dataChecksEl ? checks(dataChecksEl): {result: fieldEl.checked};\n}\n","\nexport const checks = function( fieldEl ){\n    let attrValue = JSON.parse( fieldEl.getAttribute('data-checks') ),\n        checkedElLength = fieldEl.closest('form').querySelectorAll('[name=\"' + fieldEl.name + '\"]:checked').length,\n        isMinOk = checkedElLength >= attrValue[0],\n        isMaxOk = checkedElLength <= attrValue[1],\n        obj = { result: isMinOk && isMaxOk };\n\n    if( !obj.result ){\n        obj.errors = { checks: true };\n        if( !isMinOk ){ obj.errors.minChecks = true; }\n        if( !isMaxOk ){ obj.errors.maxChecks = true; }\n    }\n\n    return obj;\n}\n","\nexport const equalTo = function( value, fieldEl ){\n    let checkFromEl = fieldEl.closest('form').querySelector( '[name=\"' + fieldEl.getAttribute('data-equal-to') + '\"]' ),\n        obj = { result: value === checkFromEl.value };\n\n    if( !obj.result ){\n        obj.errors = { equalTo: true };\n    }\n\n    return obj;\n}\n","\nexport const exactLength = function( value, fieldEl ){\n    let valueLength = value.length,\n        exactLength = fieldEl.getAttribute('data-exact-length') * 1,\n        obj = { result: valueLength === exactLength };\n\n    if( !obj.result ){\n        obj.errors = { exactLength: true };\n        if( valueLength < exactLength ){ obj.errors.minlength = true; }\n        else { obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nexport const file = function( value, fieldEl, fieldOptions ){\n    let maxFileSize = (fieldEl.getAttribute('data-max-file-size') || fieldOptions.maxFileSize) * 1,\n        MIMEtype = (fieldEl.accept ? new RegExp(fieldEl.accept.replace( '*', '[^\\\\/,]+' )) : null),\n        filesList = Array.from(fieldEl.files),\n        obj = { result: true };\n\n    filesList.forEach(function( file ){\n        let exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize,\n            isAcceptedFileType = (MIMEtype !== null ? MIMEtype.test(file.type) : true);\n\n        if( exceedMaxFileSize || !isAcceptedFileType ){\n            obj.result = false;\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {};\n            }\n            obj.errors.file = true;\n            if( exceedMaxFileSize ){ obj.errors.maxFileSize = true; }\n            if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true; }\n\n        }\n    });\n\n    return obj;\n}\n","\nexport const length = function( value, fieldEl ){\n    let valueL = value.length,\n        attrValue = JSON.parse( fieldEl.getAttribute('data-length') ),\n        isMinlengthOk = valueL >= attrValue[0],\n        isMaxlengthOk = valueL <= attrValue[1],\n        obj = { result: isMinlengthOk && isMaxlengthOk };\n\n    if( !obj.result ){\n        obj.errors = { stringLength: true };\n        if( !isMinlengthOk ){ obj.errors.minlength = true; }\n        if( !isMaxlengthOk ){ obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const max = function( value, fieldEl ){\n    let maxVal = fieldEl.max,\n        dateFormat = fieldEl.getAttribute('data-date-format');\n    \n    if( fieldEl.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat );\n        maxVal = maxVal.split('-').join('');\n    }\n\n    value = value * 1;\n    maxVal = maxVal * 1;\n\n    let obj = { result: value <= maxVal };\n\n    if( !obj.result ){\n        obj.errors = { max: true };\n    }\n    \n    return obj;\n}\n","\nexport const maxlength = function( value, fieldEl ){\n    const obj = { result: value.length <= fieldEl.maxLength * 1 };\n\n    if( !obj.result ){\n        obj.errors = { maxlength: true };\n    }\n\n    return obj;\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const min = function( value, fieldEl ){\n    let minVal = fieldEl.min,\n        dateFormat = fieldEl.getAttribute('data-date-format');\n    \n    if( fieldEl.type === 'date' || fieldEl.getAttribute('data-date-format') ){\n        value = getDateAsNumber( value, dateFormat );\n        minVal = minVal.split('-').join('');\n    }\n\n    value = value * 1;\n    minVal = minVal * 1;\n\n    let obj = { result: value >= minVal };\n\n    if( !obj.result ){\n        obj.errors = { min: true };\n    }\n    \n    return obj;\n}\n","\nexport const minlength = function( value, fieldEl ){\n    const obj = { result: value.length >= fieldEl.minLength * 1 };\n\n    if( !obj.result ){\n        obj.errors = { minlength: true };\n    }\n\n    return obj;\n}\n","\nexport const pattern = function( value, fieldEl ){\n    let fieldPattern = fieldEl.pattern,\n        fieldRegex = new RegExp( fieldPattern ),\n        obj = { result: fieldRegex.test( value ) };\n\n    if( !obj.result ){\n        obj.errors = { pattern: true };\n    }\n\n    return obj;\n}\n","\nexport const radio = function( value, fieldEl ){\n    let fieldChecked = fieldEl.closest('form').querySelector( '[name=\"'+ fieldEl.name +'\"]:checked' ),\n        isValid = fieldChecked !== null && fieldChecked.value.trim().length > 0;\n\n    return { result: isValid };\n}\n","\nimport { addClass, customEvents, dispatchCustomEvent, getValidateFormDefault, removeClass, runFunctionsSequence } from './helpers';\nimport { ajaxCall } from './ajaxCall';\n\nexport function submit( event ){\n\n    const formEl = event.target,\n          instance = formEl.formjs,\n          options = instance.options,\n          formCssClasses = options.formOptions.cssClasses,\n          isAjaxForm = options.formOptions.ajaxSubmit,\n          btnEl = formEl.querySelector('[type=\"submit\"]'),\n          eventPreventDefault = ( enableBtn = true ) => {\n              if( btnEl && enableBtn ){ btnEl.disabled = false; }\n              if( event ){ event.preventDefault(); }\n          };\n\n    if( isAjaxForm ){\n        eventPreventDefault(false);\n    }\n\n    if( btnEl ){\n        if( btnEl.disabled ){\n            eventPreventDefault(false);\n            return false;\n        }\n        btnEl.disabled = true;\n    }\n\n    removeClass( formEl, (formCssClasses.ajaxComplete + ' ' + formCssClasses.ajaxError + ' ' + formCssClasses.ajaxSuccess) );\n    addClass( formEl, formCssClasses.submit );\n    \n    const handleValidation = options.fieldOptions.handleValidation,\n          formValidationPromise = (handleValidation ? instance.validateForm() : Promise.resolve(getValidateFormDefault()));\n\n    formValidationPromise.then(formValidation => {\n\n        let beforeSendData = { stopExecution: false, formData: {} };\n\n        if( !formValidation.result ){\n            eventPreventDefault();\n            removeClass( formEl, formCssClasses.submit );\n            beforeSendData.stopExecution = true;\n            return [beforeSendData];\n        }\n        \n        let formDataObj = (isAjaxForm ? instance.getFormData() : null),\n            callbacksBeforeSend = options.formOptions.beforeSend;\n\n        if( formDataObj ){\n            beforeSendData.formData = formDataObj;\n        }\n\n        const rfsObject = {\n            functionsList: callbacksBeforeSend,\n            data: beforeSendData,\n            stopConditionFn: function(data){ return data.stopExecution; }\n        };\n        return runFunctionsSequence(rfsObject);\n\n    }).then(dataList => {\n\n        if( dataList.filter(data => data.stopExecution).length > 0 ){\n            eventPreventDefault();\n            return false;\n        }\n        \n        if( isAjaxForm ){\n\n            const formData = dataList.pop().formData;\n            addClass( formEl, formCssClasses.ajaxPending );\n            dispatchCustomEvent( formEl, customEvents.form.submit, ajaxCall( formEl, formData, options ) );\n            \n        }\n\n    });\n    \n}\n","\nimport { addClass, mergeObjects, removeClass, serializeObject } from './helpers';\n\nconst getFetchMethod = (response, options) => {\n    const accept = options.headers.get('Accept');\n    const contentType = response.headers.get('Content-Type');\n    const headerOpt = accept || contentType || '';\n\n    if( headerOpt.indexOf('application/json') > -1 || headerOpt === '' ){\n        return 'json';\n    } else if( headerOpt.indexOf('text/') > -1 ){\n        return 'text';\n    } else {\n        return 'blob';\n    }\n};\n\nexport function ajaxCall( formEl, formDataObj, options ){\n\n    let btnEl = formEl.querySelector('[type=\"submit\"]'),\n        timeoutTimer,\n        ajaxOptions = mergeObjects( {}, options.formOptions.ajaxOptions ),\n        isMultipart = ajaxOptions.headers['Content-Type'] === 'multipart/form-data';\n\n    ajaxOptions.body = formDataObj;\n    \n    // POST A FormData OBJECT ( multipart )\n    if( isMultipart && options.fieldOptions.handleFileUpload ){\n        let formDataMultipart = new FormData();\n        \n        for(let key in ajaxOptions.body){\n            formDataMultipart.append( key, ajaxOptions.body[key] );\n        }\n        \n        Array.from( formEl.querySelectorAll('[type=\"file\"]') ).forEach(function( field ){\n            Array.from(field.files).forEach(function( file, idx ){\n                let name = field.name+'['+ idx +']';\n                formDataMultipart.append( name, file, file.name );\n            });\n        });\n        \n        ajaxOptions.body = formDataMultipart;\n    }\n\n    if( ajaxOptions.method === 'GET' ){\n\n        // FETCH WITH \"GET\" METHOD CAN'T HAVE \"body\". SO IT IS APPENDED TO THE URL\n        ajaxOptions.url += ( /\\?/.test(ajaxOptions.url) ? '&' : '?' ) + serializeObject( ajaxOptions.body );\n        delete ajaxOptions.body;\n\n    } else {\n\n        if( ajaxOptions.headers['Content-Type'].indexOf('application/x-www-form-urlencoded') > -1 ){\n            // POST A NORMAL FORM\n            ajaxOptions.body = serializeObject( ajaxOptions.body );\n        } else if( !isMultipart ){\n            // POST A JSON STRING\n            ajaxOptions.body = JSON.stringify(ajaxOptions.body);\n        }\n\n    }\n\n    ajaxOptions.headers = new Headers( ajaxOptions.headers );\n\n    if ( ajaxOptions.timeout > 0 ) {\n        const controller = new AbortController();\n        const signal = controller.signal;\n\n        ajaxOptions.signal = signal;\n\n        timeoutTimer = window.setTimeout(function() {\n            controller.abort();\n        }, ajaxOptions.timeout);\n    }\n\n    return fetch(ajaxOptions.url, ajaxOptions)\n        .then(function( response ){\n            if( !response.ok ){\n                return Promise.reject(response);\n            }\n\n            let fetchMethod = getFetchMethod(response, ajaxOptions);\n\n            return response[fetchMethod]();\n        })\n        .then(function( data ){\n            addClass( formEl, options.formOptions.cssClasses.ajaxSuccess );\n            return data;\n        })\n        .catch(function( error ){\n            addClass( formEl, options.formOptions.cssClasses.ajaxError );\n            return Promise.reject(error);\n        })\n        .finally(function(){\n            if( timeoutTimer ){\n                window.clearTimeout( timeoutTimer );\n            }\n            removeClass( formEl, options.formOptions.cssClasses.submit + ' ' + options.formOptions.cssClasses.ajaxPending );\n            addClass( formEl, options.formOptions.cssClasses.ajaxComplete );\n            btnEl.disabled = false;\n        });\n\n}\n","\nimport { addClass, fieldsStringSelector, isFieldForChangeEvent, removeClass } from './helpers';\nimport { submit } from './submit';\n\nexport const listenerCallbacks = {\n\n    dataTypeNumber: function( event ){\n\n        const fieldEl = event.target;\n        \n        if( fieldEl.matches('[data-type=\"number\"]') ){\n            let fieldValue = fieldEl.value,\n                hasInvalidChars = /[^\\d.,+\\-]/.test(fieldValue);\n            \n            if( hasInvalidChars ){\n                event.stopImmediatePropagation();\n                let valueReplaced = fieldValue.replace(/[^\\d.,+\\-]/g, '');\n                fieldEl.value = valueReplaced;\n            }\n        }\n\n    },\n\n    keypressMaxlength: function( event ){\n\n        const fieldEl = event.target;\n        \n        if( fieldEl.matches( '[maxlength]' ) ){\n            const maxLength = fieldEl.maxLength * 1,\n                keyPressed = event.which || event.keyCode,\n                allowedKeys = [8, 37, 38, 39, 46];\n\n            if( fieldEl.value.length >= maxLength && allowedKeys.indexOf(keyPressed) === -1 ){\n                return false;\n            }\n        }\n\n    },\n\n    pastePrevent: function( event ){\n\n        const fieldEl = event.target;\n        let fieldOptions = fieldEl.closest('form').formjs.options.fieldOptions;\n\n        if( fieldEl.matches( fieldOptions.preventPasteFields ) ){     \n            event.preventDefault();\n        }\n\n    },\n\n    submit: function( event ){\n        submit(event);\n    },\n\n    validation: function( event ){\n\n        const isChangeEvent = event.type === 'change',\n              fieldEl = event.target,\n              self = fieldEl.closest('form').formjs;\n\n        if( fieldEl.matches( fieldsStringSelector ) ){\n            const isFieldForChangeEventBoolean = isFieldForChangeEvent(fieldEl);\n            \n            if(\n                (isFieldForChangeEventBoolean && isChangeEvent) ||\n                (!isFieldForChangeEventBoolean && !isChangeEvent)\n            ){\n                \n                return self.validateField( fieldEl ).then(obj => {\n                    const type = obj.fieldEl.type,\n                          realtedFieldEqualTo = obj.fieldEl.closest('form').querySelector('[data-equal-to=\"'+ obj.fieldEl.name +'\"]');\n\n                    if(\n                        // FIELD IS ( required OR data-validate-if-filled ) AND RELATED FIELD data-equal-to HAS A VALUE\n                        (obj.fieldEl.required || obj.fieldEl.matches('[data-validate-if-filled]')) && \n                        !(type === 'checkbox' || type === 'radio') && \n                        realtedFieldEqualTo && realtedFieldEqualTo.value.trim() !== ''\n                    ){\n                        return self.validateField( realtedFieldEqualTo );\n                    } else {\n                        return obj;\n                    }\n                });\n\n            }\n        }\n        \n    },\n\n    validationEnd: function( event ){\n\n        const fieldsArray = event.data.fieldEl ? [event.data] : event.data.fields,\n              options = fieldsArray[0].fieldEl.closest('form').formjs.options.fieldOptions;\n\n        fieldsArray.forEach(function( obj ){\n            let fieldEl = obj.fieldEl;\n            if( fieldEl.matches( fieldsStringSelector ) ){\n                let containerEl = fieldEl.closest( options.questionContainer ),\n                    isReqFrom = fieldEl.matches('[data-required-from]'),\n                    reqMoreEl = document.querySelector( fieldEl.getAttribute('data-required-from') );\n\n                if( containerEl !== null ){\n                    removeClass( containerEl, options.cssClasses.pending );\n                }\n\n                if( containerEl !== null && !options.skipUIfeedback ){\n\n                    if( obj.result ){\n\n                        if( !isReqFrom || (isReqFrom && reqMoreEl.checked) ){\n                            // IF FIELD IS VALID\n                            let errorClasses = options.cssClasses.error + ' ' + options.cssClasses.errorEmpty + ' ' + options.cssClasses.errorRule;\n                            removeClass( containerEl, errorClasses );\n                            addClass( containerEl, options.cssClasses.valid );\n                        }\n\n                    } else {\n\n                        // IF FIELD IS NOT VALID\n                        let extraErrorClass = options.cssClasses.errorRule;\n\n                        // HANDLE CASE OF FIELD data-checks\n                        let isChecks = fieldEl.matches('[data-checks]'),\n                            checkedElLength = (isChecks ? containerEl.querySelectorAll('[name=\"' + fieldEl.name + '\"]:checked').length : 0);\n\n                        if( (!isChecks && (obj.errors && obj.errors.empty)) || (isChecks && checkedElLength === 0) ){\n                            extraErrorClass = options.cssClasses.errorEmpty;\n                        }\n\n                        let errorClasses = options.cssClasses.error + ' ' + extraErrorClass,\n                            errorClassToRemove = options.cssClasses.errorEmpty + ' ' + options.cssClasses.errorRule;\n                        removeClass( containerEl, options.cssClasses.valid + ' ' + errorClassToRemove );\n                        addClass( containerEl, errorClasses );\n\n                    }\n                }\n            }\n        });\n\n    }\n\n}\n","\nimport { customEvents } from './helpers';\nimport { listenerCallbacks } from './listenerCallbacks';\n\nexport function formStartup( formEl, options ){\n\n    formEl.noValidate = true;\n\n    let fieldOptions = options.fieldOptions,\n        formOptions = options.formOptions;\n\n    // HANDLE FIELD VALIDATION\n    if( fieldOptions.handleValidation ){\n        \n        // VALIDATION WITH ATTRIBUTES LIKE HTML ONES ( ALSO FOR BUG FIXING, EG: maxlength IN ANDROID )\n        if( fieldOptions.strictHtmlValidation ){\n            \n            // maxlength\n            // MAXLENGTH IS BUGGY IN ANDROID BROWSERS\n            formEl.addEventListener('keypress', listenerCallbacks.keypressMaxlength, false);\n\n            // data-type=\"number\"\n            // SINCE VALIDATING type=\"number\" WITH NON NUMERIC CHARS WILL RETURN EMPTY STRING IN SOME BROWSERS ( EG: FIREFOX )\n            formEl.addEventListener('input', listenerCallbacks.dataTypeNumber, false);\n            \n        }\n        \n        if( fieldOptions.preventPasteFields && formEl.querySelectorAll( fieldOptions.preventPasteFields ).length ){\n            // INIT EVENT LISTENER FOR \"PASTE\" EVENT TO PREVENT IT ON SPECIFIED FIELDS\n            formEl.addEventListener('paste', listenerCallbacks.pastePrevent, false);\n        }\n\n        // INIT EVENTS LISTENER ( AS IN fieldOptions )\n        fieldOptions.validateOnEvents.split(' ').forEach(function( eventName ){\n            let useCapturing = (eventName === 'blur' ? true : false);\n            formEl.addEventListener(eventName, listenerCallbacks.validation, useCapturing);\n        });\n\n        formEl.addEventListener(customEvents.field.validation, listenerCallbacks.validationEnd, false);\n\n    }\n    \n    // HANDLE FORM SUBMIT\n    if( formOptions.handleSubmit ){\n        // INIT FORM SUBMIT ( DEFAULT AND AJAX )\n        formEl.addEventListener('submit', listenerCallbacks.submit);\n\n        if( formOptions.ajaxSubmit ){\n            if( formEl.getAttribute('enctype') ){\n                formOptions.ajaxOptions.headers['Content-Type'] = formEl.getAttribute('enctype');\n            }\n\n            if( formEl.getAttribute('method') ){\n                formOptions.ajaxOptions.method = formEl.getAttribute('method').toUpperCase();\n            }\n\n            if( formEl.getAttribute('action') ){\n                formOptions.ajaxOptions.url = formEl.getAttribute('action');\n            }\n        }\n    }\n\n}\n","\nimport { getFilledFields, isFieldForChangeEvent } from './helpers';\nimport { listenerCallbacks } from './listenerCallbacks';\n\nexport const init = function( formEl ){\n\n    const instance = formEl.formjs;\n    const formFields = getFilledFields( formEl );\n\n    // VALIDATE ALL FILLED FIELDS\n    return Promise.all( formFields.map(fieldEl => {\n\n        const isFieldForChangeEventBoolean = isFieldForChangeEvent(fieldEl);\n        const fakeEventObj = { target: fieldEl, type: (isFieldForChangeEventBoolean ? 'change': '') };\n        return listenerCallbacks.validation( fakeEventObj );\n\n    }) ).then(fields => {\n        instance.isInitialized = true;\n        return { instance, fields };\n    });;\n\n}\n","\nimport { fieldsStringSelector } from './fieldsStringSelector';\nimport { getUniqueFields } from './getUniqueFields';\n\nexport const getFilledFields = formEl => {\n    return getUniqueFields( formEl.querySelectorAll(fieldsStringSelector) )\n    .map(fieldEl => {\n\n        const name = fieldEl.name,\n              type = fieldEl.type,\n              isCheckboxOrRadio = (type === 'checkbox' || type === 'radio'),\n              fieldChecked = formEl.querySelector('[name=\"' + name + '\"]:checked'),\n              isReqFrom = fieldEl.matches('[data-required-from]'),\n              reqMoreEl = (isReqFrom ? formEl.querySelector(fieldEl.getAttribute('data-required-from')) : null);\n\n        return (\n            isCheckboxOrRadio ? (fieldChecked || null) :\n            (isReqFrom && reqMoreEl.checked) || (!isReqFrom && fieldEl.value) ? fieldEl : null\n        );\n\n    })\n    .filter(fieldEl => fieldEl !== null);\n}\n","\nimport { getValidateFieldDefault, isDOMNode, runFunctionsSequence } from './helpers';\nimport { isValid } from './isValid';\n\nexport function checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    if( !isDOMNode(fieldEl) ){\n        const obj = getValidateFieldDefault({fieldEl});\n        return Promise.resolve(obj);\n    }\n\n    const formEl = fieldEl.closest('form'),\n          isValidValue = fieldEl.value.trim().length > 0;\n\n     // HANDLE FIELDS radio/data-require-more\n     if( fieldEl.type === 'radio' ){\n        const checkedEl = fieldEl.checked ? fieldEl : formEl.querySelector('[name=\"'+ fieldEl.name +'\"]:checked'),\n              reqMoreIsChecked = checkedEl && checkedEl.matches('[data-require-more]'),\n              findReqMoreEl = reqMoreIsChecked ? checkedEl : formEl.querySelector('[data-require-more][name=\"'+ fieldEl.name +'\"]'),\n              findReqFromEl = findReqMoreEl ? formEl.querySelector('[data-required-from=\"#'+ findReqMoreEl.id +'\"]') : null;\n        \n        if( checkedEl && findReqFromEl ){\n            findReqFromEl.required = findReqMoreEl.required && findReqMoreEl.checked;\n            if( !reqMoreIsChecked ){\n                findReqFromEl.value = '';\n            } else if( fieldOptions.focusOnRelated ) {\n                findReqFromEl.focus();\n            }\n        }\n    }\n\n    // HANDLE FIELDS data-required-from\n    if( fieldEl.matches('[data-required-from]') && isValidValue ){\n        const reqMoreEl = formEl.querySelector( fieldEl.getAttribute('data-required-from') );\n        reqMoreEl.checked = true;\n        fieldEl.required = reqMoreEl.required;\n    }\n\n    const needsValidation = fieldEl.required || (fieldEl.matches('[data-validate-if-filled]') && isValidValue);\n\n    return runFunctionsSequence({\n            functionsList: fieldOptions.beforeValidation,\n            data: {fieldEl}\n        })\n        .then(data => {\n            let dataObj = data.pop();\n            return new Promise(resolve => {\n                if( !needsValidation ){\n                    dataObj.result = true;\n                }\n                resolve( needsValidation ? isValid(fieldEl, fieldOptions, validationRules, validationErrors) : dataObj );\n            });\n        });\n\n}\n","\nimport { getValidateFieldDefault, mergeObjects, toCamelCase } from './helpers';\n\nexport function isValid( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    const fieldValue = fieldEl.value;\n\n    let obj = getValidateFieldDefault({result: fieldValue.trim().length > 0, fieldEl});\n\n    if( !obj.result ){\n        obj.errors = { empty: true };\n        return Promise.resolve(obj);\n    }\n\n    // COLLECT VALIDATION METHOD NAMES ( USED TO RUN VALIDATIONS AND GET ERRORS )\n    const validationMethods = Array.from(fieldEl.attributes).reduce((accList, attr) => {\n        const attrName = toCamelCase( attr.name.replace('data-', '') ),\n              attrValue = toCamelCase( attr.value ),\n              isAttrValueWithFn = (attrName === 'type' || attrName === 'subtype') && validationRules[attrValue],\n              isAttrNameWithFn = validationRules[attrName];\n\n        if( isAttrValueWithFn || isAttrNameWithFn ){\n            accList.push( isAttrValueWithFn ? attrValue : attrName );\n\n        }\n\n        return accList;\n    }, []);\n\n    return new Promise(resolve => {\n\n        // RUN VALIDATIONS\n        const validationsResult = validationMethods.reduce((accPromise, methodName) => {\n            return accPromise.then(accObj => {\n                return new Promise(resolveVal => {\n                    // RUN VALIDATION INSIDE A PROMISE IS USEFUL FOR ASYNC VALIDATIONS\n                    resolveVal( validationRules[methodName](fieldValue, fieldEl, fieldOptions) );\n                }).then(valObj => {\n                    valObj = valObj.result ? {} : valObj;\n                    return mergeObjects(accObj, valObj);\n                });\n            });\n        }, Promise.resolve(obj));\n        \n        resolve(validationsResult);\n\n    }).then(data => {\n\n        // GET ERRORS\n        if( !data.result ){\n            data.errors = validationMethods.reduce((accObj, methodName) => {\n                const errors = (validationErrors[methodName] && validationErrors[methodName](fieldValue, fieldEl, fieldOptions)) || {};\n                return mergeObjects(accObj, errors);\n            }, data.errors);\n            data.errors.rule = true;\n        }\n        return data;\n\n    });\n\n}\n","\nimport { fieldsStringSelector, getUniqueFields, getValidateFieldDefault, getValidateFormDefault, mergeObjects } from './helpers';\nimport { checkFieldValidity } from './checkFieldValidity';\n\nexport function checkFormValidity( formEl, fieldOptions, validationRules, validationErrors, fieldToSkip = null ){\n\n    fieldOptions = mergeObjects( {}, fieldOptions, {focusOnRelated: false} );\n\n    const obj = getValidateFormDefault(),\n          fieldsList = getUniqueFields( formEl.querySelectorAll(fieldsStringSelector) );\n\n    return Promise.all( fieldsList.map(fieldEl => {\n\n        if( fieldToSkip && fieldEl === fieldToSkip ){\n            const obj2 = getValidateFieldDefault({fieldEl, result: true});\n            return Promise.resolve(obj2);\n        }\n        \n        return checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors );\n\n    }) ).then(list => {\n\n        let areAllFieldsValid = list.filter(fieldObj => !fieldObj.result).length === 0;\n        obj.result = areAllFieldsValid;\n        obj.fields = list;\n\n        return obj;\n\n    });\n\n}\n","\nimport { version }              from './modules/version';\nimport { customEvents, dispatchCustomEvent, excludeSelector, mergeObjects, removeClass } from './modules/helpers';\nimport { options }              from './modules/options';\nimport { validationRules }      from './modules/validationRules';\nimport { validationErrors }     from './modules/validationErrors';\nimport { listenerCallbacks }    from './modules/listenerCallbacks';\nimport { constructorFn }        from './modules/constructor';\nimport { destroy }              from './modules/destroy';\nimport { init }                 from './modules/init';\nimport { checkFieldValidity }   from './modules/checkFieldValidity';\nimport { checkFormValidity }    from './modules/checkFormValidity';\n\nclass Form {\n\n    constructor( formEl, optionsObj ){\n        constructorFn(this, formEl, optionsObj);\n    }\n\n    destroy(){\n        destroy(this.formEl, this.options);\n    }\n    \n    getFormData(){\n        const formFieldsEl = this.formEl.querySelectorAll('input, select, textarea'),\n              filteredFields = Array.from( formFieldsEl ).filter( elem => elem.matches(excludeSelector) );\n        return this.options.formOptions.getFormData(filteredFields);\n    }\n\n    init(){\n        return init(this.formEl);\n    }\n\n    validateField( fieldEl, fieldOptions ){\n        fieldEl = (typeof fieldEl === 'string' ? this.formEl.querySelector(fieldEl) : fieldEl);\n        fieldOptions = mergeObjects({}, this.options.fieldOptions, fieldOptions);\n        const formEl = this.formEl;\n        const skipUIfeedback = this.options.fieldOptions.skipUIfeedback;\n        return checkFieldValidity(fieldEl, fieldOptions, this.validationRules, this.validationErrors)\n            .then(obj => {\n                return new Promise(resolve => {\n                    if( obj.fieldEl ){\n                        dispatchCustomEvent( obj.fieldEl, customEvents.field.validation, obj, { bubbles: false } );\n                        dispatchCustomEvent( formEl, customEvents.field.validation, obj );\n                        if( fieldOptions.onValidationCheckAll && obj.result ){\n                            // FORCE skipUIfeedback TO true\n                            fieldOptions.skipUIfeedback = true;\n                            resolve(\n                                checkFormValidity( formEl, fieldOptions, this.validationRules, this.validationErrors, obj.fieldEl )\n                                    .then(dataForm => {\n                                        const clMethodName = dataForm.result ? 'add' : 'remove';\n                                        formEl.classList[clMethodName]( this.options.formOptions.cssClasses.valid );\n                                        dispatchCustomEvent( formEl, customEvents.form.validation, dataForm );\n                                        // RESTORE skipUIfeedback TO THE ORIGINAL VALUE\n                                        fieldOptions.skipUIfeedback = skipUIfeedback;\n                                        return obj;\n                                    })\n                            );\n                        } else if( !obj.result ){\n                            removeClass( formEl, this.options.formOptions.cssClasses.valid );\n                        }\n                    }\n                    resolve( obj );\n                });\n            });\n    }\n\n    validateForm( fieldOptions ){\n        fieldOptions = mergeObjects({}, this.options.fieldOptions, fieldOptions);\n        const formEl = this.formEl;\n        return checkFormValidity(formEl, fieldOptions, this.validationRules, this.validationErrors)\n            .then(data => {\n                const clMethodName = data.result ? 'add' : 'remove';\n                formEl.classList[clMethodName]( this.options.formOptions.cssClasses.valid );\n                listenerCallbacks.validationEnd( {data} );\n                dispatchCustomEvent( formEl, customEvents.form.validation, data );\n                return data;\n            });\n\n    }\n    \n    static addValidationErrors( errorsObj ){\n        this.prototype.validationErrors = mergeObjects({}, this.prototype.validationErrors, errorsObj);\n    }\n\n    static addValidationRules( rulesObj ){\n        this.prototype.validationRules = mergeObjects({}, this.prototype.validationRules, rulesObj);\n    }\n    \n    static setOptions( optionsObj ){\n        this.prototype.options = mergeObjects({}, this.prototype.options, optionsObj);\n    }\n\n}\n\nForm.prototype.isInitialized = false;\nForm.prototype.options = options;\nForm.prototype.validationErrors = validationErrors;\nForm.prototype.validationRules = validationRules;\nForm.prototype.version = version;\n\nexport default Form;\n","\nimport { checkFormEl, isNodeList, mergeObjects }   from './helpers';\nimport { formStartup }                             from './formStartup';\n\nexport function constructorFn( self, formEl, optionsObj ){\n\n    let argsL = arguments.length,\n        checkFormElem = checkFormEl(formEl);\n\n    if( argsL === 0 || (argsL > 0 && !formEl) ){\n        throw new Error('First argument \"formEl\" is missing or falsy!');\n    }\n    if( isNodeList(formEl) ){\n        throw new Error('First argument \"formEl\" must be a single DOM node or a form CSS selector, not a NodeList!');\n    }\n    if( !checkFormElem.result ){\n        throw new Error('First argument \"formEl\" is not a DOM node nor a form CSS selector!');\n    }\n\n    self.formEl = checkFormElem.element;\n    self.formEl.formjs = self;\n    self.options = mergeObjects({}, self.constructor.prototype.options, optionsObj);\n\n    // BINDING CONTEXT FOR FUTURE EXECUTION\n    const cbList = [\n        // IN fieldOptions\n        'beforeValidation',\n        // IN formOptions\n        'beforeSend',\n        'getFormData'\n    ];\n    cbList.forEach(cbName => {\n        let optionType = self.options.formOptions[cbName] ? 'formOptions' : 'fieldOptions',\n            cbOpt = self.options[optionType][cbName];\n\n        if( cbOpt ){\n            self.options[optionType][cbName] = ( Array.isArray(cbOpt) ? cbOpt.map(cbFn => cbFn.bind(self)) : cbOpt.bind(self) );\n        }\n    });\n\n    formStartup( self.formEl, self.options );\n    \n}\n","\nimport { customEvents } from './helpers';\nimport { listenerCallbacks } from './listenerCallbacks';\n\n\nexport function destroy( formEl, options ){\n\n    if( options.fieldOptions.strictHtmlValidation ){\n        formEl.removeEventListener('keypress', listenerCallbacks.keypressMaxlength, false);\n        formEl.removeEventListener('input', listenerCallbacks.dataTypeNumber, false);\n    }\n\n    if( options.fieldOptions.preventPasteFields ){\n        formEl.removeEventListener('paste', listenerCallbacks.pastePrevent, false);\n    }\n\n    if( options.formOptions.handleSubmit ){\n        formEl.removeEventListener('submit', listenerCallbacks.submit);\n    }\n\n    options.fieldOptions.validateOnEvents.split(' ').forEach(function( eventName ){\n        let useCapturing = (eventName === 'blur' ? true : false);\n        formEl.removeEventListener(eventName, listenerCallbacks.validation, useCapturing);\n    });\n\n    formEl.removeEventListener(customEvents.field.validation, listenerCallbacks.validationEnd, false);\n\n    delete formEl.formjs;\n    \n}\n","\nexport const excludeSelector = ':not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"file\"]):not([data-exclude-data])'\n","\nexport const validationErrors = {\n\n    email: function ( string ) {\n        const obj = {};\n\n        if( string.indexOf('@') === -1 ){\n\n            // @ IS MISSING\n            obj.missingAtChar = true;\n\n        } else {\n\n            let splitAt_at = string.split('@');\n            if( splitAt_at[0].length === 0 ){\n\n                // USER NAME IS MISSING\n                obj.missingUserName = true;\n\n            }\n\n            if( splitAt_at[1].length === 0 ){\n\n                // IS EMPTY AFTER @\n                obj.missingDomain = true;\n                obj.missingExtensionDot = true;\n                obj.missingExtension = true;\n\n            } else if( splitAt_at[1].indexOf('.') === -1 ) {\n\n                // DOT IS MISSING\n                obj.missingExtensionDot = true;\n                obj.missingExtension = true;\n\n            } else {\n\n                // EXTENSION MISSING OR NOT LONG ENOUGH\n                let splitAt_dot = splitAt_at[1].split('.'),\n                    extLength = splitAt_dot[1].length;\n                if( extLength === 0 ) {\n                    obj.missingExtension = true;\n                } else if( extLength < 2 ){\n                    obj.minlengthExtension = true;\n                }\n\n            }\n        }\n\n        return obj;\n\n    }\n\n}"],"names":["addClass","element","cssClasses","split","forEach","className","classList","add","isNodeList","nodeList","NodeList","prototype","isPrototypeOf","removeClass","remove","isDOMNode","node","Element","checkFormEl","formEl","isString","isFormSelector","document","querySelector","tagName","toLowerCase","result","customEvents","validation","submit","mergeObjects","out","i","arguments","length","obj","key","isArray","Object","toString","call","isObject","hasOwnProperty","concat","slice","Array","push","dispatchCustomEvent","elem","eventName","data","eventOptions","bubbles","eventObj","Event","dispatchEvent","fieldsStringSelector","formatMap","dateArray","reverse","getDateAsNumber","dateString","dateFormat","separator","splitChar","match","indexOf","replace","join","getUniqueFields","currentFieldName","currentFieldType","from","filter","fieldEl","name","type","matches","getValidateFieldDefault","getValidateFormDefault","fields","isFieldForChangeEvent","runFunctionsSequence","functionsList","stopConditionFn","reduce","acc","promiseFn","then","res","dataNew","Promise","resolve","dataList","serializeObject","_typeof","constructor","keys","a","k","encodeURIComponent","toCamelCase","string","all","letter","toUpperCase","defaultCallbacksInOptions","fieldOptions","beforeValidation","fieldObj","this","options","containerEl","closest","questionContainer","value","dirty","checkDirtyField","skipUIfeedback","pending","formOptions","getFormData","filteredFields","formData","isCheckbox","isRadio","isSelect","checked","checkboxes","querySelectorAll","field","checkedRadio","selectedOpts","option","selected","error","errorEmpty","errorRule","valid","focusOnRelated","handleFileUpload","handleValidation","maxFileSize","onValidationCheckAll","preventPasteFields","strictHtmlValidation","validateOnEvents","ajaxOptions","cache","credentials","headers","method","mode","redirect","timeout","url","location","href","ajaxSubmit","beforeSend","ajaxComplete","ajaxError","ajaxPending","ajaxSuccess","handleSubmit","validationRules","date","test","email","number","checkbox","dataChecksEl","attrValue","JSON","parse","getAttribute","checkedElLength","isMinOk","isMaxOk","errors","checks","minChecks","maxChecks","equalTo","exactLength","valueLength","minlength","maxlength","file","MIMEtype","accept","RegExp","filesList","files","exceedMaxFileSize","size","isAcceptedFileType","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","stringLength","max","maxVal","maxLength","min","minVal","minLength","pattern","fieldPattern","radio","fieldChecked","trim","event","target","instance","formjs","formCssClasses","isAjaxForm","btnEl","eventPreventDefault","enableBtn","disabled","preventDefault","validateForm","formValidation","beforeSendData","stopExecution","formDataObj","callbacksBeforeSend","pop","timeoutTimer","isMultipart","body","formDataMultipart","FormData","append","idx","stringify","Headers","controller","AbortController","signal","window","setTimeout","abort","fetch","response","ok","reject","fetchMethod","get","contentType","headerOpt","getFetchMethod","clearTimeout","ajaxCall","listenerCallbacks","fieldValue","stopImmediatePropagation","valueReplaced","keyPressed","which","keyCode","isChangeEvent","self","isFieldForChangeEventBoolean","validateField","realtedFieldEqualTo","required","fieldsArray","isReqFrom","reqMoreEl","errorClasses","extraErrorClass","isChecks","empty","errorClassToRemove","formStartup","noValidate","addEventListener","useCapturing","init","formFields","map","isCheckboxOrRadio","getFilledFields","isInitialized","checkFieldValidity","validationErrors","isValidValue","checkedEl","reqMoreIsChecked","findReqMoreEl","findReqFromEl","id","focus","needsValidation","dataObj","validationMethods","attributes","accList","attr","attrName","isAttrValueWithFn","isAttrNameWithFn","accPromise","methodName","accObj","resolveVal","valObj","rule","isValid","checkFormValidity","fieldToSkip","fieldsList","obj2","list","areAllFieldsValid","Form","optionsObj","argsL","checkFormElem","Error","cbList","cbName","optionType","cbOpt","cbFn","bind","constructorFn","errorsObj","rulesObj","removeEventListener","destroy","formFieldsEl","_this","dataForm","clMethodName","_this2","missingAtChar","splitAt_at","missingUserName","missingDomain","missingExtensionDot","missingExtension","extLength","minlengthExtension","version"],"mappings":"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"}