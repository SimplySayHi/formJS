{"version":3,"file":"formjs-systemjs.min.js","sources":["../src/modules/version.js","../src/modules/helpers/addClass.js","../src/modules/helpers/isNodeList.js","../src/modules/helpers/removeClass.js","../src/modules/helpers/isDOMNode.js","../src/modules/helpers/checkFormEl.js","../src/modules/helpers/customEvents.js","../src/modules/helpers/mergeObjects.js","../src/modules/helpers/dispatchCustomEvent.js","../src/modules/helpers/fieldsStringSelector.js","../src/modules/helpers/getDateAsNumber.js","../src/modules/helpers/getSplitChar.js","../src/modules/helpers/getUniqueFields.js","../src/modules/helpers/getValidateFieldDefault.js","../src/modules/helpers/getValidateFormDefault.js","../src/modules/helpers/isFieldForChangeEvent.js","../src/modules/helpers/runFunctionsSequence.js","../src/modules/helpers/serializeObject.js","../src/modules/helpers/toCamelCase.js","../src/modules/optionsUtils.js","../src/modules/helpers/checkDirtyField.js","../src/modules/options.js","../src/modules/validationRules.js","../src/modules/validationRules/date.js","../src/modules/validationRules/email.js","../src/modules/validationRules/number.js","../src/modules/validationRules/checkbox.js","../src/modules/validationRules/checks.js","../src/modules/validationRules/equalTo.js","../src/modules/validationRules/exactLength.js","../src/modules/validationRules/file.js","../src/modules/validationRules/length.js","../src/modules/validationRules/max.js","../src/modules/validationRules/maxlength.js","../src/modules/validationRules/min.js","../src/modules/validationRules/minlength.js","../src/modules/validationRules/pattern.js","../src/modules/validationRules/radio.js","../src/modules/listenerCallbacks/dataTypeNumber.js","../src/modules/listenerCallbacks/keypressMaxlength.js","../src/modules/listenerCallbacks/pastePrevent.js","../src/modules/listenerCallbacks/submit.js","../src/modules/ajaxCall.js","../src/modules/listenerCallbacks/validation.js","../src/modules/listenerCallbacks/validationEnd.js","../src/modules/formStartup.js","../src/modules/init.js","../src/modules/helpers/getFilledFields.js","../src/modules/checkFieldValidity.js","../src/modules/isValid.js","../src/modules/checkFormValidity.js","../src/index.js","../src/modules/constructor.js","../src/modules/destroy.js","../src/modules/helpers/excludeSelector.js"],"sourcesContent":["\nexport const version = '5.0.0';\n","\nexport const addClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.add( className );\n    });\n}\n","\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList );\n}\n","\nexport const removeClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.remove( className );\n    });\n}\n","\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node );\n}\n","\nimport { isDOMNode } from './isDOMNode';\n\nexport const checkFormEl = formEl => {\n    let isString = typeof formEl,\n        isValidNodeSelector = isString === 'string' && isDOMNode(document.querySelector(formEl)),\n        isFormSelector = isValidNodeSelector && document.querySelector(formEl).tagName.toLowerCase() === 'form',\n        obj = {\n            result: isDOMNode(formEl) || isFormSelector,\n            element: (isString === 'string' ? document.querySelector(formEl) : formEl)\n        };\n\n    return obj;\n}\n","\nexport const customEvents = {\n    field: {\n        validation: 'fjs.field:validation'\n    },\n    form: {\n        submit:     'fjs.form:submit',\n        validation: 'fjs.form:validation'\n    }\n}\n","\nexport const mergeObjects = function( out = {} ){\n    for(let i=1; i<arguments.length; i++){\n        let obj = arguments[i];\n\n        if(!obj){ continue; }\n\n        for(let key in obj){\n            let isArray = Object.prototype.toString.call(obj[key]) === \"[object Array]\";\n            let isObject = Object.prototype.toString.call(obj[key]) === \"[object Object]\";\n\n            // COPY ONLY ENUMERABLE PROPERTIES\n            if( obj.hasOwnProperty(key) ){\n                if( isArray ){\n\n                    if( typeof out[key] === 'undefined' ){\n                        out[key] = [];\n                    }\n                    out[key] = out[key].concat( obj[key].slice(0) );\n\n                } else if( isObject ){\n\n                    out[key] = mergeObjects(out[key], obj[key]);\n\n                } else {\n\n                    // * STRING | NUMBER | BOOLEAN | FUNCTION\n                    if( Array.isArray(out[key]) ){\n                        // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                        out[key].push(obj[key]);\n                    } else {\n                        out[key] = obj[key];\n                    }\n\n                }\n            }\n        }\n    }\n\n    return out;\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const dispatchCustomEvent = ( elem, eventName, data = {}, eventOptions = {} ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions);\n    const eventObj = new Event(eventName, eventOptions);\n    eventObj.data = data;\n    elem.dispatchEvent( eventObj );\n}\n","\nexport const fieldsStringSelector = 'input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"hidden\"]), select, textarea'\n","\nimport { getSplitChar } from './getSplitChar';\n\nconst formatMap = {\n    'YYYY-MM-DD': function(dateArray){\n        return dateArray;\n    },\n    'MM-DD-YYYY': function(dateArray){\n        return [dateArray[2], dateArray[0], dateArray[1]];\n    },\n    'DD-MM-YYYY': function(dateArray){\n        return dateArray.reverse();\n    }\n};\n\nexport const getDateAsNumber = ( dateString, dateFormat ) => {\n    dateFormat = dateFormat || 'YYYY-MM-DD';\n    const splitChar = getSplitChar(dateString);\n\n    if( dateFormat.indexOf(splitChar) < 0 ){\n        return;\n    }\n\n    dateFormat = dateFormat.replace(/[^YMD]/g, '-');\n    dateString = dateString.split(splitChar);\n    dateString = formatMap[dateFormat](dateString).join('');\n    \n    return dateString;\n}\n","\nexport const getSplitChar = string => {\n    // MATCH ANY NON-DIGIT CHAR\n    const separator = string.match(/\\D/);\n    return (separator && separator.length > 0) ? separator[0] : null;\n}\n","\nexport const getUniqueFields = nodeList => {\n\n    let currentFieldName = '',\n        currentFieldType = '';\n\n    return Array.from( nodeList ).filter(fieldEl => {\n        const name = fieldEl.name,\n              type = fieldEl.type;\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false;\n        }\n        \n        if( !fieldEl.matches('[data-required-from]') ){\n            currentFieldName = name;\n            currentFieldType = type;\n        }\n        return true;\n    });\n    \n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const getValidateFieldDefault = obj => {\n    return mergeObjects({}, { result: false, fieldEl: null }, obj);\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const getValidateFormDefault = obj => {\n    return mergeObjects({}, { result: true, fields: [] }, obj);\n}\n","\nexport const isFieldForChangeEvent = fieldEl => {\n    return fieldEl.matches('select, [type=\"radio\"], [type=\"checkbox\"], [type=\"file\"]');\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const runFunctionsSequence = ( { functionsList = [], data = {}, stopConditionFn = () => false } = {} ) => {\n    return functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1]);\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res);\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result);\n                    return res;\n                });\n        });\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList);\n}\n","\nexport const serializeObject = obj => {\n    var objToString = (\n            (obj && typeof obj === 'object' && obj.constructor === Object) ? \n            Object.keys(obj)\n                .reduce((a,k) => {\n                    a.push(k+'='+encodeURIComponent(obj[k]));\n                    return a\n                },[]).join('&') : \n            obj\n    );\n    return objToString;\n}\n","\nexport const toCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase(); });\n}\n","\nimport { addClass, checkDirtyField } from './helpers';\n\nexport const defaultCallbacksInOptions = {\n    fieldOptions: {\n\n        beforeValidation: function beforeValidationDefault ( fieldObj ) {\n\n            const fieldOptions = this.options.fieldOptions;\n\n            checkDirtyField( fieldObj.fieldEl, fieldOptions );\n            if( !fieldOptions.skipUIfeedback ){\n                addClass( fieldObj.fieldEl.closest( fieldOptions.questionContainer ), fieldOptions.cssClasses.pending );\n            }\n\n        }\n\n    },\n    formOptions: {\n\n        getFormData: function getFormDataDefault ( filteredFields ) {\n\n            const formData = {},\n                  formEl = this.formEl;\n\n            filteredFields.forEach(fieldEl => {\n                const isCheckbox = fieldEl.type === 'checkbox',\n                      isRadio = fieldEl.type === 'radio',\n                      isSelect = fieldEl.matches('select'),\n                      name = fieldEl.name;\n                let value = fieldEl.value;\n                                \n                if( isCheckbox ) {\n                    \n                    value = fieldEl.checked;\n                    let checkboxes = Array.from( formEl.querySelectorAll('[name=\"'+ name +'\"]') );\n                    if( checkboxes.length > 1 ){\n\n                        value = [];\n                        let checkedElems = checkboxes.filter(field => field.checked);\n                        checkedElems.forEach(fieldEl => {\n                            value.push( fieldEl.value );\n                        });\n\n                    }\n                        \n                } else if( isRadio ){\n                    \n                    const checkedRadio = formEl.querySelector('[name=\"'+ name +'\"]:checked');\n                    value = (checkedRadio === null ? null : checkedRadio.value);\n                    \n                } else if( isSelect ){\n\n                    const selectedOpts = Array.from( fieldEl.options ).filter(option => option.selected);\n                    if( selectedOpts.length > 1 ){\n\n                        value = [];\n                        selectedOpts.forEach(fieldEl => {\n                            value.push( fieldEl.value );\n                        });\n\n                    }\n                }\n\n                formData[ name ] = value;\n            });\n\n            return formData;\n\n        }\n\n    }\n}\n","\nimport { addClass } from './addClass';\nimport { isNodeList } from './isNodeList';\nimport { removeClass } from './removeClass';\n\nexport const checkDirtyField = ( fields, fieldOptions ) => {\n\n    fields = isNodeList(fields) ? Array.from( fields ) : [fields];\n    fields.forEach(fieldEl => {\n        if( fieldEl.type !== 'checkbox' && fieldEl.type !== 'radio' ){\n            const containerEl = fieldEl.closest( fieldOptions.questionContainer ) || fieldEl;\n            if( fieldEl.value ){\n                addClass( containerEl, fieldOptions.cssClasses.dirty );\n            } else {\n                removeClass( containerEl, fieldOptions.cssClasses.dirty );\n            }\n        }\n    });\n    \n}\n","\nimport { defaultCallbacksInOptions } from './optionsUtils';\n\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [defaultCallbacksInOptions.fieldOptions.beforeValidation],\n        cssClasses: {\n            dirty:              'is-dirty',\n            error:              'has-error',\n            errorEmpty:         'has-error-empty',\n            errorRule:          'has-error-rule',\n            pending:            'is-pending',\n            valid:              'is-valid'\n        },\n        focusOnRelated:         true,\n        handleFileUpload:       true,\n        onValidationCheckAll:   true,\n        preventPasteFields:     '[type=\"password\"], [data-equal-to]',\n        questionContainer:      '[data-formjs-question]',\n        skipUIfeedback:         false,\n        strictHtmlValidation:   true,\n        validateOnEvents:       'input change'\n    },\n\n    formOptions: {\n        ajaxOptions:            {\n            cache:              'no-store',\n            credentials:        'same-origin',\n            headers: {\n                                'Content-Type': 'application/json',\n                                'Accept':       'application/json'\n            },\n            method:             'POST',\n            mode:               'same-origin',\n            redirect:           'follow',\n            timeout:            0,\n            url:                location.href\n        },\n        ajaxSubmit:             true,\n        beforeSend:             [],\n        cssClasses: {\n            ajaxComplete:       'ajax-complete',\n            ajaxError:          'ajax-error',\n            ajaxPending:        'ajax-pending',\n            ajaxSuccess:        'ajax-success',\n            submit:             'is-submitting',\n            valid:              'is-valid'\n        },\n        getFormData:            defaultCallbacksInOptions.formOptions.getFormData,\n        handleSubmit:           true\n    }\n    \n}\n","\nimport { date }         from './validationRules/date';\nimport { email }        from './validationRules/email';\nimport { number }       from './validationRules/number';\n\nimport { checkbox }     from './validationRules/checkbox';\nimport { equalTo }      from './validationRules/equalTo';\nimport { exactLength }  from './validationRules/exactLength';\nimport { file }         from './validationRules/file';\nimport { length }       from './validationRules/length';\nimport { max }          from './validationRules/max';\nimport { maxlength }    from './validationRules/maxlength';\nimport { min }          from './validationRules/min';\nimport { minlength }    from './validationRules/minlength';\nimport { pattern }      from './validationRules/pattern';\nimport { radio }        from './validationRules/radio';\n\nexport const validationRules = {\n    date,\n    email,\n    number,\n\n    checkbox,\n    equalTo,\n    exactLength,\n    file,\n    length,\n    max,\n    maxlength,\n    min,\n    minlength,\n    pattern,\n    radio\n}\n","\n/*\n    DATE AS ISO 8601 DATE FORMAT:\n    YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n*/\n\nexport const date = function( string ){\n    return {\n        result: /^((((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13578]|1[02])[ \\/\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13456789]|1[012])[ \\/\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.]02[ \\/\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ \\/\\-.]02[ \\/\\-.]29))$/g.test( string )\n    };\n}\n","\n// https://regex101.com/r/cdlyJy/3\n\nexport const email = function( string ){\n    return {\n        result: /^[a-zA-Z_-]([\\w.-]?[a-zA-Z0-9])*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?){2,})+$/.test( string )\n    };\n}\n","\n/*\n    ALL NUMBERS ( INTEGERS AND FLOATING )\n    VALID NUMBERS: 123 | 123.456 | .123\n*/\n\nexport const number = function( string ){\n    return {\n        result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n    };\n}","\nimport { checks } from './checks';\n\nexport const checkbox = function( value, fieldEl ){\n    const dataChecksEl = fieldEl.closest('form').querySelector('[name=\"' + fieldEl.name + '\"][data-checks]');\n    return dataChecksEl ? checks(dataChecksEl) : { result: fieldEl.checked };\n}\n","\nexport const checks = function( fieldEl ){\n    const attrValue = JSON.parse( fieldEl.getAttribute('data-checks') ),\n          checkedElLength = fieldEl.closest('form').querySelectorAll('[name=\"' + fieldEl.name + '\"]:checked').length,\n          isMinOk = checkedElLength >= attrValue[0],\n          isMaxOk = checkedElLength <= attrValue[1],\n          obj = { result: isMinOk && isMaxOk };\n\n    if( !obj.result ){\n        obj.errors = { checks: true };\n        if( !isMinOk ){ obj.errors.minChecks = true; }\n        if( !isMaxOk ){ obj.errors.maxChecks = true; }\n    }\n\n    return obj;\n}\n","\nexport const equalTo = function( value, fieldEl ){\n    const checkFromEl = fieldEl.closest('form').querySelector( '[name=\"' + fieldEl.getAttribute('data-equal-to') + '\"]' );\n    return { result: value === checkFromEl.value };\n}\n","\nexport const exactLength = function( value, fieldEl ){\n    const valueLength = value.length,\n          exactLength = fieldEl.getAttribute('data-exact-length') * 1,\n          obj = { result: valueLength === exactLength };\n\n    if( !obj.result ){\n        obj.errors = {};\n        if( valueLength < exactLength ){ obj.errors.minlength = true; }\n        else { obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nexport const file = function( value, fieldEl ){\n    const maxFileSize = (fieldEl.getAttribute('data-max-file-size') || 0) * 1,\n          MIMEtype = fieldEl.accept ? new RegExp(fieldEl.accept.replace( '*', '[^\\\\/,]+' )) : null,\n          filesList = Array.from(fieldEl.files),\n          obj = { result: true };\n\n    filesList.forEach(file => {\n        const exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize,\n              isAcceptedFileType = MIMEtype !== null ? MIMEtype.test(file.type) : true;\n\n        if( exceedMaxFileSize || !isAcceptedFileType ){\n            obj.result = false;\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {};\n            }\n            if( exceedMaxFileSize ){ obj.errors.maxFileSize = true; }\n            if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true; }\n\n        }\n    });\n\n    return obj;\n}\n","\nexport const length = function( value, fieldEl ){\n    const valueL = value.length,\n          attrValue = JSON.parse( fieldEl.getAttribute('data-length') ),\n          isMinlengthOk = valueL >= attrValue[0],\n          isMaxlengthOk = valueL <= attrValue[1],\n          obj = { result: isMinlengthOk && isMaxlengthOk };\n\n    if( !obj.result ){\n        obj.errors = {};\n        if( !isMinlengthOk ){ obj.errors.minlength = true; }\n        if( !isMaxlengthOk ){ obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const max = function( value, fieldEl ){\n    let maxVal = fieldEl.max;\n    const dateFormat = fieldEl.getAttribute('data-date-format');\n    \n    if( fieldEl.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat );\n        maxVal = maxVal.split('-').join('');\n    }\n\n    value = value * 1;\n    maxVal = maxVal * 1;\n    \n    return { result: value <= maxVal };\n}\n","\nexport const maxlength = function( value, fieldEl ){\n    return { result: value.length <= fieldEl.maxLength * 1 };\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const min = function( value, fieldEl ){\n    let minVal = fieldEl.min;\n    const dateFormat = fieldEl.getAttribute('data-date-format');\n    \n    if( fieldEl.type === 'date' || fieldEl.getAttribute('data-date-format') ){\n        value = getDateAsNumber( value, dateFormat );\n        minVal = minVal.split('-').join('');\n    }\n\n    value = value * 1;\n    minVal = minVal * 1;\n    \n    return { result: value >= minVal };\n}\n","\nexport const minlength = function( value, fieldEl ){\n    return { result: value.length >= fieldEl.minLength * 1 };\n}\n","\nexport const pattern = function( value, fieldEl ){\n    return { result: new RegExp(fieldEl.pattern).test(value) };\n}\n","\nexport const radio = function( value, fieldEl ){\n    const fieldChecked = fieldEl.closest('form').querySelector( '[name=\"'+ fieldEl.name +'\"]:checked' ),\n          isValid = fieldChecked !== null && fieldChecked.value.trim().length > 0;\n\n    return { result: isValid };\n}\n","\nexport const dataTypeNumber = function( event ){\n\n    const fieldEl = event.target;\n    \n    if( fieldEl.matches('[data-type=\"number\"]') ){\n        let fieldValue = fieldEl.value;\n        const hasInvalidChars = /[^\\d.,+\\-]/.test(fieldValue);\n        \n        if( hasInvalidChars ){\n            event.stopImmediatePropagation();\n            let valueReplaced = fieldValue.replace(/[^\\d.,+\\-]/g, '');\n            fieldEl.value = valueReplaced;\n        }\n    }\n\n}\n","\nexport const keypressMaxlength = function( event ){\n\n    const fieldEl = event.target;\n    \n    if( fieldEl.matches( '[maxlength]' ) ){\n        const maxLength = fieldEl.maxLength * 1,\n              keyPressed = event.which || event.keyCode,\n              allowedKeys = [8, 37, 38, 39, 46];\n\n        if( fieldEl.value.length >= maxLength && allowedKeys.indexOf(keyPressed) === -1 ){\n            return false;\n        }\n    }\n\n}\n","\nexport const pastePrevent = function( event ){\n\n    const fieldEl = event.target;\n    const fieldOptions = fieldEl.closest('form').formjs.options.fieldOptions;\n\n    if( fieldEl.matches( fieldOptions.preventPasteFields ) ){     \n        event.preventDefault();\n    }\n\n}\n","\nimport { addClass, customEvents, dispatchCustomEvent, removeClass, runFunctionsSequence } from '../helpers';\nimport { ajaxCall } from '../ajaxCall';\n\nexport function submit( event ){\n\n    const formEl = event.target,\n          instance = formEl.formjs,\n          options = instance.options,\n          formCssClasses = options.formOptions.cssClasses,\n          isAjaxForm = options.formOptions.ajaxSubmit,\n          btnEl = formEl.querySelector('[type=\"submit\"]'),\n          eventPreventDefault = ( enableBtn = true ) => {\n              if( btnEl && enableBtn ){ btnEl.disabled = false; }\n              if( event ){ event.preventDefault(); }\n          };\n\n    if( isAjaxForm ){\n        eventPreventDefault(false);\n    }\n\n    if( btnEl ){\n        if( btnEl.disabled ){\n            eventPreventDefault(false);\n            return false;\n        }\n        btnEl.disabled = true;\n    }\n\n    removeClass( formEl, (formCssClasses.ajaxComplete + ' ' + formCssClasses.ajaxError + ' ' + formCssClasses.ajaxSuccess) );\n    addClass( formEl, formCssClasses.submit );\n\n    instance.validateForm().then(formValidation => {\n\n        const beforeSendData = { stopExecution: false, formData: {} };\n\n        if( !formValidation.result ){\n            eventPreventDefault();\n            removeClass( formEl, formCssClasses.submit );\n            beforeSendData.stopExecution = true;\n            return [beforeSendData];\n        }\n        \n        const formDataObj = (isAjaxForm ? instance.getFormData() : null),\n            callbacksBeforeSend = options.formOptions.beforeSend;\n\n        if( formDataObj ){\n            beforeSendData.formData = formDataObj;\n        }\n\n        const rfsObject = {\n            functionsList: callbacksBeforeSend,\n            data: beforeSendData,\n            stopConditionFn: function(data){ return data.stopExecution; }\n        };\n        return runFunctionsSequence(rfsObject);\n\n    }).then(dataList => {\n\n        if( dataList.filter(data => data.stopExecution).length > 0 ){\n            eventPreventDefault();\n            return false;\n        }\n        \n        if( isAjaxForm ){\n\n            const formData = dataList.pop().formData;\n            addClass( formEl, formCssClasses.ajaxPending );\n            dispatchCustomEvent( formEl, customEvents.form.submit, ajaxCall( formEl, formData, options ) );\n            \n        }\n\n    });\n    \n}\n","\nimport { addClass, mergeObjects, removeClass, serializeObject } from './helpers';\n\nconst getFetchMethod = (response, options) => {\n    const accept = options.headers.get('Accept'),\n          contentType = response.headers.get('Content-Type'),\n          headerOpt = accept || contentType || '';\n\n    if( headerOpt.indexOf('application/json') > -1 || headerOpt === '' ){\n        return 'json';\n    } else if( headerOpt.indexOf('text/') > -1 ){\n        return 'text';\n    } else {\n        return 'blob';\n    }\n};\n\nexport function ajaxCall( formEl, formDataObj, options ){\n\n    let timeoutTimer;\n    const ajaxOptions = mergeObjects( {}, options.formOptions.ajaxOptions ),\n          isMultipart = ajaxOptions.headers['Content-Type'] === 'multipart/form-data';\n\n    ajaxOptions.body = formDataObj;\n    \n    // POST A FormData OBJECT ( multipart )\n    if( isMultipart && options.fieldOptions.handleFileUpload ){\n        let formDataMultipart = new FormData();\n        \n        for(let key in ajaxOptions.body){\n            formDataMultipart.append( key, ajaxOptions.body[key] );\n        }\n        \n        Array.from( formEl.querySelectorAll('[type=\"file\"]') ).forEach(field => {\n            Array.from(field.files).forEach((file, idx) => {\n                const name = field.name+'['+ idx +']';\n                formDataMultipart.append( name, file, file.name );\n            });\n        });\n        \n        ajaxOptions.body = formDataMultipart;\n    }\n\n    if( ajaxOptions.method === 'GET' ){\n\n        // FETCH WITH \"GET\" METHOD CAN'T HAVE \"body\". SO IT IS APPENDED TO THE URL\n        ajaxOptions.url += ( /\\?/.test(ajaxOptions.url) ? '&' : '?' ) + serializeObject( ajaxOptions.body );\n        delete ajaxOptions.body;\n\n    } else {\n\n        if( ajaxOptions.headers['Content-Type'].indexOf('application/x-www-form-urlencoded') > -1 ){\n            // POST A NORMAL FORM\n            ajaxOptions.body = serializeObject( ajaxOptions.body );\n        } else if( !isMultipart ){\n            // POST A JSON STRING\n            ajaxOptions.body = JSON.stringify(ajaxOptions.body);\n        }\n\n    }\n\n    ajaxOptions.headers = new Headers( ajaxOptions.headers );\n\n    if ( ajaxOptions.timeout > 0 ) {\n        const controller = new AbortController(),\n              signal = controller.signal;\n\n        ajaxOptions.signal = signal;\n        timeoutTimer = window.setTimeout(() => {\n            controller.abort();\n        }, ajaxOptions.timeout);\n    }\n\n    return fetch(ajaxOptions.url, ajaxOptions)\n        .then(response => {\n            if( !response.ok ){\n                return Promise.reject(response);\n            }\n            const fetchMethod = getFetchMethod(response, ajaxOptions);\n            return response[fetchMethod]();\n        })\n        .then(data => {\n            addClass( formEl, options.formOptions.cssClasses.ajaxSuccess );\n            return data;\n        })\n        .catch(error => {\n            addClass( formEl, options.formOptions.cssClasses.ajaxError );\n            return Promise.reject(error);\n        })\n        .finally(() => {\n            if( timeoutTimer ){\n                window.clearTimeout( timeoutTimer );\n            }\n            removeClass( formEl, options.formOptions.cssClasses.submit + ' ' + options.formOptions.cssClasses.ajaxPending );\n            addClass( formEl, options.formOptions.cssClasses.ajaxComplete );\n            formEl.querySelector('[type=\"submit\"]').disabled = false;\n        });\n\n}\n","\nimport { fieldsStringSelector, isFieldForChangeEvent } from '../helpers';\n\nexport const validation = function( event ){\n\n    const isChangeEvent = event.type === 'change',\n          fieldEl = event.target,\n          self = fieldEl.closest('form').formjs;\n\n    if( fieldEl.matches( fieldsStringSelector ) ){\n        const isFieldForChangeEventBoolean = isFieldForChangeEvent(fieldEl);\n        \n        if(\n            (isFieldForChangeEventBoolean && isChangeEvent) ||\n            (!isFieldForChangeEventBoolean && !isChangeEvent)\n        ){\n            \n            return self.validateField( fieldEl ).then(obj => {\n                const type = obj.fieldEl.type,\n                      realtedFieldEqualTo = obj.fieldEl.closest('form').querySelector('[data-equal-to=\"'+ obj.fieldEl.name +'\"]');\n\n                if(\n                    // FIELD IS ( required OR data-validate-if-filled ) AND RELATED FIELD data-equal-to HAS A VALUE\n                    (obj.fieldEl.required || obj.fieldEl.matches('[data-validate-if-filled]')) && \n                    !(type === 'checkbox' || type === 'radio') && \n                    realtedFieldEqualTo && realtedFieldEqualTo.value.trim() !== ''\n                ){\n                    return self.validateField( realtedFieldEqualTo );\n                } else {\n                    return obj;\n                }\n            });\n\n        }\n    }\n    \n}\n","\nimport { addClass, fieldsStringSelector, removeClass } from '../helpers';\n\nexport const validationEnd = function( event ){\n\n    const fieldsArray = event.data.fieldEl ? [event.data] : event.data.fields,\n          options = fieldsArray[0].fieldEl.closest('form').formjs.options.fieldOptions;\n\n    fieldsArray.forEach(obj => {\n        const fieldEl = obj.fieldEl;\n        if( fieldEl.matches( fieldsStringSelector ) ){\n            const containerEl = fieldEl.closest( options.questionContainer ),\n                isReqFrom = fieldEl.matches('[data-required-from]'),\n                reqMoreEl = document.querySelector( fieldEl.getAttribute('data-required-from') );\n\n            if( containerEl !== null ){\n                removeClass( containerEl, options.cssClasses.pending );\n            }\n\n            if( containerEl !== null && !options.skipUIfeedback ){\n\n                if( obj.result ){\n\n                    if( !isReqFrom || (isReqFrom && reqMoreEl.checked) ){\n                        // IF FIELD IS VALID\n                        const errorClasses = options.cssClasses.error + ' ' + options.cssClasses.errorEmpty + ' ' + options.cssClasses.errorRule;\n                        removeClass( containerEl, errorClasses );\n                        addClass( containerEl, options.cssClasses.valid );\n                    }\n\n                } else {\n\n                    // IF FIELD IS NOT VALID\n                    let extraErrorClass = options.cssClasses.errorRule;\n\n                    // HANDLE CASE OF FIELD data-checks\n                    const isChecks = fieldEl.matches('[data-checks]'),\n                        checkedElLength = (isChecks ? containerEl.querySelectorAll('[name=\"' + fieldEl.name + '\"]:checked').length : 0);\n\n                    if( (!isChecks && (obj.errors && obj.errors.empty)) || (isChecks && checkedElLength === 0) ){\n                        extraErrorClass = options.cssClasses.errorEmpty;\n                    }\n\n                    const errorClasses = options.cssClasses.error + ' ' + extraErrorClass,\n                        errorClassToRemove = options.cssClasses.errorEmpty + ' ' + options.cssClasses.errorRule;\n                    removeClass( containerEl, options.cssClasses.valid + ' ' + errorClassToRemove );\n                    addClass( containerEl, errorClasses );\n\n                }\n            }\n        }\n    });\n\n}\n","\nimport { customEvents } from './helpers';\nimport { keypressMaxlength, dataTypeNumber, pastePrevent, submit, validation, validationEnd } from './listenerCallbacks';\n\nexport function formStartup( formEl, options ){\n\n    formEl.noValidate = true;\n\n    const fieldOptions = options.fieldOptions,\n          formOptions = options.formOptions;\n        \n    // VALIDATION WITH ATTRIBUTES LIKE HTML ONES ( ALSO FOR BUG FIXING, EG: maxlength IN ANDROID )\n    if( fieldOptions.strictHtmlValidation ){\n        \n        // maxlength\n        // MAXLENGTH IS BUGGY IN ANDROID BROWSERS\n        formEl.addEventListener('keypress', keypressMaxlength, false);\n\n        // data-type=\"number\"\n        // SINCE VALIDATING type=\"number\" WITH NON NUMERIC CHARS WILL RETURN EMPTY STRING IN SOME BROWSERS ( EG: FIREFOX )\n        formEl.addEventListener('input', dataTypeNumber, false);\n        \n    }\n    \n    if( fieldOptions.preventPasteFields && formEl.querySelectorAll( fieldOptions.preventPasteFields ).length ){\n        // INIT EVENT LISTENER FOR \"PASTE\" EVENT TO PREVENT IT ON SPECIFIED FIELDS\n        formEl.addEventListener('paste', pastePrevent, false);\n    }\n\n    // INIT EVENTS LISTENER ( AS IN fieldOptions )\n    fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n        const useCapturing = eventName === 'blur' ? true : false;\n        formEl.addEventListener(eventName, validation, useCapturing);\n    });\n\n    formEl.addEventListener(customEvents.field.validation, validationEnd, false);\n    \n    // HANDLE FORM SUBMIT\n    if( formOptions.handleSubmit ){\n        // INIT FORM SUBMIT ( DEFAULT AND AJAX )\n        formEl.addEventListener('submit', submit);\n\n        if( formOptions.ajaxSubmit ){\n            if( formEl.getAttribute('enctype') ){\n                formOptions.ajaxOptions.headers['Content-Type'] = formEl.getAttribute('enctype');\n            }\n\n            if( formEl.getAttribute('method') ){\n                formOptions.ajaxOptions.method = formEl.getAttribute('method').toUpperCase();\n            }\n\n            if( formEl.getAttribute('action') ){\n                formOptions.ajaxOptions.url = formEl.getAttribute('action');\n            }\n        }\n    }\n\n}\n","\nimport { getFilledFields, isFieldForChangeEvent } from './helpers';\nimport { validation } from './listenerCallbacks';\n\nexport const init = function( formEl ){\n\n    const instance = formEl.formjs;\n    const formFields = getFilledFields( formEl );\n\n    // VALIDATE ALL FILLED FIELDS\n    return Promise.all( formFields.map(fieldEl => {\n\n        const isFieldForChangeEventBoolean = isFieldForChangeEvent(fieldEl);\n        const fakeEventObj = { target: fieldEl, type: (isFieldForChangeEventBoolean ? 'change': '') };\n        return validation( fakeEventObj );\n\n    }) ).then(fields => {\n        instance.isInitialized = true;\n        return { instance, fields };\n    });;\n\n}\n","\nimport { fieldsStringSelector } from './fieldsStringSelector';\nimport { getUniqueFields } from './getUniqueFields';\n\nexport const getFilledFields = formEl => {\n    return getUniqueFields( formEl.querySelectorAll(fieldsStringSelector) )\n    .map(fieldEl => {\n\n        const name = fieldEl.name,\n              type = fieldEl.type,\n              isCheckboxOrRadio = (type === 'checkbox' || type === 'radio'),\n              fieldChecked = formEl.querySelector('[name=\"' + name + '\"]:checked'),\n              isReqFrom = fieldEl.matches('[data-required-from]'),\n              reqMoreEl = (isReqFrom ? formEl.querySelector(fieldEl.getAttribute('data-required-from')) : null);\n\n        return (\n            isCheckboxOrRadio ? (fieldChecked || null) :\n            (isReqFrom && reqMoreEl.checked) || (!isReqFrom && fieldEl.value) ? fieldEl : null\n        );\n\n    })\n    .filter(fieldEl => fieldEl !== null);\n}\n","\nimport { getValidateFieldDefault, isDOMNode, runFunctionsSequence } from './helpers';\nimport { isValid } from './isValid';\n\nexport function checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    if( !isDOMNode(fieldEl) ){\n        const obj = getValidateFieldDefault({fieldEl});\n        return Promise.resolve(obj);\n    }\n\n    const formEl = fieldEl.closest('form'),\n          isValidValue = fieldEl.value.trim().length > 0;\n\n     // HANDLE FIELDS radio/data-require-more\n     if( fieldEl.type === 'radio' ){\n        const checkedEl = fieldEl.checked ? fieldEl : formEl.querySelector('[name=\"'+ fieldEl.name +'\"]:checked'),\n              reqMoreIsChecked = checkedEl && checkedEl.matches('[data-require-more]'),\n              findReqMoreEl = reqMoreIsChecked ? checkedEl : formEl.querySelector('[data-require-more][name=\"'+ fieldEl.name +'\"]'),\n              findReqFromEl = findReqMoreEl ? formEl.querySelector('[data-required-from=\"#'+ findReqMoreEl.id +'\"]') : null;\n        \n        if( checkedEl && findReqFromEl ){\n            findReqFromEl.required = findReqMoreEl.required && findReqMoreEl.checked;\n            if( !reqMoreIsChecked ){\n                findReqFromEl.value = '';\n            } else if( fieldOptions.focusOnRelated ) {\n                findReqFromEl.focus();\n            }\n        }\n    }\n\n    // HANDLE FIELDS data-required-from\n    if( fieldEl.matches('[data-required-from]') && isValidValue ){\n        const reqMoreEl = formEl.querySelector( fieldEl.getAttribute('data-required-from') );\n        reqMoreEl.checked = true;\n        fieldEl.required = reqMoreEl.required;\n    }\n\n    const needsValidation = fieldEl.required || (fieldEl.matches('[data-validate-if-filled]') && isValidValue);\n\n    return runFunctionsSequence({\n            functionsList: fieldOptions.beforeValidation,\n            data: {fieldEl}\n        })\n        .then(data => {\n            const dataObj = data.pop();\n            return new Promise(resolve => {\n                if( !needsValidation ){\n                    dataObj.result = true;\n                }\n                resolve( needsValidation ? isValid(fieldEl, validationRules, validationErrors) : dataObj );\n            });\n        });\n\n}\n","\nimport { getValidateFieldDefault, mergeObjects, toCamelCase } from './helpers';\n\nexport function isValid( fieldEl, validationRules, validationErrors ){\n\n    const fieldValue = fieldEl.value;\n\n    const obj = getValidateFieldDefault({result: fieldValue.trim().length > 0, fieldEl});\n\n    if( !obj.result ){\n        obj.errors = { empty: true };\n        return Promise.resolve(obj);\n    }\n\n    // COLLECT VALIDATION METHOD NAMES ( USED TO RUN VALIDATIONS AND GET ERRORS )\n    const validationMethods = Array.from(fieldEl.attributes).reduce((accList, attr) => {\n        const attrName = toCamelCase( attr.name.replace('data-', '') ),\n              attrValue = toCamelCase( attr.value ),\n              isAttrValueWithFn = (attrName === 'type' || attrName === 'subtype') && validationRules[attrValue],\n              isAttrNameWithFn = validationRules[attrName];\n\n        if( isAttrValueWithFn || isAttrNameWithFn ){\n            accList.push( isAttrValueWithFn ? attrValue : attrName );\n\n        }\n\n        return accList;\n    }, []);\n\n    return new Promise(resolve => {\n\n        // RUN VALIDATIONS\n        const validationsResult = validationMethods.reduce((accPromise, methodName) => {\n            return accPromise.then(accObj => {\n                return new Promise(resolveVal => {\n                    // RUN VALIDATION INSIDE A PROMISE IS USEFUL FOR ASYNC VALIDATIONS\n                    resolveVal( validationRules[methodName](fieldValue, fieldEl) );\n                }).then(valObj => {\n                    // ADD CUSTOM ERROR-KEY FOR EACH VALIDATION RULE\n                    if( !valObj.result ){\n                        const errorObj = {};\n                        if( typeof valObj.errors === 'undefined' || typeof valObj.errors[methodName] === 'undefined' ){\n                            errorObj[methodName] = true;\n                        }\n                        valObj.errors = mergeObjects({}, valObj.errors, errorObj);\n                    }\n                    valObj = valObj.result ? {} : valObj;\n                    return mergeObjects(accObj, valObj);\n                });\n            });\n        }, Promise.resolve(obj));\n        \n        resolve(validationsResult);\n\n    }).then(data => {\n\n        // GET ERRORS\n        if( !data.result ){\n            data.errors = validationMethods.reduce((accObj, methodName) => {\n                const errors = (validationErrors[methodName] && validationErrors[methodName](fieldValue, fieldEl)) || {};\n                return mergeObjects(accObj, errors);\n            }, data.errors);\n        }\n        return data;\n\n    });\n\n}\n","\nimport { fieldsStringSelector, getUniqueFields, getValidateFieldDefault, getValidateFormDefault, mergeObjects } from './helpers';\nimport { checkFieldValidity } from './checkFieldValidity';\n\nexport function checkFormValidity( formEl, fieldOptions, validationRules, validationErrors, fieldToSkip = null ){\n\n    fieldOptions = mergeObjects( {}, fieldOptions, {focusOnRelated: false} );\n\n    const obj = getValidateFormDefault(),\n          fieldsList = getUniqueFields( formEl.querySelectorAll(fieldsStringSelector) );\n\n    return Promise.all( fieldsList.map(fieldEl => {\n\n        if( fieldToSkip && fieldEl === fieldToSkip ){\n            const obj2 = getValidateFieldDefault({fieldEl, result: true});\n            return Promise.resolve(obj2);\n        }\n        \n        return checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors );\n\n    }) ).then(list => {\n\n        const areAllFieldsValid = list.filter(fieldObj => !fieldObj.result).length === 0;\n        obj.result = areAllFieldsValid;\n        obj.fields = list;\n\n        return obj;\n\n    });\n\n}\n","\nimport { version }              from './modules/version';\nimport { customEvents, dispatchCustomEvent, excludeSelector, mergeObjects, removeClass } from './modules/helpers';\nimport { options }              from './modules/options';\nimport { validationRules }      from './modules/validationRules';\nimport { validationEnd }        from './modules/listenerCallbacks';\nimport { constructorFn }        from './modules/constructor';\nimport { destroy }              from './modules/destroy';\nimport { init }                 from './modules/init';\nimport { checkFieldValidity }   from './modules/checkFieldValidity';\nimport { checkFormValidity }    from './modules/checkFormValidity';\n\nclass Form {\n\n    constructor( formEl, optionsObj ){\n        constructorFn(this, formEl, optionsObj);\n    }\n\n    destroy(){\n        destroy(this.formEl, this.options);\n    }\n    \n    getFormData(){\n        const formFieldsEl = this.formEl.querySelectorAll('input, select, textarea'),\n              filteredFields = Array.from( formFieldsEl ).filter( elem => elem.matches(excludeSelector) );\n        return this.options.formOptions.getFormData(filteredFields);\n    }\n\n    init(){\n        return init(this.formEl);\n    }\n\n    validateField( fieldEl, fieldOptions ){\n        fieldEl = (typeof fieldEl === 'string' ? this.formEl.querySelector(fieldEl) : fieldEl);\n        fieldOptions = mergeObjects({}, this.options.fieldOptions, fieldOptions);\n        const formEl = this.formEl;\n        const skipUIfeedback = this.options.fieldOptions.skipUIfeedback;\n        return checkFieldValidity(fieldEl, fieldOptions, this.validationRules, this.validationErrors)\n            .then(obj => {\n                return new Promise(resolve => {\n                    if( obj.fieldEl ){\n                        dispatchCustomEvent( obj.fieldEl, customEvents.field.validation, obj, { bubbles: false } );\n                        dispatchCustomEvent( formEl, customEvents.field.validation, obj );\n                        if( fieldOptions.onValidationCheckAll && obj.result ){\n                            // FORCE skipUIfeedback TO true\n                            fieldOptions.skipUIfeedback = true;\n                            resolve(\n                                checkFormValidity( formEl, fieldOptions, this.validationRules, this.validationErrors, obj.fieldEl )\n                                    .then(dataForm => {\n                                        const clMethodName = dataForm.result ? 'add' : 'remove';\n                                        formEl.classList[clMethodName]( this.options.formOptions.cssClasses.valid );\n                                        dispatchCustomEvent( formEl, customEvents.form.validation, dataForm );\n                                        // RESTORE skipUIfeedback TO THE ORIGINAL VALUE\n                                        fieldOptions.skipUIfeedback = skipUIfeedback;\n                                        return obj;\n                                    })\n                            );\n                        } else if( !obj.result ){\n                            removeClass( formEl, this.options.formOptions.cssClasses.valid );\n                        }\n                    }\n                    resolve( obj );\n                });\n            });\n    }\n\n    validateForm( fieldOptions ){\n        fieldOptions = mergeObjects({}, this.options.fieldOptions, fieldOptions);\n        const formEl = this.formEl;\n        return checkFormValidity(formEl, fieldOptions, this.validationRules, this.validationErrors)\n            .then(data => {\n                const clMethodName = data.result ? 'add' : 'remove';\n                formEl.classList[clMethodName]( this.options.formOptions.cssClasses.valid );\n                validationEnd( {data} );\n                dispatchCustomEvent( formEl, customEvents.form.validation, data );\n                return data;\n            });\n\n    }\n    \n    static addValidationErrors( errorsObj ){\n        this.prototype.validationErrors = mergeObjects({}, this.prototype.validationErrors, errorsObj);\n    }\n\n    static addValidationRules( rulesObj ){\n        this.prototype.validationRules = mergeObjects({}, this.prototype.validationRules, rulesObj);\n    }\n    \n    static setOptions( optionsObj ){\n        this.prototype.options = mergeObjects({}, this.prototype.options, optionsObj);\n    }\n\n}\n\nForm.prototype.isInitialized = false;\nForm.prototype.options = options;\nForm.prototype.validationErrors = {};\nForm.prototype.validationRules = validationRules;\nForm.prototype.version = version;\n\nexport default Form;\n","\nimport { checkFormEl, isNodeList, mergeObjects }   from './helpers';\nimport { formStartup }                             from './formStartup';\n\nexport function constructorFn( self, formEl, optionsObj ){\n\n    const argsL = arguments.length,\n          checkFormElem = checkFormEl(formEl);\n\n    if( argsL === 0 || (argsL > 0 && !formEl) ){\n        throw new Error('First argument \"formEl\" is missing or falsy!');\n    }\n    if( isNodeList(formEl) ){\n        throw new Error('First argument \"formEl\" must be a single DOM node or a form CSS selector, not a NodeList!');\n    }\n    if( !checkFormElem.result ){\n        throw new Error('First argument \"formEl\" is not a DOM node nor a form CSS selector!');\n    }\n\n    self.formEl = checkFormElem.element;\n    self.formEl.formjs = self;\n    self.options = mergeObjects({}, self.constructor.prototype.options, optionsObj);\n\n    // BINDING CONTEXT FOR FUTURE EXECUTION\n    const cbList = [\n        // IN fieldOptions\n        'beforeValidation',\n        // IN formOptions\n        'beforeSend',\n        'getFormData'\n    ];\n    cbList.forEach(cbName => {\n        const optionType = self.options.formOptions[cbName] ? 'formOptions' : 'fieldOptions';\n        let cbOpt = self.options[optionType][cbName];\n\n        if( cbOpt ){\n            self.options[optionType][cbName] = ( Array.isArray(cbOpt) ? cbOpt.map(cbFn => cbFn.bind(self)) : cbOpt.bind(self) );\n        }\n    });\n\n    formStartup( self.formEl, self.options );\n    \n}\n","\nimport { customEvents } from './helpers';\nimport { keypressMaxlength, dataTypeNumber, pastePrevent, submit, validation, validationEnd } from './listenerCallbacks';\n\n\nexport function destroy( formEl, options ){\n\n    if( options.fieldOptions.strictHtmlValidation ){\n        formEl.removeEventListener('keypress', keypressMaxlength, false);\n        formEl.removeEventListener('input', dataTypeNumber, false);\n    }\n\n    if( options.fieldOptions.preventPasteFields ){\n        formEl.removeEventListener('paste', pastePrevent, false);\n    }\n\n    if( options.formOptions.handleSubmit ){\n        formEl.removeEventListener('submit', submit);\n    }\n\n    options.fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n        const useCapturing = eventName === 'blur' ? true : false;\n        formEl.removeEventListener(eventName, validation, useCapturing);\n    });\n\n    formEl.removeEventListener(customEvents.field.validation, validationEnd, false);\n\n    delete formEl.formjs;\n    \n}\n","\nexport const excludeSelector = ':not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"file\"]):not([data-exclude-data])'\n"],"names":["addClass","element","cssClasses","split","forEach","className","classList","add","isNodeList","nodeList","NodeList","prototype","isPrototypeOf","removeClass","remove","isDOMNode","node","Element","checkFormEl","formEl","isString","isFormSelector","document","querySelector","tagName","toLowerCase","result","customEvents","validation","submit","mergeObjects","out","i","arguments","length","obj","key","isArray","Object","toString","call","isObject","hasOwnProperty","concat","slice","Array","push","dispatchCustomEvent","elem","eventName","data","eventOptions","bubbles","eventObj","Event","dispatchEvent","fieldsStringSelector","formatMap","dateArray","reverse","getDateAsNumber","dateString","dateFormat","separator","splitChar","match","indexOf","replace","join","getUniqueFields","currentFieldName","currentFieldType","from","filter","fieldEl","name","type","matches","getValidateFieldDefault","getValidateFormDefault","fields","isFieldForChangeEvent","runFunctionsSequence","functionsList","stopConditionFn","reduce","acc","promiseFn","then","res","dataNew","Promise","resolve","dataList","serializeObject","_typeof","constructor","keys","a","k","encodeURIComponent","toCamelCase","string","all","letter","toUpperCase","defaultCallbacksInOptions","fieldOptions","beforeValidation","fieldObj","this","options","containerEl","closest","questionContainer","value","dirty","checkDirtyField","skipUIfeedback","pending","formOptions","getFormData","filteredFields","formData","isCheckbox","isRadio","isSelect","checked","checkboxes","querySelectorAll","field","checkedRadio","selectedOpts","option","selected","error","errorEmpty","errorRule","valid","focusOnRelated","handleFileUpload","onValidationCheckAll","preventPasteFields","strictHtmlValidation","validateOnEvents","ajaxOptions","cache","credentials","headers","method","mode","redirect","timeout","url","location","href","ajaxSubmit","beforeSend","ajaxComplete","ajaxError","ajaxPending","ajaxSuccess","handleSubmit","validationRules","date","test","email","number","checkbox","dataChecksEl","attrValue","JSON","parse","getAttribute","checkedElLength","isMinOk","isMaxOk","errors","checks","minChecks","maxChecks","equalTo","exactLength","valueLength","minlength","maxlength","file","maxFileSize","MIMEtype","accept","RegExp","filesList","files","exceedMaxFileSize","size","isAcceptedFileType","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","max","maxVal","maxLength","min","minVal","minLength","pattern","radio","fieldChecked","trim","dataTypeNumber","event","target","fieldValue","stopImmediatePropagation","valueReplaced","keypressMaxlength","keyPressed","which","keyCode","pastePrevent","formjs","preventDefault","instance","formCssClasses","isAjaxForm","btnEl","eventPreventDefault","enableBtn","disabled","validateForm","formValidation","beforeSendData","stopExecution","formDataObj","callbacksBeforeSend","pop","timeoutTimer","isMultipart","body","formDataMultipart","FormData","append","idx","stringify","Headers","controller","AbortController","signal","window","setTimeout","abort","fetch","response","ok","reject","fetchMethod","get","contentType","headerOpt","getFetchMethod","clearTimeout","ajaxCall","isChangeEvent","self","isFieldForChangeEventBoolean","validateField","realtedFieldEqualTo","required","validationEnd","fieldsArray","isReqFrom","reqMoreEl","errorClasses","extraErrorClass","isChecks","empty","errorClassToRemove","formStartup","noValidate","addEventListener","useCapturing","init","formFields","map","isCheckboxOrRadio","getFilledFields","isInitialized","checkFieldValidity","validationErrors","isValidValue","checkedEl","reqMoreIsChecked","findReqMoreEl","findReqFromEl","id","focus","needsValidation","dataObj","validationMethods","attributes","accList","attr","attrName","isAttrValueWithFn","isAttrNameWithFn","accPromise","methodName","accObj","resolveVal","valObj","errorObj","isValid","checkFormValidity","fieldToSkip","fieldsList","obj2","list","areAllFieldsValid","Form","optionsObj","argsL","checkFormElem","Error","cbList","cbName","optionType","cbOpt","cbFn","bind","constructorFn","errorsObj","rulesObj","removeEventListener","destroy","formFieldsEl","_this","dataForm","clMethodName","_this2","version"],"mappings":"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"}