{"version":3,"file":"formjs-systemjs.min.js","sources":["../src/modules/version.js","../src/modules/helpers/addClass.js","../src/modules/helpers/isNodeList.js","../src/modules/helpers/removeClass.js","../src/modules/helpers/isDOMNode.js","../src/modules/helpers/checkFormEl.js","../src/modules/helpers/customEvents.js","../src/modules/helpers/isPlainObject.js","../src/modules/helpers/mergeObjects.js","../src/modules/helpers/dispatchCustomEvent.js","../src/modules/helpers/excludeSelector.js","../src/modules/helpers/fieldsStringSelector.js","../src/modules/helpers/getDateAsNumber.js","../src/modules/helpers/getSplitChar.js","../src/modules/helpers/getJSONobjectFromFieldAttribute.js","../src/modules/helpers/getUniqueFields.js","../src/modules/helpers/getValidateFieldDefault.js","../src/modules/helpers/getValidateFormDefault.js","../src/modules/helpers/isFieldForChangeEvent.js","../src/modules/helpers/runFunctionsSequence.js","../src/modules/helpers/serializeObject.js","../src/modules/helpers/toCamelCase.js","../src/modules/options.js","../src/modules/optionsUtils.js","../src/modules/helpers/checkDirtyField.js","../src/modules/validationRules.js","../src/modules/validationRules/date.js","../src/modules/validationRules/email.js","../src/modules/validationRules/number.js","../src/modules/validationRules/checkbox.js","../src/modules/validationRules/checks.js","../src/modules/validationRules/equalTo.js","../src/modules/validationRules/exactLength.js","../src/modules/validationRules/file.js","../src/modules/validationRules/length.js","../src/modules/validationRules/max.js","../src/modules/validationRules/maxlength.js","../src/modules/validationRules/min.js","../src/modules/validationRules/minlength.js","../src/modules/validationRules/pattern.js","../src/modules/validationRules/radio.js","../src/modules/listenerCallbacks/dataTypeNumber.js","../src/modules/listenerCallbacks/formValidationEnd.js","../src/modules/listenerCallbacks/keypressMaxlength.js","../src/modules/listenerCallbacks/pastePrevent.js","../src/modules/listenerCallbacks/submit.js","../src/modules/ajaxCall.js","../src/modules/listenerCallbacks/validation.js","../src/modules/listenerCallbacks/validationEnd.js","../src/modules/formStartup.js","../src/modules/init.js","../src/modules/helpers/getFilledFields.js","../src/modules/checkFieldValidity.js","../src/modules/isValid.js","../src/modules/checkFormValidity.js","../src/index.js","../src/modules/destroy.js","../src/modules/validationErrors.js"],"sourcesContent":["\nexport const version = '4.4.0';\n","\nexport const addClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.add( className );\n    });\n}\n","\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList );\n}\n","\nexport const removeClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.remove( className );\n    });\n}\n","\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node );\n}\n","\nimport { isDOMNode } from './isDOMNode';\n\nexport const checkFormEl = formEl => {\n    const isString = typeof formEl,\n          isValidNodeSelector = isString === 'string' && isDOMNode(document.querySelector(formEl)),\n          isFormSelector = isValidNodeSelector && document.querySelector(formEl).tagName.toLowerCase() === 'form',\n          obj = {\n            result: isDOMNode(formEl) || isFormSelector,\n            element: (isString === 'string' ? document.querySelector(formEl) : formEl)\n          };\n\n    return obj;\n}\n","\nexport const customEvents = {\n    field: {\n        validation: 'fjs.field:validation'\n    },\n    form: {\n        submit:     'fjs.form:submit',\n        validation: 'fjs.form:validation'\n    }\n}\n","\nexport const isPlainObject = object => {\n    return Object.prototype.toString.call( object ) === '[object Object]';\n}\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const mergeObjects = function( out = {} ){\n    Array.from(arguments).slice(1).filter(arg => !!arg).forEach(arg => {\n        Object.keys(arg).forEach(key => {\n            if( Array.isArray(arg[key]) ){\n                out[key] = (out[key] || []).concat( arg[key].slice(0) );\n            } else if( isPlainObject(arg[key]) ){\n                out[key] = mergeObjects((out[key] || {}), arg[key]);\n            } else {\n                // * STRING | NUMBER | BOOLEAN | FUNCTION\n                if( Array.isArray(out[key]) ){\n                    // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                    out[key].push(arg[key]);\n                } else {\n                    out[key] = arg[key];\n                }\n            }\n        });\n    });\n\n    return out;\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const dispatchCustomEvent = ( elem, eventName, data = {}, eventOptions = {} ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions);\n    const eventObj = new Event(eventName, eventOptions);\n    eventObj.data = data;\n    elem.dispatchEvent( eventObj );\n}\n","\nexport const excludeSelector = ':not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"file\"]):not([data-exclude-data])'\n","\nexport const fieldsStringSelector = 'input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"hidden\"]), select, textarea'\n","\nimport { getSplitChar } from './getSplitChar';\n\nconst formatMap = {\n    'YYYY-MM-DD': function(dateArray){\n        return dateArray;\n    },\n    'MM-DD-YYYY': function(dateArray){\n        return [dateArray[2], dateArray[0], dateArray[1]];\n    },\n    'DD-MM-YYYY': function(dateArray){\n        return dateArray.reverse();\n    }\n};\n\nexport const getDateAsNumber = ( dateString, dateFormat ) => {\n    dateFormat = dateFormat || 'YYYY-MM-DD';\n    const splitChar = getSplitChar(dateString);\n\n    if( dateFormat.indexOf(splitChar) < 0 ){\n        return;\n    }\n\n    dateFormat = dateFormat.replace(/[^YMD]/g, '-');\n    dateString = dateString.split(splitChar);\n    dateString = formatMap[dateFormat](dateString).join('');\n    \n    return dateString;\n}\n","\nexport const getSplitChar = string => {\n    // MATCH ANY NON-DIGIT CHAR\n    const separator = string.match(/\\D/);\n    return (separator && separator.length > 0) ? separator[0] : null;\n}\n","\nexport const getJSONobjectFromFieldAttribute = ( fieldEl, attrName ) => {\n    const customAttrEl = fieldEl.closest('['+ attrName +']');\n    return (customAttrEl && JSON.parse(customAttrEl.getAttribute(attrName))) || {};\n}\n","\nexport const getUniqueFields = nodeList => {\n\n    let currentFieldName = '',\n        currentFieldType = '';\n\n    return Array.from( nodeList ).filter(fieldEl => {\n        const name = fieldEl.name,\n              type = fieldEl.type;\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false;\n        }\n        \n        if( !fieldEl.matches('[data-required-from]') ){\n            currentFieldName = name;\n            currentFieldType = type;\n        }\n        return true;\n    });\n    \n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const getValidateFieldDefault = obj => {\n    return mergeObjects({}, { result: false, fieldEl: null }, obj);\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const getValidateFormDefault = obj => {\n    return mergeObjects({}, { result: true, fields: [] }, obj);\n}\n","\nexport const isFieldForChangeEvent = fieldEl => {\n    return fieldEl.matches('select, [type=\"radio\"], [type=\"checkbox\"], [type=\"file\"]');\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const runFunctionsSequence = ( { functionsList = [], data = {}, stopConditionFn = () => false } = {} ) => {\n    return functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1]);\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res);\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result);\n                    return res;\n                });\n        });\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList);\n}\n","\nexport const serializeObject = obj => {\n    const objToString = (\n            (obj && typeof obj === 'object' && obj.constructor === Object) ? \n            Object.keys(obj)\n                .reduce((a,k) => {\n                    a.push(k+'='+encodeURIComponent(obj[k]));\n                    return a\n                },[]).join('&') : \n            obj\n    );\n    return objToString;\n}\n","\nexport const toCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase(); });\n}\n","\nimport { beforeValidation, getFormData } from './optionsUtils';\n\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [beforeValidation],\n        cssClasses: {\n            dirty:              'is-dirty',\n            error:              'has-error',\n            errorEmpty:         'has-error-empty',\n            errorRule:          'has-error-rule',\n            pending:            'is-pending',\n            valid:              'is-valid'\n        },\n        focusOnRelated:         true,\n        handleFileUpload:       true,\n        handleValidation:       true,\n        maxFileSize:            10,\n        onValidationCheckAll:   true,\n        preventPasteFields:     '[type=\"password\"], [data-equal-to]',\n        questionContainer:      '[data-formjs-question]',\n        skipUIfeedback:         false,\n        strictHtmlValidation:   true,\n        trimValue:              false,\n        validateOnEvents:       'input change'\n    },\n\n    formOptions: {\n        ajaxOptions:            {\n            cache:              'no-store',\n            credentials:        'same-origin',\n            headers: {\n                                'Content-Type': 'application/json',\n                                'Accept':       'application/json'\n            },\n            method:             'POST',\n            mode:               'same-origin',\n            redirect:           'follow',\n            timeout:            0,\n            url:                location.href\n        },\n        ajaxSubmit:             true,\n        beforeSend:             [],\n        cssClasses: {\n            ajaxComplete:       'ajax-complete',\n            ajaxError:          'ajax-error',\n            ajaxPending:        'ajax-pending',\n            ajaxSuccess:        'ajax-success',\n            submit:             'is-submitting',\n            valid:              'is-valid'\n        },\n        getFormData:            getFormData,\n        handleSubmit:           true\n    }\n    \n}\n","\nimport { addClass, checkDirtyField, isFieldForChangeEvent } from './helpers';\n\nexport const beforeValidation = function beforeValidationDefault ( { fieldEl, fieldOptions } ) {\n\n    if( fieldOptions.trimValue && !isFieldForChangeEvent(fieldEl) ){\n        fieldEl.value = fieldEl.value.trim();\n    }\n\n    checkDirtyField( fieldEl, fieldOptions );\n    if( !fieldOptions.skipUIfeedback ){\n        addClass( fieldEl.closest( fieldOptions.questionContainer ), fieldOptions.cssClasses.pending );\n    }\n\n}\n\nexport const getFormData = function getFormDataDefault ( filteredFields, trimValues ) {\n\n    const formData = {},\n            formEl = this.formEl;\n\n    filteredFields.forEach(function( fieldEl ){\n        const isCheckbox = fieldEl.type === 'checkbox',\n                isRadio = fieldEl.type === 'radio',\n                isSelect = fieldEl.matches('select'),\n                name = fieldEl.name;\n        let value = trimValues ? fieldEl.value.trim() : fieldEl.value;\n                        \n        if( isCheckbox ) {\n            \n            value = fieldEl.checked;\n            const checkboxes = Array.from( formEl.querySelectorAll('[name=\"'+ name +'\"]') );\n            if( checkboxes.length > 1 ){\n\n                value = [];\n                const checkedElems = checkboxes.filter(field => field.checked);\n                checkedElems.forEach(fieldEl => {\n                    value.push( fieldEl.value );\n                });\n\n            }\n                \n        } else if( isRadio ){\n            \n            const checkedRadio = formEl.querySelector('[name=\"'+ name +'\"]:checked');\n            value = (checkedRadio === null ? null : checkedRadio.value);\n            \n        } else if( isSelect ){\n\n            const selectedOpts = Array.from( fieldEl.options ).filter(option => option.selected);\n            if( selectedOpts.length > 1 ){\n\n                value = [];\n                selectedOpts.forEach(fieldEl => {\n                    value.push( fieldEl.value );\n                });\n\n            }\n        }\n\n        formData[ name ] = value;\n    });\n\n    return formData;\n\n}\n","\nimport { addClass } from './addClass';\nimport { isNodeList } from './isNodeList';\nimport { removeClass } from './removeClass';\n\nexport const checkDirtyField = ( fields, fieldOptions ) => {\n\n    fields = isNodeList(fields) ? Array.from( fields ) : [fields];\n    fields.forEach(fieldEl => {\n        if( fieldEl.type !== 'checkbox' && fieldEl.type !== 'radio' ){\n            const containerEl = fieldEl.closest( fieldOptions.questionContainer ) || fieldEl;\n            if( fieldEl.value ){\n                addClass( containerEl, fieldOptions.cssClasses.dirty );\n            } else {\n                removeClass( containerEl, fieldOptions.cssClasses.dirty );\n            }\n        }\n    });\n    \n}\n","\nimport { date }         from './validationRules/date';\nimport { email }        from './validationRules/email';\nimport { number }       from './validationRules/number';\n\nimport { checkbox }     from './validationRules/checkbox';\nimport { equalTo }      from './validationRules/equalTo';\nimport { exactLength }  from './validationRules/exactLength';\nimport { file }         from './validationRules/file';\nimport { length }       from './validationRules/length';\nimport { max }          from './validationRules/max';\nimport { maxlength }    from './validationRules/maxlength';\nimport { min }          from './validationRules/min';\nimport { minlength }    from './validationRules/minlength';\nimport { pattern }      from './validationRules/pattern';\nimport { radio }        from './validationRules/radio';\n\nexport const validationRules = {\n    date,\n    email,\n    number,\n\n    checkbox,\n    equalTo,\n    exactLength,\n    file,\n    length,\n    max,\n    maxlength,\n    min,\n    minlength,\n    pattern,\n    radio\n}\n","\n/*\n    DATE AS ISO 8601 DATE FORMAT:\n    YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n*/\n\nexport const date = function( string ){\n    return {\n        result: /^((((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13578]|1[02])[ \\/\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13456789]|1[012])[ \\/\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.]02[ \\/\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ \\/\\-.]02[ \\/\\-.]29))$/g.test( string )\n    };\n}\n","\n// https://regex101.com/r/cdlyJy/3\n\nexport const email = function( string ){\n    return {\n        result: /^[a-zA-Z_-]([\\w.-]?[a-zA-Z0-9])*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?){2,})+$/.test( string )\n    };\n}\n","\n/*\n    ALL NUMBERS ( INTEGERS AND FLOATING )\n    VALID NUMBERS: 123 | 123.456 | .123\n*/\n\nexport const number = function( string ){\n    return {\n        result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n    };\n}","\nimport { checks } from './checks';\n\nexport const checkbox = function( value, fieldEl ){\n    const dataChecksEl = fieldEl.closest('form').querySelector('[name=\"' + fieldEl.name + '\"][data-checks]');\n    return dataChecksEl ? checks(dataChecksEl) : { result: fieldEl.checked };\n}\n","\nexport const checks = function( fieldEl ){\n    const attrValue = JSON.parse( fieldEl.getAttribute('data-checks') ),\n          checkedElLength = fieldEl.closest('form').querySelectorAll('[name=\"' + fieldEl.name + '\"]:checked').length,\n          isMinOk = checkedElLength >= attrValue[0],\n          isMaxOk = checkedElLength <= attrValue[1],\n          obj = { result: isMinOk && isMaxOk };\n\n    if( !obj.result ){\n        obj.errors = { checks: true };\n        if( !isMinOk ){ obj.errors.minChecks = true; }\n        if( !isMaxOk ){ obj.errors.maxChecks = true; }\n    }\n\n    return obj;\n}\n","\nexport const equalTo = function( value, fieldEl ){\n    const checkFromEl = fieldEl.closest('form').querySelector( '[name=\"' + fieldEl.getAttribute('data-equal-to') + '\"]' );\n    return { result: value === checkFromEl.value };\n}\n","\nexport const exactLength = function( value, fieldEl ){\n    const valueLength = value.length,\n          exactLength = fieldEl.getAttribute('data-exact-length') * 1,\n          obj = { result: valueLength === exactLength };\n\n    if( !obj.result ){\n        obj.errors = {};\n        if( valueLength < exactLength ){ obj.errors.minlength = true; }\n        else { obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nexport const file = function( value, fieldEl, fieldOptions ){\n    const maxFileSize = (fieldEl.getAttribute('data-max-file-size') || fieldOptions.maxFileSize) * 1,\n          MIMEtype = fieldEl.accept ? new RegExp(fieldEl.accept.replace( '*', '[^\\\\/,]+' )) : null,\n          filesList = Array.from(fieldEl.files),\n          obj = { result: true };\n\n    filesList.forEach(file => {\n        const exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize,\n              isAcceptedFileType = MIMEtype !== null ? MIMEtype.test(file.type) : true;\n\n        if( exceedMaxFileSize || !isAcceptedFileType ){\n            obj.result = false;\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {};\n            }\n            if( exceedMaxFileSize ){ obj.errors.maxFileSize = true; }\n            if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true; }\n\n        }\n    });\n\n    return obj;\n}\n","\nexport const length = function( value, fieldEl ){\n    const valueL = value.length,\n          attrValue = JSON.parse( fieldEl.getAttribute('data-length') ),\n          isMinlengthOk = valueL >= attrValue[0],\n          isMaxlengthOk = valueL <= attrValue[1],\n          obj = { result: isMinlengthOk && isMaxlengthOk };\n\n    if( !obj.result ){\n        obj.errors = { stringLength: true };\n        if( !isMinlengthOk ){ obj.errors.minlength = true; }\n        if( !isMaxlengthOk ){ obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const max = function( value, fieldEl ){\n    let maxVal = fieldEl.max;\n    const dateFormat = fieldEl.getAttribute('data-date-format');\n    \n    if( fieldEl.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat );\n        maxVal = maxVal.split('-').join('');\n    }\n\n    value = value * 1;\n    maxVal = maxVal * 1;\n    \n    return { result: value <= maxVal };\n}\n","\nexport const maxlength = function( value, fieldEl ){\n    return { result: value.length <= fieldEl.maxLength * 1 };\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const min = function( value, fieldEl ){\n    let minVal = fieldEl.min;\n    const dateFormat = fieldEl.getAttribute('data-date-format');\n    \n    if( fieldEl.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat );\n        minVal = minVal.split('-').join('');\n    }\n\n    value = value * 1;\n    minVal = minVal * 1;\n    \n    return { result: value >= minVal };\n}\n","\nexport const minlength = function( value, fieldEl ){\n    return { result: value.length >= fieldEl.minLength * 1 };\n}\n","\nexport const pattern = function( value, fieldEl ){\n    return { result: new RegExp(fieldEl.pattern).test(value) };\n}\n","\nexport const radio = function( value, fieldEl ){\n    const fieldChecked = fieldEl.closest('form').querySelector( '[name=\"'+ fieldEl.name +'\"]:checked' ),\n          isValid = fieldChecked !== null && fieldChecked.value.trim().length > 0;\n\n    return { result: isValid };\n}\n","\nexport const dataTypeNumber = function( event ){\n\n    const fieldEl = event.target;\n    \n    if( fieldEl.matches('[data-type=\"number\"]') ){\n        let fieldValue = fieldEl.value,\n            hasInvalidChars = /[^\\d.,+\\-]/.test(fieldValue);\n        \n        if( hasInvalidChars ){\n            event.stopImmediatePropagation();\n            const valueReplaced = fieldValue.replace(/[^\\d.,+\\-]/g, '');\n            fieldEl.value = valueReplaced;\n        }\n    }\n\n}\n","\nexport const formValidationEnd = function( event ){\n    const formEl = event.target;\n    const options = formEl.formjs.options;\n    \n    if( !options.fieldOptions.skipUIfeedback ){\n        const clMethodName = event.data.result ? 'add' : 'remove';\n        formEl.classList[clMethodName]( options.formOptions.cssClasses.valid );\n    }\n}\n","\nexport const keypressMaxlength = function( event ){\n\n    const fieldEl = event.target;\n    \n    if( fieldEl.matches( '[maxlength]' ) ){\n        const maxLength = fieldEl.maxLength * 1,\n            keyPressed = event.which || event.keyCode,\n            allowedKeys = [8, 37, 38, 39, 46];\n\n        if( fieldEl.value.length >= maxLength && allowedKeys.indexOf(keyPressed) === -1 ){\n            return false;\n        }\n    }\n\n}\n","\nexport const pastePrevent = function( event ){\n\n    const fieldEl = event.target;\n    const fieldOptions = fieldEl.closest('form').formjs.options.fieldOptions;\n\n    if( fieldEl.matches( fieldOptions.preventPasteFields ) ){     \n        event.preventDefault();\n    }\n\n}\n","\nimport { addClass, customEvents, dispatchCustomEvent, getValidateFormDefault, removeClass, runFunctionsSequence } from '../helpers';\nimport { ajaxCall } from '../ajaxCall';\n\nexport function submit( event ){\n\n    const formEl = event.target,\n          instance = formEl.formjs,\n          options = instance.options,\n          formCssClasses = options.formOptions.cssClasses,\n          isAjaxForm = options.formOptions.ajaxSubmit,\n          btnEl = formEl.querySelector('[type=\"submit\"]'),\n          eventPreventDefault = ( enableBtn = true ) => {\n              if( btnEl && enableBtn ){ btnEl.disabled = false; }\n              if( event ){ event.preventDefault(); }\n          };\n\n    if( isAjaxForm ){\n        eventPreventDefault(false);\n    }\n\n    if( btnEl ){\n        if( btnEl.disabled ){\n            eventPreventDefault(false);\n            return false;\n        }\n        btnEl.disabled = true;\n    }\n\n    removeClass( formEl, (formCssClasses.ajaxComplete + ' ' + formCssClasses.ajaxError + ' ' + formCssClasses.ajaxSuccess) );\n    addClass( formEl, formCssClasses.submit );\n    \n    const handleValidation = options.fieldOptions.handleValidation,\n          formValidationPromise = (handleValidation ? instance.validateForm() : Promise.resolve(getValidateFormDefault()));\n\n    formValidationPromise.then(formValidation => {\n\n        const beforeSendData = { stopExecution: false, formData: {} };\n\n        if( !formValidation.result ){\n            eventPreventDefault();\n            removeClass( formEl, formCssClasses.submit );\n            beforeSendData.stopExecution = true;\n            return [beforeSendData];\n        }\n        \n        const formDataObj = (isAjaxForm ? instance.getFormData() : null),\n              callbacksBeforeSend = options.formOptions.beforeSend;\n\n        if( formDataObj ){\n            beforeSendData.formData = formDataObj;\n        }\n\n        const rfsObject = {\n              functionsList: callbacksBeforeSend,\n              data: beforeSendData,\n              stopConditionFn: function(data){ return data.stopExecution; }\n        };\n        return runFunctionsSequence(rfsObject);\n\n    }).then(dataList => {\n\n        if( dataList.filter(data => data.stopExecution).length > 0 ){\n            eventPreventDefault();\n            return false;\n        }\n        \n        if( isAjaxForm ){\n\n            const formData = dataList.pop().formData;\n            addClass( formEl, formCssClasses.ajaxPending );\n            dispatchCustomEvent( formEl, customEvents.form.submit, ajaxCall( formEl, formData, options ) );\n            \n        }\n\n    });\n    \n}\n","\nimport { addClass, mergeObjects, removeClass, serializeObject } from './helpers';\n\nconst getFetchMethod = (response, options) => {\n    const accept = options.headers.get('Accept');\n    const contentType = response.headers.get('Content-Type');\n    const headerOpt = accept || contentType || '';\n\n    if( headerOpt.indexOf('application/json') > -1 || headerOpt === '' ){\n        return 'json';\n    } else if( headerOpt.indexOf('text/') > -1 ){\n        return 'text';\n    } else {\n        return 'blob';\n    }\n};\n\nexport function ajaxCall( formEl, formDataObj, options ){\n\n    let btnEl = formEl.querySelector('[type=\"submit\"]'),\n        timeoutTimer,\n        ajaxOptions = mergeObjects( {}, options.formOptions.ajaxOptions ),\n        isMultipart = ajaxOptions.headers['Content-Type'] === 'multipart/form-data';\n\n    ajaxOptions.body = formDataObj;\n    \n    // POST A FormData OBJECT ( multipart )\n    if( isMultipart && options.fieldOptions.handleFileUpload ){\n        let formDataMultipart = new FormData();\n        \n        for(let key in ajaxOptions.body){\n            formDataMultipart.append( key, ajaxOptions.body[key] );\n        }\n        \n        Array.from( formEl.querySelectorAll('[type=\"file\"]') ).forEach(function( field ){\n            Array.from(field.files).forEach(function( file, idx ){\n                const name = field.name+'['+ idx +']';\n                formDataMultipart.append( name, file, file.name );\n            });\n        });\n        \n        ajaxOptions.body = formDataMultipart;\n    }\n\n    if( ajaxOptions.method === 'GET' ){\n\n        // FETCH WITH \"GET\" METHOD CAN'T HAVE \"body\". SO IT IS APPENDED TO THE URL\n        ajaxOptions.url += ( /\\?/.test(ajaxOptions.url) ? '&' : '?' ) + serializeObject( ajaxOptions.body );\n        delete ajaxOptions.body;\n\n    } else {\n\n        if( ajaxOptions.headers['Content-Type'].indexOf('application/x-www-form-urlencoded') > -1 ){\n            // POST A NORMAL FORM\n            ajaxOptions.body = serializeObject( ajaxOptions.body );\n        } else if( !isMultipart ){\n            // POST A JSON STRING\n            ajaxOptions.body = JSON.stringify(ajaxOptions.body);\n        }\n\n    }\n\n    ajaxOptions.headers = new Headers( ajaxOptions.headers );\n\n    if ( ajaxOptions.timeout > 0 ) {\n        const controller = new AbortController();\n        const signal = controller.signal;\n\n        ajaxOptions.signal = signal;\n\n        timeoutTimer = window.setTimeout(function() {\n            controller.abort();\n        }, ajaxOptions.timeout);\n    }\n\n    return fetch(ajaxOptions.url, ajaxOptions)\n        .then(function( response ){\n            if( !response.ok ){\n                throw new Error(response.statusText);\n            }\n\n            const fetchMethod = getFetchMethod(response, ajaxOptions);\n\n            return response[fetchMethod]();\n        })\n        .then(function( data ){\n            addClass( formEl, options.formOptions.cssClasses.ajaxSuccess );\n            return data;\n        })\n        .catch(function( error ){\n            addClass( formEl, options.formOptions.cssClasses.ajaxError );\n            throw new Error(error.message);\n        })\n        .finally(function(){\n            if( timeoutTimer ){\n                window.clearTimeout( timeoutTimer );\n            }\n            removeClass( formEl, options.formOptions.cssClasses.submit + ' ' + options.formOptions.cssClasses.ajaxPending );\n            addClass( formEl, options.formOptions.cssClasses.ajaxComplete );\n            btnEl.disabled = false;\n        });\n\n}\n","\nimport { fieldsStringSelector, isFieldForChangeEvent } from '../helpers';\n\nexport const validation = function( event ){\n\n    const isChangeEvent = event.type === 'change',\n          fieldEl = event.target,\n          self = fieldEl.closest('form').formjs;\n\n    if( fieldEl.matches( fieldsStringSelector ) ){\n        const isFieldForChangeEventBoolean = isFieldForChangeEvent(fieldEl);\n        const hasOnlyChangeEvent = self.options.fieldOptions.validateOnEvents === 'change';\n        \n        if(\n            (isFieldForChangeEventBoolean && isChangeEvent) ||\n            (!isFieldForChangeEventBoolean && (!isChangeEvent || hasOnlyChangeEvent))\n        ){\n            \n            return self.validateField( fieldEl ).then(obj => {\n                const type = obj.fieldEl.type,\n                      realtedFieldEqualTo = obj.fieldEl.closest('form').querySelector('[data-equal-to=\"'+ obj.fieldEl.name +'\"]');\n\n                if(\n                    // FIELD IS ( required OR data-validate-if-filled ) AND RELATED FIELD data-equal-to HAS A VALUE\n                    (obj.fieldEl.required || obj.fieldEl.matches('[data-validate-if-filled]')) && \n                    !(type === 'checkbox' || type === 'radio') && \n                    realtedFieldEqualTo && realtedFieldEqualTo.value.trim() !== ''\n                ){\n                    self.validateField( realtedFieldEqualTo );\n                }\n\n                return obj;\n            });\n\n        }\n    }\n    \n}\n","\nimport { addClass, getJSONobjectFromFieldAttribute, removeClass, mergeObjects } from '../helpers';\n\nexport const validationEnd = function( event ){\n\n    const eventData = event.data,\n          fieldEl = eventData.fieldEl,\n          dataFieldOptions = getJSONobjectFromFieldAttribute( fieldEl, 'data-field-options' ),\n          fieldOptions = mergeObjects({}, fieldEl.closest('form').formjs.options.fieldOptions, dataFieldOptions),\n          containerEl = fieldEl.closest( fieldOptions.questionContainer ),\n          isReqFrom = fieldEl.matches('[data-required-from]'),\n          reqMoreEl = document.querySelector( fieldEl.getAttribute('data-required-from') );\n\n    if( containerEl && !fieldOptions.skipUIfeedback ){\n\n        if( eventData.result ){\n\n            if( !isReqFrom || (isReqFrom && reqMoreEl.checked) ){\n                // IF FIELD IS VALID\n                const errorClasses = fieldOptions.cssClasses.error + ' ' + fieldOptions.cssClasses.errorEmpty + ' ' + fieldOptions.cssClasses.errorRule;\n                removeClass( containerEl, errorClasses );\n                addClass( containerEl, fieldOptions.cssClasses.valid );\n            }\n\n        } else {\n\n            // IF FIELD IS NOT VALID\n            let extraErrorClass = fieldOptions.cssClasses.errorRule;\n\n            // HANDLE CASE OF FIELD data-checks\n            const isChecks = fieldEl.matches('[data-checks]'),\n                    checkedElLength = (isChecks ? containerEl.querySelectorAll('[name=\"' + fieldEl.name + '\"]:checked').length : 0);\n\n            if( (!isChecks && (eventData.errors && eventData.errors.empty)) || (isChecks && checkedElLength === 0) ){\n                extraErrorClass = fieldOptions.cssClasses.errorEmpty;\n            }\n\n            let errorClasses = fieldOptions.cssClasses.error + ' ' + extraErrorClass,\n                errorClassToRemove = fieldOptions.cssClasses.errorEmpty + ' ' + fieldOptions.cssClasses.errorRule;\n            removeClass( containerEl, fieldOptions.cssClasses.valid + ' ' + errorClassToRemove );\n            addClass( containerEl, errorClasses );\n\n        }\n    }\n\n}\n","\nimport { customEvents } from './helpers';\nimport { dataTypeNumber, formValidationEnd, keypressMaxlength, pastePrevent, submit, validation, validationEnd } from './listenerCallbacks';\n\nexport function formStartup( formEl, options ){\n\n    formEl.noValidate = true;\n\n    const fieldOptions = options.fieldOptions,\n          formOptions = options.formOptions;\n\n    // HANDLE FIELD VALIDATION\n    if( fieldOptions.handleValidation ){\n        \n        // VALIDATION WITH ATTRIBUTES LIKE HTML ONES ( ALSO FOR BUG FIXING, EG: maxlength IN ANDROID )\n        if( fieldOptions.strictHtmlValidation ){\n            \n            // maxlength\n            // MAXLENGTH IS BUGGY IN ANDROID BROWSERS\n            formEl.addEventListener('keypress', keypressMaxlength, false);\n\n            // data-type=\"number\"\n            // SINCE VALIDATING type=\"number\" WITH NON NUMERIC CHARS WILL RETURN EMPTY STRING IN SOME BROWSERS ( EG: FIREFOX )\n            formEl.addEventListener('input', dataTypeNumber, false);\n            \n        }\n        \n        if( fieldOptions.preventPasteFields && formEl.querySelectorAll( fieldOptions.preventPasteFields ).length ){\n            // INIT EVENT LISTENER FOR \"PASTE\" EVENT TO PREVENT IT ON SPECIFIED FIELDS\n            formEl.addEventListener('paste', pastePrevent, false);\n        }\n\n        // INIT EVENTS LISTENER ( AS IN fieldOptions )\n        fieldOptions.validateOnEvents.split(' ').forEach(function( eventName ){\n            const useCapture = /^(blur|focus)$/.test(eventName);\n            formEl.addEventListener(eventName, validation, useCapture);\n        });\n\n        formEl.addEventListener(customEvents.field.validation, validationEnd, false);\n        formEl.addEventListener(customEvents.form.validation, formValidationEnd, false);\n\n    }\n    \n    // HANDLE FORM SUBMIT\n    if( formOptions.handleSubmit ){\n        // INIT FORM SUBMIT ( DEFAULT AND AJAX )\n        formEl.addEventListener('submit', submit);\n\n        if( formOptions.ajaxSubmit ){\n            if( formEl.getAttribute('enctype') ){\n                formOptions.ajaxOptions.headers['Content-Type'] = formEl.getAttribute('enctype');\n            }\n\n            if( formEl.getAttribute('method') ){\n                formOptions.ajaxOptions.method = formEl.getAttribute('method').toUpperCase();\n            }\n\n            if( formEl.getAttribute('action') ){\n                formOptions.ajaxOptions.url = formEl.getAttribute('action');\n            }\n        }\n    }\n\n}\n","\nimport { getFilledFields, isFieldForChangeEvent } from './helpers';\nimport { validation } from './listenerCallbacks';\n\nexport const init = function( formEl ){\n\n    const instance = formEl.formjs;\n    const formFields = getFilledFields( formEl );\n\n    // VALIDATE ALL FILLED FIELDS\n    return Promise.all( formFields.map(fieldEl => {\n\n        const isFieldForChangeEventBoolean = isFieldForChangeEvent(fieldEl);\n        const fakeEventObj = { target: fieldEl, type: (isFieldForChangeEventBoolean ? 'change': '') };\n        return validation( fakeEventObj );\n\n    }) ).then(fields => {\n        instance.isInitialized = true;\n        return { instance, fields };\n    });\n\n}\n","\nimport { fieldsStringSelector } from './fieldsStringSelector';\nimport { getUniqueFields } from './getUniqueFields';\n\nexport const getFilledFields = formEl => {\n    return getUniqueFields( formEl.querySelectorAll(fieldsStringSelector) )\n    .map(fieldEl => {\n\n        const name = fieldEl.name,\n              type = fieldEl.type,\n              isCheckboxOrRadio = (type === 'checkbox' || type === 'radio'),\n              fieldChecked = formEl.querySelector('[name=\"' + name + '\"]:checked'),\n              isReqFrom = fieldEl.matches('[data-required-from]'),\n              reqMoreEl = (isReqFrom ? formEl.querySelector(fieldEl.getAttribute('data-required-from')) : null);\n\n        return (\n            isCheckboxOrRadio ? (fieldChecked || null) :\n            (isReqFrom && reqMoreEl.checked) || (!isReqFrom && fieldEl.value) ? fieldEl : null\n        );\n\n    })\n    .filter(fieldEl => fieldEl !== null);\n}\n","\nimport {    getJSONobjectFromFieldAttribute,\n            getValidateFieldDefault,\n            isDOMNode,\n            mergeObjects,\n            removeClass,\n            runFunctionsSequence \n        }           from './helpers';\nimport { isValid }  from './isValid';\n\nexport function checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    if( !isDOMNode(fieldEl) ){\n        const obj = getValidateFieldDefault({fieldEl});\n        return Promise.resolve(obj);\n    }\n\n    const formEl = fieldEl.closest('form'),\n          isValidValue = fieldEl.value.trim().length > 0,\n          dataFieldOptions = getJSONobjectFromFieldAttribute( fieldEl, 'data-field-options' );\n\n    fieldOptions = mergeObjects( fieldOptions, dataFieldOptions );\n\n     // HANDLE FIELDS radio/data-require-more\n     if( fieldEl.type === 'radio' ){\n        const checkedEl = fieldEl.checked ? fieldEl : formEl.querySelector('[name=\"'+ fieldEl.name +'\"]:checked'),\n              reqMoreIsChecked = checkedEl && checkedEl.matches('[data-require-more]'),\n              findReqMoreEl = reqMoreIsChecked ? checkedEl : formEl.querySelector('[data-require-more][name=\"'+ fieldEl.name +'\"]'),\n              findReqFromEl = findReqMoreEl ? formEl.querySelector('[data-required-from=\"#'+ findReqMoreEl.id +'\"]') : null;\n        \n        if( checkedEl && findReqFromEl ){\n            findReqFromEl.required = findReqMoreEl.required && findReqMoreEl.checked;\n            if( !reqMoreIsChecked ){\n                findReqFromEl.value = '';\n            } else if( fieldOptions.focusOnRelated ) {\n                findReqFromEl.focus();\n            }\n        }\n    }\n\n    // HANDLE FIELDS data-required-from\n    if( fieldEl.matches('[data-required-from]') && isValidValue ){\n        const reqMoreEl = formEl.querySelector( fieldEl.getAttribute('data-required-from') );\n        reqMoreEl.checked = true;\n        fieldEl.required = reqMoreEl.required;\n    }\n\n    const needsValidation = fieldEl.required || (fieldEl.matches('[data-validate-if-filled]') && isValidValue);\n\n    return runFunctionsSequence({\n            functionsList: fieldOptions.beforeValidation,\n            data: { fieldEl, fieldOptions }\n        })\n        .then(data => {\n            const dataObj = data.pop();\n            return new Promise(resolve => {\n                if( !needsValidation ){\n                    dataObj.result = true;\n                }\n                resolve( needsValidation ? isValid(fieldEl, fieldOptions, validationRules, validationErrors) : dataObj );\n            });\n        })\n        .then(data => {\n            const containerEl = fieldOptions.questionContainer && data.fieldEl.closest( fieldOptions.questionContainer );\n            if( containerEl ){\n                removeClass( containerEl, fieldOptions.cssClasses.pending );\n            }\n            return data;\n        })\n        ;\n\n}\n","\nimport { getValidateFieldDefault, mergeObjects, toCamelCase } from './helpers';\n\nexport function isValid( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    const fieldValue = fieldEl.value,\n          obj = getValidateFieldDefault({result: fieldValue.trim().length > 0, fieldEl}),\n          isRadioOrCheckbox = /^(radio|checkbox)$/.test(fieldEl.type),\n          hasSelectedInput = fieldEl.closest('form').querySelectorAll('[name=\"'+ fieldEl.name +'\"]:checked').length > 0;\n\n    if( (!isRadioOrCheckbox && !obj.result) || (isRadioOrCheckbox && !hasSelectedInput) ){\n        obj.result = false;\n        obj.errors = { empty: true };\n        return Promise.resolve(obj);\n    }\n\n    // COLLECT VALIDATION METHOD NAMES ( USED TO RUN VALIDATIONS AND GET ERRORS )\n    const validationMethods = Array.from(fieldEl.attributes).reduce((accList, attr) => {\n        const attrName = toCamelCase( attr.name.replace('data-', '') ),\n              attrValue = toCamelCase( attr.value ),\n              isAttrValueWithFn = (attrName === 'type' || attrName === 'subtype') && validationRules[attrValue],\n              isAttrNameWithFn = validationRules[attrName];\n\n        if( isAttrValueWithFn || isAttrNameWithFn ){\n            accList.push( isAttrValueWithFn ? attrValue : attrName );\n        }\n        return accList;\n    }, []);\n\n    return new Promise(resolve => {\n\n        // RUN VALIDATIONS\n        const validationsResult = validationMethods.reduce((accPromise, methodName) => {\n            return accPromise.then(accObj => {\n                return new Promise(resolveVal => {\n                    // RUN VALIDATION INSIDE A PROMISE IS USEFUL FOR ASYNC VALIDATIONS\n                    resolveVal( validationRules[methodName](fieldValue, fieldEl, fieldOptions) );\n                }).then(valObj => {\n                    // ADD CUSTOM ERROR-KEY FOR EACH VALIDATION RULE\n                    if( !valObj.result ){\n                        const errorObj = {};\n                        if( typeof valObj.errors === 'undefined' || typeof valObj.errors[methodName] === 'undefined' ){\n                            errorObj[methodName] = true;\n                        }\n                        valObj.errors = mergeObjects({}, valObj.errors, errorObj);\n                    }\n                    valObj = valObj.result ? {} : valObj;\n                    return mergeObjects(accObj, valObj);\n                });\n            });\n        }, Promise.resolve(obj));\n        resolve(validationsResult);\n\n    }).then(data => {\n\n        // GET ERRORS\n        if( !data.result ){\n            data.errors = validationMethods.reduce((accObj, methodName) => {\n                const errors = (validationErrors[methodName] && validationErrors[methodName](fieldValue, fieldEl)) || {};\n                return mergeObjects(accObj, errors);\n            }, data.errors);\n            data.errors.rule = true;\n        }\n        return data;\n\n    });\n\n}\n","\nimport { fieldsStringSelector, getUniqueFields, getValidateFieldDefault, getValidateFormDefault, mergeObjects } from './helpers';\nimport { checkFieldValidity } from './checkFieldValidity';\n\nexport function checkFormValidity( formEl, fieldOptions, validationRules, validationErrors, fieldToSkip = null ){\n\n    fieldOptions = mergeObjects( {}, fieldOptions, {focusOnRelated: false} );\n    const fieldsList = getUniqueFields( formEl.querySelectorAll(fieldsStringSelector) );\n\n    return Promise.all( fieldsList.map(fieldEl => {\n\n        if( fieldToSkip && fieldEl === fieldToSkip ){\n            const obj = getValidateFieldDefault({fieldEl, result: true});\n            return Promise.resolve(obj);\n        }\n        return checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors );\n\n    }) ).then(fields => {\n\n        const areAllFieldsValid = fields.filter(fieldObj => !fieldObj.result).length === 0;\n        return getValidateFormDefault({result: areAllFieldsValid, fields});\n\n    });\n\n}\n","\nimport { version }              from './modules/version';\nimport { checkFormEl, customEvents, dispatchCustomEvent, excludeSelector, isNodeList, mergeObjects, removeClass } from './modules/helpers';\nimport { options }              from './modules/options';\nimport { validationRules }      from './modules/validationRules';\nimport { validationErrors }     from './modules/validationErrors';\nimport { formStartup }          from './modules/formStartup';\nimport { destroy }              from './modules/destroy';\nimport { init }                 from './modules/init';\nimport { checkFieldValidity }   from './modules/checkFieldValidity';\nimport { checkFormValidity }    from './modules/checkFormValidity';\n\nclass Form {\n\n    constructor( formEl, optionsObj ){\n        const argsL = arguments.length,\n              checkFormElem = checkFormEl(formEl);\n\n        if( argsL === 0 || (argsL > 0 && !formEl) ){\n            throw new Error('First argument \"formEl\" is missing or falsy!');\n        }\n        if( isNodeList(formEl) ){\n            throw new Error('First argument \"formEl\" must be a single DOM node or a form CSS selector, not a NodeList!');\n        }\n        if( !checkFormElem.result ){\n            throw new Error('First argument \"formEl\" is not a DOM node nor a form CSS selector!');\n        }\n\n        const self = this;\n\n        self.formEl = checkFormElem.element;\n        self.formEl.formjs = self;\n        self.options = mergeObjects({}, Form.prototype.options, optionsObj);\n\n        // BINDING CONTEXT FOR FUTURE EXECUTION\n        const cbList = [\n            // IN fieldOptions\n            'beforeValidation',\n            // IN formOptions\n            'beforeSend',\n            'getFormData'\n        ];\n        cbList.forEach(cbName => {\n            const optionType = self.options.formOptions[cbName] ? 'formOptions' : 'fieldOptions';\n            let cbOpt = self.options[optionType][cbName];\n\n            if( cbOpt ){\n                self.options[optionType][cbName] = ( Array.isArray(cbOpt) ? cbOpt.map(cbFn => cbFn.bind(self)) : cbOpt.bind(self) );\n            }\n        });\n\n        formStartup( self.formEl, self.options );\n    }\n\n    destroy(){\n        destroy(this.formEl, this.options);\n    }\n    \n    getFormData( trimValues = this.options.fieldOptions.trimValue ){\n        const formFieldsEl = this.formEl.querySelectorAll('input, select, textarea'),\n              filteredFields = Array.from( formFieldsEl ).filter( elem => elem.matches(excludeSelector) );\n        return this.options.formOptions.getFormData( filteredFields, trimValues );\n    }\n\n    init(){\n        const focusOnRelated = this.options.fieldOptions.focusOnRelated;\n        this.options.fieldOptions.focusOnRelated = false;\n        return init(this.formEl)\n            .then(initObj => {\n                this.options.fieldOptions.focusOnRelated = focusOnRelated;\n                return initObj;\n            });\n    }\n\n    validateField( fieldEl, fieldOptions ){\n        const self = this;\n        fieldEl = typeof fieldEl === 'string' ? self.formEl.querySelector(fieldEl) : fieldEl;\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions);\n        const formEl = self.formEl;\n        return checkFieldValidity(fieldEl, fieldOptions, self.validationRules, self.validationErrors)\n            .then(obj => {\n                dispatchCustomEvent( obj.fieldEl, customEvents.field.validation, obj );\n                if( obj.result && fieldOptions.onValidationCheckAll ){\n                    checkFormValidity( formEl, fieldOptions, self.validationRules, self.validationErrors, obj.fieldEl )\n                        .then(dataForm => {\n                            dispatchCustomEvent( formEl, customEvents.form.validation, dataForm );\n                        });\n                } else if( !obj.result ){\n                    removeClass( formEl, self.options.formOptions.cssClasses.valid );\n                }\n                return obj;\n            });\n    }\n\n    validateForm( fieldOptions ){\n        const self = this;\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions);\n        const formEl = self.formEl;\n        return checkFormValidity(formEl, fieldOptions, self.validationRules, self.validationErrors)\n            .then(data => {\n                data.fields.forEach(obj => {\n                    obj.isCheckingForm = true;\n                    dispatchCustomEvent( obj.fieldEl, customEvents.field.validation, obj );\n                });\n                dispatchCustomEvent( formEl, customEvents.form.validation, data );\n                return data;\n            });\n    }\n    \n    static addValidationErrors( errorsObj ){\n        Form.prototype.validationErrors = mergeObjects({}, Form.prototype.validationErrors, errorsObj);\n    }\n\n    static addValidationRules( rulesObj ){\n        Form.prototype.validationRules = mergeObjects({}, Form.prototype.validationRules, rulesObj);\n    }\n    \n    static setOptions( optionsObj ){\n        Form.prototype.options = mergeObjects({}, Form.prototype.options, optionsObj);\n    }\n\n}\n\nForm.prototype.isInitialized = false;\nForm.prototype.options = options;\nForm.prototype.validationErrors = validationErrors;\nForm.prototype.validationRules = validationRules;\nForm.prototype.version = version;\n\nexport default Form;\n","\nimport { customEvents } from './helpers';\nimport { dataTypeNumber, formValidationEnd, keypressMaxlength, pastePrevent, submit, validation, validationEnd } from './listenerCallbacks';\n\n\nexport function destroy( formEl, options ){\n\n    if( options.fieldOptions.strictHtmlValidation ){\n        formEl.removeEventListener('keypress', keypressMaxlength, false);\n        formEl.removeEventListener('input', dataTypeNumber, false);\n    }\n\n    if( options.fieldOptions.preventPasteFields ){\n        formEl.removeEventListener('paste', pastePrevent, false);\n    }\n\n    if( options.formOptions.handleSubmit ){\n        formEl.removeEventListener('submit', submit);\n    }\n\n    options.fieldOptions.validateOnEvents.split(' ').forEach(function( eventName ){\n        const useCapturing = eventName === 'blur' ? true : false;\n        formEl.removeEventListener(eventName, validation, useCapturing);\n    });\n\n    formEl.removeEventListener(customEvents.field.validation, validationEnd, false);\n    formEl.removeEventListener(customEvents.form.validation, formValidationEnd, false);\n\n    delete formEl.formjs;\n    \n}\n","\nexport const validationErrors = {\n\n    email: function ( string ) {\n        const obj = {};\n\n        if( string.indexOf('@') === -1 ){\n\n            // @ IS MISSING\n            obj.missingAtChar = true;\n\n        } else {\n\n            const splitAt_at = string.split('@');\n            if( splitAt_at[0].length === 0 ){\n\n                // USER NAME IS MISSING\n                obj.missingUserName = true;\n\n            }\n\n            if( splitAt_at[1].length === 0 ){\n\n                // IS EMPTY AFTER @\n                obj.missingDomain = true;\n                obj.missingExtensionDot = true;\n                obj.missingExtension = true;\n\n            } else if( splitAt_at[1].indexOf('.') === -1 ) {\n\n                // DOT IS MISSING\n                obj.missingExtensionDot = true;\n                obj.missingExtension = true;\n\n            } else {\n\n                // EXTENSION MISSING OR NOT LONG ENOUGH\n                const splitAt_dot = splitAt_at[1].split('.'),\n                      extLength = splitAt_dot[1].length;\n                if( extLength === 0 ) {\n                    obj.missingExtension = true;\n                } else if( extLength < 2 ){\n                    obj.minlengthExtension = true;\n                }\n\n            }\n        }\n\n        return obj;\n\n    }\n\n}\n"],"names":["addClass","element","cssClasses","split","forEach","className","classList","add","isNodeList","nodeList","NodeList","prototype","isPrototypeOf","removeClass","remove","isDOMNode","node","Element","checkFormEl","formEl","isString","isFormSelector","document","querySelector","tagName","toLowerCase","result","customEvents","validation","submit","isPlainObject","object","Object","toString","call","mergeObjects","out","Array","from","arguments","slice","filter","arg","keys","key","isArray","concat","push","dispatchCustomEvent","elem","eventName","data","eventOptions","bubbles","eventObj","Event","dispatchEvent","excludeSelector","fieldsStringSelector","formatMap","dateArray","reverse","getDateAsNumber","dateString","dateFormat","separator","splitChar","match","length","indexOf","replace","join","getJSONobjectFromFieldAttribute","fieldEl","attrName","customAttrEl","closest","JSON","parse","getAttribute","getUniqueFields","currentFieldName","currentFieldType","name","type","matches","getValidateFieldDefault","obj","getValidateFormDefault","fields","isFieldForChangeEvent","runFunctionsSequence","functionsList","stopConditionFn","reduce","acc","promiseFn","then","res","dataNew","Promise","resolve","dataList","serializeObject","_typeof","constructor","a","k","encodeURIComponent","toCamelCase","string","all","letter","toUpperCase","options","fieldOptions","beforeValidation","trimValue","value","trim","containerEl","questionContainer","dirty","checkDirtyField","skipUIfeedback","pending","error","errorEmpty","errorRule","valid","focusOnRelated","handleFileUpload","handleValidation","maxFileSize","onValidationCheckAll","preventPasteFields","strictHtmlValidation","validateOnEvents","formOptions","ajaxOptions","cache","credentials","headers","method","mode","redirect","timeout","url","location","href","ajaxSubmit","beforeSend","ajaxComplete","ajaxError","ajaxPending","ajaxSuccess","getFormData","filteredFields","trimValues","formData","this","isCheckbox","isRadio","isSelect","checked","checkboxes","querySelectorAll","field","checkedRadio","selectedOpts","option","selected","handleSubmit","validationRules","date","test","email","number","checkbox","dataChecksEl","attrValue","checkedElLength","isMinOk","isMaxOk","errors","checks","minChecks","maxChecks","equalTo","exactLength","valueLength","minlength","maxlength","file","MIMEtype","accept","RegExp","filesList","files","exceedMaxFileSize","size","isAcceptedFileType","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","stringLength","max","maxVal","maxLength","min","minVal","minLength","pattern","radio","fieldChecked","dataTypeNumber","event","target","fieldValue","stopImmediatePropagation","valueReplaced","formValidationEnd","formjs","clMethodName","keypressMaxlength","keyPressed","which","keyCode","pastePrevent","preventDefault","instance","formCssClasses","isAjaxForm","btnEl","eventPreventDefault","enableBtn","disabled","validateForm","formValidation","beforeSendData","stopExecution","formDataObj","callbacksBeforeSend","pop","timeoutTimer","isMultipart","body","formDataMultipart","FormData","append","idx","stringify","Headers","controller","AbortController","signal","window","setTimeout","abort","fetch","response","ok","Error","statusText","fetchMethod","get","contentType","headerOpt","getFetchMethod","message","clearTimeout","ajaxCall","isChangeEvent","self","isFieldForChangeEventBoolean","hasOnlyChangeEvent","validateField","realtedFieldEqualTo","required","validationEnd","eventData","dataFieldOptions","isReqFrom","reqMoreEl","errorClasses","extraErrorClass","isChecks","empty","errorClassToRemove","formStartup","noValidate","addEventListener","useCapture","init","formFields","map","isCheckboxOrRadio","getFilledFields","isInitialized","checkFieldValidity","validationErrors","isValidValue","checkedEl","reqMoreIsChecked","findReqMoreEl","findReqFromEl","id","focus","needsValidation","dataObj","isRadioOrCheckbox","hasSelectedInput","validationMethods","attributes","accList","attr","isAttrValueWithFn","isAttrNameWithFn","accPromise","methodName","accObj","resolveVal","valObj","errorObj","rule","isValid","checkFormValidity","fieldToSkip","fieldsList","areAllFieldsValid","fieldObj","Form","optionsObj","argsL","checkFormElem","cbList","cbName","optionType","cbOpt","cbFn","bind","errorsObj","rulesObj","removeEventListener","useCapturing","destroy","formFieldsEl","initObj","_this","dataForm","isCheckingForm","missingAtChar","splitAt_at","missingUserName","missingDomain","missingExtensionDot","missingExtension","extLength","minlengthExtension","version"],"mappings":"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"}