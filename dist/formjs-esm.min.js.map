{"version":3,"file":"formjs-esm.min.js","sources":["../src/modules/version.js","../src/modules/helpers/addClass.js","../src/modules/helpers/isNodeList.js","../src/modules/helpers/removeClass.js","../src/modules/helpers/isDOMNode.js","../src/modules/helpers/customEvents.js","../src/modules/helpers/isPlainObject.js","../src/modules/helpers/mergeObjects.js","../src/modules/helpers/dispatchCustomEvent.js","../src/modules/helpers/fieldsStringSelector.js","../src/modules/helpers/finalizeFieldPromise.js","../src/modules/helpers/finalizeFormPromise.js","../src/modules/helpers/getDateAsNumber.js","../src/modules/helpers/getSplitChar.js","../src/modules/helpers/getUniqueFields.js","../src/modules/helpers/mergeValidateFieldDefault.js","../src/modules/helpers/isFieldForChangeEvent.js","../src/modules/helpers/runFunctionsSequence.js","../src/modules/helpers/serializeObject.js","../src/modules/helpers/toCamelCase.js","../src/modules/optionsUtils.js","../src/modules/helpers/checkDirtyField.js","../src/modules/options.js","../src/modules/validationRules.js","../src/modules/validationRules/date.js","../src/modules/validationRules/email.js","../src/modules/validationRules/number.js","../src/modules/validationRules/checkbox.js","../src/modules/validationRules/checks.js","../src/modules/validationRules/equalTo.js","../src/modules/validationRules/exactLength.js","../src/modules/validationRules/file.js","../src/modules/validationRules/length.js","../src/modules/validationRules/max.js","../src/modules/validationRules/maxlength.js","../src/modules/validationRules/min.js","../src/modules/validationRules/minlength.js","../src/modules/validationRules/pattern.js","../src/modules/validationRules/radio.js","../src/modules/listenerCallbacks/dataTypeNumber.js","../src/modules/listenerCallbacks/keypressMaxlength.js","../src/modules/listenerCallbacks/pastePrevent.js","../src/modules/ajaxCall.js","../src/modules/listenerCallbacks/submit.js","../src/modules/listenerCallbacks/validation.js","../src/modules/listenerCallbacks/validationEnd.js","../src/modules/checkFilledFields.js","../src/modules/helpers/getFilledFields.js","../src/modules/checkFieldValidity.js","../src/modules/isValid.js","../src/modules/checkFormValidity.js","../src/modules/helpers/mergeValidateFormDefault.js","../src/index.js","../src/modules/helpers/checkFormEl.js","../src/modules/formStartup.js","../src/modules/destroy.js","../src/modules/helpers/excludeSelector.js"],"sourcesContent":["\nexport const version = '5.0.0';\n","\nexport const addClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.add( className );\n    });\n}\n","\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList );\n}\n","\nexport const removeClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.remove( className );\n    });\n}\n","\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node );\n}\n","\nexport const customEvents = {\n    field: {\n        validation: 'fjs.field:validation'\n    },\n    form: {\n        submit:     'fjs.form:submit',\n        validation: 'fjs.form:validation'\n    }\n}\n","\nexport const isPlainObject = object => {\n    return Object.prototype.toString.call( object ) === '[object Object]';\n}\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const mergeObjects = function( out = {} ){\n    Array.from(arguments).slice(1).filter(arg => !!arg).forEach(arg => {\n        Object.keys(arg).forEach(key => {\n            if( Array.isArray(arg[key]) ){\n                out[key] = (out[key] || []).concat( arg[key].slice(0) );\n            } else if( isPlainObject(arg[key]) ){\n                out[key] = mergeObjects((out[key] || {}), arg[key]);\n            } else {\n                // * STRING | NUMBER | BOOLEAN | FUNCTION\n                if( Array.isArray(out[key]) ){\n                    // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                    out[key].push(arg[key]);\n                } else {\n                    out[key] = arg[key];\n                }\n            }\n        });\n    });\n\n    return out;\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const dispatchCustomEvent = ( elem, eventName, eventOptions ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions);\n    const eventObj = new CustomEvent(eventName, eventOptions);\n    elem.dispatchEvent( eventObj );\n}\n","\nexport const fieldsStringSelector = 'input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"hidden\"]), select, textarea'\n","\nexport const finalizeFieldPromise = obj => {\n    if( obj.result ){\n        return Promise.resolve();\n    }\n    return Promise.reject(obj.errors);\n}\n","\nexport const finalizeFormPromise = obj => {\n    if( obj.result ){\n        return Promise.resolve(obj.fields);\n    }\n    return Promise.reject(obj.fields);\n}\n","\nimport { getSplitChar } from './getSplitChar';\n\nconst formatMap = {\n    'YYYY-MM-DD': function(dateArray){\n        return dateArray;\n    },\n    'MM-DD-YYYY': function(dateArray){\n        return [dateArray[2], dateArray[0], dateArray[1]];\n    },\n    'DD-MM-YYYY': function(dateArray){\n        return dateArray.reverse();\n    }\n};\n\nexport const getDateAsNumber = ( dateString, dateFormat ) => {\n    dateFormat = dateFormat || 'YYYY-MM-DD';\n    const splitChar = getSplitChar(dateString);\n\n    if( dateFormat.indexOf(splitChar) < 0 ){\n        return;\n    }\n\n    dateFormat = dateFormat.replace(/[^YMD]/g, '-');\n    dateString = dateString.split(splitChar);\n    dateString = formatMap[dateFormat](dateString).join('');\n    \n    return dateString;\n}\n","\nexport const getSplitChar = string => {\n    // MATCH ANY NON-DIGIT CHAR\n    const separator = string.match(/\\D/);\n    return (separator && separator.length > 0) ? separator[0] : null;\n}\n","\nexport const getUniqueFields = nodeList => {\n\n    let currentFieldName = '',\n        currentFieldType = '';\n\n    return Array.from( nodeList ).filter(fieldEl => {\n        const name = fieldEl.name,\n              type = fieldEl.type;\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false;\n        }\n        \n        if( !fieldEl.matches('[data-required-from]') ){\n            currentFieldName = name;\n            currentFieldType = type;\n        }\n        return true;\n    });\n    \n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const mergeValidateFieldDefault = obj => {\n    return mergeObjects({}, { result: false, fieldEl: null }, obj);\n}\n","\nexport const isFieldForChangeEvent = fieldEl => {\n    return fieldEl.matches('select, [type=\"radio\"], [type=\"checkbox\"], [type=\"file\"]');\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const runFunctionsSequence = ( { functionsList = [], data = {}, stopConditionFn = () => false } = {} ) => {\n    return functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1]);\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res);\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result);\n                    return res;\n                });\n        });\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList);\n}\n","\nexport const serializeObject = obj => {\n    var objToString = (\n            (obj && typeof obj === 'object' && obj.constructor === Object) ? \n            Object.keys(obj)\n                .reduce((a,k) => {\n                    a.push(k+'='+encodeURIComponent(obj[k]));\n                    return a\n                },[]).join('&') : \n            obj\n    );\n    return objToString;\n}\n","\nexport const toCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase(); });\n}\n","\nimport { addClass, checkDirtyField } from './helpers';\n\nexport const defaultCallbacksInOptions = {\n    fieldOptions: {\n\n        beforeValidation: function beforeValidationDefault ( fieldObj ) {\n\n            const fieldOptions = this.options.fieldOptions;\n\n            checkDirtyField( fieldObj.fieldEl, fieldOptions );\n            if( !fieldOptions.skipUIfeedback ){\n                addClass( fieldObj.fieldEl.closest( fieldOptions.questionContainer ), fieldOptions.cssClasses.pending );\n            }\n\n        }\n\n    },\n    formOptions: {\n\n        getFormData: function getFormDataDefault ( filteredFields ) {\n\n            const formData = {},\n                  formEl = this.formEl;\n\n            filteredFields.forEach(fieldEl => {\n                const isCheckbox = fieldEl.type === 'checkbox',\n                      isRadio = fieldEl.type === 'radio',\n                      isSelect = fieldEl.matches('select'),\n                      name = fieldEl.name;\n                let value = fieldEl.value;\n                                \n                if( isCheckbox ) {\n                    \n                    value = fieldEl.checked;\n                    let checkboxes = Array.from( formEl.querySelectorAll('[name=\"'+ name +'\"]') );\n                    if( checkboxes.length > 1 ){\n\n                        value = [];\n                        let checkedElems = checkboxes.filter(field => field.checked);\n                        checkedElems.forEach(fieldEl => {\n                            value.push( fieldEl.value );\n                        });\n\n                    }\n                        \n                } else if( isRadio ){\n                    \n                    const checkedRadio = formEl.querySelector('[name=\"'+ name +'\"]:checked');\n                    value = (checkedRadio === null ? null : checkedRadio.value);\n                    \n                } else if( isSelect ){\n\n                    const selectedOpts = Array.from( fieldEl.options ).filter(option => option.selected);\n                    if( selectedOpts.length > 1 ){\n\n                        value = [];\n                        selectedOpts.forEach(fieldEl => {\n                            value.push( fieldEl.value );\n                        });\n\n                    }\n                }\n\n                formData[ name ] = value;\n            });\n\n            return formData;\n\n        }\n\n    }\n}\n","\nimport { addClass } from './addClass';\nimport { isNodeList } from './isNodeList';\nimport { removeClass } from './removeClass';\n\nexport const checkDirtyField = ( fields, fieldOptions ) => {\n\n    fields = isNodeList(fields) ? Array.from( fields ) : [fields];\n    fields.forEach(fieldEl => {\n        if( fieldEl.type !== 'checkbox' && fieldEl.type !== 'radio' ){\n            const containerEl = fieldEl.closest( fieldOptions.questionContainer ) || fieldEl;\n            if( fieldEl.value ){\n                addClass( containerEl, fieldOptions.cssClasses.dirty );\n            } else {\n                removeClass( containerEl, fieldOptions.cssClasses.dirty );\n            }\n        }\n    });\n    \n}\n","\nimport { defaultCallbacksInOptions } from './optionsUtils';\n\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [defaultCallbacksInOptions.fieldOptions.beforeValidation],\n        cssClasses: {\n            dirty:              'is-dirty',\n            error:              'has-error',\n            errorEmpty:         'has-error-empty',\n            errorRule:          'has-error-rule',\n            pending:            'is-pending',\n            valid:              'is-valid'\n        },\n        focusOnRelated:         true,\n        handleFileUpload:       true,\n        onValidationCheckAll:   false,\n        preventPasteFields:     '[type=\"password\"], [data-equal-to]',\n        questionContainer:      '[data-formjs-question]',\n        skipUIfeedback:         false,\n        strictHtmlValidation:   true,\n        validateOnEvents:       'input change'\n    },\n\n    formOptions: {\n        ajaxOptions:            {\n            cache:              'no-store',\n            credentials:        'same-origin',\n            headers: {\n                                'Content-Type': 'application/json',\n                                'Accept':       'application/json'\n            },\n            method:             'POST',\n            mode:               'same-origin',\n            redirect:           'follow',\n            timeout:            0,\n            url:                location.href\n        },\n        ajaxSubmit:             true,\n        beforeSend:             [],\n        cssClasses: {\n            ajaxComplete:       'ajax-complete',\n            ajaxError:          'ajax-error',\n            ajaxPending:        'ajax-pending',\n            ajaxSuccess:        'ajax-success',\n            submit:             'is-submitting',\n            valid:              'is-valid'\n        },\n        getFormData:            defaultCallbacksInOptions.formOptions.getFormData,\n        handleSubmit:           true\n    }\n    \n}\n","\nimport { date }         from './validationRules/date';\nimport { email }        from './validationRules/email';\nimport { number }       from './validationRules/number';\n\nimport { checkbox }     from './validationRules/checkbox';\nimport { equalTo }      from './validationRules/equalTo';\nimport { exactLength }  from './validationRules/exactLength';\nimport { file }         from './validationRules/file';\nimport { length }       from './validationRules/length';\nimport { max }          from './validationRules/max';\nimport { maxlength }    from './validationRules/maxlength';\nimport { min }          from './validationRules/min';\nimport { minlength }    from './validationRules/minlength';\nimport { pattern }      from './validationRules/pattern';\nimport { radio }        from './validationRules/radio';\n\nexport const validationRules = {\n    date,\n    email,\n    number,\n\n    checkbox,\n    equalTo,\n    exactLength,\n    file,\n    length,\n    max,\n    maxlength,\n    min,\n    minlength,\n    pattern,\n    radio\n}\n","\n/*\n    DATE AS ISO 8601 DATE FORMAT:\n    YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n*/\n\nexport const date = function( string ){\n    return {\n        result: /^((((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13578]|1[02])[ \\/\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13456789]|1[012])[ \\/\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.]02[ \\/\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ \\/\\-.]02[ \\/\\-.]29))$/g.test( string )\n    };\n}\n","\n// https://regex101.com/r/cdlyJy/3\n\nexport const email = function( string ){\n    return {\n        result: /^[a-zA-Z_-]([\\w.-]?[a-zA-Z0-9])*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?){2,})+$/.test( string )\n    };\n}\n","\n/*\n    ALL NUMBERS ( INTEGERS AND FLOATING )\n    VALID NUMBERS: 123 | 123.456 | .123\n*/\n\nexport const number = function( string ){\n    return {\n        result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n    };\n}","\nimport { checks } from './checks';\n\nexport const checkbox = function( value, fieldEl ){\n    const dataChecksEl = fieldEl.closest('form').querySelector('[name=\"' + fieldEl.name + '\"][data-checks]');\n    return dataChecksEl ? checks(dataChecksEl) : { result: fieldEl.checked };\n}\n","\nexport const checks = function( fieldEl ){\n    const attrValue = JSON.parse( fieldEl.getAttribute('data-checks') ),\n          checkedElLength = fieldEl.closest('form').querySelectorAll('[name=\"' + fieldEl.name + '\"]:checked').length,\n          isMinOk = checkedElLength >= attrValue[0],\n          isMaxOk = checkedElLength <= attrValue[1],\n          obj = { result: isMinOk && isMaxOk };\n\n    if( !obj.result ){\n        obj.errors = { checks: true };\n        if( !isMinOk ){ obj.errors.minChecks = true; }\n        if( !isMaxOk ){ obj.errors.maxChecks = true; }\n    }\n\n    return obj;\n}\n","\nexport const equalTo = function( value, fieldEl ){\n    const checkFromEl = fieldEl.closest('form').querySelector( '[name=\"' + fieldEl.getAttribute('data-equal-to') + '\"]' );\n    return { result: value === checkFromEl.value };\n}\n","\nexport const exactLength = function( value, fieldEl ){\n    const valueLength = value.length,\n          exactLength = fieldEl.getAttribute('data-exact-length') * 1,\n          obj = { result: valueLength === exactLength };\n\n    if( !obj.result ){\n        obj.errors = {};\n        if( valueLength < exactLength ){ obj.errors.minlength = true; }\n        else { obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nexport const file = function( value, fieldEl ){\n    const maxFileSize = (fieldEl.getAttribute('data-max-file-size') || 0) * 1,\n          MIMEtype = fieldEl.accept ? new RegExp(fieldEl.accept.replace( '*', '[^\\\\/,]+' )) : null,\n          filesList = Array.from(fieldEl.files),\n          obj = { result: true };\n\n    filesList.forEach(file => {\n        const exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize,\n              isAcceptedFileType = MIMEtype !== null ? MIMEtype.test(file.type) : true;\n\n        if( exceedMaxFileSize || !isAcceptedFileType ){\n            obj.result = false;\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {};\n            }\n            if( exceedMaxFileSize ){ obj.errors.maxFileSize = true; }\n            if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true; }\n\n        }\n    });\n\n    return obj;\n}\n","\nexport const length = function( value, fieldEl ){\n    const valueL = value.length,\n          attrValue = JSON.parse( fieldEl.getAttribute('data-length') ),\n          isMinlengthOk = valueL >= attrValue[0],\n          isMaxlengthOk = valueL <= attrValue[1],\n          obj = { result: isMinlengthOk && isMaxlengthOk };\n\n    if( !obj.result ){\n        obj.errors = {};\n        if( !isMinlengthOk ){ obj.errors.minlength = true; }\n        if( !isMaxlengthOk ){ obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const max = function( value, fieldEl ){\n    let maxVal = fieldEl.max;\n    const dateFormat = fieldEl.getAttribute('data-date-format');\n    \n    if( fieldEl.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat );\n        maxVal = maxVal.split('-').join('');\n    }\n\n    value = value * 1;\n    maxVal = maxVal * 1;\n    \n    return { result: value <= maxVal };\n}\n","\nexport const maxlength = function( value, fieldEl ){\n    return { result: value.length <= fieldEl.maxLength * 1 };\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const min = function( value, fieldEl ){\n    let minVal = fieldEl.min;\n    const dateFormat = fieldEl.getAttribute('data-date-format');\n    \n    if( fieldEl.type === 'date' || fieldEl.getAttribute('data-date-format') ){\n        value = getDateAsNumber( value, dateFormat );\n        minVal = minVal.split('-').join('');\n    }\n\n    value = value * 1;\n    minVal = minVal * 1;\n    \n    return { result: value >= minVal };\n}\n","\nexport const minlength = function( value, fieldEl ){\n    return { result: value.length >= fieldEl.minLength * 1 };\n}\n","\nexport const pattern = function( value, fieldEl ){\n    return { result: new RegExp(fieldEl.pattern).test(value) };\n}\n","\nexport const radio = function( value, fieldEl ){\n    const fieldChecked = fieldEl.closest('form').querySelector( '[name=\"'+ fieldEl.name +'\"]:checked' ),\n          isValid = fieldChecked !== null && fieldChecked.value.trim().length > 0;\n\n    return { result: isValid };\n}\n","\nexport const dataTypeNumber = function( event ){\n\n    const fieldEl = event.target;\n    \n    if( fieldEl.matches('[data-type=\"number\"]') ){\n        let fieldValue = fieldEl.value;\n        const hasInvalidChars = /[^\\d.,+\\-]/.test(fieldValue);\n        \n        if( hasInvalidChars ){\n            event.stopImmediatePropagation();\n            let valueReplaced = fieldValue.replace(/[^\\d.,+\\-]/g, '');\n            fieldEl.value = valueReplaced;\n        }\n    }\n\n}\n","\nexport const keypressMaxlength = function( event ){\n\n    const fieldEl = event.target;\n    \n    if( fieldEl.matches( '[maxlength]' ) ){\n        const maxLength = fieldEl.maxLength * 1,\n              keyPressed = event.which || event.keyCode,\n              allowedKeys = [8, 37, 38, 39, 46];\n\n        if( fieldEl.value.length >= maxLength && allowedKeys.indexOf(keyPressed) === -1 ){\n            return false;\n        }\n    }\n\n}\n","\nexport const pastePrevent = function( event ){\n\n    const fieldEl = event.target;\n    const fieldOptions = fieldEl.closest('form').formjs.options.fieldOptions;\n\n    if( fieldEl.matches( fieldOptions.preventPasteFields ) ){     \n        event.preventDefault();\n    }\n\n}\n","\nimport { addClass, mergeObjects, removeClass, serializeObject } from './helpers';\n\nconst getFetchMethod = (response, options) => {\n    const accept = options.headers.get('Accept'),\n          contentType = response.headers.get('Content-Type'),\n          headerOpt = accept || contentType || '';\n\n    if( headerOpt.indexOf('application/json') > -1 || headerOpt === '' ){\n        return 'json';\n    } else if( headerOpt.indexOf('text/') > -1 ){\n        return 'text';\n    } else {\n        return 'blob';\n    }\n};\n\nexport function ajaxCall( formEl, formDataObj, options ){\n\n    let timeoutTimer;\n    const ajaxOptions = mergeObjects( {}, options.formOptions.ajaxOptions ),\n          isMultipart = ajaxOptions.headers['Content-Type'] === 'multipart/form-data';\n\n    ajaxOptions.body = formDataObj;\n    \n    // POST A FormData OBJECT ( multipart )\n    if( isMultipart && options.fieldOptions.handleFileUpload ){\n        let formDataMultipart = new FormData();\n        \n        for(let key in ajaxOptions.body){\n            formDataMultipart.append( key, ajaxOptions.body[key] );\n        }\n        \n        Array.from( formEl.querySelectorAll('[type=\"file\"]') ).forEach(field => {\n            Array.from(field.files).forEach((file, idx) => {\n                const name = field.name+'['+ idx +']';\n                formDataMultipart.append( name, file, file.name );\n            });\n        });\n        \n        ajaxOptions.body = formDataMultipart;\n    }\n\n    if( ajaxOptions.method === 'GET' ){\n\n        // FETCH WITH \"GET\" METHOD CAN'T HAVE \"body\". SO IT IS APPENDED TO THE URL\n        ajaxOptions.url += ( /\\?/.test(ajaxOptions.url) ? '&' : '?' ) + serializeObject( ajaxOptions.body );\n        delete ajaxOptions.body;\n\n    } else {\n\n        if( ajaxOptions.headers['Content-Type'].indexOf('application/x-www-form-urlencoded') > -1 ){\n            // POST A NORMAL FORM\n            ajaxOptions.body = serializeObject( ajaxOptions.body );\n        } else if( !isMultipart ){\n            // POST A JSON STRING\n            ajaxOptions.body = JSON.stringify(ajaxOptions.body);\n        }\n\n    }\n\n    ajaxOptions.headers = new Headers( ajaxOptions.headers );\n\n    if ( ajaxOptions.timeout > 0 ) {\n        const controller = new AbortController(),\n              signal = controller.signal;\n\n        ajaxOptions.signal = signal;\n        timeoutTimer = window.setTimeout(() => {\n            controller.abort();\n        }, ajaxOptions.timeout);\n    }\n\n    return fetch(ajaxOptions.url, ajaxOptions)\n        .then(response => {\n            if( !response.ok ){\n                return Promise.reject(response);\n            }\n            const fetchMethod = getFetchMethod(response, ajaxOptions);\n            return response[fetchMethod]();\n        })\n        .then(data => {\n            addClass( formEl, options.formOptions.cssClasses.ajaxSuccess );\n            return data;\n        })\n        .catch(error => {\n            addClass( formEl, options.formOptions.cssClasses.ajaxError );\n            return Promise.reject(error);\n        })\n        .finally(() => {\n            if( timeoutTimer ){\n                window.clearTimeout( timeoutTimer );\n            }\n            removeClass( formEl, options.formOptions.cssClasses.submit + ' ' + options.formOptions.cssClasses.ajaxPending );\n            addClass( formEl, options.formOptions.cssClasses.ajaxComplete );\n            formEl.querySelector('[type=\"submit\"]').disabled = false;\n        });\n\n}\n","\nimport { addClass, customEvents, dispatchCustomEvent, removeClass, runFunctionsSequence } from '../helpers';\nimport { ajaxCall } from '../ajaxCall';\n\nexport function submit( event ){\n\n    const formEl = event.target,\n          instance = formEl.formjs,\n          options = instance.options,\n          formCssClasses = options.formOptions.cssClasses,\n          isAjaxForm = options.formOptions.ajaxSubmit,\n          btnEl = formEl.querySelector('[type=\"submit\"]'),\n          eventPreventDefault = ( enableBtn = true ) => {\n              if( btnEl && enableBtn ){ btnEl.disabled = false; }\n              if( event ){ event.preventDefault(); }\n          };\n\n    if( isAjaxForm ){\n        eventPreventDefault(false);\n    }\n\n    if( btnEl ){\n        if( btnEl.disabled ){\n            eventPreventDefault(false);\n            return false;\n        }\n        btnEl.disabled = true;\n    }\n\n    removeClass( formEl, (formCssClasses.ajaxComplete + ' ' + formCssClasses.ajaxError + ' ' + formCssClasses.ajaxSuccess) );\n    addClass( formEl, formCssClasses.submit );\n\n    instance.validateForm()\n        .then(fields => {\n\n            const beforeSendData = {\n                stopExecution: false,\n                formData: isAjaxForm ? instance.getFormData() : null\n            };\n\n            const rfsObject = {\n                  functionsList: options.formOptions.beforeSend,\n                  data: beforeSendData,\n                  stopConditionFn: function(data){ return data.stopExecution; }\n            };\n            return runFunctionsSequence(rfsObject);\n\n        }).then(dataList => {\n\n            if( dataList.filter(data => data.stopExecution).length > 0 ){\n                eventPreventDefault();\n                return false;\n            }\n            \n            if( isAjaxForm ){\n                const formData = dataList.pop().formData;\n                addClass( formEl, formCssClasses.ajaxPending );\n                dispatchCustomEvent( formEl, customEvents.form.submit, { detail: ajaxCall( formEl, formData, options ) } );\n            }\n\n        })\n        .catch(fields => {\n            eventPreventDefault();\n            removeClass( formEl, formCssClasses.submit );\n        });\n    \n}\n","\nimport { fieldsStringSelector, mergeValidateFieldDefault, isFieldForChangeEvent } from '../helpers';\n\nexport const validation = function( event ){\n\n    const isChangeEvent = event.type === 'change',\n          fieldEl = event.target,\n          self = fieldEl.closest('form').formjs;\n\n    if( fieldEl.matches( fieldsStringSelector ) ){\n        const isFieldForChangeEventBoolean = isFieldForChangeEvent(fieldEl);\n        \n        if(\n            (isFieldForChangeEventBoolean && isChangeEvent) ||\n            (!isFieldForChangeEventBoolean && !isChangeEvent)\n        ){\n            \n            return self.validateField( fieldEl )\n                .then(() => {\n                    const type = fieldEl.type,\n                          realtedFieldEqualTo = fieldEl.closest('form').querySelector('[data-equal-to=\"'+ fieldEl.name +'\"]');\n\n                    if(\n                        // FIELD IS ( required OR data-validate-if-filled ) AND RELATED FIELD data-equal-to HAS A VALUE\n                        (fieldEl.required || fieldEl.matches('[data-validate-if-filled]')) && \n                        !(type === 'checkbox' || type === 'radio') && \n                        realtedFieldEqualTo && realtedFieldEqualTo.value.trim() !== ''\n                    ){\n                        self.validateField( realtedFieldEqualTo ).catch(errors => {});\n                    }\n\n                    return mergeValidateFieldDefault({ result: true, fieldEl });\n                })\n                .catch(errors => mergeValidateFieldDefault({fieldEl, errors}));\n\n        }\n    }\n    \n}\n","\nimport { addClass, fieldsStringSelector, removeClass } from '../helpers';\n\nexport const validationEnd = function( event ){\n\n    const fieldsArray = event.detail.fieldEl ? [event.detail] : event.detail.fields,\n          options = fieldsArray[0].fieldEl.closest('form').formjs.options.fieldOptions;\n\n    fieldsArray.forEach(obj => {\n        const fieldEl = obj.fieldEl;\n        if( fieldEl.matches( fieldsStringSelector ) ){\n            const containerEl = fieldEl.closest( options.questionContainer ),\n                isReqFrom = fieldEl.matches('[data-required-from]'),\n                reqMoreEl = document.querySelector( fieldEl.getAttribute('data-required-from') );\n\n            if( containerEl !== null ){\n                removeClass( containerEl, options.cssClasses.pending );\n            }\n\n            if( containerEl !== null && !options.skipUIfeedback ){\n\n                if( obj.result ){\n\n                    if( !isReqFrom || (isReqFrom && reqMoreEl.checked) ){\n                        // IF FIELD IS VALID\n                        const errorClasses = options.cssClasses.error + ' ' + options.cssClasses.errorEmpty + ' ' + options.cssClasses.errorRule;\n                        removeClass( containerEl, errorClasses );\n                        addClass( containerEl, options.cssClasses.valid );\n                    }\n\n                } else {\n\n                    // IF FIELD IS NOT VALID\n                    let extraErrorClass = options.cssClasses.errorRule;\n\n                    // HANDLE CASE OF FIELD data-checks\n                    const isChecks = fieldEl.matches('[data-checks]'),\n                          checkedElLength = (isChecks ? containerEl.querySelectorAll('[name=\"' + fieldEl.name + '\"]:checked').length : 0);\n\n                    if( (!isChecks && (obj.errors && obj.errors.empty)) || (isChecks && checkedElLength === 0) ){\n                        extraErrorClass = options.cssClasses.errorEmpty;\n                    }\n\n                    const errorClasses = options.cssClasses.error + ' ' + extraErrorClass,\n                          errorClassToRemove = options.cssClasses.errorEmpty + ' ' + options.cssClasses.errorRule;\n                    removeClass( containerEl, options.cssClasses.valid + ' ' + errorClassToRemove );\n                    addClass( containerEl, errorClasses );\n\n                }\n            }\n        }\n    });\n\n}\n","\nimport { getFilledFields, isFieldForChangeEvent } from './helpers';\nimport { validation } from './listenerCallbacks';\n\nexport const checkFilledFields = formEl => {\n\n    const formFields = getFilledFields( formEl );\n    // VALIDATE ALL FILLED FIELDS\n    return Promise.all( formFields.map(fieldEl => {\n\n        const isFieldForChangeEventBoolean = isFieldForChangeEvent(fieldEl);\n        const fakeEventObj = { target: fieldEl, type: (isFieldForChangeEventBoolean ? 'change': '') };\n        return validation( fakeEventObj );\n\n    }) )\n    .then(fields => fields)\n    .catch(fields => fields);\n\n}\n","\nimport { fieldsStringSelector } from './fieldsStringSelector';\nimport { getUniqueFields } from './getUniqueFields';\n\nexport const getFilledFields = formEl => {\n    return getUniqueFields( formEl.querySelectorAll(fieldsStringSelector) )\n    .map(fieldEl => {\n\n        const name = fieldEl.name,\n              type = fieldEl.type,\n              isCheckboxOrRadio = (type === 'checkbox' || type === 'radio'),\n              fieldChecked = formEl.querySelector('[name=\"' + name + '\"]:checked'),\n              isReqFrom = fieldEl.matches('[data-required-from]'),\n              reqMoreEl = (isReqFrom ? formEl.querySelector(fieldEl.getAttribute('data-required-from')) : null);\n\n        return (\n            isCheckboxOrRadio ? (fieldChecked || null) :\n            (isReqFrom && reqMoreEl.checked) || (!isReqFrom && fieldEl.value) ? fieldEl : null\n        );\n\n    })\n    .filter(fieldEl => fieldEl !== null);\n}\n","\nimport { mergeValidateFieldDefault, isDOMNode, runFunctionsSequence } from './helpers';\nimport { isValid } from './isValid';\n\nexport function checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    if( !isDOMNode(fieldEl) ){\n        const obj = mergeValidateFieldDefault({fieldEl});\n        return Promise.resolve(obj);\n    }\n\n    const formEl = fieldEl.closest('form'),\n          isValidValue = fieldEl.value.trim().length > 0;\n\n    // HANDLE FIELD data-required-from WHEN CHANGING ITS RELATED RADIO\n    if( fieldEl.type === 'radio' ){\n        const checkedEl = fieldEl.checked ? fieldEl : formEl.querySelector('[name=\"'+ fieldEl.name +'\"]:checked'),\n              reqMoreIsChecked = checkedEl && checkedEl.matches('[data-require-more]'),\n              findReqMoreEl = reqMoreIsChecked ? checkedEl : formEl.querySelector('[data-require-more][name=\"'+ fieldEl.name +'\"]'),\n              findReqFromEl = findReqMoreEl ? formEl.querySelector('[data-required-from=\"#'+ findReqMoreEl.id +'\"]') : null;\n        \n        if( checkedEl && findReqFromEl ){\n            findReqFromEl.required = findReqMoreEl.required && findReqMoreEl.checked;\n            if( !reqMoreIsChecked ){\n                findReqFromEl.value = '';\n            } else if( fieldOptions.focusOnRelated ) {\n                findReqFromEl.focus();\n            }\n        }\n    }\n\n    // HANDLE FIELD data-require-more & data-required-from WHEN *-from IT'S FILLED\n    if( fieldEl.matches('[data-required-from]') && isValidValue ){\n        const reqMoreEl = formEl.querySelector( fieldEl.getAttribute('data-required-from') );\n        reqMoreEl.checked = true;\n        fieldEl.required = reqMoreEl.required;\n    }\n\n    const needsValidation = fieldEl.required || (fieldEl.matches('[data-validate-if-filled]') && isValidValue);\n\n    return runFunctionsSequence({\n            functionsList: fieldOptions.beforeValidation,\n            data: {fieldEl}\n        })\n        .then(data => {\n            const dataObj = data.pop();\n            return new Promise(resolve => {\n                if( !needsValidation ){\n                    dataObj.result = true;\n                }\n                resolve( needsValidation ? isValid(fieldEl, validationRules, validationErrors) : dataObj );\n            });\n        });\n\n}\n","\nimport { mergeValidateFieldDefault, mergeObjects, toCamelCase } from './helpers';\n\nexport function isValid( fieldEl, validationRules, validationErrors ){\n\n    const fieldValue = fieldEl.value,\n          obj = mergeValidateFieldDefault({result: fieldValue.trim().length > 0, fieldEl}),\n          isRadioOrCheckbox = /^(radio|checkbox)$/.test(fieldEl.type),\n          hasSelectedInput = fieldEl.closest('form').querySelectorAll('[name=\"'+ fieldEl.name +'\"]:checked').length > 0;\n\n    if( (!isRadioOrCheckbox && !obj.result) || (isRadioOrCheckbox && !hasSelectedInput) ){\n        obj.result = false;\n        obj.errors = { empty: true };\n        return Promise.resolve(obj);\n    }\n\n    // COLLECT VALIDATION METHOD NAMES ( USED TO RUN VALIDATIONS AND GET ERRORS )\n    const validationMethods = Array.from(fieldEl.attributes).reduce((accList, attr) => {\n        const attrName = toCamelCase( attr.name.replace('data-', '') ),\n              attrValue = toCamelCase( attr.value ),\n              isAttrValueWithFn = (attrName === 'type' || attrName === 'subtype') && validationRules[attrValue],\n              isAttrNameWithFn = validationRules[attrName];\n\n        if( isAttrValueWithFn || isAttrNameWithFn ){\n            accList.push( isAttrValueWithFn ? attrValue : attrName );\n        }\n        return accList;\n    }, []);\n\n    return new Promise(resolve => {\n\n        // RUN VALIDATIONS\n        const validationsResult = validationMethods.reduce((accPromise, methodName) => {\n            return accPromise.then(accObj => {\n                return new Promise(resolveVal => {\n                    // RUN VALIDATION INSIDE A PROMISE IS USEFUL FOR ASYNC VALIDATIONS\n                    resolveVal( validationRules[methodName](fieldValue, fieldEl) );\n                }).then(valObj => {\n                    // ADD CUSTOM ERROR-KEY FOR EACH VALIDATION RULE\n                    if( !valObj.result ){\n                        const errorObj = {};\n                        if( typeof valObj.errors === 'undefined' || typeof valObj.errors[methodName] === 'undefined' ){\n                            errorObj[methodName] = true;\n                        }\n                        valObj.errors = mergeObjects({}, valObj.errors, errorObj);\n                    }\n                    valObj = valObj.result ? {} : valObj;\n                    return mergeObjects(accObj, valObj);\n                });\n            });\n        }, Promise.resolve(obj));\n        resolve(validationsResult);\n\n    }).then(data => {\n\n        // GET ERRORS\n        if( !data.result ){\n            data.errors = validationMethods.reduce((accObj, methodName) => {\n                const errors = (validationErrors[methodName] && validationErrors[methodName](fieldValue, fieldEl)) || {};\n                return mergeObjects(accObj, errors);\n            }, data.errors);\n        }\n        return data;\n\n    });\n\n}\n","\nimport { fieldsStringSelector, getUniqueFields, mergeValidateFieldDefault, mergeValidateFormDefault, mergeObjects } from './helpers';\nimport { checkFieldValidity } from './checkFieldValidity';\n\nexport function checkFormValidity( formEl, fieldOptions, validationRules, validationErrors, fieldToSkip = null ){\n\n    fieldOptions = mergeObjects( {}, fieldOptions, {focusOnRelated: false} );\n    const fieldsList = getUniqueFields( formEl.querySelectorAll(fieldsStringSelector) );\n\n    return Promise.all( fieldsList.map(fieldEl => {\n\n        if( fieldToSkip && fieldEl === fieldToSkip ){\n            const obj = mergeValidateFieldDefault({fieldEl, result: true});\n            return Promise.resolve(obj);\n        }\n        return checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors );\n\n    }) ).then(fields => {\n\n        const areAllFieldsValid = fields.filter(fieldObj => !fieldObj.result).length === 0;\n        return mergeValidateFormDefault({result: areAllFieldsValid, fields});\n\n    });\n\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const mergeValidateFormDefault = obj => {\n    return mergeObjects({}, { result: true, fields: [] }, obj);\n}\n","\nimport { version }              from './modules/version';\nimport { checkFormEl, customEvents, dispatchCustomEvent, excludeSelector, finalizeFieldPromise, finalizeFormPromise, isNodeList, mergeObjects, removeClass } from './modules/helpers';\nimport { options }              from './modules/options';\nimport { validationRules }      from './modules/validationRules';\nimport { validationEnd }        from './modules/listenerCallbacks';\nimport { formStartup }          from './modules/formStartup';\nimport { destroy }              from './modules/destroy';\nimport { checkFilledFields }    from './modules/checkFilledFields';\nimport { checkFieldValidity }   from './modules/checkFieldValidity';\nimport { checkFormValidity }    from './modules/checkFormValidity';\n\nclass Form {\n\n    constructor( formEl, optionsObj ){\n        const argsL = arguments.length,\n              checkFormElem = checkFormEl(formEl);\n\n        if( argsL === 0 || (argsL > 0 && !formEl) ){\n            throw new Error('First argument \"formEl\" is missing or falsy!');\n        }\n        if( isNodeList(formEl) ){\n            throw new Error('First argument \"formEl\" must be a single DOM node or a form CSS selector, not a NodeList!');\n        }\n        if( !checkFormElem.result ){\n            throw new Error('First argument \"formEl\" is not a DOM node nor a form CSS selector!');\n        }\n\n        this.formEl = checkFormElem.element;\n        this.formEl.formjs = this;\n        this.options = mergeObjects({}, Form.prototype.options, optionsObj);\n\n        // BINDING CONTEXT FOR FUTURE EXECUTION\n        const cbList = [\n            // IN fieldOptions\n            'beforeValidation',\n            // IN formOptions\n            'beforeSend',\n            'getFormData'\n        ];\n        cbList.forEach(cbName => {\n            const optionType = this.options.formOptions[cbName] ? 'formOptions' : 'fieldOptions';\n            let cbOpt = this.options[optionType][cbName];\n\n            if( cbOpt ){\n                this.options[optionType][cbName] = ( Array.isArray(cbOpt) ? cbOpt.map(cbFn => cbFn.bind(this)) : cbOpt.bind(this) );\n            }\n        });\n\n        formStartup( this.formEl, this.options );\n    }\n\n    destroy(){\n        destroy(this.formEl, this.options);\n    }\n    \n    getFormData(){\n        const formFieldsEl = this.formEl.querySelectorAll('input, select, textarea'),\n              filteredFields = Array.from( formFieldsEl ).filter( elem => elem.matches(excludeSelector) );\n        return this.options.formOptions.getFormData(filteredFields);\n    }\n\n    validateField( fieldEl, fieldOptions ){\n        fieldEl = typeof fieldEl === 'string' ? this.formEl.querySelector(fieldEl) : fieldEl;\n        fieldOptions = mergeObjects({}, this.options.fieldOptions, fieldOptions);\n        const formEl = this.formEl;\n        const skipUIfeedback = this.options.fieldOptions.skipUIfeedback;\n        return checkFieldValidity(fieldEl, fieldOptions, this.validationRules, this.validationErrors)\n            .then(obj => {\n                return new Promise(resolve => {\n                    if( obj.fieldEl ){\n                        dispatchCustomEvent( obj.fieldEl, customEvents.field.validation, { bubbles: false, detail: obj } );\n                        dispatchCustomEvent( formEl, customEvents.field.validation, { detail: obj } );\n                        if( fieldOptions.onValidationCheckAll && obj.result ){\n                            // FORCE skipUIfeedback TO true\n                            fieldOptions.skipUIfeedback = true;\n                            resolve(\n                                checkFormValidity( formEl, fieldOptions, this.validationRules, this.validationErrors, obj.fieldEl )\n                                    .then(dataForm => {\n                                        const clMethodName = dataForm.result ? 'add' : 'remove';\n                                        formEl.classList[clMethodName]( this.options.formOptions.cssClasses.valid );\n                                        dispatchCustomEvent( formEl, customEvents.form.validation, { detail: dataForm } );\n                                        // RESTORE skipUIfeedback TO THE ORIGINAL VALUE\n                                        fieldOptions.skipUIfeedback = skipUIfeedback;\n                                        return obj;\n                                    })\n                            );\n                        } else if( !obj.result ){\n                            removeClass( formEl, this.options.formOptions.cssClasses.valid );\n                        }\n                    }\n                    resolve( obj );\n                });\n            })\n            .then(finalizeFieldPromise);\n    }\n\n    validateFilledFields(){\n        return checkFilledFields(this.formEl);\n    }\n\n    validateForm( fieldOptions ){\n        fieldOptions = mergeObjects({}, this.options.fieldOptions, fieldOptions);\n        const formEl = this.formEl;\n        return checkFormValidity(formEl, fieldOptions, this.validationRules, this.validationErrors)\n            .then(data => {\n                const clMethodName = data.result ? 'add' : 'remove';\n                formEl.classList[clMethodName]( this.options.formOptions.cssClasses.valid );\n                validationEnd( {detail:data} );\n                dispatchCustomEvent( formEl, customEvents.form.validation, { detail: data } );\n                return data;\n            })\n            .then(finalizeFormPromise);\n    }\n    \n    static addValidationErrors( errorsObj ){\n        Form.prototype.validationErrors = mergeObjects({}, Form.prototype.validationErrors, errorsObj);\n    }\n\n    static addValidationRules( rulesObj ){\n        Form.prototype.validationRules = mergeObjects({}, Form.prototype.validationRules, rulesObj);\n    }\n    \n    static setOptions( optionsObj ){\n        Form.prototype.options = mergeObjects({}, Form.prototype.options, optionsObj);\n    }\n\n}\n\nForm.prototype.options = options;\nForm.prototype.validationErrors = {};\nForm.prototype.validationRules = validationRules;\nForm.prototype.version = version;\n\nexport default Form;\n","\nimport { isDOMNode } from './isDOMNode';\n\nexport const checkFormEl = formEl => {\n    let isString = typeof formEl,\n        isValidNodeSelector = isString === 'string' && isDOMNode(document.querySelector(formEl)),\n        isFormSelector = isValidNodeSelector && document.querySelector(formEl).tagName.toLowerCase() === 'form',\n        obj = {\n            result: isDOMNode(formEl) || isFormSelector,\n            element: (isString === 'string' ? document.querySelector(formEl) : formEl)\n        };\n\n    return obj;\n}\n","\nimport { customEvents } from './helpers';\nimport { keypressMaxlength, dataTypeNumber, pastePrevent, submit, validation, validationEnd } from './listenerCallbacks';\n\nexport function formStartup( formEl, options ){\n\n    formEl.noValidate = true;\n\n    const fieldOptions = options.fieldOptions,\n          formOptions = options.formOptions;\n        \n    // VALIDATION WITH ATTRIBUTES LIKE HTML ONES ( ALSO FOR BUG FIXING, EG: maxlength IN ANDROID )\n    if( fieldOptions.strictHtmlValidation ){\n        \n        // maxlength\n        // MAXLENGTH IS BUGGY IN ANDROID BROWSERS\n        formEl.addEventListener('keypress', keypressMaxlength, false);\n\n        // data-type=\"number\"\n        // SINCE VALIDATING type=\"number\" WITH NON NUMERIC CHARS WILL RETURN EMPTY STRING IN SOME BROWSERS ( EG: FIREFOX )\n        formEl.addEventListener('input', dataTypeNumber, false);\n        \n    }\n    \n    if( fieldOptions.preventPasteFields && formEl.querySelectorAll( fieldOptions.preventPasteFields ).length ){\n        // INIT EVENT LISTENER FOR \"PASTE\" EVENT TO PREVENT IT ON SPECIFIED FIELDS\n        formEl.addEventListener('paste', pastePrevent, false);\n    }\n\n    // INIT EVENTS LISTENER ( AS IN fieldOptions )\n    fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n        const useCapturing = eventName === 'blur' ? true : false;\n        formEl.addEventListener(eventName, validation, useCapturing);\n    });\n\n    formEl.addEventListener(customEvents.field.validation, validationEnd, false);\n    \n    // HANDLE FORM SUBMIT\n    if( formOptions.handleSubmit ){\n        // INIT FORM SUBMIT ( DEFAULT AND AJAX )\n        formEl.addEventListener('submit', submit);\n\n        if( formOptions.ajaxSubmit ){\n            if( formEl.getAttribute('enctype') ){\n                formOptions.ajaxOptions.headers['Content-Type'] = formEl.getAttribute('enctype');\n            }\n\n            if( formEl.getAttribute('method') ){\n                formOptions.ajaxOptions.method = formEl.getAttribute('method').toUpperCase();\n            }\n\n            if( formEl.getAttribute('action') ){\n                formOptions.ajaxOptions.url = formEl.getAttribute('action');\n            }\n        }\n    }\n\n}\n","\nimport { customEvents } from './helpers';\nimport { keypressMaxlength, dataTypeNumber, pastePrevent, submit, validation, validationEnd } from './listenerCallbacks';\n\n\nexport function destroy( formEl, options ){\n\n    if( options.fieldOptions.strictHtmlValidation ){\n        formEl.removeEventListener('keypress', keypressMaxlength, false);\n        formEl.removeEventListener('input', dataTypeNumber, false);\n    }\n\n    if( options.fieldOptions.preventPasteFields ){\n        formEl.removeEventListener('paste', pastePrevent, false);\n    }\n\n    if( options.formOptions.handleSubmit ){\n        formEl.removeEventListener('submit', submit);\n    }\n\n    options.fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n        const useCapturing = eventName === 'blur' ? true : false;\n        formEl.removeEventListener(eventName, validation, useCapturing);\n    });\n\n    formEl.removeEventListener(customEvents.field.validation, validationEnd, false);\n\n    delete formEl.formjs;\n    \n}\n","\nexport const excludeSelector = ':not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"file\"]):not([data-exclude-data])'\n"],"names":["addClass","element","cssClasses","split","forEach","className","classList","add","isNodeList","nodeList","NodeList","prototype","isPrototypeOf","removeClass","remove","isDOMNode","node","Element","customEvents","validation","submit","isPlainObject","object","Object","toString","call","mergeObjects","out","Array","from","arguments","slice","filter","arg","keys","key","isArray","concat","push","dispatchCustomEvent","elem","eventName","eventOptions","bubbles","eventObj","CustomEvent","dispatchEvent","fieldsStringSelector","finalizeFieldPromise","obj","result","Promise","resolve","reject","errors","finalizeFormPromise","fields","formatMap","YYYY-MM-DD","dateArray","MM-DD-YYYY","DD-MM-YYYY","reverse","getDateAsNumber","dateString","dateFormat","splitChar","string","separator","match","length","getSplitChar","indexOf","replace","join","getUniqueFields","currentFieldName","currentFieldType","fieldEl","name","type","matches","mergeValidateFieldDefault","isFieldForChangeEvent","runFunctionsSequence","functionsList","data","stopConditionFn","reduce","acc","promiseFn","then","res","dataNew","dataList","serializeObject","constructor","a","k","encodeURIComponent","toCamelCase","all","letter","toUpperCase","defaultCallbacksInOptions","fieldOptions","beforeValidation","fieldObj","this","options","containerEl","closest","questionContainer","value","dirty","checkDirtyField","skipUIfeedback","pending","formOptions","getFormData","filteredFields","formData","formEl","isCheckbox","isRadio","isSelect","checked","checkboxes","querySelectorAll","field","checkedRadio","querySelector","selectedOpts","option","selected","error","errorEmpty","errorRule","valid","focusOnRelated","handleFileUpload","onValidationCheckAll","preventPasteFields","strictHtmlValidation","validateOnEvents","ajaxOptions","cache","credentials","headers","Content-Type","Accept","method","mode","redirect","timeout","url","location","href","ajaxSubmit","beforeSend","ajaxComplete","ajaxError","ajaxPending","ajaxSuccess","handleSubmit","validationRules","date","test","email","number","checkbox","dataChecksEl","attrValue","JSON","parse","getAttribute","checkedElLength","isMinOk","isMaxOk","checks","minChecks","maxChecks","equalTo","exactLength","valueLength","minlength","maxlength","file","maxFileSize","MIMEtype","accept","RegExp","filesList","files","exceedMaxFileSize","size","isAcceptedFileType","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","max","maxVal","maxLength","min","minVal","minLength","pattern","radio","fieldChecked","trim","dataTypeNumber","event","target","fieldValue","stopImmediatePropagation","valueReplaced","keypressMaxlength","keyPressed","which","keyCode","allowedKeys","pastePrevent","formjs","preventDefault","ajaxCall","formDataObj","timeoutTimer","isMultipart","body","formDataMultipart","FormData","append","idx","stringify","Headers","controller","AbortController","signal","window","setTimeout","abort","fetch","response","ok","fetchMethod","get","contentType","headerOpt","getFetchMethod","catch","finally","clearTimeout","disabled","instance","formCssClasses","isAjaxForm","btnEl","eventPreventDefault","enableBtn","validateForm","beforeSendData","stopExecution","rfsObject","pop","detail","isChangeEvent","self","isFieldForChangeEventBoolean","validateField","realtedFieldEqualTo","required","validationEnd","fieldsArray","isReqFrom","reqMoreEl","document","errorClasses","extraErrorClass","isChecks","empty","errorClassToRemove","checkFilledFields","formFields","map","isCheckboxOrRadio","getFilledFields","checkFieldValidity","validationErrors","isValidValue","checkedEl","reqMoreIsChecked","findReqMoreEl","findReqFromEl","id","focus","needsValidation","dataObj","isRadioOrCheckbox","hasSelectedInput","validationMethods","attributes","accList","attr","attrName","isAttrValueWithFn","isAttrNameWithFn","accPromise","methodName","accObj","resolveVal","valObj","errorObj","isValid","checkFormValidity","fieldToSkip","fieldsList","areAllFieldsValid","Form","[object Object]","optionsObj","argsL","checkFormElem","isString","isFormSelector","tagName","toLowerCase","checkFormEl","Error","cbName","optionType","cbOpt","cbFn","bind","noValidate","addEventListener","useCapturing","formStartup","removeEventListener","destroy","formFieldsEl","dataForm","clMethodName","errorsObj","rulesObj","version"],"mappings":"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"}