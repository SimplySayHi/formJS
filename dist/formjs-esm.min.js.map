{"version":3,"file":"formjs-esm.min.js","sources":["../src/modules/helpers/addClass.js","../src/modules/helpers/isNodeList.js","../src/modules/helpers/removeClass.js","../src/modules/helpers/isDOMNode.js","../src/modules/helpers/customEvents.js","../src/modules/helpers/isPlainObject.js","../src/modules/helpers/mergeObjects.js","../src/modules/helpers/dispatchCustomEvent.js","../src/modules/helpers/fieldsStringSelector.js","../src/modules/helpers/finalizeFieldPromise.js","../src/modules/helpers/finalizeFieldsGroupPromise.js","../src/modules/helpers/finalizeFormPromise.js","../src/modules/helpers/getDateAsNumber.js","../src/modules/helpers/getSplitChar.js","../src/modules/helpers/getJSONobjectFromFieldAttribute.js","../src/modules/helpers/getUniqueFields.js","../src/modules/helpers/mergeValidateFieldDefault.js","../src/modules/helpers/isFieldForChangeEvent.js","../src/modules/helpers/runFunctionsSequence.js","../src/modules/helpers/serializeObject.js","../src/modules/helpers/toCamelCase.js","../src/modules/options.js","../src/modules/optionsUtils/beforeValidation.js","../src/modules/helpers/checkDirtyField.js","../src/modules/optionsUtils/getFormData.js","../src/modules/validationRules.js","../src/modules/validationRules/date.js","../src/modules/validationRules/email.js","../src/modules/validationRules/number.js","../src/modules/validationRules/checkbox.js","../src/modules/validationRules/checks.js","../src/modules/validationRules/equalTo.js","../src/modules/validationRules/exactLength.js","../src/modules/validationRules/file.js","../src/modules/validationRules/length.js","../src/modules/validationRules/max.js","../src/modules/validationRules/maxlength.js","../src/modules/validationRules/min.js","../src/modules/validationRules/minlength.js","../src/modules/validationRules/pattern.js","../src/modules/validationRules/radio.js","../src/modules/listenerCallbacks/dataTypeNumber.js","../src/modules/listenerCallbacks/formValidationEnd.js","../src/modules/listenerCallbacks/keypressMaxlength.js","../src/modules/listenerCallbacks/pastePrevent.js","../src/modules/ajaxCall.js","../src/modules/listenerCallbacks/submit.js","../src/modules/listenerCallbacks/groupValidationEnd.js","../src/modules/listenerCallbacks/validation.js","../src/modules/listenerCallbacks/validationEnd.js","../src/modules/checkFieldValidity.js","../src/modules/isValid.js","../src/modules/checkFieldsValidity.js","../src/modules/helpers/mergeValidateFormDefault.js","../src/index.js","../src/modules/helpers/checkFormEl.js","../src/modules/formStartup.js","../src/modules/destroy.js","../src/modules/helpers/excludeSelector.js","../src/modules/helpers/getFilledFields.js"],"sourcesContent":["\nexport const addClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.add( className );\n    });\n}\n","\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList );\n}\n","\nexport const removeClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.remove( className );\n    });\n}\n","\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node );\n}\n","\nexport const customEvents = {\n    field: {\n        validation: 'fjs.field:validation'\n    },\n    form: {\n        destroy:    'fjs.form:destroy',\n        init:       'fjs.form:init',\n        submit:     'fjs.form:submit',\n        validation: 'fjs.form:validation'\n    },\n    group: {\n        validation: 'fjs.group:validation'\n    }\n}\n","\nexport const isPlainObject = object => {\n    return Object.prototype.toString.call( object ) === '[object Object]';\n}\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const mergeObjects = function( out = {} ){\n    Array.from(arguments).slice(1).filter(arg => !!arg).forEach(arg => {\n        Object.keys(arg).forEach(key => {\n            if( Array.isArray(arg[key]) ){\n                out[key] = (out[key] || []).concat( arg[key].slice(0) );\n            } else if( isPlainObject(arg[key]) ){\n                out[key] = mergeObjects((out[key] || {}), arg[key]);\n            } else {\n                // * STRING | NUMBER | BOOLEAN | FUNCTION\n                if( Array.isArray(out[key]) ){\n                    // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                    out[key].push(arg[key]);\n                } else {\n                    out[key] = arg[key];\n                }\n            }\n        });\n    });\n\n    return out;\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const dispatchCustomEvent = ( elem, eventName, eventOptions ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions);\n    const eventObj = new CustomEvent(eventName, eventOptions);\n    elem.dispatchEvent( eventObj );\n}\n","\nexport const fieldsStringSelector = 'input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"hidden\"]), select, textarea'\n","\nexport const finalizeFieldPromise = ({errors, result}) => {\n    if( result ){\n        return Promise.resolve();\n    }\n    return Promise.reject(errors);\n}\n","\nexport const finalizeFieldsGroupPromise = ({canSubmit, fields, group, result}) => {\n    if( result ){\n        return Promise.resolve({canSubmit, fields, group});\n    }\n    return Promise.reject({fields, group});\n}\n","\nexport const finalizeFormPromise = ({fields, result}) => {\n    if( result ){\n        return Promise.resolve(fields);\n    }\n    return Promise.reject(fields);\n}\n","\nimport { getSplitChar } from './getSplitChar';\n\nconst formatMap = {\n    'YYYY-MM-DD': function(dateArray){\n        return dateArray;\n    },\n    'MM-DD-YYYY': function(dateArray){\n        return [dateArray[2], dateArray[0], dateArray[1]];\n    },\n    'DD-MM-YYYY': function(dateArray){\n        return dateArray.reverse();\n    }\n};\n\nexport const getDateAsNumber = ( dateString, dateFormat ) => {\n    dateFormat = dateFormat || 'YYYY-MM-DD';\n    const splitChar = getSplitChar(dateString);\n\n    if( dateFormat.indexOf(splitChar) < 0 ){\n        return;\n    }\n\n    dateFormat = dateFormat.replace(/[^YMD]/g, '-');\n    dateString = dateString.split(splitChar);\n    dateString = formatMap[dateFormat](dateString).join('');\n    \n    return dateString;\n}\n","\nexport const getSplitChar = string => {\n    // MATCH ANY NON-DIGIT CHAR\n    const separator = string.match(/\\D/);\n    return (separator && separator.length > 0) ? separator[0] : null;\n}\n","\nexport const getJSONobjectFromFieldAttribute = ( fieldEl, attrName ) => {\n    const customAttrEl = fieldEl.closest('['+ attrName +']');\n    return (customAttrEl && JSON.parse(customAttrEl.getAttribute(attrName))) || {};\n}\n","\nexport const getUniqueFields = $nodeList => {\n\n    let currentFieldName = '',\n        currentFieldType = '';\n\n    return Array.from( $nodeList ).filter($field => {\n        const name = $field.name,\n              type = $field.type;\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false;\n        }\n        \n        if( !$field.matches('[data-required-from]') ){\n            currentFieldName = name;\n            currentFieldType = type;\n        }\n        return true;\n    });\n    \n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const mergeValidateFieldDefault = obj => {\n    return mergeObjects({}, { result: false, $field: null }, obj);\n}\n","\nexport const isFieldForChangeEvent = $field => {\n    return $field.matches('select, [type=\"radio\"], [type=\"checkbox\"], [type=\"file\"]');\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const runFunctionsSequence = ( { functionsList = [], data = {}, stopConditionFn = () => false } = {} ) => {\n    return functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1]);\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res);\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result);\n                    return res;\n                });\n        });\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList);\n}\n","\nexport const serializeObject = obj => {\n    const objToString = (\n            (obj && typeof obj === 'object' && obj.constructor === Object) ? \n            Object.keys(obj)\n                .reduce((a,k) => {\n                    a.push(k+'='+encodeURIComponent(obj[k]));\n                    return a\n                },[]).join('&') : \n            obj\n    );\n    return objToString;\n}\n","\nexport const toCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase(); });\n}\n","\nimport { beforeValidation } from './optionsUtils/beforeValidation';\nimport { getFormData } from './optionsUtils/getFormData';\n\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [beforeValidation],\n        cssClasses: {\n            dirty:              'is-dirty',\n            error:              'has-error',\n            errorEmpty:         'has-error-empty',\n            errorRule:          'has-error-rule',\n            pending:            'is-pending',\n            valid:              'is-valid'\n        },\n        focusOnRelated:         true,\n        maxFileSize:            10,\n        onValidationCheckAll:   false,\n        preventPasteFields:     '[type=\"password\"], [data-equal-to]',\n        questionContainer:      '[data-formjs-question]',\n        skipUIfeedback:         false,\n        strictHtmlValidation:   true,\n        trimValue:              false,\n        validateOnEvents:       'input change'\n    },\n\n    formOptions: {\n        ajaxOptions:            {\n            cache:              'no-store',\n            credentials:        'same-origin',\n            headers: {\n                                'Content-Type': 'application/json',\n                                'Accept':       'application/json'\n            },\n            method:             'POST',\n            mode:               'same-origin',\n            redirect:           'follow',\n            timeout:            0,\n            url:                location.href\n        },\n        ajaxSubmit:             true,\n        beforeSend:             [],\n        cssClasses: {\n            ajaxComplete:       'ajax-complete',\n            ajaxError:          'ajax-error',\n            ajaxPending:        'ajax-pending',\n            ajaxSuccess:        'ajax-success',\n            submit:             'is-submitting',\n            valid:              'is-valid'\n        },\n        getFormData:            getFormData,\n        groups:                 [],\n        handleFileUpload:       true,\n        handleSubmit:           true,\n        onInitCheckFilled:      true\n    }\n    \n}\n","\nimport { addClass, checkDirtyField, isFieldForChangeEvent } from '../helpers';\n\nexport const beforeValidation = function beforeValidationDefault ( { $field, fieldOptions } ) {\n\n    if( fieldOptions.trimValue && !isFieldForChangeEvent($field) ){\n        $field.value = $field.value.trim();\n    }\n\n    checkDirtyField( $field, fieldOptions );\n\n    if( !fieldOptions.skipUIfeedback ){\n        addClass( $field.closest( fieldOptions.questionContainer ), fieldOptions.cssClasses.pending );\n    }\n\n}\n","\nimport { addClass } from './addClass';\nimport { isNodeList } from './isNodeList';\nimport { removeClass } from './removeClass';\n\nexport const checkDirtyField = ( $fields, fieldOptions ) => {\n\n    $fields = isNodeList($fields) ? Array.from( $fields ) : [$fields];\n    $fields.forEach($field => {\n        if( $field.type !== 'checkbox' && $field.type !== 'radio' ){\n            const $container = $field.closest( fieldOptions.questionContainer ) || $field;\n            if( $field.value ){\n                addClass( $container, fieldOptions.cssClasses.dirty );\n            } else {\n                removeClass( $container, fieldOptions.cssClasses.dirty );\n            }\n        }\n    });\n    \n}\n","\nexport const getFormData = function getFormDataDefault( $filteredFields, trimValues ){\n\n    const formData = {};\n    const $form = this.$form;\n    let prevObj = formData;\n  \n    $filteredFields.forEach($field => {\n        const isCheckbox = $field.type === \"checkbox\";\n        const isRadio = $field.type === \"radio\";\n        const isSelect = $field.matches(\"select\");\n        const name = $field.name;\n        let value = trimValues ? $field.value.trim() : $field.value;\n  \n        if( isCheckbox ){\n\n            value = $field.checked;\n            let $checkboxes = Array.from( $form.querySelectorAll('[name=\"' + name + '\"]') );\n            if( $checkboxes.length > 1 ){\n                value = [];\n                let $checked = $checkboxes.filter((field) => field.checked);\n                $checked.forEach($field => {\n                    value.push($field.value);\n                });\n            }\n\n        } else if( isRadio ){\n\n            const $checkedRadio = $form.querySelector('[name=\"' + name + '\"]:checked');\n            value = $checkedRadio === null ? null : $checkedRadio.value;\n\n        } else if( isSelect ){\n\n            const $selectedOpts = Array.from($field.options).filter(option => option.selected);\n            if( $selectedOpts.length > 1 ){\n                value = [];\n                $selectedOpts.forEach($field => { \n                    value.push($field.value); \n                });\n            }\n        }\n  \n        const nameSplit = name.split(\".\");\n        nameSplit.forEach((keyName, index, list) => {\n            const isLastKeyName = index + 1 === list.length;\n  \n            if( Array.isArray(prevObj) ){\n                const keyNameSplit = keyName.split(\"___\");\n                const arrPos = keyNameSplit[0] - 1;\n                const arrayHasItemAtIndex = typeof prevObj[arrPos] !== \"undefined\";\n                const arrItemKeyName = keyNameSplit[1];\n  \n                if( !arrayHasItemAtIndex ){\n                    prevObj.push({});\n                }\n  \n                keyName = arrItemKeyName;\n\n                if( isLastKeyName ){\n                    prevObj[arrPos][keyName] = value;\n                } else if( typeof prevObj[arrPos][keyName] === 'undefined' ) {\n                    prevObj[arrPos][keyName] = {};\n                }\n                \n                if( !isLastKeyName ){\n                    prevObj = prevObj[arrPos][keyName];\n                    return;\n                }\n            } else {\n                const isKeyNameArray = keyName.endsWith(\"[]\");\n                keyName = keyName.replace(\"[]\", \"\");\n  \n                if( isLastKeyName ){\n                    prevObj[keyName] = value;\n                } else if( typeof prevObj[keyName] === \"undefined\" ){\n                    if( isKeyNameArray ){\n                        prevObj[keyName] = [];\n                    } else {\n                        prevObj[keyName] = {};\n                    }\n                }\n            }\n  \n            prevObj = isLastKeyName ? formData : prevObj[keyName];\n        });\n    });\n  \n    return formData;\n\n}\n","\nimport { date }         from './validationRules/date';\nimport { email }        from './validationRules/email';\nimport { number }       from './validationRules/number';\n\nimport { checkbox }     from './validationRules/checkbox';\nimport { equalTo }      from './validationRules/equalTo';\nimport { exactLength }  from './validationRules/exactLength';\nimport { file }         from './validationRules/file';\nimport { length }       from './validationRules/length';\nimport { max }          from './validationRules/max';\nimport { maxlength }    from './validationRules/maxlength';\nimport { min }          from './validationRules/min';\nimport { minlength }    from './validationRules/minlength';\nimport { pattern }      from './validationRules/pattern';\nimport { radio }        from './validationRules/radio';\n\nexport const validationRules = {\n    date,\n    email,\n    number,\n\n    checkbox,\n    equalTo,\n    exactLength,\n    file,\n    length,\n    max,\n    maxlength,\n    min,\n    minlength,\n    pattern,\n    radio\n}\n","\n/*\n    DATE AS ISO 8601 DATE FORMAT:\n    YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n*/\n\nexport const date = function( string ){\n    return {\n        result: /^((((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13578]|1[02])[ \\/\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13456789]|1[012])[ \\/\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.]02[ \\/\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ \\/\\-.]02[ \\/\\-.]29))$/g.test( string )\n    };\n}\n","\n// https://regex101.com/r/cdlyJy/3\n\nexport const email = function( string ){\n    return {\n        result: /^[a-zA-Z_-]([\\w.-]?[a-zA-Z0-9])*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?){2,})+$/.test( string )\n    };\n}\n","\n/*\n    ALL NUMBERS ( INTEGERS AND FLOATING )\n    VALID NUMBERS: 123 | 123.456 | .123\n*/\n\nexport const number = function( string ){\n    return {\n        result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n    };\n}","\nimport { checks } from './checks';\n\nexport const checkbox = function( value, $field ){\n    const $dataChecks = $field.closest('form').querySelector('[name=\"' + $field.name + '\"][data-checks]');\n    return $dataChecks ? checks($dataChecks) : { result: $field.checked };\n}\n","\nexport const checks = function( $field ){\n    const attrValue = JSON.parse( $field.getAttribute('data-checks') ),\n          checkedLength = $field.closest('form').querySelectorAll('[name=\"' + $field.name + '\"]:checked').length,\n          isMinOk = checkedLength >= attrValue[0],\n          isMaxOk = checkedLength <= attrValue[1],\n          obj = { result: isMinOk && isMaxOk };\n\n    if( !obj.result ){\n        obj.errors = { checks: true };\n        if( !isMinOk ){ obj.errors.minChecks = true; }\n        if( !isMaxOk ){ obj.errors.maxChecks = true; }\n    }\n\n    return obj;\n}\n","\nexport const equalTo = function( value, $field ){\n    const $checkFrom = $field.closest('form').querySelector( '[name=\"' + $field.getAttribute('data-equal-to') + '\"]' );\n    return { result: value === $checkFrom.value };\n}\n","\nexport const exactLength = function( value, $field ){\n    const valueLength = value.length,\n          exactLength = $field.getAttribute('data-exact-length') * 1,\n          obj = { result: valueLength === exactLength };\n\n    if( !obj.result ){\n        obj.errors = {};\n        if( valueLength < exactLength ){ obj.errors.minlength = true; }\n        else { obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nexport const file = function( value, $field, fieldOptions ){\n    const maxFileSize = ($field.getAttribute('data-max-file-size') || fieldOptions.maxFileSize) * 1,\n          MIMEtype = $field.accept ? new RegExp($field.accept.replace( '*', '[^\\\\/,]+' )) : null,\n          filesList = Array.from($field.files),\n          obj = { result: true };\n\n    filesList.forEach(file => {\n        const exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize,\n              isAcceptedFileType = MIMEtype !== null ? MIMEtype.test(file.type) : true;\n\n        if( exceedMaxFileSize || !isAcceptedFileType ){\n            obj.result = false;\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {};\n            }\n            if( exceedMaxFileSize ){ obj.errors.maxFileSize = true; }\n            if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true; }\n\n        }\n    });\n\n    return obj;\n}\n","\nexport const length = function( value, $field ){\n    const valueL = value.length,\n          attrValue = JSON.parse( $field.getAttribute('data-length') ),\n          isMinlengthOk = valueL >= attrValue[0],\n          isMaxlengthOk = valueL <= attrValue[1],\n          obj = { result: isMinlengthOk && isMaxlengthOk };\n\n    if( !obj.result ){\n        obj.errors = {};\n        if( !isMinlengthOk ){ obj.errors.minlength = true; }\n        if( !isMaxlengthOk ){ obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const max = function( value, $field ){\n    let maxVal = $field.max;\n    const dateFormat = $field.getAttribute('data-date-format');\n    \n    if( $field.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat );\n        maxVal = maxVal.split('-').join('');\n    }\n\n    value = value * 1;\n    maxVal = maxVal * 1;\n    \n    return { result: value <= maxVal };\n}\n","\nexport const maxlength = function( value, $field ){\n    return { result: value.length <= $field.maxLength * 1 };\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const min = function( value, $field ){\n    let minVal = $field.min;\n    const dateFormat = $field.getAttribute('data-date-format');\n    \n    if( $field.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat );\n        minVal = minVal.split('-').join('');\n    }\n\n    value = value * 1;\n    minVal = minVal * 1;\n    \n    return { result: value >= minVal };\n}\n","\nexport const minlength = function( value, $field ){\n    return { result: value.length >= $field.minLength * 1 };\n}\n","\nexport const pattern = function( value, $field ){\n    return { result: new RegExp($field.pattern).test(value) };\n}\n","\nexport const radio = function( value, $field ){\n    const $fieldChecked = $field.closest('form').querySelector( '[name=\"'+ $field.name +'\"]:checked' ),\n          isValid = $fieldChecked !== null && $fieldChecked.value.trim().length > 0;\n\n    return { result: isValid };\n}\n","\nexport const dataTypeNumber = function( event ){\n\n    const $field = event.target;\n    \n    if( $field.matches('[data-type=\"number\"]') ){\n        let fieldValue = $field.value;\n        const hasInvalidChars = /[^\\d.,+\\-]/.test(fieldValue);\n        \n        if( hasInvalidChars ){\n            event.stopImmediatePropagation();\n            let valueReplaced = fieldValue.replace(/[^\\d.,+\\-]/g, '');\n            $field.value = valueReplaced;\n        }\n    }\n\n}\n","\nexport const formValidationEnd = function( event ){\n    const formEl = event.target;\n    const options = formEl.formjs.options;\n    \n    if( !options.fieldOptions.skipUIfeedback ){\n        const clMethodName = event.detail.result ? 'add' : 'remove';\n        formEl.classList[clMethodName]( options.formOptions.cssClasses.valid );\n    }\n}\n","\nexport const keypressMaxlength = function( event ){\n\n    const $field = event.target;\n    \n    if( $field.matches( '[maxlength]' ) ){\n        const maxLength = $field.maxLength * 1,\n              keyPressed = event.which || event.keyCode,\n              allowedKeys = [8, 37, 38, 39, 46];\n\n        if( $field.value.length >= maxLength && allowedKeys.indexOf(keyPressed) === -1 ){\n            return false;\n        }\n    }\n\n}\n","\nexport const pastePrevent = function( event ){\n\n    const $field = event.target;\n    const fieldOptions = $field.closest('form').formjs.options.fieldOptions;\n\n    if( $field.matches( fieldOptions.preventPasteFields ) ){     \n        event.preventDefault();\n    }\n\n}\n","\nimport { addClass, mergeObjects, removeClass, serializeObject } from './helpers';\n\nconst getFetchMethod = (response, options) => {\n    const accept = options.headers.get('Accept'),\n          contentType = response.headers.get('Content-Type'),\n          headerOpt = accept || contentType || '';\n\n    if( headerOpt.indexOf('application/json') > -1 || headerOpt === '' ){\n        return 'json';\n    } else if( headerOpt.indexOf('text/') > -1 ){\n        return 'text';\n    } else {\n        return 'blob';\n    }\n};\n\nexport function ajaxCall( $form, formDataObj, options ){\n\n    let timeoutTimer;\n    const ajaxOptions = mergeObjects( {}, options.formOptions.ajaxOptions ),\n          isMultipart = ajaxOptions.headers['Content-Type'] === 'multipart/form-data';\n\n    ajaxOptions.body = formDataObj;\n    \n    // POST A FormData OBJECT ( multipart )\n    if( isMultipart && options.formOptions.handleFileUpload ){\n        let formDataMultipart = new FormData();\n        \n        for(let key in ajaxOptions.body){\n            formDataMultipart.append( key, ajaxOptions.body[key] );\n        }\n        \n        Array.from( $form.querySelectorAll('[type=\"file\"]') ).forEach($field => {\n            Array.from($field.files).forEach((file, idx) => {\n                const name = $field.name+'['+ idx +']';\n                formDataMultipart.append( name, file, file.name );\n            });\n        });\n        \n        ajaxOptions.body = formDataMultipart;\n    }\n\n    if( ajaxOptions.method === 'GET' ){\n\n        // FETCH WITH \"GET\" METHOD CAN'T HAVE \"body\". SO IT IS APPENDED TO THE URL\n        ajaxOptions.url += ( /\\?/.test(ajaxOptions.url) ? '&' : '?' ) + serializeObject( ajaxOptions.body );\n        delete ajaxOptions.body;\n\n    } else {\n\n        if( ajaxOptions.headers['Content-Type'].indexOf('application/x-www-form-urlencoded') > -1 ){\n            // POST A NORMAL FORM\n            ajaxOptions.body = serializeObject( ajaxOptions.body );\n        } else if( !isMultipart ){\n            // POST A JSON STRING\n            ajaxOptions.body = JSON.stringify(ajaxOptions.body);\n        }\n\n    }\n\n    ajaxOptions.headers = new Headers( ajaxOptions.headers );\n\n    if ( ajaxOptions.timeout > 0 ) {\n        const controller = new AbortController(),\n              signal = controller.signal;\n\n        ajaxOptions.signal = signal;\n        timeoutTimer = window.setTimeout(() => {\n            controller.abort();\n        }, ajaxOptions.timeout);\n    }\n\n    return fetch(ajaxOptions.url, ajaxOptions)\n        .then(response => {\n            if( !response.ok ){\n                throw new Error(response.statusText);\n            }\n            const fetchMethod = getFetchMethod(response, ajaxOptions);\n            return response[fetchMethod]();\n        })\n        .then(data => {\n            addClass( $form, options.formOptions.cssClasses.ajaxSuccess );\n            return data;\n        })\n        .catch(error => {\n            addClass( $form, options.formOptions.cssClasses.ajaxError );\n            throw new Error(error.message);\n        })\n        .finally(() => {\n            if( timeoutTimer ){\n                window.clearTimeout( timeoutTimer );\n            }\n            removeClass( $form, options.formOptions.cssClasses.submit + ' ' + options.formOptions.cssClasses.ajaxPending );\n            addClass( $form, options.formOptions.cssClasses.ajaxComplete );\n            $form.querySelector('[type=\"submit\"]').disabled = false;\n        });\n\n}\n","\nimport { addClass, customEvents, dispatchCustomEvent, removeClass, runFunctionsSequence } from '../helpers';\nimport { ajaxCall } from '../ajaxCall';\n\nexport function submit( event ){\n\n    const $form = event.target,\n          instance = $form.formjs,\n          options = instance.options,\n          formCssClasses = options.formOptions.cssClasses,\n          isAjaxForm = options.formOptions.ajaxSubmit,\n          $btn = $form.querySelector('[type=\"submit\"]'),\n          eventPreventDefault = ( enableBtn = true ) => {\n              if( $btn && enableBtn ){ $btn.disabled = false; }\n              if( event ){ event.preventDefault(); }\n          };\n\n    if( isAjaxForm ){\n        eventPreventDefault(false);\n    }\n\n    if( $btn ){\n        if( $btn.disabled ){\n            eventPreventDefault(false);\n            return false;\n        }\n        $btn.disabled = true;\n    }\n\n    removeClass( $form, (formCssClasses.ajaxComplete + ' ' + formCssClasses.ajaxError + ' ' + formCssClasses.ajaxSuccess) );\n    addClass( $form, formCssClasses.submit );\n\n    instance.validateForm()\n        .then(data => {\n            \n            const hasGroup = typeof data.group !== 'undefined';\n\n            if( hasGroup && !data.canSubmit ){\n                return [{ stopExecution: true }]\n            }\n\n            const beforeSendData = {\n                stopExecution: false,\n                formData: isAjaxForm ? instance.getFormData() : null\n            };\n\n            const rfsObject = {\n                  functionsList: options.formOptions.beforeSend,\n                  data: beforeSendData,\n                  stopConditionFn: function(data){ return data.stopExecution; }\n            };\n            return runFunctionsSequence(rfsObject);\n\n        }).then(dataList => {\n\n            if( dataList.some(({stopExecution}) => stopExecution) ){\n                eventPreventDefault();\n                return false;\n            }\n            \n            if( isAjaxForm ){\n                const formData = dataList.pop().formData;\n                addClass( $form, formCssClasses.ajaxPending );\n                dispatchCustomEvent( $form, customEvents.form.submit, { detail: ajaxCall( $form, formData, options ) } );\n            }\n\n        })\n        .catch(fields => {\n            eventPreventDefault();\n            removeClass( $form, formCssClasses.submit );\n        });\n    \n}\n","\nexport const groupValidationEnd = function( event ){\n\n    const detail = event.detail;\n\n    if( detail.result ){\n        event.target.formjs.currentGroup = detail.group.next;\n    }\n    \n}\n","\nimport { fieldsStringSelector, isFieldForChangeEvent } from '../helpers';\n\nexport const validation = function( event ){\n\n    const isChangeEvent = event.type === 'change',\n          $field = event.target,\n          self = $field.closest('form').formjs;\n\n    if( $field.matches( fieldsStringSelector ) ){\n        const isFieldForChangeEventBoolean = isFieldForChangeEvent($field);\n        const hasOnlyChangeEvent = self.options.fieldOptions.validateOnEvents === 'change';\n        \n        if(\n            (isFieldForChangeEventBoolean && isChangeEvent) ||\n            (!isFieldForChangeEventBoolean && (!isChangeEvent || hasOnlyChangeEvent))\n        ){\n            \n            self.validateField( $field )\n                .then(() => {\n                    const type = $field.type;\n                    const $relatedEqualTo = $field.closest('form').querySelector('[data-equal-to=\"'+ $field.name +'\"]');\n\n                    if(\n                        // FIELD IS ( required OR data-validate-if-filled ) AND RELATED FIELD data-equal-to HAS A VALUE\n                        ($field.required || $field.matches('[data-validate-if-filled]')) && \n                        !(type === 'checkbox' || type === 'radio') && \n                        $relatedEqualTo && $relatedEqualTo.value.trim() !== ''\n                    ){\n                        self.validateField( $relatedEqualTo ).catch(errors => {});\n                    }\n                })\n                .catch(errors => {});\n\n        }\n    }\n    \n}\n","\nimport { addClass, getJSONobjectFromFieldAttribute, removeClass, mergeObjects } from '../helpers';\n\nexport const validationEnd = function( event ){\n\n    const eventDetail = event.detail,\n          $field = eventDetail.$field,\n          dataFieldOptions = getJSONobjectFromFieldAttribute( $field, 'data-field-options' ),\n          fieldOptions = mergeObjects({}, $field.closest('form').formjs.options.fieldOptions, dataFieldOptions),\n          $container = $field.closest( fieldOptions.questionContainer ),\n          isReqFrom = $field.matches('[data-required-from]'),\n          $reqMore = document.querySelector( $field.getAttribute('data-required-from') );\n\n    if( $container && !fieldOptions.skipUIfeedback ){\n\n        if( eventDetail.result ){\n\n            if( !isReqFrom || (isReqFrom && $reqMore.checked) ){\n                // IF FIELD IS VALID\n                const errorClasses = fieldOptions.cssClasses.error + ' ' + fieldOptions.cssClasses.errorEmpty + ' ' + fieldOptions.cssClasses.errorRule;\n                removeClass( $container, errorClasses );\n                addClass( $container, fieldOptions.cssClasses.valid );\n            }\n\n        } else {\n\n            // IF FIELD IS NOT VALID\n            let extraErrorClass = fieldOptions.cssClasses.errorRule;\n\n            // HANDLE CASE OF FIELD data-checks\n            const isChecks = $field.matches('[data-checks]'),\n                  checkedElLength = (isChecks ? $container.querySelectorAll('[name=\"' + $field.name + '\"]:checked').length : 0);\n\n            if( (!isChecks && (eventDetail.errors && eventDetail.errors.empty)) || (isChecks && checkedElLength === 0) ){\n                extraErrorClass = fieldOptions.cssClasses.errorEmpty;\n            }\n\n            let errorClasses = fieldOptions.cssClasses.error + ' ' + extraErrorClass,\n                errorClassToRemove = fieldOptions.cssClasses.errorEmpty + ' ' + fieldOptions.cssClasses.errorRule;\n            removeClass( $container, fieldOptions.cssClasses.valid + ' ' + errorClassToRemove );\n            addClass( $container, errorClasses );\n\n        }\n    }\n\n}\n","\nimport {    getJSONobjectFromFieldAttribute,\n            isDOMNode,\n            mergeObjects,\n            mergeValidateFieldDefault,\n            removeClass,\n            runFunctionsSequence\n        }           from './helpers';\nimport { isValid }  from './isValid';\n\nexport function checkFieldValidity( $field, fieldOptions, validationRules, validationErrors ){\n\n    if( !isDOMNode($field) ){\n        const obj = mergeValidateFieldDefault({$field});\n        return Promise.resolve(obj);\n    }\n\n    const $form = $field.closest('form'),\n          isValidValue = $field.value.trim().length > 0,\n          dataFieldOptions = getJSONobjectFromFieldAttribute( $field, 'data-field-options' );\n\n    fieldOptions = mergeObjects( fieldOptions, dataFieldOptions );\n\n    // HANDLE FIELD data-required-from WHEN CHANGING ITS RELATED RADIO\n    if( $field.type === 'radio' ){\n        const $checked = $field.checked ? $field : $form.querySelector('[name=\"'+ $field.name +'\"]:checked'),\n              reqMoreIsChecked = $checked && $checked.matches('[data-require-more]'),\n              $findReqMore = reqMoreIsChecked ? $checked : $form.querySelector('[data-require-more][name=\"'+ $field.name +'\"]'),\n              $findReqFrom = $findReqMore ? $form.querySelector('[data-required-from=\"#'+ $findReqMore.id +'\"]') : null;\n        \n        if( $checked && $findReqFrom ){\n            $findReqFrom.required = $findReqMore.required && $findReqMore.checked;\n            if( !reqMoreIsChecked ){\n                $findReqFrom.value = '';\n            } else if( fieldOptions.focusOnRelated ) {\n                $findReqFrom.focus();\n            }\n        }\n    }\n\n    // HANDLE FIELD data-require-more & data-required-from WHEN *-from IT'S FILLED\n    if( $field.matches('[data-required-from]') && isValidValue ){\n        const $reqMore = $form.querySelector( $field.getAttribute('data-required-from') );\n        $reqMore.checked = true;\n        $field.required = $reqMore.required;\n    }\n\n    const needsValidation = $field.required || ($field.matches('[data-validate-if-filled]') && isValidValue);\n\n    return runFunctionsSequence({\n            functionsList: fieldOptions.beforeValidation,\n            data: { $field, fieldOptions }\n        })\n        .then(data => {\n            const dataObj = data.pop();\n            return new Promise(resolve => {\n                if( !needsValidation ){\n                    dataObj.result = true;\n                }\n                resolve( needsValidation ? isValid($field, fieldOptions, validationRules, validationErrors) : dataObj );\n            });\n        })\n        .then(data => {\n            const $container = fieldOptions.questionContainer && data.$field.closest( fieldOptions.questionContainer );\n            if( $container ){\n                removeClass( $container, fieldOptions.cssClasses.pending );\n            }\n            return data;\n        })\n        ;\n\n}\n","\nimport { mergeValidateFieldDefault, mergeObjects, toCamelCase } from './helpers';\n\nexport function isValid( $field, fieldOptions, validationRules, validationErrors ){\n\n    const fieldValue = $field.value,\n          obj = mergeValidateFieldDefault({result: fieldValue.trim().length > 0, $field}),\n          isRadioOrCheckbox = /^(radio|checkbox)$/.test($field.type),\n          hasSelectedInput = $field.closest('form').querySelectorAll('[name=\"'+ $field.name +'\"]:checked').length > 0;\n\n    if( (!isRadioOrCheckbox && !obj.result) || (isRadioOrCheckbox && !hasSelectedInput) ){\n        obj.result = false;\n        obj.errors = { empty: true };\n        return Promise.resolve(obj);\n    }\n\n    // COLLECT VALIDATION METHOD NAMES ( USED TO RUN VALIDATIONS AND GET ERRORS )\n    const validationMethods = Array.from($field.attributes).reduce((accList, attr) => {\n        const attrName = toCamelCase( attr.name.replace('data-', '') ),\n              attrValue = toCamelCase( attr.value ),\n              isAttrValueWithFn = (attrName === 'type' || attrName === 'subtype') && validationRules[attrValue],\n              isAttrNameWithFn = validationRules[attrName];\n\n        if( isAttrValueWithFn || isAttrNameWithFn ){\n            accList.push( isAttrValueWithFn ? attrValue : attrName );\n        }\n        return accList;\n    }, []);\n\n    return new Promise(resolve => {\n\n        // RUN VALIDATIONS\n        const validationsResult = validationMethods.reduce((accPromise, methodName) => {\n            return accPromise.then(accObj => {\n                return new Promise(resolveVal => {\n                    // RUN VALIDATION INSIDE A PROMISE IS USEFUL FOR ASYNC VALIDATIONS\n                    resolveVal( validationRules[methodName](fieldValue, $field, fieldOptions) );\n                }).then(valObj => {\n                    // ADD CUSTOM ERROR-KEY FOR EACH VALIDATION RULE\n                    if( !valObj.result ){\n                        const errorObj = {};\n                        if( typeof valObj.errors === 'undefined' || typeof valObj.errors[methodName] === 'undefined' ){\n                            errorObj[methodName] = true;\n                        }\n                        valObj.errors = mergeObjects({}, valObj.errors, errorObj);\n                    }\n                    valObj = valObj.result ? {} : valObj;\n                    return mergeObjects(accObj, valObj);\n                });\n            });\n        }, Promise.resolve(obj));\n        resolve(validationsResult);\n\n    }).then(data => {\n\n        // GET ERRORS\n        if( !data.result ){\n            data.errors = validationMethods.reduce((accObj, methodName) => {\n                const errors = (validationErrors[methodName] && validationErrors[methodName](fieldValue, $field)) || {};\n                return mergeObjects(accObj, errors);\n            }, data.errors);\n        }\n        return data;\n\n    });\n\n}\n","\nimport { getUniqueFields, mergeValidateFieldDefault, mergeValidateFormDefault, mergeObjects } from './helpers';\nimport { checkFieldValidity } from './checkFieldValidity';\n\nexport function checkFieldsValidity( $fields, fieldOptions, validationRules, validationErrors, fieldToSkip = null ){\n\n    fieldOptions = mergeObjects( {}, fieldOptions, {focusOnRelated: false} );\n    const $fieldsList = getUniqueFields( $fields );\n\n    return Promise.all( $fieldsList.map($field => {\n\n        if( fieldToSkip && $field === fieldToSkip ){\n            const obj = mergeValidateFieldDefault({$field, result: true});\n            return Promise.resolve(obj);\n        }\n        return checkFieldValidity( $field, fieldOptions, validationRules, validationErrors );\n\n    }) ).then(fields => {\n\n        const areAllFieldsValid = fields.every(({result}) => result);\n        return mergeValidateFormDefault({result: areAllFieldsValid, fields});\n\n    });\n\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const mergeValidateFormDefault = obj => {\n    return mergeObjects({}, { result: true, fields: [] }, obj);\n}\n","\nimport { version }              from '../package.json';\nimport { \n    checkFormEl, \n    customEvents, \n    dispatchCustomEvent, \n    excludeSelector, \n    fieldsStringSelector, \n    finalizeFieldPromise, \n    finalizeFieldsGroupPromise, \n    finalizeFormPromise, \n    getFilledFields, \n    isInteger, \n    isNodeList,\n    isValidSelector, \n    mergeObjects, \n    removeClass }               from './modules/helpers';\nimport { options }              from './modules/options';\nimport { validationRules }      from './modules/validationRules';\nimport { formStartup }          from './modules/formStartup';\nimport { destroy }              from './modules/destroy';\nimport { checkFieldValidity }   from './modules/checkFieldValidity';\nimport { checkFieldsValidity }  from './modules/checkFieldsValidity';\n\nclass Form {\n\n    constructor( form, optionsObj ){\n        const argsL = arguments.length,\n              checkFormElem = checkFormEl(form);\n\n        if( argsL === 0 || (argsL > 0 && !form) ){\n            throw new Error('First argument \"form\" is missing or falsy!');\n        }\n        if( isNodeList(form) ){\n            throw new Error('First argument \"form\" must be a single DOM node or a form CSS selector, not a NodeList!');\n        }\n        if( !checkFormElem.result ){\n            throw new Error('First argument \"form\" is not a DOM node nor a form CSS selector!');\n        }\n\n        const self = this;\n\n        self.$form = checkFormElem.$el;\n        self.$form.formjs = self;\n        self.options = mergeObjects({}, Form.prototype.options, optionsObj);\n        self.currentGroup = self.options.formOptions.groups[0];\n\n        // BINDING CONTEXT FOR FUTURE EXECUTION\n        const cbList = [\n            // IN fieldOptions\n            'beforeValidation',\n            // IN formOptions\n            'beforeSend',\n            'getFormData'\n        ];\n        cbList.forEach(cbName => {\n            const optionType = self.options.formOptions[cbName] ? 'formOptions' : 'fieldOptions';\n            let cbOpt = self.options[optionType][cbName];\n\n            if( cbOpt ){\n                self.options[optionType][cbName] = ( Array.isArray(cbOpt) ? cbOpt.map(cbFn => cbFn.bind(self)) : cbOpt.bind(self) );\n            }\n        });\n\n        formStartup( self.$form, self.options );\n\n        const initOptions = {};\n        if( self.options.formOptions.onInitCheckFilled ){\n            initOptions.detail = self.validateFilledFields().catch(fields => {});\n        }\n        dispatchCustomEvent( self.$form, customEvents.form.init, initOptions );\n    }\n\n    destroy(){\n        destroy(this.$form, this.options);\n        dispatchCustomEvent( this.$form, customEvents.form.destroy );\n    }\n    \n    getFormData( trimValues = this.options.fieldOptions.trimValue ){\n        const $formFields = this.$form.querySelectorAll('input, select, textarea'),\n              $filteredFields = Array.from( $formFields ).filter( elem => elem.matches(excludeSelector) );\n        return this.options.formOptions.getFormData( $filteredFields, trimValues );\n    }\n\n    validateField( field, fieldOptions ){\n        const self = this;\n        const $form = self.$form;\n        const $field = typeof field === 'string' ? $form.querySelector(field) : field;\n\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions);\n        \n        return checkFieldValidity($field, fieldOptions, self.validationRules, self.validationErrors)\n            .then(obj => {\n                dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } );\n                if( obj.result ){\n                    if( fieldOptions.onValidationCheckAll ){\n                        const selector = self.currentGroup || fieldsStringSelector;\n                        const $fields = $form.querySelectorAll(selector);\n                        const groups = self.options.formOptions.groups;\n                        checkFieldsValidity( $fields, fieldOptions, self.validationRules, self.validationErrors, obj.$field )\n                            .then(dataForm => {\n                                const validationEventName = self.currentGroup ? customEvents.group.validation : customEvents.form.validation;\n                                if( self.currentGroup ){\n                                    dataForm.group = {\n                                        prev: groups[groups.indexOf(selector) - 1],\n                                        current: selector,\n                                        next: groups[groups.indexOf(selector) + 1]\n                                    }\n                                    if( dataForm.result ){\n                                        self.currentGroup = dataForm.group.next;\n                                    }\n                                    dataForm.canSubmit = !self.currentGroup;\n                                }\n                                dispatchCustomEvent( $form, validationEventName, { detail: dataForm } );\n                            });\n                    }\n                } else {\n                    removeClass( $form, self.options.formOptions.cssClasses.valid );\n                }\n                return obj;\n            })\n            .then(finalizeFieldPromise);\n    }\n\n    validateFieldsGroup( group = this.currentGroup, fieldOptions ){\n        const self = this;\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions);\n        const $fields = self.$form.querySelectorAll(group);\n\n        return checkFieldsValidity($fields, fieldOptions, self.validationRules, self.validationErrors)\n            .then(data => {\n                data.fields.forEach(obj => {\n                    obj.isCheckingGroup = true;\n                    dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } );\n                });\n                const groups = self.options.formOptions.groups;\n                if( groups.length > 0 ){\n                    data.group = {\n                        prev: groups[groups.indexOf(group) - 1],\n                        current: group,\n                        next: groups[groups.indexOf(group) + 1]\n                    }\n                    data.canSubmit = !data.group.next;\n                }\n                dispatchCustomEvent( self.$form, customEvents.group.validation, { detail: data } );\n                return data;\n            })\n            .then(finalizeFieldsGroupPromise);\n    }\n\n    validateFilledFields( fieldOptions ){\n        const self = this;\n        const $filledFields = getFilledFields( self.$form );\n\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions);\n\n        return checkFieldsValidity($filledFields, fieldOptions, self.validationRules, self.validationErrors)\n            .then(data => {\n                data.fields.forEach(obj => {\n                    dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } );\n                });\n                return data;\n            })\n            .then(finalizeFormPromise);\n    }\n\n    validateForm( fieldOptions ){\n        const self = this;\n\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions);\n\n        if( self.currentGroup ){\n            return self.validateFieldsGroup( self.currentGroup, fieldOptions )\n        }\n\n        const $form = self.$form;\n        const $fields = $form.querySelectorAll(fieldsStringSelector);\n\n        return checkFieldsValidity($fields, fieldOptions, self.validationRules, self.validationErrors)\n            .then(data => {\n                data.fields.forEach(obj => {\n                    obj.isCheckingForm = true;\n                    dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } );\n                });\n                dispatchCustomEvent( $form, customEvents.form.validation, { detail: data } );\n                return data;\n            })\n            .then(finalizeFormPromise);\n    }\n    \n    static addValidationErrors( errorsObj ){\n        Form.prototype.validationErrors = mergeObjects({}, Form.prototype.validationErrors, errorsObj);\n    }\n\n    static addValidationRules( rulesObj ){\n        Form.prototype.validationRules = mergeObjects({}, Form.prototype.validationRules, rulesObj);\n    }\n    \n    static setOptions( optionsObj ){\n        Form.prototype.options = mergeObjects({}, Form.prototype.options, optionsObj);\n    }\n\n}\n\nForm.prototype.options = options;\nForm.prototype.validationErrors = {};\nForm.prototype.validationRules = validationRules;\nForm.prototype.version = version;\n\nexport default Form;\n","\nimport { isDOMNode } from './isDOMNode';\n\nexport const checkFormEl = form => {\n    let isString = typeof form,\n        isValidNodeSelector = isString === 'string' && isDOMNode(document.querySelector(form)),\n        isFormSelector = isValidNodeSelector && document.querySelector(form).tagName.toLowerCase() === 'form',\n        obj = {\n            result: isDOMNode(form) || isFormSelector,\n            $el: (isString === 'string' ? document.querySelector(form) : form)\n        };\n\n    return obj;\n}\n","\nimport { customEvents } from './helpers';\nimport { \n    dataTypeNumber,\n    formValidationEnd,\n    groupValidationEnd,\n    keypressMaxlength,\n    pastePrevent,\n    submit,\n    validation, \n    validationEnd \n} from './listenerCallbacks';\n\nexport function formStartup( $form, options ){\n\n    $form.noValidate = true;\n\n    const fieldOptions = options.fieldOptions,\n          formOptions = options.formOptions;\n        \n    // VALIDATION WITH ATTRIBUTES LIKE HTML ONES ( ALSO FOR BUG FIXING, EG: maxlength IN ANDROID )\n    if( fieldOptions.strictHtmlValidation ){\n        \n        // maxlength\n        // MAXLENGTH IS BUGGY IN ANDROID BROWSERS\n        $form.addEventListener('keypress', keypressMaxlength, false);\n\n        // data-type=\"number\"\n        // SINCE VALIDATING type=\"number\" WITH NON NUMERIC CHARS WILL RETURN EMPTY STRING IN SOME BROWSERS ( EG: FIREFOX )\n        $form.addEventListener('input', dataTypeNumber, false);\n        \n    }\n    \n    if( fieldOptions.preventPasteFields && $form.querySelectorAll( fieldOptions.preventPasteFields ).length ){\n        // INIT EVENT LISTENER FOR \"PASTE\" EVENT TO PREVENT IT ON SPECIFIED FIELDS\n        $form.addEventListener('paste', pastePrevent, false);\n    }\n\n    // INIT EVENTS LISTENER ( AS IN fieldOptions )\n    fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n        const useCapture = /^(blur|focus)$/.test(eventName);\n        $form.addEventListener(eventName, validation, useCapture);\n    });\n\n    $form.addEventListener(customEvents.field.validation, validationEnd, false);\n    $form.addEventListener(customEvents.group.validation, groupValidationEnd, false);\n    $form.addEventListener(customEvents.form.validation, formValidationEnd, false);\n    \n    // HANDLE FORM SUBMIT\n    if( formOptions.handleSubmit ){\n        // INIT FORM SUBMIT ( DEFAULT AND AJAX )\n        $form.addEventListener('submit', submit);\n\n        if( formOptions.ajaxSubmit ){\n            if( $form.getAttribute('enctype') ){\n                formOptions.ajaxOptions.headers['Content-Type'] = $form.getAttribute('enctype');\n            }\n\n            if( $form.getAttribute('method') ){\n                formOptions.ajaxOptions.method = $form.getAttribute('method').toUpperCase();\n            }\n\n            if( $form.getAttribute('action') ){\n                formOptions.ajaxOptions.url = $form.getAttribute('action');\n            }\n        }\n    }\n\n}\n","\nimport { customEvents } from './helpers';\nimport { dataTypeNumber, formValidationEnd, keypressMaxlength, pastePrevent, submit, validation, validationEnd } from './listenerCallbacks';\n\n\nexport function destroy( $form, options ){\n\n    if( options.fieldOptions.strictHtmlValidation ){\n        $form.removeEventListener('keypress', keypressMaxlength, false);\n        $form.removeEventListener('input', dataTypeNumber, false);\n    }\n\n    if( options.fieldOptions.preventPasteFields ){\n        $form.removeEventListener('paste', pastePrevent, false);\n    }\n\n    if( options.formOptions.handleSubmit ){\n        $form.removeEventListener('submit', submit);\n    }\n\n    options.fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n        const useCapturing = eventName === 'blur' ? true : false;\n        $form.removeEventListener(eventName, validation, useCapturing);\n    });\n\n    $form.removeEventListener(customEvents.field.validation, validationEnd, false);\n    $form.removeEventListener(customEvents.form.validation, formValidationEnd, false);\n\n    delete $form.formjs;\n    \n}\n","\nexport const excludeSelector = ':not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"file\"]):not([data-exclude-data])'\n","\nimport { fieldsStringSelector } from './fieldsStringSelector';\nimport { getUniqueFields } from './getUniqueFields';\n\nexport const getFilledFields = $form => {\n    return getUniqueFields( $form.querySelectorAll(fieldsStringSelector) )\n    .map($field => {\n\n        const name = $field.name,\n              type = $field.type,\n              isCheckboxOrRadio = type === 'checkbox' || type === 'radio',\n              fieldChecked = $form.querySelector('[name=\"' + name + '\"]:checked'),\n              isReqFrom = $field.matches('[data-required-from]'),\n              $reqMore = (isReqFrom ? $form.querySelector($field.getAttribute('data-required-from')) : null);\n\n        return (\n            isCheckboxOrRadio ? (fieldChecked || null) :\n            (isReqFrom && $reqMore.checked) || (!isReqFrom && $field.value) ? $field : null\n        );\n\n    })\n    .filter($field => $field !== null);\n}\n"],"names":["addClass","element","cssClasses","split","forEach","className","classList","add","isNodeList","nodeList","NodeList","prototype","isPrototypeOf","removeClass","remove","isDOMNode","node","Element","customEvents","validation","destroy","init","submit","isPlainObject","object","Object","toString","call","mergeObjects","out","Array","from","arguments","slice","filter","arg","keys","key","isArray","concat","push","dispatchCustomEvent","elem","eventName","eventOptions","bubbles","eventObj","CustomEvent","dispatchEvent","fieldsStringSelector","finalizeFieldPromise","errors","result","Promise","resolve","reject","finalizeFieldsGroupPromise","canSubmit","fields","group","finalizeFormPromise","formatMap","YYYY-MM-DD","dateArray","MM-DD-YYYY","DD-MM-YYYY","reverse","getDateAsNumber","dateString","dateFormat","splitChar","string","separator","match","length","getSplitChar","indexOf","replace","join","getJSONobjectFromFieldAttribute","fieldEl","attrName","customAttrEl","closest","JSON","parse","getAttribute","getUniqueFields","$nodeList","currentFieldName","currentFieldType","$field","name","type","matches","mergeValidateFieldDefault","obj","isFieldForChangeEvent","runFunctionsSequence","functionsList","data","stopConditionFn","reduce","acc","promiseFn","then","res","dataNew","dataList","serializeObject","constructor","a","k","encodeURIComponent","toCamelCase","all","letter","toUpperCase","options","fieldOptions","beforeValidation","trimValue","value","trim","$fields","$container","questionContainer","dirty","checkDirtyField","skipUIfeedback","pending","error","errorEmpty","errorRule","valid","focusOnRelated","maxFileSize","onValidationCheckAll","preventPasteFields","strictHtmlValidation","validateOnEvents","formOptions","ajaxOptions","cache","credentials","headers","Content-Type","Accept","method","mode","redirect","timeout","url","location","href","ajaxSubmit","beforeSend","ajaxComplete","ajaxError","ajaxPending","ajaxSuccess","getFormData","$filteredFields","trimValues","formData","$form","this","prevObj","isCheckbox","isRadio","isSelect","checked","$checkboxes","querySelectorAll","field","$checkedRadio","querySelector","$selectedOpts","option","selected","keyName","index","list","isLastKeyName","keyNameSplit","arrPos","arrayHasItemAtIndex","arrItemKeyName","isKeyNameArray","endsWith","groups","handleFileUpload","handleSubmit","onInitCheckFilled","validationRules","date","test","email","number","checkbox","$dataChecks","attrValue","checkedLength","isMinOk","isMaxOk","checks","minChecks","maxChecks","equalTo","exactLength","valueLength","minlength","maxlength","file","MIMEtype","accept","RegExp","filesList","files","exceedMaxFileSize","size","isAcceptedFileType","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","max","maxVal","maxLength","min","minVal","minLength","pattern","radio","$fieldChecked","dataTypeNumber","event","target","fieldValue","stopImmediatePropagation","valueReplaced","formValidationEnd","formEl","formjs","clMethodName","detail","keypressMaxlength","keyPressed","which","keyCode","allowedKeys","pastePrevent","preventDefault","ajaxCall","formDataObj","timeoutTimer","isMultipart","body","formDataMultipart","FormData","append","idx","stringify","Headers","controller","AbortController","signal","window","setTimeout","abort","fetch","response","ok","Error","statusText","fetchMethod","get","contentType","headerOpt","getFetchMethod","catch","message","finally","clearTimeout","disabled","instance","formCssClasses","isAjaxForm","$btn","eventPreventDefault","enableBtn","validateForm","stopExecution","beforeSendData","rfsObject","some","pop","groupValidationEnd","currentGroup","next","isChangeEvent","self","isFieldForChangeEventBoolean","hasOnlyChangeEvent","validateField","$relatedEqualTo","required","validationEnd","eventDetail","dataFieldOptions","isReqFrom","$reqMore","document","errorClasses","extraErrorClass","isChecks","checkedElLength","empty","errorClassToRemove","checkFieldValidity","validationErrors","isValidValue","$checked","reqMoreIsChecked","$findReqMore","$findReqFrom","id","focus","needsValidation","dataObj","isRadioOrCheckbox","hasSelectedInput","validationMethods","attributes","accList","attr","isAttrValueWithFn","isAttrNameWithFn","accPromise","methodName","accObj","resolveVal","valObj","errorObj","isValid","checkFieldsValidity","fieldToSkip","$fieldsList","map","areAllFieldsValid","every","Form","[object Object]","form","optionsObj","argsL","checkFormElem","isString","isFormSelector","tagName","toLowerCase","$el","checkFormEl","cbName","optionType","cbOpt","cbFn","bind","noValidate","addEventListener","useCapture","formStartup","initOptions","validateFilledFields","removeEventListener","useCapturing","$formFields","selector","dataForm","validationEventName","prev","current","isCheckingGroup","isCheckboxOrRadio","fieldChecked","validateFieldsGroup","isCheckingForm","errorsObj","rulesObj","version"],"mappings":"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"}