{"version":3,"file":"formjs-esm.min.js","sources":["../src/modules/version.js","../src/modules/helpers/addClass.js","../src/modules/helpers/isNodeList.js","../src/modules/helpers/removeClass.js","../src/modules/helpers/isDOMNode.js","../src/modules/helpers/checkFormEl.js","../src/modules/helpers/customEvents.js","../src/modules/helpers/mergeObjects.js","../src/modules/helpers/dispatchCustomEvent.js","../src/modules/helpers/fieldsStringSelector.js","../src/modules/helpers/getSplitChar.js","../src/modules/helpers/getUniqueFields.js","../src/modules/helpers/getValidateFieldDefault.js","../src/modules/helpers/getValidateFormDefault.js","../src/modules/helpers/isFieldForChangeEvent.js","../src/modules/helpers/runFunctionsSequence.js","../src/modules/helpers/serializeObject.js","../src/modules/helpers/toCamelCase.js","../src/modules/optionsUtils.js","../src/modules/helpers/checkDirtyField.js","../src/modules/options.js","../src/modules/validationRules.js","../src/modules/validationRules/date.js","../src/modules/validationRules/email.js","../src/modules/validationRules/number.js","../src/modules/submit.js","../src/modules/ajaxCall.js","../src/modules/listenerCallbacks.js","../src/modules/formStartup.js","../src/modules/init.js","../src/modules/helpers/getFilledFields.js","../src/modules/validationRulesAttributes.js","../src/modules/validationRules/checkbox.js","../src/modules/validationRules/checks.js","../src/modules/validationRules/equalTo.js","../src/modules/validationRules/exactLength.js","../src/modules/validationRules/file.js","../src/modules/validationRules/length.js","../src/modules/validationRules/max.js","../src/modules/validationRules/maxlength.js","../src/modules/validationRules/min.js","../src/modules/validationRules/minlength.js","../src/modules/validationRules/pattern.js","../src/modules/validationRules/radio.js","../src/modules/validationRules/requiredFrom.js","../src/modules/checkFieldValidity.js","../src/modules/isValid.js","../src/modules/checkFormValidity.js","../src/index.js","../src/modules/constructor.js","../src/modules/destroy.js","../src/modules/helpers/excludeSelector.js","../src/modules/validationErrors.js"],"sourcesContent":["\nexport const version = '4.0.2';\n","\nexport const addClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.add( className );\n    });\n}\n","\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList );\n}\n","\nexport const removeClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.remove( className );\n    });\n}\n","\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node );\n}\n","\nimport { isDOMNode } from './isDOMNode';\n\nexport const checkFormEl = formEl => {\n    let isString = typeof formEl,\n        isValidNodeSelector = isString === 'string' && isDOMNode(document.querySelector(formEl)),\n        isFormSelector = isValidNodeSelector && document.querySelector(formEl).tagName.toLowerCase() === 'form',\n        obj = {\n            result: isDOMNode(formEl) || isFormSelector,\n            element: (isString === 'string' ? document.querySelector(formEl) : formEl)\n        };\n\n    return obj;\n}\n","\nexport const customEvents = {\n    field: {\n        validation: 'fjs.field:validation'\n    },\n    form: {\n        submit:     'fjs.form:submit',\n        validation: 'fjs.form:validation'\n    }\n}\n","\nexport const mergeObjects = function( out = {} ){\n    for(let i=1; i<arguments.length; i++){\n        let obj = arguments[i];\n\n        if(!obj){ continue; }\n\n        for(let key in obj){\n            let isArray = Object.prototype.toString.call(obj[key]) === \"[object Array]\";\n            let isObject = Object.prototype.toString.call(obj[key]) === \"[object Object]\";\n\n            // COPY ONLY ENUMERABLE PROPERTIES\n            if( obj.hasOwnProperty(key) ){\n                if( isArray ){\n\n                    if( typeof out[key] === 'undefined' ){\n                        out[key] = [];\n                    }\n                    out[key] = out[key].concat( obj[key].slice(0) );\n\n                } else if( isObject ){\n\n                    out[key] = mergeObjects(out[key], obj[key]);\n\n                } else {\n\n                    // * STRING | NUMBER | BOOLEAN | FUNCTION\n                    if( Array.isArray(out[key]) ){\n                        // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                        out[key].push(obj[key]);\n                    } else {\n                        out[key] = obj[key];\n                    }\n\n                }\n            }\n        }\n    }\n\n    return out;\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const dispatchCustomEvent = ( elem, eventName, data = {}, eventOptions = {} ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions);\n    const eventObj = new Event(eventName, eventOptions);\n    eventObj.data = data;\n    elem.dispatchEvent( eventObj );\n}\n","\nexport const fieldsStringSelector = 'input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"hidden\"]), select, textarea'\n","\nexport const getSplitChar = string => {\n    let splitChar = '.';\n\n    if( string.indexOf(splitChar) === -1 ){\n        if( string.indexOf('-') >= 0 ){\n            splitChar = '-';\n        } else if( string.indexOf('/') >= 0 ){\n            splitChar = '/';\n        }\n    }\n\n    return splitChar;\n}\n","\nexport const getUniqueFields = nodeList => {\n\n    let currentFieldName = '',\n        currentFieldType = '';\n\n    return Array.from( nodeList ).filter(fieldEl => {\n        const name = fieldEl.name,\n              type = fieldEl.type;\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false;\n        }\n        \n        if( !fieldEl.matches('[data-required-from]') ){\n            currentFieldName = name;\n            currentFieldType = type;\n        }\n        return true;\n    });\n    \n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const getValidateFieldDefault = obj => {\n    return mergeObjects({}, { result: false, fieldEl: null }, obj);\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const getValidateFormDefault = obj => {\n    return mergeObjects({}, { result: true, fields: [] }, obj);\n}\n","\nexport const isFieldForChangeEvent = fieldEl => {\n    return fieldEl.matches('select, [type=\"radio\"], [type=\"checkbox\"], [type=\"file\"]');\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const runFunctionsSequence = ( { functionsList = [], data = {}, stopConditionFn = function(){return false} } = {} ) => {\n    return functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1]);\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res);\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result);\n                    return res;\n                });\n        });\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList);\n}\n","\nexport const serializeObject = obj => {\n    var objToString = (\n            (obj && typeof obj === 'object' && obj.constructor === Object) ? \n            Object.keys(obj)\n                .reduce((a,k) => {\n                    a.push(k+'='+encodeURIComponent(obj[k]));\n                    return a\n                },[]).join('&') : \n            obj\n    );\n    return objToString;\n}\n","\nexport const toCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase(); });\n}\n","\nimport { addClass, checkDirtyField } from './helpers';\n\nexport const defaultCallbacksInOptions = {\n    fieldOptions: {\n\n        beforeValidation: function beforeValidationDefault ( fieldObj ) {\n\n            const fieldOptions = this.options.fieldOptions;\n\n            checkDirtyField( fieldObj.fieldEl, fieldOptions.cssClasses.dirty );\n            if( !fieldOptions.skipUIfeedback ){\n                addClass( fieldObj.fieldEl.closest('[data-formjs-question]'), fieldOptions.cssClasses.pending );\n            }\n\n        }\n\n    },\n    formOptions: {\n\n        getFormData: function getFormDataDefault ( filteredFields ) {\n\n            const formData = {},\n                  formEl = this.formEl;\n\n            filteredFields.forEach(function( fieldEl ){\n                const isCheckbox = fieldEl.type === 'checkbox',\n                      isRadio = fieldEl.type === 'radio',\n                      isSelect = fieldEl.matches('select'),\n                      name = fieldEl.name;\n                let value = fieldEl.value;\n                                \n                if( isCheckbox ) {\n                    \n                    value = fieldEl.checked;\n                    let checkboxes = Array.from( formEl.querySelectorAll('[name=\"'+ name +'\"]') );\n                    if( checkboxes.length > 1 ){\n\n                        value = [];\n                        let checkedElems = checkboxes.filter(field => field.checked);\n                        checkedElems.forEach(fieldEl => {\n                            value.push( fieldEl.value );\n                        });\n\n                    }\n                        \n                } else if( isRadio ){\n                    \n                    let checkedRadio = formEl.querySelector('[name=\"'+ name +'\"]:checked');\n                    value = (checkedRadio === null ? null : checkedRadio.value);\n                    \n                } else if( isSelect ){\n\n                    let selectedOpts = Array.from( fieldEl.options ).filter(option => option.selected);\n                    if( selectedOpts.length > 1 ){\n\n                        value = [];\n                        selectedOpts.forEach(fieldEl => {\n                            value.push( fieldEl.value );\n                        });\n\n                    }\n                }\n\n                formData[ name ] = value;\n            });\n\n            return formData;\n\n        }\n\n    }\n}\n","\nimport { addClass } from './addClass';\nimport { isNodeList } from './isNodeList';\nimport { removeClass } from './removeClass';\n\nexport const checkDirtyField = ( fields, cssClasses ) => {\n\n    var fields = (isNodeList(fields) ? Array.from( fields ) : [fields]);\n    \n    fields.forEach(fieldEl => {\n        if( fieldEl.type !== 'checkbox' && fieldEl.type !== 'radio' ){\n            let containerEl = fieldEl.closest('[data-formjs-question]') || fieldEl;\n\n            if( fieldEl.value ){\n                \n                addClass( containerEl, cssClasses );\n                \n            } else {\n                \n                removeClass( containerEl, cssClasses );\n                \n            }\n        }\n    });\n    \n}\n","\nimport { defaultCallbacksInOptions } from './optionsUtils';\n\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [defaultCallbacksInOptions.fieldOptions.beforeValidation],\n        cssClasses: {\n            dirty:              'is-dirty',\n            error:              'has-error',\n            errorEmpty:         'has-error-empty',\n            errorRule:          'has-error-rule',\n            pending:            'is-pending',\n            valid:              'is-valid'\n        },\n        focusOnRelated:         true,\n        handleFileUpload:       true,\n        handleValidation:       true,\n        maxFileSize:            10,\n        onValidationCheckAll:   true,\n        preventPasteFields:     '[type=\"password\"], [data-equal-to]',\n        skipUIfeedback:         false,\n        strictHtmlValidation:   true,\n        validateOnEvents:       'input change'\n    },\n\n    formOptions: {\n        ajaxOptions:            {\n            cache:              'no-store',\n            credentials:        'same-origin',\n            headers: {\n                                'Content-Type': 'application/json',\n                                'Accept':       'application/json'\n            },\n            method:             'POST',\n            mode:               'same-origin',\n            redirect:           'follow',\n            timeout:            0,\n            url:                location.href\n        },\n        ajaxSubmit:             true,\n        beforeSend:             [],\n        cssClasses: {\n            ajaxComplete:       'ajax-complete',\n            ajaxError:          'ajax-error',\n            ajaxPending:        'ajax-pending',\n            ajaxSuccess:        'ajax-success',\n            submit:             'is-submitting',\n            valid:              'is-valid'\n        },\n        getFormData:            defaultCallbacksInOptions.formOptions.getFormData,\n        handleSubmit:           true\n    }\n    \n}\n","\nimport { date }         from './validationRules/date';\nimport { email }        from './validationRules/email';\nimport { number }       from './validationRules/number';\n\nexport const validationRules = {\n    date,\n    email,\n    number\n}\n","\n/*\n    DATE AS ISO 8601 DATE FORMAT:\n    YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n*/\n\nexport const date = function( string ){\n    let date = /^((((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13578]|1[02])[ \\/\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13456789]|1[012])[ \\/\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.]02[ \\/\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ \\/\\-.]02[ \\/\\-.]29))$/g.test( string ),\n        obj = {\n            result: date\n        };\n\n    return obj;\n}\n","\n// https://regex101.com/r/cdlyJy/3\n\nexport const email = function( string ){\n    let obj = {\n        result: /^[a-zA-Z_-]([\\w.-]?[a-zA-Z0-9])*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?){2,})+$/.test( string )\n    };\n\n    return obj;\n}\n","\n/*\n    ALL NUMBERS ( INTEGERS AND FLOATING )\n    VALID NUMBERS: 123 | 123.456 | .123\n*/\n\nexport const number = function( string ){\n    let obj = {\n        result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n    };\n\n    return obj;\n}","\nimport { addClass, customEvents, dispatchCustomEvent, getValidateFormDefault, removeClass, runFunctionsSequence } from './helpers';\nimport { ajaxCall } from './ajaxCall';\n\nexport function submit( event ){\n\n    const formEl = event.target,\n          instance = formEl.formjs,\n          options = instance.options,\n          formCssClasses = options.formOptions.cssClasses,\n          isAjaxForm = options.formOptions.ajaxSubmit,\n          btnEl = formEl.querySelector('[type=\"submit\"]'),\n          eventPreventDefault = ( enableBtn = true ) => {\n              if( btnEl && enableBtn ){ btnEl.disabled = false; }\n              if( event ){ event.preventDefault(); }\n          };\n\n    if( isAjaxForm ){\n        eventPreventDefault(false);\n    }\n\n    if( btnEl ){\n        if( btnEl.disabled ){\n            eventPreventDefault(false);\n            return false;\n        }\n        btnEl.disabled = true;\n    }\n\n    removeClass( formEl, (formCssClasses.ajaxComplete + ' ' + formCssClasses.ajaxError + ' ' + formCssClasses.ajaxSuccess) );\n    addClass( formEl, formCssClasses.submit );\n    \n    const handleValidation = options.fieldOptions.handleValidation,\n          formValidationPromise = (handleValidation ? instance.validateForm() : Promise.resolve(getValidateFormDefault()));\n\n    formValidationPromise.then(formValidation => {\n\n        let beforeSendData = { stopExecution: false, formData: {} };\n\n        if( !formValidation.result ){\n            eventPreventDefault();\n            removeClass( formEl, formCssClasses.submit );\n            beforeSendData.stopExecution = true;\n            return [beforeSendData];\n        }\n        \n        let formDataObj = (isAjaxForm ? instance.getFormData() : null),\n            callbacksBeforeSend = options.formOptions.beforeSend;\n\n        if( formDataObj ){\n            beforeSendData.formData = formDataObj;\n        }\n\n        const rfsObject = {\n            functionsList: callbacksBeforeSend,\n            data: beforeSendData,\n            stopConditionFn: function(data){ return data.stopExecution; }\n        };\n        return runFunctionsSequence(rfsObject);\n\n    }).then(dataList => {\n\n        if( dataList.filter(data => data.stopExecution).length > 0 ){\n            eventPreventDefault();\n            return false;\n        }\n        \n        if( isAjaxForm ){\n\n            const formData = dataList.pop().formData;\n            addClass( formEl, formCssClasses.ajaxPending );\n            dispatchCustomEvent( formEl, customEvents.form.submit, ajaxCall( formEl, formData, options ) );\n            \n        }\n\n    });\n    \n}\n","\nimport { addClass, mergeObjects, removeClass, serializeObject } from './helpers';\n\nconst getFetchMethod = (response, options) => {\n    const accept = options.headers.get('Accept');\n    const contentType = response.headers.get('Content-Type');\n    const headerOpt = accept || contentType || '';\n\n    if( headerOpt.indexOf('application/json') > -1 || headerOpt === '' ){\n        return 'json';\n    } else if( headerOpt.indexOf('text/') > -1 ){\n        return 'text';\n    } else {\n        return 'blob';\n    }\n};\n\nexport function ajaxCall( formEl, formDataObj, options ){\n\n    let btnEl = formEl.querySelector('[type=\"submit\"]'),\n        timeoutTimer,\n        ajaxOptions = mergeObjects( {}, options.formOptions.ajaxOptions ),\n        isMultipart = ajaxOptions.headers['Content-Type'] === 'multipart/form-data';\n\n    ajaxOptions.body = formDataObj;\n    \n    // POST A FormData OBJECT ( multipart )\n    if( isMultipart && options.fieldOptions.handleFileUpload ){\n        let formDataMultipart = new FormData();\n        \n        for(let key in ajaxOptions.body){\n            formDataMultipart.append( key, ajaxOptions.body[key] );\n        }\n        \n        Array.from( formEl.querySelectorAll('[type=\"file\"]') ).forEach(function( field ){\n            Array.from(field.files).forEach(function( file, idx ){\n                let name = field.name+'['+ idx +']';\n                formDataMultipart.append( name, file, file.name );\n            });\n        });\n        \n        ajaxOptions.body = formDataMultipart;\n    }\n\n    if( ajaxOptions.method === 'GET' ){\n\n        // FETCH WITH \"GET\" METHOD CAN'T HAVE \"body\". SO IT IS APPENDED TO THE URL\n        ajaxOptions.url += ( /\\?/.test(ajaxOptions.url) ? '&' : '?' ) + serializeObject( ajaxOptions.body );\n        delete ajaxOptions.body;\n\n    } else {\n\n        if( ajaxOptions.headers['Content-Type'].indexOf('application/x-www-form-urlencoded') > -1 ){\n            // POST A NORMAL FORM\n            ajaxOptions.body = serializeObject( ajaxOptions.body );\n        } else if( !isMultipart ){\n            // POST A JSON STRING\n            ajaxOptions.body = JSON.stringify(ajaxOptions.body);\n        }\n\n    }\n\n    ajaxOptions.headers = new Headers( ajaxOptions.headers );\n\n    if ( ajaxOptions.timeout > 0 ) {\n        const controller = new AbortController();\n        const signal = controller.signal;\n\n        ajaxOptions.signal = signal;\n\n        timeoutTimer = window.setTimeout(function() {\n            controller.abort();\n        }, ajaxOptions.timeout);\n    }\n\n    return fetch(ajaxOptions.url, ajaxOptions)\n        .then(function( response ){\n            if( !response.ok ){\n                return Promise.reject(response);\n            }\n\n            let fetchMethod = getFetchMethod(response, ajaxOptions);\n\n            return response[fetchMethod]();\n        })\n        .then(function( data ){\n            addClass( formEl, options.formOptions.cssClasses.ajaxSuccess );\n            return data;\n        })\n        .catch(function( error ){\n            addClass( formEl, options.formOptions.cssClasses.ajaxError );\n            return Promise.reject(error);\n        })\n        .finally(function(){\n            if( timeoutTimer ){\n                window.clearTimeout( timeoutTimer );\n            }\n            removeClass( formEl, options.formOptions.cssClasses.submit + ' ' + options.formOptions.cssClasses.ajaxPending );\n            addClass( formEl, options.formOptions.cssClasses.ajaxComplete );\n            btnEl.disabled = false;\n        });\n\n}\n","\nimport { addClass, fieldsStringSelector, isFieldForChangeEvent, removeClass } from './helpers';\nimport { submit } from './submit';\n\nexport const listenerCallbacks = {\n\n    dataTypeNumber: function( event ){\n\n        const fieldEl = event.target;\n        \n        if( fieldEl.matches('[data-type=\"number\"]') ){\n            let fieldValue = fieldEl.value,\n                hasInvalidChars = /[^\\d.,+\\-]/.test(fieldValue);\n            \n            if( hasInvalidChars ){\n                event.stopImmediatePropagation();\n                let valueReplaced = fieldValue.replace(/[^\\d.,+\\-]/g, '');\n                fieldEl.value = valueReplaced;\n            }\n        }\n\n    },\n\n    keypressMaxlength: function( event ){\n\n        const fieldEl = event.target;\n        \n        if( fieldEl.matches( '[maxlength]' ) ){\n            const maxLength = fieldEl.maxLength * 1,\n                keyPressed = event.which || event.keyCode,\n                allowedKeys = [8, 37, 38, 39, 46];\n\n            if( fieldEl.value.length >= maxLength && allowedKeys.indexOf(keyPressed) === -1 ){\n                return false;\n            }\n        }\n\n    },\n\n    pastePrevent: function( event ){\n\n        const fieldEl = event.target;\n        let fieldOptions = fieldEl.closest('form').formjs.options.fieldOptions;\n\n        if( fieldEl.matches( fieldOptions.preventPasteFields ) ){     \n            event.preventDefault();\n        }\n\n    },\n\n    submit: function( event ){\n        submit(event);\n    },\n\n    validation: function( event ){\n\n        const eventName = event.type,\n              fieldEl = event.target,\n              self = fieldEl.closest('form').formjs;\n\n        if( fieldEl.matches( fieldsStringSelector ) ){\n            const isFieldForChangeEventBoolean = isFieldForChangeEvent(fieldEl),\n                isRadio = fieldEl.type === 'radio',\n                isReqFrom = fieldEl.matches('[data-required-from]'),\n                isReqMore = fieldEl.matches('[data-require-more]'),\n                isValidValue = fieldEl.value.trim().length > 0;\n\n            // HANDLE data-require-more FIELDS\n            if( isRadio && eventName === 'change' ){\n                let findReqMoreEl = (isReqMore ? fieldEl : self.formEl.querySelector('[name=\"'+ fieldEl.name +'\"][data-require-more]')),\n                    findReqFromEl = (findReqMoreEl !== null ? self.formEl.querySelector('[data-required-from=\"#'+ findReqMoreEl.id +'\"]') : null);\n\n                if( isReqMore ){\n\n                    if( findReqFromEl !== null ){\n                        findReqFromEl.required = fieldEl.required;\n                        if( self.options.fieldOptions.focusOnRelated ){\n                            findReqFromEl.focus();\n                        }\n                    }\n\n                } else if( findReqMoreEl !== null ){\n\n                    if( findReqFromEl !== null ){\n                        findReqFromEl.required = findReqMoreEl.required && findReqMoreEl.checked;\n                        findReqFromEl.value = '';\n                    }\n\n                }\n            }\n\n            // HANDLE data-required-from FIELDS\n            if( isReqFrom ){\n                if( isValidValue ){\n\n                    let reqMoreEl = self.formEl.querySelector( fieldEl.getAttribute('data-required-from') );\n                    reqMoreEl.checked = true;\n                    fieldEl.required = reqMoreEl.required;\n                }\n            }\n            \n            if(\n                (isFieldForChangeEventBoolean && eventName === 'change') ||\n                (!isFieldForChangeEventBoolean && eventName !== 'change')\n            ){\n                \n                return self.validateField( fieldEl ).then(obj => {\n                    const type = obj.fieldEl.type,\n                          realtedFieldEqualTo = obj.fieldEl.closest('form').querySelector('[data-equal-to=\"'+ obj.fieldEl.name +'\"]');\n\n                    if(\n                        // FIELD IS ( required OR data-validate-if-filled ) AND RELATED FIELD data-equal-to HAS A VALUE\n                        (obj.fieldEl.required || obj.fieldEl.matches('[data-validate-if-filled]')) && \n                        !(type === 'checkbox' || type === 'radio') && \n                        realtedFieldEqualTo && realtedFieldEqualTo.value.trim() !== ''\n                    ){\n                        return self.validateField( realtedFieldEqualTo );\n                    } else {\n                        return obj;\n                    }\n                });\n\n            }\n        }\n        \n    },\n\n    validationEnd: function( event ){\n\n        const fieldsArray = event.data.fieldEl ? [event.data] : event.data.fields,\n              options = fieldsArray[0].fieldEl.closest('form').formjs.options.fieldOptions;\n\n        fieldsArray.forEach(function( obj ){\n            let fieldEl = obj.fieldEl;\n            if( fieldEl.matches( fieldsStringSelector ) ){\n                let containerEl = fieldEl.closest('[data-formjs-question]'),\n                    isReqFrom = fieldEl.matches('[data-required-from]'),\n                    reqMoreEl = document.querySelector( fieldEl.getAttribute('data-required-from') );\n\n                if( containerEl !== null ){\n                    removeClass( containerEl, options.cssClasses.pending );\n                }\n\n                if( containerEl !== null && !options.skipUIfeedback ){\n\n                    if( obj.result ){\n\n                        if( !isReqFrom || (isReqFrom && reqMoreEl.checked) ){\n                            // IF FIELD IS VALID\n                            let errorClasses = options.cssClasses.error + ' ' + options.cssClasses.errorEmpty + ' ' + options.cssClasses.errorRule;\n                            removeClass( containerEl, errorClasses );\n                            addClass( containerEl, options.cssClasses.valid );\n                        }\n\n                    } else {\n\n                        // IF FIELD IS NOT VALID\n                        let extraErrorClass = options.cssClasses.errorRule;\n\n                        // HANDLE CASE OF FIELD data-checks\n                        let isChecks = fieldEl.matches('[data-checks]'),\n                            checkedElLength = (isChecks ? containerEl.querySelectorAll('[name=\"' + fieldEl.name + '\"]:checked').length : 0);\n\n                        if( (!isChecks && (obj.errors && obj.errors.empty)) || (isChecks && checkedElLength === 0) ){\n                            extraErrorClass = options.cssClasses.errorEmpty;\n                        }\n\n                        let errorClasses = options.cssClasses.error + ' ' + extraErrorClass,\n                            errorClassToRemove = options.cssClasses.errorEmpty + ' ' + options.cssClasses.errorRule;\n                        removeClass( containerEl, options.cssClasses.valid + ' ' + errorClassToRemove );\n                        addClass( containerEl, errorClasses );\n\n                    }\n                }\n            }\n        });\n\n    }\n\n}\n","\nimport { customEvents } from './helpers';\nimport { listenerCallbacks } from './listenerCallbacks';\n\nexport function formStartup( formEl, options ){\n\n    formEl.noValidate = true;\n\n    let fieldOptions = options.fieldOptions,\n        formOptions = options.formOptions;\n\n    // HANDLE FIELD VALIDATION\n    if( fieldOptions.handleValidation ){\n        \n        // VALIDATION WITH ATTRIBUTES LIKE HTML ONES ( ALSO FOR BUG FIXING, EG: maxlength IN ANDROID )\n        if( fieldOptions.strictHtmlValidation ){\n            \n            // maxlength\n            // MAXLENGTH IS BUGGY IN ANDROID BROWSERS\n            formEl.addEventListener('keypress', listenerCallbacks.keypressMaxlength, false);\n\n            // data-type=\"number\"\n            // SINCE VALIDATING type=\"number\" WITH NON NUMERIC CHARS WILL RETURN EMPTY STRING IN SOME BROWSERS ( EG: FIREFOX )\n            formEl.addEventListener('input', listenerCallbacks.dataTypeNumber, false);\n            \n        }\n        \n        if( fieldOptions.preventPasteFields && formEl.querySelectorAll( fieldOptions.preventPasteFields ).length ){\n            // INIT EVENT LISTENER FOR \"PASTE\" EVENT TO PREVENT IT ON SPECIFIED FIELDS\n            formEl.addEventListener('paste', listenerCallbacks.pastePrevent, false);\n        }\n\n        // INIT EVENTS LISTENER ( AS IN fieldOptions )\n        fieldOptions.validateOnEvents.split(' ').forEach(function( eventName ){\n            let useCapturing = (eventName === 'blur' ? true : false);\n            formEl.addEventListener(eventName, listenerCallbacks.validation, useCapturing);\n        });\n\n        formEl.addEventListener(customEvents.field.validation, listenerCallbacks.validationEnd, false);\n\n    }\n    \n    // HANDLE FORM SUBMIT\n    if( formOptions.handleSubmit ){\n        // INIT FORM SUBMIT ( DEFAULT AND AJAX )\n        formEl.addEventListener('submit', listenerCallbacks.submit);\n\n        if( formOptions.ajaxSubmit ){\n            if( formEl.getAttribute('enctype') ){\n                formOptions.ajaxOptions.headers['Content-Type'] = formEl.getAttribute('enctype');\n            }\n\n            if( formEl.getAttribute('method') ){\n                formOptions.ajaxOptions.method = formEl.getAttribute('method').toUpperCase();\n            }\n\n            if( formEl.getAttribute('action') ){\n                formOptions.ajaxOptions.url = formEl.getAttribute('action');\n            }\n        }\n    }\n\n}\n","\nimport { getFilledFields, isFieldForChangeEvent } from './helpers';\nimport { listenerCallbacks } from './listenerCallbacks';\n\nexport const init = function( formEl ){\n\n    const instance = formEl.formjs;\n    const formFields = getFilledFields( formEl );\n\n    // VALIDATE ALL FILLED FIELDS\n    return Promise.all( formFields.map(fieldEl => {\n\n        const isFieldForChangeEventBoolean = isFieldForChangeEvent(fieldEl);\n        const fakeEventObj = { target: fieldEl, type: (isFieldForChangeEventBoolean ? 'change': '') };\n        return listenerCallbacks.validation( fakeEventObj );\n\n    }) ).then(fields => {\n        instance.isInitialized = true;\n        return { instance, fields };\n    });;\n\n}\n","\nimport { fieldsStringSelector } from './fieldsStringSelector';\nimport { getUniqueFields } from './getUniqueFields';\n\nexport const getFilledFields = formEl => {\n    return getUniqueFields( formEl.querySelectorAll(fieldsStringSelector) )\n    .map(fieldEl => {\n\n        const name = fieldEl.name,\n              type = fieldEl.type,\n              isCheckboxOrRadio = (type === 'checkbox' || type === 'radio'),\n              fieldChecked = formEl.querySelector('[name=\"' + name + '\"]:checked'),\n              isReqFrom = fieldEl.matches('[data-required-from]'),\n              reqMoreEl = (isReqFrom ? formEl.querySelector(fieldEl.getAttribute('data-required-from')) : null);\n\n        return (\n            isCheckboxOrRadio ? (fieldChecked || null) :\n            (isReqFrom && reqMoreEl.checked) || (!isReqFrom && fieldEl.value) ? fieldEl : null\n        );\n\n    })\n    .filter(fieldEl => fieldEl !== null);\n}\n","\nimport { checkbox }     from './validationRules/checkbox';\nimport { checks }       from './validationRules/checks';\nimport { equalTo }      from './validationRules/equalTo';\nimport { exactLength }  from './validationRules/exactLength';\nimport { file }         from './validationRules/file';\nimport { length }       from './validationRules/length';\nimport { max }          from './validationRules/max';\nimport { maxlength }    from './validationRules/maxlength';\nimport { min }          from './validationRules/min';\nimport { minlength }    from './validationRules/minlength';\nimport { pattern }      from './validationRules/pattern';\nimport { radio }        from './validationRules/radio';\nimport { requiredFrom } from './validationRules/requiredFrom';\n\nexport const validationRulesAttributes = {\n    checkbox,\n    checks,\n    equalTo,\n    exactLength,\n    file,\n    length,\n    max,\n    maxlength,\n    min,\n    minlength,\n    pattern,\n    radio,\n    requiredFrom,\n}\n","\n\nexport const checkbox = function( data ){\n    let formEl = data.fieldEl.closest('form'),\n        dataChecksEl = formEl.querySelector('[name=\"' + data.fieldEl.name + '\"][data-checks]'),\n        obj = { result: data.fieldEl.checked };\n\n    if( dataChecksEl !== null ){\n        obj = this.checks({ attrValue: dataChecksEl.getAttribute('data-checks'), fieldEl: dataChecksEl});\n    }\n\n    return obj;\n}\n","\nexport const checks = function( data ){\n    try {\n        let attrValue = JSON.parse(data.attrValue),\n            fieldEl = data.fieldEl,\n            formEl = fieldEl.closest('form'),\n            checkedElLength = formEl.querySelectorAll('[name=\"' + fieldEl.name + '\"]:checked').length,\n            isMinOk = checkedElLength >= attrValue[0],\n            isMaxOk = checkedElLength <= attrValue[1],\n            obj = { result: isMinOk && isMaxOk };\n\n        if( !obj.result ){\n            obj.errors = { checks: true };\n            if( !isMinOk ){ obj.errors.minChecks = true; }\n            if( !isMaxOk ){ obj.errors.maxChecks = true; }\n        }\n\n        return obj;\n    } catch(e){\n        throw new Error('\"data-checks\" attribute is not a valid array!');\n    }\n}\n","\nexport const equalTo = function( data ){\n    let fieldEl = data.fieldEl,\n        formEl = fieldEl.closest('form'),\n        checkFromEl = formEl.querySelector( '[name=\"' + fieldEl.getAttribute('data-equal-to') + '\"]' ),\n        obj = { result: fieldEl.value === checkFromEl.value };\n\n    if( !obj.result ){\n        obj.errors = { equalTo: true };\n    }\n\n    return obj;\n}\n","\nexport const exactLength = function( data ){\n    let valueLength = data.fieldEl.value.length,\n        exactLength = (data.attrValue * 1),\n        obj = { result: valueLength === exactLength };\n\n    if( !obj.result ){\n        obj.errors = { exactLength: true };\n        if( valueLength < exactLength ){ obj.errors.minlength = true; }\n        else { obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nexport const file = function( data ){\n    let fieldEl = data.fieldEl,\n        maxFileSize = (fieldEl.getAttribute('data-max-file-size') || data.fieldOptions.maxFileSize) * 1,\n        MIMEtype = (fieldEl.accept ? new RegExp(fieldEl.accept.replace( '*', '[^\\\\/,]+' )) : null),\n        filesList = Array.from(fieldEl.files),\n        obj = { result: true };\n\n    filesList.forEach(function( file ){\n        let exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize,\n            isAcceptedFileType = (MIMEtype !== null ? MIMEtype.test(file.type) : true);\n\n        if( exceedMaxFileSize || !isAcceptedFileType ){\n            obj.result = false;\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {};\n            }\n            obj.errors.file = true;\n            if( exceedMaxFileSize ){ obj.errors.maxFileSize = true; }\n            if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true; }\n\n        }\n    });\n\n    return obj;\n}\n","\nexport const length = function( data ){\n    try {\n        let valueL = data.fieldEl.value.length,\n            attrValue = JSON.parse(data.attrValue),\n            isMinlengthOk = valueL >= attrValue[0],\n            isMaxlengthOk = valueL <= attrValue[1],\n            obj = { result: isMinlengthOk && isMaxlengthOk };\n\n        if( !obj.result ){\n            obj.errors = { stringLength: true };\n            if( !isMinlengthOk ){ obj.errors.minlength = true; }\n            if( !isMaxlengthOk ){ obj.errors.maxlength = true; }\n        }\n\n        return obj;\n    } catch(e){\n        throw new Error('\"data-length\" attribute is not a valid array!');\n    }\n}\n","\nimport { getSplitChar } from '../helpers';\n\nexport const max = function( data ){\n    let fieldEl = data.fieldEl,\n        isDate = (fieldEl.matches('[type=\"date\"]') || fieldEl.matches('[data-subtype=\"date\"]') || fieldEl.matches('[data-subtype=\"dateDDMMYYYY\"]')),\n        value = data.fieldEl.value,\n        maxVal = data.attrValue;\n    \n    if( isDate ){\n        let splitChar = getSplitChar( value );\n\n        if( value.indexOf(splitChar) === 2 ){\n            // DD MM YYYY\n            value = value.split( splitChar ).reverse();\n        } else {\n            // YYYY MM DD\n            value = value.split( splitChar );\n        }\n\n        value = value.join('');\n        maxVal = maxVal.split('-').join('');\n    }\n\n    value = value * 1;\n    maxVal = maxVal * 1;\n\n    let obj = { result: value <= maxVal };\n\n    if( !obj.result ){        \n        obj.errors = { max: true };\n    }\n    \n    return obj;\n}\n","\nexport const maxlength = function( data ){\n    const obj = {\n        result: data.fieldEl.value.length <= (data.attrValue * 1)\n    };\n\n    if( !obj.result ){\n        obj.errors = { maxlength: true };\n    }\n\n    return obj;\n}\n","\nimport { getSplitChar } from '../helpers';\n\nexport const min = function( data ){\n    let fieldEl = data.fieldEl,\n        isDate = (fieldEl.matches('[type=\"date\"]') || fieldEl.matches('[data-subtype=\"date\"]') || fieldEl.matches('[data-subtype=\"dateDDMMYYYY\"]')),\n        value = data.fieldEl.value,\n        minVal = data.attrValue;\n    \n    if( isDate ){\n        let splitChar = getSplitChar( value );\n\n        if( value.indexOf(splitChar) === 2 ){\n            // DD MM YYYY\n            value = value.split( splitChar ).reverse();\n        } else {\n            // YYYY MM DD\n            value = value.split( splitChar );\n        }\n\n        value = value.join('');\n        minVal = minVal.split('-').join('');\n    }\n\n    value = value * 1;\n    minVal = minVal * 1;\n\n    let obj = { result: value >= minVal };\n\n    if( !obj.result ){        \n        obj.errors = { min: true };\n    }\n    \n    return obj;\n}\n","\nexport const minlength = function( data ){\n    const obj = {\n        result: data.fieldEl.value.length >= (data.attrValue * 1)\n    };\n\n    if( !obj.result ){\n        obj.errors = { minlength: true };\n    }\n\n    return obj;\n}\n","\nexport const pattern = function( data ){\n    let fieldEl = data.fieldEl,\n        fieldPattern = fieldEl.pattern,\n        fieldRegex = new RegExp( fieldPattern ),\n        obj = { result: fieldRegex.test( fieldEl.value ) };\n\n    if( !obj.result ){\n        obj.errors = { pattern: true };\n    }\n\n    return obj;\n}\n","\nexport const radio = function( data ){\n    let fieldEl = data.fieldEl,\n        fieldChecked = fieldEl.closest('form').querySelector( '[name=\"'+ fieldEl.name +'\"]:checked' ),\n        isValid = fieldChecked !== null && fieldChecked.value.trim().length > 0,\n        obj = { result: isValid };\n\n    return obj;\n}\n","\nexport const requiredFrom = function( data ){\n    let fieldEl = data.fieldEl,\n        formEl = fieldEl.closest('form'),\n        isValidValue = fieldEl.value.trim().length > 0,\n        reqMoreEl = formEl.querySelector( fieldEl.getAttribute('data-required-from') ),\n        checkedEl = formEl.querySelector( '[name=\"'+ reqMoreEl.name +'\"]:checked' ),\n        obj = { result: checkedEl !== null };\n\n    if( reqMoreEl.checked && reqMoreEl.required ){\n        obj.result = isValidValue;\n    }\n\n    if( !obj.result ){\n        obj.errors = { requiredFrom: true };\n    }\n    \n    return obj;\n}\n","\nimport { getValidateFieldDefault, isDOMNode, runFunctionsSequence } from './helpers';\nimport { isValid } from './isValid';\n\nexport function checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    if( !isDOMNode(fieldEl) ){\n        const obj = getValidateFieldDefault({fieldEl});\n        return Promise.resolve(obj);\n    }\n\n    const isValidValue =      fieldEl.value.trim().length > 0,\n          isRequired =        fieldEl.required,\n          isReqFrom =         fieldEl.matches('[data-required-from]'),\n          isValidateIfFilled =fieldEl.matches('[data-validate-if-filled]'),\n          rfsObject = {\n            functionsList: fieldOptions.beforeValidation,\n            data: {fieldEl}\n        };\n\n    return runFunctionsSequence(rfsObject)\n        .then(data => {\n\n            let dataObj = data.pop();\n            return new Promise(resolve => {\n                if(\n                    (!isRequired && !isValidateIfFilled && !isReqFrom) ||   // IT IS A NORMAL FORM FIELD\n                    (isValidateIfFilled && !isValidValue) ||                // IT IS data-validate-if-filled AND EMPTY\n                    (isReqFrom && !isRequired )                             // IT IS data-required-from AND NOT required\n                ){\n\n                    dataObj.result = true;\n                    resolve( dataObj );\n                \n                } else {\n\n                    resolve( isValid( fieldEl, fieldOptions, validationRules, validationErrors ) );\n                    \n                }\n\n            });\n\n        });\n\n}\n","\nimport { getValidateFieldDefault, mergeObjects, toCamelCase } from './helpers';\nimport { validationRulesAttributes } from './validationRulesAttributes';\n\nexport function isValid( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    const fieldType = ( fieldEl.matches('[data-subtype]') ? toCamelCase( fieldEl.getAttribute('data-subtype') ) : fieldEl.type ),\n          fieldValue = fieldEl.value,\n          isValidValue = fieldValue.trim().length > 0,\n          // ALPHABETICAL REVERSE ORDER\n          fieldAttributes = Array.from(fieldEl.attributes).sort((a,b) => { return a.name < b.name });\n\n    const attrValidations = [];\n    let attrValidationsResult = isValidValue,\n        obj = getValidateFieldDefault({result: isValidValue, fieldEl});\n\n    if( !obj.result ){\n        obj.errors = { empty: true };\n        return Promise.resolve(obj);\n    }\n\n    // COLLECT SPECIFIC VALIDATIONS FOR validationRulesAttributes\n    fieldAttributes.forEach(attr => {\n        // FOR data-* ATTRIBUTES -> REMOVE \"data-\" AND TRANSFORM TO CAMELCASE\n        const attrName = toCamelCase( attr.name.replace('data-', '') ),\n              attrValue = attr.value,\n              isAttrValueWithFn = attrName === 'type' && typeof validationRulesAttributes[attrValue] === 'function',\n              isAttrNameWithFn = typeof validationRulesAttributes[attrName] === 'function';\n\n        if( isAttrValueWithFn || isAttrNameWithFn ){\n\n            const extraValObj = {\n                    attrName: (isAttrValueWithFn ? attrValue : attrName),\n                    attrValue: attrValue,\n                    fieldEl,\n                    fieldOptions\n                };\n\n            if( isAttrValueWithFn || attrName === 'requiredFrom' ){\n                // THESE VALIDATIONS MUST RUN BEFORE ALL OTHERS\n                attrValidations.unshift( extraValObj );\n            } else {\n                attrValidations.push( extraValObj );\n            }\n\n        }\n    });\n\n    return new Promise(resolve => {\n\n        // RUN SPECIFIC VALIDATIONS FOR validationRulesAttributes\n        attrValidations.forEach(item => {\n            const extraVal = validationRulesAttributes[item.attrName]( item );\n            if( !extraVal.result ){\n                obj = mergeObjects({}, obj, extraVal);\n                attrValidationsResult = false;\n            }\n        });\n\n        // RUN VALIDATIONS FOR validationRules\n        if( typeof validationRules[fieldType] === 'function' ){\n            resolve( validationRules[fieldType](fieldValue, fieldEl) );\n        } else {\n            resolve( obj );\n        }\n\n    }).then(data => {\n\n        obj = mergeObjects( {}, obj, data, {fieldEl} );\n        obj.result = obj.result && attrValidationsResult;\n\n        if( !obj.result ){\n            const fieldErrors = (typeof validationErrors[fieldType] === 'function' ? validationErrors[fieldType](fieldValue, fieldEl) : {});\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {};\n            }\n            obj.errors.rule = true;\n            obj.errors = mergeObjects({}, obj.errors, fieldErrors);\n        }\n        \n        return obj;\n\n    });\n\n}\n","\nimport { fieldsStringSelector, getUniqueFields, getValidateFieldDefault, getValidateFormDefault, mergeObjects } from './helpers';\nimport { checkFieldValidity } from './checkFieldValidity';\n\nexport function checkFormValidity( formEl, fieldOptions, validationRules, validationErrors, fieldToSkip = null ){\n\n    fieldOptions = mergeObjects( {}, fieldOptions, {focusOnRelated: false} );\n\n    const obj = getValidateFormDefault(),\n          fieldsList = getUniqueFields( formEl.querySelectorAll(fieldsStringSelector) );\n\n    return Promise.all( fieldsList.map(fieldEl => {\n\n        if( fieldToSkip && fieldEl === fieldToSkip ){\n            const obj2 = getValidateFieldDefault({fieldEl, result: true});\n            return Promise.resolve(obj2);\n        }\n        \n        return checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors );\n\n    }) ).then(list => {\n\n        let areAllFieldsValid = list.filter(fieldObj => !fieldObj.result).length === 0;\n        obj.result = areAllFieldsValid;\n        obj.fields = list;\n\n        return obj;\n\n    });\n\n}\n","\nimport { version }              from './modules/version';\nimport { customEvents, dispatchCustomEvent, excludeSelector, mergeObjects, removeClass } from './modules/helpers';\nimport { options }              from './modules/options';\nimport { validationRules }      from './modules/validationRules';\nimport { validationErrors }     from './modules/validationErrors';\nimport { listenerCallbacks }    from './modules/listenerCallbacks';\nimport { constructorFn }        from './modules/constructor';\nimport { destroy }              from './modules/destroy';\nimport { init }                 from './modules/init';\nimport { checkFieldValidity }   from './modules/checkFieldValidity';\nimport { checkFormValidity }    from './modules/checkFormValidity';\n\nclass Form {\n\n    constructor( formEl, optionsObj ){\n        constructorFn(this, formEl, optionsObj);\n    }\n\n    destroy(){\n        destroy(this.formEl, this.options);\n    }\n    \n    getFormData(){\n        const formFieldsEl = this.formEl.querySelectorAll('input, select, textarea'),\n              filteredFields = Array.from( formFieldsEl ).filter( elem => elem.matches(excludeSelector) );\n        return this.options.formOptions.getFormData(filteredFields);\n    }\n\n    init(){\n        return init(this.formEl);\n    }\n\n    validateField( fieldEl, fieldOptions ){\n        fieldEl = (typeof fieldEl === 'string' ? this.formEl.querySelector(fieldEl) : fieldEl);\n        fieldOptions = mergeObjects({}, this.options.fieldOptions, fieldOptions);\n        const formEl = this.formEl;\n        const skipUIfeedback = this.options.fieldOptions.skipUIfeedback;\n        return checkFieldValidity(fieldEl, fieldOptions, this.validationRules, this.validationErrors)\n            .then(obj => {\n                return new Promise(resolve => {\n                    if( obj.fieldEl ){\n                        dispatchCustomEvent( obj.fieldEl, customEvents.field.validation, obj, { bubbles: false } );\n                        dispatchCustomEvent( formEl, customEvents.field.validation, obj );\n                        if( fieldOptions.onValidationCheckAll && obj.result ){\n                            // FORCE skipUIfeedback TO true\n                            fieldOptions.skipUIfeedback = true;\n                            resolve(\n                                checkFormValidity( formEl, fieldOptions, this.validationRules, this.validationErrors, fieldEl )\n                                    .then(dataForm => {\n                                        const clMethodName = dataForm.result ? 'add' : 'remove';\n                                        formEl.classList[clMethodName]( this.options.formOptions.cssClasses.valid );\n                                        dispatchCustomEvent( formEl, customEvents.form.validation, dataForm );\n                                        // RESTORE skipUIfeedback TO THE ORIGINAL VALUE\n                                        fieldOptions.skipUIfeedback = skipUIfeedback;\n                                        return obj;\n                                    })\n                            );\n                        } else if( !obj.result ){\n                            removeClass( formEl, this.options.formOptions.cssClasses.valid );\n                        }\n                    }\n                    resolve( obj );\n                });\n            });\n    }\n\n    validateForm( fieldOptions ){\n        fieldOptions = mergeObjects({}, this.options.fieldOptions, fieldOptions);\n        const formEl = this.formEl;\n        return checkFormValidity(formEl, fieldOptions, this.validationRules, this.validationErrors)\n            .then(data => {\n                const clMethodName = data.result ? 'add' : 'remove';\n                formEl.classList[clMethodName]( this.options.formOptions.cssClasses.valid );\n                listenerCallbacks.validationEnd( {data} );\n                dispatchCustomEvent( formEl, customEvents.form.validation, data );\n                return data;\n            });\n\n    }\n    \n    static addValidationErrors( errorsObj ){\n        this.prototype.validationErrors = mergeObjects({}, this.prototype.validationErrors, errorsObj);\n    }\n\n    static addValidationRules( rulesObj ){\n        this.prototype.validationRules = mergeObjects({}, this.prototype.validationRules, rulesObj);\n    }\n    \n    static setOptions( optionsObj ){\n        this.prototype.options = mergeObjects({}, this.prototype.options, optionsObj);\n    }\n\n}\n\nForm.prototype.isInitialized = false;\nForm.prototype.options = options;\nForm.prototype.validationErrors = validationErrors;\nForm.prototype.validationRules = validationRules;\nForm.prototype.version = version;\n\nexport default Form;\n","\nimport { checkFormEl, isNodeList, mergeObjects }   from './helpers';\nimport { formStartup }                             from './formStartup';\n\nexport function constructorFn( self, formEl, optionsObj ){\n\n    let argsL = arguments.length,\n        checkFormElem = checkFormEl(formEl);\n\n    if( argsL === 0 || (argsL > 0 && !formEl) ){\n        throw new Error('First argument \"formEl\" is missing or falsy!');\n    }\n    if( isNodeList(formEl) ){\n        throw new Error('First argument \"formEl\" must be a single DOM node or a form CSS selector, not a NodeList!');\n    }\n    if( !checkFormElem.result ){\n        throw new Error('First argument \"formEl\" is not a DOM node nor a form CSS selector!');\n    }\n\n    self.formEl = checkFormElem.element;\n    self.formEl.formjs = self;\n    self.options = mergeObjects({}, self.constructor.prototype.options, optionsObj);\n\n    // BINDING CONTEXT FOR FUTURE EXECUTION\n    const cbList = [\n        // IN fieldOptions\n        'beforeValidation',\n        // IN formOptions\n        'beforeSend',\n        'getFormData'\n    ];\n    cbList.forEach(cbName => {\n        let optionType = self.options.formOptions[cbName] ? 'formOptions' : 'fieldOptions',\n            cbOpt = self.options[optionType][cbName];\n\n        if( cbOpt ){\n            self.options[optionType][cbName] = ( Array.isArray(cbOpt) ? cbOpt.map(cbFn => cbFn.bind(self)) : cbOpt.bind(self) );\n        }\n    });\n\n    formStartup( self.formEl, self.options );\n    \n}\n","\nimport { customEvents } from './helpers';\nimport { listenerCallbacks } from './listenerCallbacks';\n\n\nexport function destroy( formEl, options ){\n\n    if( options.fieldOptions.strictHtmlValidation ){\n        formEl.removeEventListener('keypress', listenerCallbacks.keypressMaxlength, false);\n        formEl.removeEventListener('input', listenerCallbacks.dataTypeNumber, false);\n    }\n\n    if( options.fieldOptions.preventPasteFields ){\n        formEl.removeEventListener('paste', listenerCallbacks.pastePrevent, false);\n    }\n\n    if( options.formOptions.handleSubmit ){\n        formEl.removeEventListener('submit', listenerCallbacks.submit);\n    }\n\n    options.fieldOptions.validateOnEvents.split(' ').forEach(function( eventName ){\n        let useCapturing = (eventName === 'blur' ? true : false);\n        formEl.removeEventListener(eventName, listenerCallbacks.validation, useCapturing);\n    });\n\n    formEl.removeEventListener(customEvents.field.validation, listenerCallbacks.validationEnd, false);\n\n    delete formEl.formjs;\n    \n}\n","\nexport const excludeSelector = ':not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"file\"]):not([data-exclude-data])'\n","\nexport const validationErrors = {\n\n    email: function ( string ) {\n        const obj = {};\n\n        if( string.indexOf('@') === -1 ){\n\n            // @ IS MISSING\n            obj.missingAtChar = true;\n\n        } else {\n\n            let splitAt_at = string.split('@');\n            if( splitAt_at[0].length === 0 ){\n\n                // USER NAME IS MISSING\n                obj.missingUserName = true;\n\n            }\n\n            if( splitAt_at[1].length === 0 ){\n\n                // IS EMPTY AFTER @\n                obj.missingDomain = true;\n                obj.missingExtensionDot = true;\n                obj.missingExtension = true;\n\n            } else if( splitAt_at[1].indexOf('.') === -1 ) {\n\n                // DOT IS MISSING\n                obj.missingExtensionDot = true;\n                obj.missingExtension = true;\n\n            } else {\n\n                // EXTENSION MISSING OR NOT LONG ENOUGH\n                let splitAt_dot = splitAt_at[1].split('.'),\n                    extLength = splitAt_dot[1].length;\n                if( extLength === 0 ) {\n                    obj.missingExtension = true;\n                } else if( extLength < 2 ){\n                    obj.minlengthExtension = true;\n                }\n\n            }\n        }\n\n        return obj;\n\n    }\n\n}"],"names":["addClass","element","cssClasses","split","forEach","className","classList","add","isNodeList","nodeList","NodeList","prototype","isPrototypeOf","removeClass","remove","isDOMNode","node","Element","checkFormEl","formEl","isString","isFormSelector","document","querySelector","tagName","toLowerCase","result","customEvents","validation","submit","mergeObjects","out","i","arguments","length","obj","key","isArray","Object","toString","call","isObject","hasOwnProperty","concat","slice","Array","push","dispatchCustomEvent","elem","eventName","data","eventOptions","bubbles","eventObj","Event","dispatchEvent","fieldsStringSelector","getSplitChar","string","splitChar","indexOf","getUniqueFields","currentFieldName","currentFieldType","from","filter","fieldEl","name","type","matches","getValidateFieldDefault","getValidateFormDefault","fields","isFieldForChangeEvent","runFunctionsSequence","functionsList","stopConditionFn","reduce","acc","promiseFn","then","res","dataNew","Promise","resolve","dataList","serializeObject","constructor","keys","a","k","encodeURIComponent","join","toCamelCase","replace","all","letter","toUpperCase","defaultCallbacksInOptions","fieldOptions","beforeValidation","fieldObj","this","options","dirty","containerEl","closest","value","skipUIfeedback","pending","formOptions","getFormData","filteredFields","formData","isCheckbox","isRadio","isSelect","checked","checkboxes","querySelectorAll","field","checkedRadio","selectedOpts","option","selected","error","errorEmpty","errorRule","valid","focusOnRelated","handleFileUpload","handleValidation","maxFileSize","onValidationCheckAll","preventPasteFields","strictHtmlValidation","validateOnEvents","ajaxOptions","cache","credentials","headers","Content-Type","Accept","method","mode","redirect","timeout","url","location","href","ajaxSubmit","beforeSend","ajaxComplete","ajaxError","ajaxPending","ajaxSuccess","handleSubmit","validationRules","date","test","email","number","event","target","instance","formjs","formCssClasses","isAjaxForm","btnEl","eventPreventDefault","enableBtn","disabled","preventDefault","validateForm","formValidation","beforeSendData","stopExecution","formDataObj","callbacksBeforeSend","pop","timeoutTimer","isMultipart","body","formDataMultipart","FormData","append","files","file","idx","JSON","stringify","Headers","controller","AbortController","signal","window","setTimeout","abort","fetch","response","ok","reject","fetchMethod","accept","get","contentType","headerOpt","getFetchMethod","catch","finally","clearTimeout","ajaxCall","listenerCallbacks","fieldValue","stopImmediatePropagation","valueReplaced","maxLength","keyPressed","which","keyCode","allowedKeys","self","isFieldForChangeEventBoolean","isReqFrom","isReqMore","isValidValue","trim","findReqMoreEl","findReqFromEl","id","required","focus","reqMoreEl","getAttribute","validateField","realtedFieldEqualTo","fieldsArray","errorClasses","extraErrorClass","isChecks","checkedElLength","errors","empty","errorClassToRemove","formStartup","noValidate","addEventListener","useCapturing","init","formFields","map","isCheckboxOrRadio","fieldChecked","getFilledFields","isInitialized","validationRulesAttributes","checkbox","dataChecksEl","checks","attrValue","parse","isMinOk","isMaxOk","minChecks","maxChecks","e","Error","equalTo","checkFromEl","exactLength","valueLength","minlength","maxlength","MIMEtype","RegExp","filesList","exceedMaxFileSize","size","isAcceptedFileType","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","stringLength","max","isDate","maxVal","reverse","min","minVal","pattern","fieldPattern","radio","requiredFrom","checkFieldValidity","validationErrors","isRequired","isValidateIfFilled","rfsObject","dataObj","fieldType","fieldAttributes","attributes","sort","b","attrValidations","attrValidationsResult","attr","attrName","isAttrValueWithFn","isAttrNameWithFn","extraValObj","unshift","item","extraVal","fieldErrors","rule","isValid","checkFormValidity","fieldToSkip","fieldsList","obj2","list","areAllFieldsValid","Form","[object Object]","optionsObj","argsL","checkFormElem","cbList","cbName","optionType","cbOpt","cbFn","bind","constructorFn","removeEventListener","destroy","formFieldsEl","dataForm","clMethodName","errorsObj","rulesObj","missingAtChar","splitAt_at","missingUserName","missingDomain","missingExtensionDot","missingExtension","extLength","minlengthExtension","version"],"mappings":"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"}