{"version":3,"file":"formjs-esm.min.js","sources":["../src/modules/version.js","../src/modules/helpers/addClass.js","../src/modules/helpers/isNodeList.js","../src/modules/helpers/removeClass.js","../src/modules/helpers/isDOMNode.js","../src/modules/helpers/customEvents.js","../src/modules/helpers/isPlainObject.js","../src/modules/helpers/mergeObjects.js","../src/modules/helpers/dispatchCustomEvent.js","../src/modules/helpers/fieldsStringSelector.js","../src/modules/helpers/getDateAsNumber.js","../src/modules/helpers/getSplitChar.js","../src/modules/helpers/getJSONobjectFromFieldAttribute.js","../src/modules/helpers/getUniqueFields.js","../src/modules/helpers/getValidateFieldDefault.js","../src/modules/helpers/getValidateFormDefault.js","../src/modules/helpers/isFieldForChangeEvent.js","../src/modules/helpers/runFunctionsSequence.js","../src/modules/helpers/serializeObject.js","../src/modules/helpers/toCamelCase.js","../src/modules/options.js","../src/modules/optionsUtils.js","../src/modules/helpers/checkDirtyField.js","../src/modules/validationRules.js","../src/modules/validationRules/date.js","../src/modules/validationRules/email.js","../src/modules/validationRules/number.js","../src/modules/validationRules/checkbox.js","../src/modules/validationRules/checks.js","../src/modules/validationRules/equalTo.js","../src/modules/validationRules/exactLength.js","../src/modules/validationRules/file.js","../src/modules/validationRules/length.js","../src/modules/validationRules/max.js","../src/modules/validationRules/maxlength.js","../src/modules/validationRules/min.js","../src/modules/validationRules/minlength.js","../src/modules/validationRules/pattern.js","../src/modules/validationRules/radio.js","../src/modules/listenerCallbacks/dataTypeNumber.js","../src/modules/listenerCallbacks/formValidationEnd.js","../src/modules/listenerCallbacks/keypressMaxlength.js","../src/modules/listenerCallbacks/pastePrevent.js","../src/modules/listenerCallbacks/submit.js","../src/modules/ajaxCall.js","../src/modules/listenerCallbacks/validation.js","../src/modules/listenerCallbacks/validationEnd.js","../src/modules/init.js","../src/modules/helpers/getFilledFields.js","../src/modules/checkFieldValidity.js","../src/modules/isValid.js","../src/modules/checkFormValidity.js","../src/index.js","../src/modules/helpers/checkFormEl.js","../src/modules/formStartup.js","../src/modules/destroy.js","../src/modules/helpers/excludeSelector.js","../src/modules/validationErrors.js"],"sourcesContent":["\nexport const version = '4.4.0';\n","\nexport const addClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.add( className );\n    });\n}\n","\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList );\n}\n","\nexport const removeClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.remove( className );\n    });\n}\n","\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node );\n}\n","\nexport const customEvents = {\n    field: {\n        validation: 'fjs.field:validation'\n    },\n    form: {\n        submit:     'fjs.form:submit',\n        validation: 'fjs.form:validation'\n    }\n}\n","\nexport const isPlainObject = object => {\n    return Object.prototype.toString.call( object ) === '[object Object]';\n}\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const mergeObjects = function( out = {} ){\n    Array.from(arguments).slice(1).filter(arg => !!arg).forEach(arg => {\n        Object.keys(arg).forEach(key => {\n            if( Array.isArray(arg[key]) ){\n                out[key] = (out[key] || []).concat( arg[key].slice(0) );\n            } else if( isPlainObject(arg[key]) ){\n                out[key] = mergeObjects((out[key] || {}), arg[key]);\n            } else {\n                // * STRING | NUMBER | BOOLEAN | FUNCTION\n                if( Array.isArray(out[key]) ){\n                    // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                    out[key].push(arg[key]);\n                } else {\n                    out[key] = arg[key];\n                }\n            }\n        });\n    });\n\n    return out;\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const dispatchCustomEvent = ( elem, eventName, data = {}, eventOptions = {} ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions);\n    const eventObj = new Event(eventName, eventOptions);\n    eventObj.data = data;\n    elem.dispatchEvent( eventObj );\n}\n","\nexport const fieldsStringSelector = 'input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"hidden\"]), select, textarea'\n","\nimport { getSplitChar } from './getSplitChar';\n\nconst formatMap = {\n    'YYYY-MM-DD': function(dateArray){\n        return dateArray;\n    },\n    'MM-DD-YYYY': function(dateArray){\n        return [dateArray[2], dateArray[0], dateArray[1]];\n    },\n    'DD-MM-YYYY': function(dateArray){\n        return dateArray.reverse();\n    }\n};\n\nexport const getDateAsNumber = ( dateString, dateFormat ) => {\n    dateFormat = dateFormat || 'YYYY-MM-DD';\n    const splitChar = getSplitChar(dateString);\n\n    if( dateFormat.indexOf(splitChar) < 0 ){\n        return;\n    }\n\n    dateFormat = dateFormat.replace(/[^YMD]/g, '-');\n    dateString = dateString.split(splitChar);\n    dateString = formatMap[dateFormat](dateString).join('');\n    \n    return dateString;\n}\n","\nexport const getSplitChar = string => {\n    // MATCH ANY NON-DIGIT CHAR\n    const separator = string.match(/\\D/);\n    return (separator && separator.length > 0) ? separator[0] : null;\n}\n","\nexport const getJSONobjectFromFieldAttribute = ( fieldEl, attrName ) => {\n    const customAttrEl = fieldEl.closest('['+ attrName +']');\n    return (customAttrEl && JSON.parse(customAttrEl.getAttribute(attrName))) || {};\n}\n","\nexport const getUniqueFields = nodeList => {\n\n    let currentFieldName = '',\n        currentFieldType = '';\n\n    return Array.from( nodeList ).filter(fieldEl => {\n        const name = fieldEl.name,\n              type = fieldEl.type;\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false;\n        }\n        \n        if( !fieldEl.matches('[data-required-from]') ){\n            currentFieldName = name;\n            currentFieldType = type;\n        }\n        return true;\n    });\n    \n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const getValidateFieldDefault = obj => {\n    return mergeObjects({}, { result: false, fieldEl: null }, obj);\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const getValidateFormDefault = obj => {\n    return mergeObjects({}, { result: true, fields: [] }, obj);\n}\n","\nexport const isFieldForChangeEvent = fieldEl => {\n    return fieldEl.matches('select, [type=\"radio\"], [type=\"checkbox\"], [type=\"file\"]');\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const runFunctionsSequence = ( { functionsList = [], data = {}, stopConditionFn = () => false } = {} ) => {\n    return functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1]);\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res);\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result);\n                    return res;\n                });\n        });\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList);\n}\n","\nexport const serializeObject = obj => {\n    const objToString = (\n            (obj && typeof obj === 'object' && obj.constructor === Object) ? \n            Object.keys(obj)\n                .reduce((a,k) => {\n                    a.push(k+'='+encodeURIComponent(obj[k]));\n                    return a\n                },[]).join('&') : \n            obj\n    );\n    return objToString;\n}\n","\nexport const toCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase(); });\n}\n","\nimport { beforeValidation, getFormData } from './optionsUtils';\n\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [beforeValidation],\n        cssClasses: {\n            dirty:              'is-dirty',\n            error:              'has-error',\n            errorEmpty:         'has-error-empty',\n            errorRule:          'has-error-rule',\n            pending:            'is-pending',\n            valid:              'is-valid'\n        },\n        focusOnRelated:         true,\n        handleFileUpload:       true,\n        handleValidation:       true,\n        maxFileSize:            10,\n        onValidationCheckAll:   true,\n        preventPasteFields:     '[type=\"password\"], [data-equal-to]',\n        questionContainer:      '[data-formjs-question]',\n        skipUIfeedback:         false,\n        strictHtmlValidation:   true,\n        trimValue:              false,\n        validateOnEvents:       'input change'\n    },\n\n    formOptions: {\n        ajaxOptions:            {\n            cache:              'no-store',\n            credentials:        'same-origin',\n            headers: {\n                                'Content-Type': 'application/json',\n                                'Accept':       'application/json'\n            },\n            method:             'POST',\n            mode:               'same-origin',\n            redirect:           'follow',\n            timeout:            0,\n            url:                location.href\n        },\n        ajaxSubmit:             true,\n        beforeSend:             [],\n        cssClasses: {\n            ajaxComplete:       'ajax-complete',\n            ajaxError:          'ajax-error',\n            ajaxPending:        'ajax-pending',\n            ajaxSuccess:        'ajax-success',\n            submit:             'is-submitting',\n            valid:              'is-valid'\n        },\n        getFormData:            getFormData,\n        handleSubmit:           true\n    }\n    \n}\n","\nimport { addClass, checkDirtyField, isFieldForChangeEvent } from './helpers';\n\nexport const beforeValidation = function beforeValidationDefault ( { fieldEl, fieldOptions } ) {\n\n    if( fieldOptions.trimValue && !isFieldForChangeEvent(fieldEl) ){\n        fieldEl.value = fieldEl.value.trim();\n    }\n\n    checkDirtyField( fieldEl, fieldOptions );\n    if( !fieldOptions.skipUIfeedback ){\n        addClass( fieldEl.closest( fieldOptions.questionContainer ), fieldOptions.cssClasses.pending );\n    }\n\n}\n\nexport const getFormData = function getFormDataDefault ( filteredFields, trimValues ) {\n\n    const formData = {},\n            formEl = this.formEl;\n\n    filteredFields.forEach(function( fieldEl ){\n        const isCheckbox = fieldEl.type === 'checkbox',\n                isRadio = fieldEl.type === 'radio',\n                isSelect = fieldEl.matches('select'),\n                name = fieldEl.name;\n        let value = trimValues ? fieldEl.value.trim() : fieldEl.value;\n                        \n        if( isCheckbox ) {\n            \n            value = fieldEl.checked;\n            const checkboxes = Array.from( formEl.querySelectorAll('[name=\"'+ name +'\"]') );\n            if( checkboxes.length > 1 ){\n\n                value = [];\n                const checkedElems = checkboxes.filter(field => field.checked);\n                checkedElems.forEach(fieldEl => {\n                    value.push( fieldEl.value );\n                });\n\n            }\n                \n        } else if( isRadio ){\n            \n            const checkedRadio = formEl.querySelector('[name=\"'+ name +'\"]:checked');\n            value = (checkedRadio === null ? null : checkedRadio.value);\n            \n        } else if( isSelect ){\n\n            const selectedOpts = Array.from( fieldEl.options ).filter(option => option.selected);\n            if( selectedOpts.length > 1 ){\n\n                value = [];\n                selectedOpts.forEach(fieldEl => {\n                    value.push( fieldEl.value );\n                });\n\n            }\n        }\n\n        formData[ name ] = value;\n    });\n\n    return formData;\n\n}\n","\nimport { addClass } from './addClass';\nimport { isNodeList } from './isNodeList';\nimport { removeClass } from './removeClass';\n\nexport const checkDirtyField = ( fields, fieldOptions ) => {\n\n    fields = isNodeList(fields) ? Array.from( fields ) : [fields];\n    fields.forEach(fieldEl => {\n        if( fieldEl.type !== 'checkbox' && fieldEl.type !== 'radio' ){\n            const containerEl = fieldEl.closest( fieldOptions.questionContainer ) || fieldEl;\n            if( fieldEl.value ){\n                addClass( containerEl, fieldOptions.cssClasses.dirty );\n            } else {\n                removeClass( containerEl, fieldOptions.cssClasses.dirty );\n            }\n        }\n    });\n    \n}\n","\nimport { date }         from './validationRules/date';\nimport { email }        from './validationRules/email';\nimport { number }       from './validationRules/number';\n\nimport { checkbox }     from './validationRules/checkbox';\nimport { equalTo }      from './validationRules/equalTo';\nimport { exactLength }  from './validationRules/exactLength';\nimport { file }         from './validationRules/file';\nimport { length }       from './validationRules/length';\nimport { max }          from './validationRules/max';\nimport { maxlength }    from './validationRules/maxlength';\nimport { min }          from './validationRules/min';\nimport { minlength }    from './validationRules/minlength';\nimport { pattern }      from './validationRules/pattern';\nimport { radio }        from './validationRules/radio';\n\nexport const validationRules = {\n    date,\n    email,\n    number,\n\n    checkbox,\n    equalTo,\n    exactLength,\n    file,\n    length,\n    max,\n    maxlength,\n    min,\n    minlength,\n    pattern,\n    radio\n}\n","\n/*\n    DATE AS ISO 8601 DATE FORMAT:\n    YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n*/\n\nexport const date = function( string ){\n    return {\n        result: /^((((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13578]|1[02])[ \\/\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13456789]|1[012])[ \\/\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.]02[ \\/\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ \\/\\-.]02[ \\/\\-.]29))$/g.test( string )\n    };\n}\n","\n// https://regex101.com/r/cdlyJy/3\n\nexport const email = function( string ){\n    return {\n        result: /^[a-zA-Z_-]([\\w.-]?[a-zA-Z0-9])*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?){2,})+$/.test( string )\n    };\n}\n","\n/*\n    ALL NUMBERS ( INTEGERS AND FLOATING )\n    VALID NUMBERS: 123 | 123.456 | .123\n*/\n\nexport const number = function( string ){\n    return {\n        result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n    };\n}","\nimport { checks } from './checks';\n\nexport const checkbox = function( value, fieldEl ){\n    const dataChecksEl = fieldEl.closest('form').querySelector('[name=\"' + fieldEl.name + '\"][data-checks]');\n    return dataChecksEl ? checks(dataChecksEl) : { result: fieldEl.checked };\n}\n","\nexport const checks = function( fieldEl ){\n    const attrValue = JSON.parse( fieldEl.getAttribute('data-checks') ),\n          checkedElLength = fieldEl.closest('form').querySelectorAll('[name=\"' + fieldEl.name + '\"]:checked').length,\n          isMinOk = checkedElLength >= attrValue[0],\n          isMaxOk = checkedElLength <= attrValue[1],\n          obj = { result: isMinOk && isMaxOk };\n\n    if( !obj.result ){\n        obj.errors = { checks: true };\n        if( !isMinOk ){ obj.errors.minChecks = true; }\n        if( !isMaxOk ){ obj.errors.maxChecks = true; }\n    }\n\n    return obj;\n}\n","\nexport const equalTo = function( value, fieldEl ){\n    const checkFromEl = fieldEl.closest('form').querySelector( '[name=\"' + fieldEl.getAttribute('data-equal-to') + '\"]' );\n    return { result: value === checkFromEl.value };\n}\n","\nexport const exactLength = function( value, fieldEl ){\n    const valueLength = value.length,\n          exactLength = fieldEl.getAttribute('data-exact-length') * 1,\n          obj = { result: valueLength === exactLength };\n\n    if( !obj.result ){\n        obj.errors = {};\n        if( valueLength < exactLength ){ obj.errors.minlength = true; }\n        else { obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nexport const file = function( value, fieldEl, fieldOptions ){\n    const maxFileSize = (fieldEl.getAttribute('data-max-file-size') || fieldOptions.maxFileSize) * 1,\n          MIMEtype = fieldEl.accept ? new RegExp(fieldEl.accept.replace( '*', '[^\\\\/,]+' )) : null,\n          filesList = Array.from(fieldEl.files),\n          obj = { result: true };\n\n    filesList.forEach(file => {\n        const exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize,\n              isAcceptedFileType = MIMEtype !== null ? MIMEtype.test(file.type) : true;\n\n        if( exceedMaxFileSize || !isAcceptedFileType ){\n            obj.result = false;\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {};\n            }\n            if( exceedMaxFileSize ){ obj.errors.maxFileSize = true; }\n            if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true; }\n\n        }\n    });\n\n    return obj;\n}\n","\nexport const length = function( value, fieldEl ){\n    const valueL = value.length,\n          attrValue = JSON.parse( fieldEl.getAttribute('data-length') ),\n          isMinlengthOk = valueL >= attrValue[0],\n          isMaxlengthOk = valueL <= attrValue[1],\n          obj = { result: isMinlengthOk && isMaxlengthOk };\n\n    if( !obj.result ){\n        obj.errors = { stringLength: true };\n        if( !isMinlengthOk ){ obj.errors.minlength = true; }\n        if( !isMaxlengthOk ){ obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const max = function( value, fieldEl ){\n    let maxVal = fieldEl.max;\n    const dateFormat = fieldEl.getAttribute('data-date-format');\n    \n    if( fieldEl.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat );\n        maxVal = maxVal.split('-').join('');\n    }\n\n    value = value * 1;\n    maxVal = maxVal * 1;\n    \n    return { result: value <= maxVal };\n}\n","\nexport const maxlength = function( value, fieldEl ){\n    return { result: value.length <= fieldEl.maxLength * 1 };\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const min = function( value, fieldEl ){\n    let minVal = fieldEl.min;\n    const dateFormat = fieldEl.getAttribute('data-date-format');\n    \n    if( fieldEl.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat );\n        minVal = minVal.split('-').join('');\n    }\n\n    value = value * 1;\n    minVal = minVal * 1;\n    \n    return { result: value >= minVal };\n}\n","\nexport const minlength = function( value, fieldEl ){\n    return { result: value.length >= fieldEl.minLength * 1 };\n}\n","\nexport const pattern = function( value, fieldEl ){\n    return { result: new RegExp(fieldEl.pattern).test(value) };\n}\n","\nexport const radio = function( value, fieldEl ){\n    const fieldChecked = fieldEl.closest('form').querySelector( '[name=\"'+ fieldEl.name +'\"]:checked' ),\n          isValid = fieldChecked !== null && fieldChecked.value.trim().length > 0;\n\n    return { result: isValid };\n}\n","\nexport const dataTypeNumber = function( event ){\n\n    const fieldEl = event.target;\n    \n    if( fieldEl.matches('[data-type=\"number\"]') ){\n        let fieldValue = fieldEl.value,\n            hasInvalidChars = /[^\\d.,+\\-]/.test(fieldValue);\n        \n        if( hasInvalidChars ){\n            event.stopImmediatePropagation();\n            const valueReplaced = fieldValue.replace(/[^\\d.,+\\-]/g, '');\n            fieldEl.value = valueReplaced;\n        }\n    }\n\n}\n","\nexport const formValidationEnd = function( event ){\n    const formEl = event.target;\n    const options = formEl.formjs.options;\n    \n    if( !options.fieldOptions.skipUIfeedback ){\n        const clMethodName = event.data.result ? 'add' : 'remove';\n        formEl.classList[clMethodName]( options.formOptions.cssClasses.valid );\n    }\n}\n","\nexport const keypressMaxlength = function( event ){\n\n    const fieldEl = event.target;\n    \n    if( fieldEl.matches( '[maxlength]' ) ){\n        const maxLength = fieldEl.maxLength * 1,\n            keyPressed = event.which || event.keyCode,\n            allowedKeys = [8, 37, 38, 39, 46];\n\n        if( fieldEl.value.length >= maxLength && allowedKeys.indexOf(keyPressed) === -1 ){\n            return false;\n        }\n    }\n\n}\n","\nexport const pastePrevent = function( event ){\n\n    const fieldEl = event.target;\n    const fieldOptions = fieldEl.closest('form').formjs.options.fieldOptions;\n\n    if( fieldEl.matches( fieldOptions.preventPasteFields ) ){     \n        event.preventDefault();\n    }\n\n}\n","\nimport { addClass, customEvents, dispatchCustomEvent, getValidateFormDefault, removeClass, runFunctionsSequence } from '../helpers';\nimport { ajaxCall } from '../ajaxCall';\n\nexport function submit( event ){\n\n    const formEl = event.target,\n          instance = formEl.formjs,\n          options = instance.options,\n          formCssClasses = options.formOptions.cssClasses,\n          isAjaxForm = options.formOptions.ajaxSubmit,\n          btnEl = formEl.querySelector('[type=\"submit\"]'),\n          eventPreventDefault = ( enableBtn = true ) => {\n              if( btnEl && enableBtn ){ btnEl.disabled = false; }\n              if( event ){ event.preventDefault(); }\n          };\n\n    if( isAjaxForm ){\n        eventPreventDefault(false);\n    }\n\n    if( btnEl ){\n        if( btnEl.disabled ){\n            eventPreventDefault(false);\n            return false;\n        }\n        btnEl.disabled = true;\n    }\n\n    removeClass( formEl, (formCssClasses.ajaxComplete + ' ' + formCssClasses.ajaxError + ' ' + formCssClasses.ajaxSuccess) );\n    addClass( formEl, formCssClasses.submit );\n    \n    const handleValidation = options.fieldOptions.handleValidation,\n          formValidationPromise = (handleValidation ? instance.validateForm() : Promise.resolve(getValidateFormDefault()));\n\n    formValidationPromise.then(formValidation => {\n\n        const beforeSendData = { stopExecution: false, formData: {} };\n\n        if( !formValidation.result ){\n            eventPreventDefault();\n            removeClass( formEl, formCssClasses.submit );\n            beforeSendData.stopExecution = true;\n            return [beforeSendData];\n        }\n        \n        const formDataObj = (isAjaxForm ? instance.getFormData() : null),\n              callbacksBeforeSend = options.formOptions.beforeSend;\n\n        if( formDataObj ){\n            beforeSendData.formData = formDataObj;\n        }\n\n        const rfsObject = {\n              functionsList: callbacksBeforeSend,\n              data: beforeSendData,\n              stopConditionFn: function(data){ return data.stopExecution; }\n        };\n        return runFunctionsSequence(rfsObject);\n\n    }).then(dataList => {\n\n        if( dataList.filter(data => data.stopExecution).length > 0 ){\n            eventPreventDefault();\n            return false;\n        }\n        \n        if( isAjaxForm ){\n\n            const formData = dataList.pop().formData;\n            addClass( formEl, formCssClasses.ajaxPending );\n            dispatchCustomEvent( formEl, customEvents.form.submit, ajaxCall( formEl, formData, options ) );\n            \n        }\n\n    });\n    \n}\n","\nimport { addClass, mergeObjects, removeClass, serializeObject } from './helpers';\n\nconst getFetchMethod = (response, options) => {\n    const accept = options.headers.get('Accept');\n    const contentType = response.headers.get('Content-Type');\n    const headerOpt = accept || contentType || '';\n\n    if( headerOpt.indexOf('application/json') > -1 || headerOpt === '' ){\n        return 'json';\n    } else if( headerOpt.indexOf('text/') > -1 ){\n        return 'text';\n    } else {\n        return 'blob';\n    }\n};\n\nexport function ajaxCall( formEl, formDataObj, options ){\n\n    let btnEl = formEl.querySelector('[type=\"submit\"]'),\n        timeoutTimer,\n        ajaxOptions = mergeObjects( {}, options.formOptions.ajaxOptions ),\n        isMultipart = ajaxOptions.headers['Content-Type'] === 'multipart/form-data';\n\n    ajaxOptions.body = formDataObj;\n    \n    // POST A FormData OBJECT ( multipart )\n    if( isMultipart && options.fieldOptions.handleFileUpload ){\n        let formDataMultipart = new FormData();\n        \n        for(let key in ajaxOptions.body){\n            formDataMultipart.append( key, ajaxOptions.body[key] );\n        }\n        \n        Array.from( formEl.querySelectorAll('[type=\"file\"]') ).forEach(function( field ){\n            Array.from(field.files).forEach(function( file, idx ){\n                const name = field.name+'['+ idx +']';\n                formDataMultipart.append( name, file, file.name );\n            });\n        });\n        \n        ajaxOptions.body = formDataMultipart;\n    }\n\n    if( ajaxOptions.method === 'GET' ){\n\n        // FETCH WITH \"GET\" METHOD CAN'T HAVE \"body\". SO IT IS APPENDED TO THE URL\n        ajaxOptions.url += ( /\\?/.test(ajaxOptions.url) ? '&' : '?' ) + serializeObject( ajaxOptions.body );\n        delete ajaxOptions.body;\n\n    } else {\n\n        if( ajaxOptions.headers['Content-Type'].indexOf('application/x-www-form-urlencoded') > -1 ){\n            // POST A NORMAL FORM\n            ajaxOptions.body = serializeObject( ajaxOptions.body );\n        } else if( !isMultipart ){\n            // POST A JSON STRING\n            ajaxOptions.body = JSON.stringify(ajaxOptions.body);\n        }\n\n    }\n\n    ajaxOptions.headers = new Headers( ajaxOptions.headers );\n\n    if ( ajaxOptions.timeout > 0 ) {\n        const controller = new AbortController();\n        const signal = controller.signal;\n\n        ajaxOptions.signal = signal;\n\n        timeoutTimer = window.setTimeout(function() {\n            controller.abort();\n        }, ajaxOptions.timeout);\n    }\n\n    return fetch(ajaxOptions.url, ajaxOptions)\n        .then(function( response ){\n            if( !response.ok ){\n                throw new Error(response.statusText);\n            }\n\n            const fetchMethod = getFetchMethod(response, ajaxOptions);\n\n            return response[fetchMethod]();\n        })\n        .then(function( data ){\n            addClass( formEl, options.formOptions.cssClasses.ajaxSuccess );\n            return data;\n        })\n        .catch(function( error ){\n            addClass( formEl, options.formOptions.cssClasses.ajaxError );\n            throw new Error(error.message);\n        })\n        .finally(function(){\n            if( timeoutTimer ){\n                window.clearTimeout( timeoutTimer );\n            }\n            removeClass( formEl, options.formOptions.cssClasses.submit + ' ' + options.formOptions.cssClasses.ajaxPending );\n            addClass( formEl, options.formOptions.cssClasses.ajaxComplete );\n            btnEl.disabled = false;\n        });\n\n}\n","\nimport { fieldsStringSelector, isFieldForChangeEvent } from '../helpers';\n\nexport const validation = function( event ){\n\n    const isChangeEvent = event.type === 'change',\n          fieldEl = event.target,\n          self = fieldEl.closest('form').formjs;\n\n    if( fieldEl.matches( fieldsStringSelector ) ){\n        const isFieldForChangeEventBoolean = isFieldForChangeEvent(fieldEl);\n        const hasOnlyChangeEvent = self.options.fieldOptions.validateOnEvents === 'change';\n        \n        if(\n            (isFieldForChangeEventBoolean && isChangeEvent) ||\n            (!isFieldForChangeEventBoolean && (!isChangeEvent || hasOnlyChangeEvent))\n        ){\n            \n            return self.validateField( fieldEl ).then(obj => {\n                const type = obj.fieldEl.type,\n                      realtedFieldEqualTo = obj.fieldEl.closest('form').querySelector('[data-equal-to=\"'+ obj.fieldEl.name +'\"]');\n\n                if(\n                    // FIELD IS ( required OR data-validate-if-filled ) AND RELATED FIELD data-equal-to HAS A VALUE\n                    (obj.fieldEl.required || obj.fieldEl.matches('[data-validate-if-filled]')) && \n                    !(type === 'checkbox' || type === 'radio') && \n                    realtedFieldEqualTo && realtedFieldEqualTo.value.trim() !== ''\n                ){\n                    self.validateField( realtedFieldEqualTo );\n                }\n\n                return obj;\n            });\n\n        }\n    }\n    \n}\n","\nimport { addClass, getJSONobjectFromFieldAttribute, removeClass, mergeObjects } from '../helpers';\n\nexport const validationEnd = function( event ){\n\n    const eventData = event.data,\n          fieldEl = eventData.fieldEl,\n          dataFieldOptions = getJSONobjectFromFieldAttribute( fieldEl, 'data-field-options' ),\n          fieldOptions = mergeObjects({}, fieldEl.closest('form').formjs.options.fieldOptions, dataFieldOptions),\n          containerEl = fieldEl.closest( fieldOptions.questionContainer ),\n          isReqFrom = fieldEl.matches('[data-required-from]'),\n          reqMoreEl = document.querySelector( fieldEl.getAttribute('data-required-from') );\n\n    if( containerEl && !fieldOptions.skipUIfeedback ){\n\n        if( eventData.result ){\n\n            if( !isReqFrom || (isReqFrom && reqMoreEl.checked) ){\n                // IF FIELD IS VALID\n                const errorClasses = fieldOptions.cssClasses.error + ' ' + fieldOptions.cssClasses.errorEmpty + ' ' + fieldOptions.cssClasses.errorRule;\n                removeClass( containerEl, errorClasses );\n                addClass( containerEl, fieldOptions.cssClasses.valid );\n            }\n\n        } else {\n\n            // IF FIELD IS NOT VALID\n            let extraErrorClass = fieldOptions.cssClasses.errorRule;\n\n            // HANDLE CASE OF FIELD data-checks\n            const isChecks = fieldEl.matches('[data-checks]'),\n                    checkedElLength = (isChecks ? containerEl.querySelectorAll('[name=\"' + fieldEl.name + '\"]:checked').length : 0);\n\n            if( (!isChecks && (eventData.errors && eventData.errors.empty)) || (isChecks && checkedElLength === 0) ){\n                extraErrorClass = fieldOptions.cssClasses.errorEmpty;\n            }\n\n            let errorClasses = fieldOptions.cssClasses.error + ' ' + extraErrorClass,\n                errorClassToRemove = fieldOptions.cssClasses.errorEmpty + ' ' + fieldOptions.cssClasses.errorRule;\n            removeClass( containerEl, fieldOptions.cssClasses.valid + ' ' + errorClassToRemove );\n            addClass( containerEl, errorClasses );\n\n        }\n    }\n\n}\n","\nimport { getFilledFields, isFieldForChangeEvent } from './helpers';\nimport { validation } from './listenerCallbacks';\n\nexport const init = function( formEl ){\n\n    const instance = formEl.formjs;\n    const formFields = getFilledFields( formEl );\n\n    // VALIDATE ALL FILLED FIELDS\n    return Promise.all( formFields.map(fieldEl => {\n\n        const isFieldForChangeEventBoolean = isFieldForChangeEvent(fieldEl);\n        const fakeEventObj = { target: fieldEl, type: (isFieldForChangeEventBoolean ? 'change': '') };\n        return validation( fakeEventObj );\n\n    }) ).then(fields => {\n        instance.isInitialized = true;\n        return { instance, fields };\n    });\n\n}\n","\nimport { fieldsStringSelector } from './fieldsStringSelector';\nimport { getUniqueFields } from './getUniqueFields';\n\nexport const getFilledFields = formEl => {\n    return getUniqueFields( formEl.querySelectorAll(fieldsStringSelector) )\n    .map(fieldEl => {\n\n        const name = fieldEl.name,\n              type = fieldEl.type,\n              isCheckboxOrRadio = (type === 'checkbox' || type === 'radio'),\n              fieldChecked = formEl.querySelector('[name=\"' + name + '\"]:checked'),\n              isReqFrom = fieldEl.matches('[data-required-from]'),\n              reqMoreEl = (isReqFrom ? formEl.querySelector(fieldEl.getAttribute('data-required-from')) : null);\n\n        return (\n            isCheckboxOrRadio ? (fieldChecked || null) :\n            (isReqFrom && reqMoreEl.checked) || (!isReqFrom && fieldEl.value) ? fieldEl : null\n        );\n\n    })\n    .filter(fieldEl => fieldEl !== null);\n}\n","\nimport {    getJSONobjectFromFieldAttribute,\n            getValidateFieldDefault,\n            isDOMNode,\n            mergeObjects,\n            removeClass,\n            runFunctionsSequence \n        }           from './helpers';\nimport { isValid }  from './isValid';\n\nexport function checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    if( !isDOMNode(fieldEl) ){\n        const obj = getValidateFieldDefault({fieldEl});\n        return Promise.resolve(obj);\n    }\n\n    const formEl = fieldEl.closest('form'),\n          isValidValue = fieldEl.value.trim().length > 0,\n          dataFieldOptions = getJSONobjectFromFieldAttribute( fieldEl, 'data-field-options' );\n\n    fieldOptions = mergeObjects( fieldOptions, dataFieldOptions );\n\n     // HANDLE FIELDS radio/data-require-more\n     if( fieldEl.type === 'radio' ){\n        const checkedEl = fieldEl.checked ? fieldEl : formEl.querySelector('[name=\"'+ fieldEl.name +'\"]:checked'),\n              reqMoreIsChecked = checkedEl && checkedEl.matches('[data-require-more]'),\n              findReqMoreEl = reqMoreIsChecked ? checkedEl : formEl.querySelector('[data-require-more][name=\"'+ fieldEl.name +'\"]'),\n              findReqFromEl = findReqMoreEl ? formEl.querySelector('[data-required-from=\"#'+ findReqMoreEl.id +'\"]') : null;\n        \n        if( checkedEl && findReqFromEl ){\n            findReqFromEl.required = findReqMoreEl.required && findReqMoreEl.checked;\n            if( !reqMoreIsChecked ){\n                findReqFromEl.value = '';\n            } else if( fieldOptions.focusOnRelated ) {\n                findReqFromEl.focus();\n            }\n        }\n    }\n\n    // HANDLE FIELDS data-required-from\n    if( fieldEl.matches('[data-required-from]') && isValidValue ){\n        const reqMoreEl = formEl.querySelector( fieldEl.getAttribute('data-required-from') );\n        reqMoreEl.checked = true;\n        fieldEl.required = reqMoreEl.required;\n    }\n\n    const needsValidation = fieldEl.required || (fieldEl.matches('[data-validate-if-filled]') && isValidValue);\n\n    return runFunctionsSequence({\n            functionsList: fieldOptions.beforeValidation,\n            data: { fieldEl, fieldOptions }\n        })\n        .then(data => {\n            const dataObj = data.pop();\n            return new Promise(resolve => {\n                if( !needsValidation ){\n                    dataObj.result = true;\n                }\n                resolve( needsValidation ? isValid(fieldEl, fieldOptions, validationRules, validationErrors) : dataObj );\n            });\n        })\n        .then(data => {\n            const containerEl = fieldOptions.questionContainer && data.fieldEl.closest( fieldOptions.questionContainer );\n            if( containerEl ){\n                removeClass( containerEl, fieldOptions.cssClasses.pending );\n            }\n            return data;\n        })\n        ;\n\n}\n","\nimport { getValidateFieldDefault, mergeObjects, toCamelCase } from './helpers';\n\nexport function isValid( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    const fieldValue = fieldEl.value,\n          obj = getValidateFieldDefault({result: fieldValue.trim().length > 0, fieldEl}),\n          isRadioOrCheckbox = /^(radio|checkbox)$/.test(fieldEl.type),\n          hasSelectedInput = fieldEl.closest('form').querySelectorAll('[name=\"'+ fieldEl.name +'\"]:checked').length > 0;\n\n    if( (!isRadioOrCheckbox && !obj.result) || (isRadioOrCheckbox && !hasSelectedInput) ){\n        obj.result = false;\n        obj.errors = { empty: true };\n        return Promise.resolve(obj);\n    }\n\n    // COLLECT VALIDATION METHOD NAMES ( USED TO RUN VALIDATIONS AND GET ERRORS )\n    const validationMethods = Array.from(fieldEl.attributes).reduce((accList, attr) => {\n        const attrName = toCamelCase( attr.name.replace('data-', '') ),\n              attrValue = toCamelCase( attr.value ),\n              isAttrValueWithFn = (attrName === 'type' || attrName === 'subtype') && validationRules[attrValue],\n              isAttrNameWithFn = validationRules[attrName];\n\n        if( isAttrValueWithFn || isAttrNameWithFn ){\n            accList.push( isAttrValueWithFn ? attrValue : attrName );\n        }\n        return accList;\n    }, []);\n\n    return new Promise(resolve => {\n\n        // RUN VALIDATIONS\n        const validationsResult = validationMethods.reduce((accPromise, methodName) => {\n            return accPromise.then(accObj => {\n                return new Promise(resolveVal => {\n                    // RUN VALIDATION INSIDE A PROMISE IS USEFUL FOR ASYNC VALIDATIONS\n                    resolveVal( validationRules[methodName](fieldValue, fieldEl, fieldOptions) );\n                }).then(valObj => {\n                    // ADD CUSTOM ERROR-KEY FOR EACH VALIDATION RULE\n                    if( !valObj.result ){\n                        const errorObj = {};\n                        if( typeof valObj.errors === 'undefined' || typeof valObj.errors[methodName] === 'undefined' ){\n                            errorObj[methodName] = true;\n                        }\n                        valObj.errors = mergeObjects({}, valObj.errors, errorObj);\n                    }\n                    valObj = valObj.result ? {} : valObj;\n                    return mergeObjects(accObj, valObj);\n                });\n            });\n        }, Promise.resolve(obj));\n        resolve(validationsResult);\n\n    }).then(data => {\n\n        // GET ERRORS\n        if( !data.result ){\n            data.errors = validationMethods.reduce((accObj, methodName) => {\n                const errors = (validationErrors[methodName] && validationErrors[methodName](fieldValue, fieldEl)) || {};\n                return mergeObjects(accObj, errors);\n            }, data.errors);\n            data.errors.rule = true;\n        }\n        return data;\n\n    });\n\n}\n","\nimport { fieldsStringSelector, getUniqueFields, getValidateFieldDefault, getValidateFormDefault, mergeObjects } from './helpers';\nimport { checkFieldValidity } from './checkFieldValidity';\n\nexport function checkFormValidity( formEl, fieldOptions, validationRules, validationErrors, fieldToSkip = null ){\n\n    fieldOptions = mergeObjects( {}, fieldOptions, {focusOnRelated: false} );\n    const fieldsList = getUniqueFields( formEl.querySelectorAll(fieldsStringSelector) );\n\n    return Promise.all( fieldsList.map(fieldEl => {\n\n        if( fieldToSkip && fieldEl === fieldToSkip ){\n            const obj = getValidateFieldDefault({fieldEl, result: true});\n            return Promise.resolve(obj);\n        }\n        return checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors );\n\n    }) ).then(fields => {\n\n        const areAllFieldsValid = fields.filter(fieldObj => !fieldObj.result).length === 0;\n        return getValidateFormDefault({result: areAllFieldsValid, fields});\n\n    });\n\n}\n","\nimport { version }              from './modules/version';\nimport { checkFormEl, customEvents, dispatchCustomEvent, excludeSelector, isNodeList, mergeObjects, removeClass } from './modules/helpers';\nimport { options }              from './modules/options';\nimport { validationRules }      from './modules/validationRules';\nimport { validationErrors }     from './modules/validationErrors';\nimport { formStartup }          from './modules/formStartup';\nimport { destroy }              from './modules/destroy';\nimport { init }                 from './modules/init';\nimport { checkFieldValidity }   from './modules/checkFieldValidity';\nimport { checkFormValidity }    from './modules/checkFormValidity';\n\nclass Form {\n\n    constructor( formEl, optionsObj ){\n        const argsL = arguments.length,\n              checkFormElem = checkFormEl(formEl);\n\n        if( argsL === 0 || (argsL > 0 && !formEl) ){\n            throw new Error('First argument \"formEl\" is missing or falsy!');\n        }\n        if( isNodeList(formEl) ){\n            throw new Error('First argument \"formEl\" must be a single DOM node or a form CSS selector, not a NodeList!');\n        }\n        if( !checkFormElem.result ){\n            throw new Error('First argument \"formEl\" is not a DOM node nor a form CSS selector!');\n        }\n\n        const self = this;\n\n        self.formEl = checkFormElem.element;\n        self.formEl.formjs = self;\n        self.options = mergeObjects({}, Form.prototype.options, optionsObj);\n\n        // BINDING CONTEXT FOR FUTURE EXECUTION\n        const cbList = [\n            // IN fieldOptions\n            'beforeValidation',\n            // IN formOptions\n            'beforeSend',\n            'getFormData'\n        ];\n        cbList.forEach(cbName => {\n            const optionType = self.options.formOptions[cbName] ? 'formOptions' : 'fieldOptions';\n            let cbOpt = self.options[optionType][cbName];\n\n            if( cbOpt ){\n                self.options[optionType][cbName] = ( Array.isArray(cbOpt) ? cbOpt.map(cbFn => cbFn.bind(self)) : cbOpt.bind(self) );\n            }\n        });\n\n        formStartup( self.formEl, self.options );\n    }\n\n    destroy(){\n        destroy(this.formEl, this.options);\n    }\n    \n    getFormData( trimValues = this.options.fieldOptions.trimValue ){\n        const formFieldsEl = this.formEl.querySelectorAll('input, select, textarea'),\n              filteredFields = Array.from( formFieldsEl ).filter( elem => elem.matches(excludeSelector) );\n        return this.options.formOptions.getFormData( filteredFields, trimValues );\n    }\n\n    init(){\n        const focusOnRelated = this.options.fieldOptions.focusOnRelated;\n        this.options.fieldOptions.focusOnRelated = false;\n        return init(this.formEl)\n            .then(initObj => {\n                this.options.fieldOptions.focusOnRelated = focusOnRelated;\n                return initObj;\n            });\n    }\n\n    validateField( fieldEl, fieldOptions ){\n        const self = this;\n        fieldEl = typeof fieldEl === 'string' ? self.formEl.querySelector(fieldEl) : fieldEl;\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions);\n        const formEl = self.formEl;\n        return checkFieldValidity(fieldEl, fieldOptions, self.validationRules, self.validationErrors)\n            .then(obj => {\n                dispatchCustomEvent( obj.fieldEl, customEvents.field.validation, obj );\n                if( obj.result && fieldOptions.onValidationCheckAll ){\n                    checkFormValidity( formEl, fieldOptions, self.validationRules, self.validationErrors, obj.fieldEl )\n                        .then(dataForm => {\n                            dispatchCustomEvent( formEl, customEvents.form.validation, dataForm );\n                        });\n                } else if( !obj.result ){\n                    removeClass( formEl, self.options.formOptions.cssClasses.valid );\n                }\n                return obj;\n            });\n    }\n\n    validateForm( fieldOptions ){\n        const self = this;\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions);\n        const formEl = self.formEl;\n        return checkFormValidity(formEl, fieldOptions, self.validationRules, self.validationErrors)\n            .then(data => {\n                data.fields.forEach(obj => {\n                    obj.isCheckingForm = true;\n                    dispatchCustomEvent( obj.fieldEl, customEvents.field.validation, obj );\n                });\n                dispatchCustomEvent( formEl, customEvents.form.validation, data );\n                return data;\n            });\n    }\n    \n    static addValidationErrors( errorsObj ){\n        Form.prototype.validationErrors = mergeObjects({}, Form.prototype.validationErrors, errorsObj);\n    }\n\n    static addValidationRules( rulesObj ){\n        Form.prototype.validationRules = mergeObjects({}, Form.prototype.validationRules, rulesObj);\n    }\n    \n    static setOptions( optionsObj ){\n        Form.prototype.options = mergeObjects({}, Form.prototype.options, optionsObj);\n    }\n\n}\n\nForm.prototype.isInitialized = false;\nForm.prototype.options = options;\nForm.prototype.validationErrors = validationErrors;\nForm.prototype.validationRules = validationRules;\nForm.prototype.version = version;\n\nexport default Form;\n","\nimport { isDOMNode } from './isDOMNode';\n\nexport const checkFormEl = formEl => {\n    const isString = typeof formEl,\n          isValidNodeSelector = isString === 'string' && isDOMNode(document.querySelector(formEl)),\n          isFormSelector = isValidNodeSelector && document.querySelector(formEl).tagName.toLowerCase() === 'form',\n          obj = {\n            result: isDOMNode(formEl) || isFormSelector,\n            element: (isString === 'string' ? document.querySelector(formEl) : formEl)\n          };\n\n    return obj;\n}\n","\nimport { customEvents } from './helpers';\nimport { dataTypeNumber, formValidationEnd, keypressMaxlength, pastePrevent, submit, validation, validationEnd } from './listenerCallbacks';\n\nexport function formStartup( formEl, options ){\n\n    formEl.noValidate = true;\n\n    const fieldOptions = options.fieldOptions,\n          formOptions = options.formOptions;\n\n    // HANDLE FIELD VALIDATION\n    if( fieldOptions.handleValidation ){\n        \n        // VALIDATION WITH ATTRIBUTES LIKE HTML ONES ( ALSO FOR BUG FIXING, EG: maxlength IN ANDROID )\n        if( fieldOptions.strictHtmlValidation ){\n            \n            // maxlength\n            // MAXLENGTH IS BUGGY IN ANDROID BROWSERS\n            formEl.addEventListener('keypress', keypressMaxlength, false);\n\n            // data-type=\"number\"\n            // SINCE VALIDATING type=\"number\" WITH NON NUMERIC CHARS WILL RETURN EMPTY STRING IN SOME BROWSERS ( EG: FIREFOX )\n            formEl.addEventListener('input', dataTypeNumber, false);\n            \n        }\n        \n        if( fieldOptions.preventPasteFields && formEl.querySelectorAll( fieldOptions.preventPasteFields ).length ){\n            // INIT EVENT LISTENER FOR \"PASTE\" EVENT TO PREVENT IT ON SPECIFIED FIELDS\n            formEl.addEventListener('paste', pastePrevent, false);\n        }\n\n        // INIT EVENTS LISTENER ( AS IN fieldOptions )\n        fieldOptions.validateOnEvents.split(' ').forEach(function( eventName ){\n            const useCapture = /^(blur|focus)$/.test(eventName);\n            formEl.addEventListener(eventName, validation, useCapture);\n        });\n\n        formEl.addEventListener(customEvents.field.validation, validationEnd, false);\n        formEl.addEventListener(customEvents.form.validation, formValidationEnd, false);\n\n    }\n    \n    // HANDLE FORM SUBMIT\n    if( formOptions.handleSubmit ){\n        // INIT FORM SUBMIT ( DEFAULT AND AJAX )\n        formEl.addEventListener('submit', submit);\n\n        if( formOptions.ajaxSubmit ){\n            if( formEl.getAttribute('enctype') ){\n                formOptions.ajaxOptions.headers['Content-Type'] = formEl.getAttribute('enctype');\n            }\n\n            if( formEl.getAttribute('method') ){\n                formOptions.ajaxOptions.method = formEl.getAttribute('method').toUpperCase();\n            }\n\n            if( formEl.getAttribute('action') ){\n                formOptions.ajaxOptions.url = formEl.getAttribute('action');\n            }\n        }\n    }\n\n}\n","\nimport { customEvents } from './helpers';\nimport { dataTypeNumber, formValidationEnd, keypressMaxlength, pastePrevent, submit, validation, validationEnd } from './listenerCallbacks';\n\n\nexport function destroy( formEl, options ){\n\n    if( options.fieldOptions.strictHtmlValidation ){\n        formEl.removeEventListener('keypress', keypressMaxlength, false);\n        formEl.removeEventListener('input', dataTypeNumber, false);\n    }\n\n    if( options.fieldOptions.preventPasteFields ){\n        formEl.removeEventListener('paste', pastePrevent, false);\n    }\n\n    if( options.formOptions.handleSubmit ){\n        formEl.removeEventListener('submit', submit);\n    }\n\n    options.fieldOptions.validateOnEvents.split(' ').forEach(function( eventName ){\n        const useCapturing = eventName === 'blur' ? true : false;\n        formEl.removeEventListener(eventName, validation, useCapturing);\n    });\n\n    formEl.removeEventListener(customEvents.field.validation, validationEnd, false);\n    formEl.removeEventListener(customEvents.form.validation, formValidationEnd, false);\n\n    delete formEl.formjs;\n    \n}\n","\nexport const excludeSelector = ':not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"file\"]):not([data-exclude-data])'\n","\nexport const validationErrors = {\n\n    email: function ( string ) {\n        const obj = {};\n\n        if( string.indexOf('@') === -1 ){\n\n            // @ IS MISSING\n            obj.missingAtChar = true;\n\n        } else {\n\n            const splitAt_at = string.split('@');\n            if( splitAt_at[0].length === 0 ){\n\n                // USER NAME IS MISSING\n                obj.missingUserName = true;\n\n            }\n\n            if( splitAt_at[1].length === 0 ){\n\n                // IS EMPTY AFTER @\n                obj.missingDomain = true;\n                obj.missingExtensionDot = true;\n                obj.missingExtension = true;\n\n            } else if( splitAt_at[1].indexOf('.') === -1 ) {\n\n                // DOT IS MISSING\n                obj.missingExtensionDot = true;\n                obj.missingExtension = true;\n\n            } else {\n\n                // EXTENSION MISSING OR NOT LONG ENOUGH\n                const splitAt_dot = splitAt_at[1].split('.'),\n                      extLength = splitAt_dot[1].length;\n                if( extLength === 0 ) {\n                    obj.missingExtension = true;\n                } else if( extLength < 2 ){\n                    obj.minlengthExtension = true;\n                }\n\n            }\n        }\n\n        return obj;\n\n    }\n\n}\n"],"names":["addClass","element","cssClasses","split","forEach","className","classList","add","isNodeList","nodeList","NodeList","prototype","isPrototypeOf","removeClass","remove","isDOMNode","node","Element","customEvents","validation","submit","isPlainObject","object","Object","toString","call","mergeObjects","out","Array","from","arguments","slice","filter","arg","keys","key","isArray","concat","push","dispatchCustomEvent","elem","eventName","data","eventOptions","bubbles","eventObj","Event","dispatchEvent","fieldsStringSelector","formatMap","YYYY-MM-DD","dateArray","MM-DD-YYYY","DD-MM-YYYY","reverse","getDateAsNumber","dateString","dateFormat","splitChar","string","separator","match","length","getSplitChar","indexOf","replace","join","getJSONobjectFromFieldAttribute","fieldEl","attrName","customAttrEl","closest","JSON","parse","getAttribute","getUniqueFields","currentFieldName","currentFieldType","name","type","matches","getValidateFieldDefault","obj","result","getValidateFormDefault","fields","isFieldForChangeEvent","runFunctionsSequence","functionsList","stopConditionFn","reduce","acc","promiseFn","then","res","dataNew","Promise","resolve","dataList","serializeObject","constructor","a","k","encodeURIComponent","toCamelCase","all","letter","toUpperCase","options","fieldOptions","beforeValidation","trimValue","value","trim","containerEl","questionContainer","dirty","checkDirtyField","skipUIfeedback","pending","error","errorEmpty","errorRule","valid","focusOnRelated","handleFileUpload","handleValidation","maxFileSize","onValidationCheckAll","preventPasteFields","strictHtmlValidation","validateOnEvents","formOptions","ajaxOptions","cache","credentials","headers","Content-Type","Accept","method","mode","redirect","timeout","url","location","href","ajaxSubmit","beforeSend","ajaxComplete","ajaxError","ajaxPending","ajaxSuccess","getFormData","filteredFields","trimValues","formData","formEl","this","isCheckbox","isRadio","isSelect","checked","checkboxes","querySelectorAll","field","checkedRadio","querySelector","selectedOpts","option","selected","handleSubmit","validationRules","date","test","email","number","checkbox","dataChecksEl","attrValue","checkedElLength","isMinOk","isMaxOk","errors","checks","minChecks","maxChecks","equalTo","exactLength","valueLength","minlength","maxlength","file","MIMEtype","accept","RegExp","filesList","files","exceedMaxFileSize","size","isAcceptedFileType","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","stringLength","max","maxVal","maxLength","min","minVal","minLength","pattern","radio","fieldChecked","dataTypeNumber","event","target","fieldValue","stopImmediatePropagation","valueReplaced","formValidationEnd","formjs","clMethodName","keypressMaxlength","keyPressed","which","keyCode","allowedKeys","pastePrevent","preventDefault","instance","formCssClasses","isAjaxForm","btnEl","eventPreventDefault","enableBtn","disabled","validateForm","formValidation","beforeSendData","stopExecution","formDataObj","callbacksBeforeSend","pop","timeoutTimer","isMultipart","body","formDataMultipart","FormData","append","idx","stringify","Headers","controller","AbortController","signal","window","setTimeout","abort","fetch","response","ok","Error","statusText","fetchMethod","get","contentType","headerOpt","getFetchMethod","catch","message","finally","clearTimeout","ajaxCall","isChangeEvent","self","isFieldForChangeEventBoolean","hasOnlyChangeEvent","validateField","realtedFieldEqualTo","required","validationEnd","eventData","dataFieldOptions","isReqFrom","reqMoreEl","document","errorClasses","extraErrorClass","isChecks","empty","errorClassToRemove","init","formFields","map","isCheckboxOrRadio","getFilledFields","isInitialized","checkFieldValidity","validationErrors","isValidValue","checkedEl","reqMoreIsChecked","findReqMoreEl","findReqFromEl","id","focus","needsValidation","dataObj","isRadioOrCheckbox","hasSelectedInput","validationMethods","attributes","accList","attr","isAttrValueWithFn","isAttrNameWithFn","accPromise","methodName","accObj","resolveVal","valObj","errorObj","rule","isValid","checkFormValidity","fieldToSkip","fieldsList","areAllFieldsValid","fieldObj","Form","[object Object]","optionsObj","argsL","checkFormElem","isString","isFormSelector","tagName","toLowerCase","checkFormEl","cbName","optionType","cbOpt","cbFn","bind","noValidate","addEventListener","useCapture","formStartup","removeEventListener","useCapturing","destroy","formFieldsEl","initObj","dataForm","isCheckingForm","errorsObj","rulesObj","missingAtChar","splitAt_at","missingUserName","missingDomain","missingExtensionDot","missingExtension","extLength","minlengthExtension","version"],"mappings":"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"}