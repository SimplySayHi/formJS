{"version":3,"file":"formjs-esm.min.js","sources":["../src/modules/version.js","../src/modules/helpers/addClass.js","../src/modules/helpers/isNodeList.js","../src/modules/helpers/removeClass.js","../src/modules/helpers/isDOMNode.js","../src/modules/helpers/customEvents.js","../src/modules/helpers/isPlainObject.js","../src/modules/helpers/mergeObjects.js","../src/modules/helpers/dispatchCustomEvent.js","../src/modules/helpers/fieldsStringSelector.js","../src/modules/helpers/finalizeFieldPromise.js","../src/modules/helpers/finalizeFormPromise.js","../src/modules/helpers/getDateAsNumber.js","../src/modules/helpers/getSplitChar.js","../src/modules/helpers/getJSONobjectFromFieldAttribute.js","../src/modules/helpers/getUniqueFields.js","../src/modules/helpers/mergeValidateFieldDefault.js","../src/modules/helpers/isFieldForChangeEvent.js","../src/modules/helpers/runFunctionsSequence.js","../src/modules/helpers/serializeObject.js","../src/modules/helpers/toCamelCase.js","../src/modules/options.js","../src/modules/optionsUtils/beforeValidation.js","../src/modules/helpers/checkDirtyField.js","../src/modules/optionsUtils/getFormData.js","../src/modules/validationRules.js","../src/modules/validationRules/date.js","../src/modules/validationRules/email.js","../src/modules/validationRules/number.js","../src/modules/validationRules/checkbox.js","../src/modules/validationRules/checks.js","../src/modules/validationRules/equalTo.js","../src/modules/validationRules/exactLength.js","../src/modules/validationRules/file.js","../src/modules/validationRules/length.js","../src/modules/validationRules/max.js","../src/modules/validationRules/maxlength.js","../src/modules/validationRules/min.js","../src/modules/validationRules/minlength.js","../src/modules/validationRules/pattern.js","../src/modules/validationRules/radio.js","../src/modules/listenerCallbacks/dataTypeNumber.js","../src/modules/listenerCallbacks/formValidationEnd.js","../src/modules/listenerCallbacks/keypressMaxlength.js","../src/modules/listenerCallbacks/pastePrevent.js","../src/modules/ajaxCall.js","../src/modules/listenerCallbacks/submit.js","../src/modules/listenerCallbacks/validation.js","../src/modules/listenerCallbacks/validationEnd.js","../src/modules/checkFieldValidity.js","../src/modules/isValid.js","../src/modules/checkFormValidity.js","../src/modules/helpers/mergeValidateFormDefault.js","../src/modules/checkFilledFields.js","../src/modules/helpers/getFilledFields.js","../src/index.js","../src/modules/helpers/checkFormEl.js","../src/modules/formStartup.js","../src/modules/destroy.js","../src/modules/helpers/excludeSelector.js"],"sourcesContent":["\nexport const version = '5.2.0';\n","\nexport const addClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.add( className );\n    });\n}\n","\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList );\n}\n","\nexport const removeClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.remove( className );\n    });\n}\n","\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node );\n}\n","\nexport const customEvents = {\n    field: {\n        validation: 'fjs.field:validation'\n    },\n    form: {\n        destroy:    'fjs.form:destroy',\n        init:       'fjs.form:init',\n        submit:     'fjs.form:submit',\n        validation: 'fjs.form:validation'\n    }\n}\n","\nexport const isPlainObject = object => {\n    return Object.prototype.toString.call( object ) === '[object Object]';\n}\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const mergeObjects = function( out = {} ){\n    Array.from(arguments).slice(1).filter(arg => !!arg).forEach(arg => {\n        Object.keys(arg).forEach(key => {\n            if( Array.isArray(arg[key]) ){\n                out[key] = (out[key] || []).concat( arg[key].slice(0) );\n            } else if( isPlainObject(arg[key]) ){\n                out[key] = mergeObjects((out[key] || {}), arg[key]);\n            } else {\n                // * STRING | NUMBER | BOOLEAN | FUNCTION\n                if( Array.isArray(out[key]) ){\n                    // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                    out[key].push(arg[key]);\n                } else {\n                    out[key] = arg[key];\n                }\n            }\n        });\n    });\n\n    return out;\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const dispatchCustomEvent = ( elem, eventName, eventOptions ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions);\n    const eventObj = new CustomEvent(eventName, eventOptions);\n    elem.dispatchEvent( eventObj );\n}\n","\nexport const fieldsStringSelector = 'input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"hidden\"]), select, textarea'\n","\nexport const finalizeFieldPromise = obj => {\n    if( obj.result ){\n        return Promise.resolve();\n    }\n    return Promise.reject(obj.errors);\n}\n","\nexport const finalizeFormPromise = obj => {\n    if( obj.result ){\n        return Promise.resolve(obj.fields);\n    }\n    return Promise.reject(obj.fields);\n}\n","\nimport { getSplitChar } from './getSplitChar';\n\nconst formatMap = {\n    'YYYY-MM-DD': function(dateArray){\n        return dateArray;\n    },\n    'MM-DD-YYYY': function(dateArray){\n        return [dateArray[2], dateArray[0], dateArray[1]];\n    },\n    'DD-MM-YYYY': function(dateArray){\n        return dateArray.reverse();\n    }\n};\n\nexport const getDateAsNumber = ( dateString, dateFormat ) => {\n    dateFormat = dateFormat || 'YYYY-MM-DD';\n    const splitChar = getSplitChar(dateString);\n\n    if( dateFormat.indexOf(splitChar) < 0 ){\n        return;\n    }\n\n    dateFormat = dateFormat.replace(/[^YMD]/g, '-');\n    dateString = dateString.split(splitChar);\n    dateString = formatMap[dateFormat](dateString).join('');\n    \n    return dateString;\n}\n","\nexport const getSplitChar = string => {\n    // MATCH ANY NON-DIGIT CHAR\n    const separator = string.match(/\\D/);\n    return (separator && separator.length > 0) ? separator[0] : null;\n}\n","\nexport const getJSONobjectFromFieldAttribute = ( fieldEl, attrName ) => {\n    const customAttrEl = fieldEl.closest('['+ attrName +']');\n    return (customAttrEl && JSON.parse(customAttrEl.getAttribute(attrName))) || {};\n}\n","\nexport const getUniqueFields = $nodeList => {\n\n    let currentFieldName = '',\n        currentFieldType = '';\n\n    return Array.from( $nodeList ).filter($field => {\n        const name = $field.name,\n              type = $field.type;\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false;\n        }\n        \n        if( !$field.matches('[data-required-from]') ){\n            currentFieldName = name;\n            currentFieldType = type;\n        }\n        return true;\n    });\n    \n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const mergeValidateFieldDefault = obj => {\n    return mergeObjects({}, { result: false, $field: null }, obj);\n}\n","\nexport const isFieldForChangeEvent = $field => {\n    return $field.matches('select, [type=\"radio\"], [type=\"checkbox\"], [type=\"file\"]');\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const runFunctionsSequence = ( { functionsList = [], data = {}, stopConditionFn = () => false } = {} ) => {\n    return functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1]);\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res);\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result);\n                    return res;\n                });\n        });\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList);\n}\n","\nexport const serializeObject = obj => {\n    const objToString = (\n            (obj && typeof obj === 'object' && obj.constructor === Object) ? \n            Object.keys(obj)\n                .reduce((a,k) => {\n                    a.push(k+'='+encodeURIComponent(obj[k]));\n                    return a\n                },[]).join('&') : \n            obj\n    );\n    return objToString;\n}\n","\nexport const toCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase(); });\n}\n","\nimport { beforeValidation } from './optionsUtils/beforeValidation';\nimport { getFormData } from './optionsUtils/getFormData';\n\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [beforeValidation],\n        cssClasses: {\n            dirty:              'is-dirty',\n            error:              'has-error',\n            errorEmpty:         'has-error-empty',\n            errorRule:          'has-error-rule',\n            pending:            'is-pending',\n            valid:              'is-valid'\n        },\n        focusOnRelated:         true,\n        maxFileSize:            10,\n        onValidationCheckAll:   false,\n        preventPasteFields:     '[type=\"password\"], [data-equal-to]',\n        questionContainer:      '[data-formjs-question]',\n        skipUIfeedback:         false,\n        strictHtmlValidation:   true,\n        trimValue:              false,\n        validateOnEvents:       'input change'\n    },\n\n    formOptions: {\n        ajaxOptions:            {\n            cache:              'no-store',\n            credentials:        'same-origin',\n            headers: {\n                                'Content-Type': 'application/json',\n                                'Accept':       'application/json'\n            },\n            method:             'POST',\n            mode:               'same-origin',\n            redirect:           'follow',\n            timeout:            0,\n            url:                location.href\n        },\n        ajaxSubmit:             true,\n        beforeSend:             [],\n        cssClasses: {\n            ajaxComplete:       'ajax-complete',\n            ajaxError:          'ajax-error',\n            ajaxPending:        'ajax-pending',\n            ajaxSuccess:        'ajax-success',\n            submit:             'is-submitting',\n            valid:              'is-valid'\n        },\n        getFormData:            getFormData,\n        handleFileUpload:       true,\n        handleSubmit:           true,\n        onInitCheckFilled:      true\n    }\n    \n}\n","\nimport { addClass, checkDirtyField, isFieldForChangeEvent } from '../helpers';\n\nexport const beforeValidation = function beforeValidationDefault ( { $field, fieldOptions } ) {\n\n    if( fieldOptions.trimValue && !isFieldForChangeEvent($field) ){\n        $field.value = $field.value.trim();\n    }\n\n    checkDirtyField( $field, fieldOptions );\n\n    if( !fieldOptions.skipUIfeedback ){\n        addClass( $field.closest( fieldOptions.questionContainer ), fieldOptions.cssClasses.pending );\n    }\n\n}\n","\nimport { addClass } from './addClass';\nimport { isNodeList } from './isNodeList';\nimport { removeClass } from './removeClass';\n\nexport const checkDirtyField = ( $fields, fieldOptions ) => {\n\n    $fields = isNodeList($fields) ? Array.from( $fields ) : [$fields];\n    $fields.forEach($field => {\n        if( $field.type !== 'checkbox' && $field.type !== 'radio' ){\n            const $container = $field.closest( fieldOptions.questionContainer ) || $field;\n            if( $field.value ){\n                addClass( $container, fieldOptions.cssClasses.dirty );\n            } else {\n                removeClass( $container, fieldOptions.cssClasses.dirty );\n            }\n        }\n    });\n    \n}\n","\nexport const getFormData = function getFormDataDefault( $filteredFields, trimValues ){\n\n    const formData = {};\n    const $form = this.$form;\n    let prevObj = formData;\n  \n    $filteredFields.forEach($field => {\n        const isCheckbox = $field.type === \"checkbox\";\n        const isRadio = $field.type === \"radio\";\n        const isSelect = $field.matches(\"select\");\n        const name = $field.name;\n        let value = trimValues ? $field.value.trim() : $field.value;\n  \n        if( isCheckbox ){\n\n            value = $field.checked;\n            let $checkboxes = Array.from( $form.querySelectorAll('[name=\"' + name + '\"]') );\n            if( $checkboxes.length > 1 ){\n                value = [];\n                let $checked = $checkboxes.filter((field) => field.checked);\n                $checked.forEach($field => {\n                    value.push($field.value);\n                });\n            }\n\n        } else if( isRadio ){\n\n            const $checkedRadio = $form.querySelector('[name=\"' + name + '\"]:checked');\n            value = $checkedRadio === null ? null : $checkedRadio.value;\n\n        } else if( isSelect ){\n\n            const $selectedOpts = Array.from($field.options).filter(option => option.selected);\n            if( $selectedOpts.length > 1 ){\n                value = [];\n                $selectedOpts.forEach($field => { \n                    value.push($field.value); \n                });\n            }\n        }\n  \n        const nameSplit = name.split(\".\");\n        nameSplit.forEach((keyName, index, list) => {\n            const isLastKeyName = index + 1 === list.length;\n  \n            if( Array.isArray(prevObj) ){\n                const keyNameSplit = keyName.split(\"___\");\n                const arrPos = keyNameSplit[0] - 1;\n                const arrayHasItemAtIndex = typeof prevObj[arrPos] !== \"undefined\";\n                const arrItemKeyName = keyNameSplit[1];\n  \n                if( !arrayHasItemAtIndex ){\n                    prevObj.push({});\n                }\n  \n                keyName = arrItemKeyName;\n\n                if( isLastKeyName ){\n                    prevObj[arrPos][keyName] = value;\n                } else if( typeof prevObj[arrPos][keyName] === 'undefined' ) {\n                    prevObj[arrPos][keyName] = {};\n                }\n                \n                if( !isLastKeyName ){\n                    prevObj = prevObj[arrPos][keyName];\n                    return;\n                }\n            } else {\n                const isKeyNameArray = keyName.endsWith(\"[]\");\n                keyName = keyName.replace(\"[]\", \"\");\n  \n                if( isLastKeyName ){\n                    prevObj[keyName] = value;\n                } else if( typeof prevObj[keyName] === \"undefined\" ){\n                    if( isKeyNameArray ){\n                        prevObj[keyName] = [];\n                    } else {\n                        prevObj[keyName] = {};\n                    }\n                }\n            }\n  \n            prevObj = isLastKeyName ? formData : prevObj[keyName];\n        });\n    });\n  \n    return formData;\n\n}\n","\nimport { date }         from './validationRules/date';\nimport { email }        from './validationRules/email';\nimport { number }       from './validationRules/number';\n\nimport { checkbox }     from './validationRules/checkbox';\nimport { equalTo }      from './validationRules/equalTo';\nimport { exactLength }  from './validationRules/exactLength';\nimport { file }         from './validationRules/file';\nimport { length }       from './validationRules/length';\nimport { max }          from './validationRules/max';\nimport { maxlength }    from './validationRules/maxlength';\nimport { min }          from './validationRules/min';\nimport { minlength }    from './validationRules/minlength';\nimport { pattern }      from './validationRules/pattern';\nimport { radio }        from './validationRules/radio';\n\nexport const validationRules = {\n    date,\n    email,\n    number,\n\n    checkbox,\n    equalTo,\n    exactLength,\n    file,\n    length,\n    max,\n    maxlength,\n    min,\n    minlength,\n    pattern,\n    radio\n}\n","\n/*\n    DATE AS ISO 8601 DATE FORMAT:\n    YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n*/\n\nexport const date = function( string ){\n    return {\n        result: /^((((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13578]|1[02])[ \\/\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13456789]|1[012])[ \\/\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.]02[ \\/\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ \\/\\-.]02[ \\/\\-.]29))$/g.test( string )\n    };\n}\n","\n// https://regex101.com/r/cdlyJy/3\n\nexport const email = function( string ){\n    return {\n        result: /^[a-zA-Z_-]([\\w.-]?[a-zA-Z0-9])*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?){2,})+$/.test( string )\n    };\n}\n","\n/*\n    ALL NUMBERS ( INTEGERS AND FLOATING )\n    VALID NUMBERS: 123 | 123.456 | .123\n*/\n\nexport const number = function( string ){\n    return {\n        result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n    };\n}","\nimport { checks } from './checks';\n\nexport const checkbox = function( value, $field ){\n    const $dataChecks = $field.closest('form').querySelector('[name=\"' + $field.name + '\"][data-checks]');\n    return $dataChecks ? checks($dataChecks) : { result: $field.checked };\n}\n","\nexport const checks = function( $field ){\n    const attrValue = JSON.parse( $field.getAttribute('data-checks') ),\n          checkedLength = $field.closest('form').querySelectorAll('[name=\"' + $field.name + '\"]:checked').length,\n          isMinOk = checkedLength >= attrValue[0],\n          isMaxOk = checkedLength <= attrValue[1],\n          obj = { result: isMinOk && isMaxOk };\n\n    if( !obj.result ){\n        obj.errors = { checks: true };\n        if( !isMinOk ){ obj.errors.minChecks = true; }\n        if( !isMaxOk ){ obj.errors.maxChecks = true; }\n    }\n\n    return obj;\n}\n","\nexport const equalTo = function( value, $field ){\n    const $checkFrom = $field.closest('form').querySelector( '[name=\"' + $field.getAttribute('data-equal-to') + '\"]' );\n    return { result: value === $checkFrom.value };\n}\n","\nexport const exactLength = function( value, $field ){\n    const valueLength = value.length,\n          exactLength = $field.getAttribute('data-exact-length') * 1,\n          obj = { result: valueLength === exactLength };\n\n    if( !obj.result ){\n        obj.errors = {};\n        if( valueLength < exactLength ){ obj.errors.minlength = true; }\n        else { obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nexport const file = function( value, $field, fieldOptions ){\n    const maxFileSize = ($field.getAttribute('data-max-file-size') || fieldOptions.maxFileSize) * 1,\n          MIMEtype = $field.accept ? new RegExp($field.accept.replace( '*', '[^\\\\/,]+' )) : null,\n          filesList = Array.from($field.files),\n          obj = { result: true };\n\n    filesList.forEach(file => {\n        const exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize,\n              isAcceptedFileType = MIMEtype !== null ? MIMEtype.test(file.type) : true;\n\n        if( exceedMaxFileSize || !isAcceptedFileType ){\n            obj.result = false;\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {};\n            }\n            if( exceedMaxFileSize ){ obj.errors.maxFileSize = true; }\n            if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true; }\n\n        }\n    });\n\n    return obj;\n}\n","\nexport const length = function( value, $field ){\n    const valueL = value.length,\n          attrValue = JSON.parse( $field.getAttribute('data-length') ),\n          isMinlengthOk = valueL >= attrValue[0],\n          isMaxlengthOk = valueL <= attrValue[1],\n          obj = { result: isMinlengthOk && isMaxlengthOk };\n\n    if( !obj.result ){\n        obj.errors = {};\n        if( !isMinlengthOk ){ obj.errors.minlength = true; }\n        if( !isMaxlengthOk ){ obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const max = function( value, $field ){\n    let maxVal = $field.max;\n    const dateFormat = $field.getAttribute('data-date-format');\n    \n    if( $field.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat );\n        maxVal = maxVal.split('-').join('');\n    }\n\n    value = value * 1;\n    maxVal = maxVal * 1;\n    \n    return { result: value <= maxVal };\n}\n","\nexport const maxlength = function( value, $field ){\n    return { result: value.length <= $field.maxLength * 1 };\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const min = function( value, $field ){\n    let minVal = $field.min;\n    const dateFormat = $field.getAttribute('data-date-format');\n    \n    if( $field.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat );\n        minVal = minVal.split('-').join('');\n    }\n\n    value = value * 1;\n    minVal = minVal * 1;\n    \n    return { result: value >= minVal };\n}\n","\nexport const minlength = function( value, $field ){\n    return { result: value.length >= $field.minLength * 1 };\n}\n","\nexport const pattern = function( value, $field ){\n    return { result: new RegExp($field.pattern).test(value) };\n}\n","\nexport const radio = function( value, $field ){\n    const $fieldChecked = $field.closest('form').querySelector( '[name=\"'+ $field.name +'\"]:checked' ),\n          isValid = $fieldChecked !== null && $fieldChecked.value.trim().length > 0;\n\n    return { result: isValid };\n}\n","\nexport const dataTypeNumber = function( event ){\n\n    const $field = event.target;\n    \n    if( $field.matches('[data-type=\"number\"]') ){\n        let fieldValue = $field.value;\n        const hasInvalidChars = /[^\\d.,+\\-]/.test(fieldValue);\n        \n        if( hasInvalidChars ){\n            event.stopImmediatePropagation();\n            let valueReplaced = fieldValue.replace(/[^\\d.,+\\-]/g, '');\n            $field.value = valueReplaced;\n        }\n    }\n\n}\n","\nexport const formValidationEnd = function( event ){\n    const formEl = event.target;\n    const options = formEl.formjs.options;\n    \n    if( !options.fieldOptions.skipUIfeedback ){\n        const clMethodName = event.detail.result ? 'add' : 'remove';\n        formEl.classList[clMethodName]( options.formOptions.cssClasses.valid );\n    }\n}\n","\nexport const keypressMaxlength = function( event ){\n\n    const $field = event.target;\n    \n    if( $field.matches( '[maxlength]' ) ){\n        const maxLength = $field.maxLength * 1,\n              keyPressed = event.which || event.keyCode,\n              allowedKeys = [8, 37, 38, 39, 46];\n\n        if( $field.value.length >= maxLength && allowedKeys.indexOf(keyPressed) === -1 ){\n            return false;\n        }\n    }\n\n}\n","\nexport const pastePrevent = function( event ){\n\n    const $field = event.target;\n    const fieldOptions = $field.closest('form').formjs.options.fieldOptions;\n\n    if( $field.matches( fieldOptions.preventPasteFields ) ){     \n        event.preventDefault();\n    }\n\n}\n","\nimport { addClass, mergeObjects, removeClass, serializeObject } from './helpers';\n\nconst getFetchMethod = (response, options) => {\n    const accept = options.headers.get('Accept'),\n          contentType = response.headers.get('Content-Type'),\n          headerOpt = accept || contentType || '';\n\n    if( headerOpt.indexOf('application/json') > -1 || headerOpt === '' ){\n        return 'json';\n    } else if( headerOpt.indexOf('text/') > -1 ){\n        return 'text';\n    } else {\n        return 'blob';\n    }\n};\n\nexport function ajaxCall( $form, formDataObj, options ){\n\n    let timeoutTimer;\n    const ajaxOptions = mergeObjects( {}, options.formOptions.ajaxOptions ),\n          isMultipart = ajaxOptions.headers['Content-Type'] === 'multipart/form-data';\n\n    ajaxOptions.body = formDataObj;\n    \n    // POST A FormData OBJECT ( multipart )\n    if( isMultipart && options.formOptions.handleFileUpload ){\n        let formDataMultipart = new FormData();\n        \n        for(let key in ajaxOptions.body){\n            formDataMultipart.append( key, ajaxOptions.body[key] );\n        }\n        \n        Array.from( $form.querySelectorAll('[type=\"file\"]') ).forEach($field => {\n            Array.from($field.files).forEach((file, idx) => {\n                const name = $field.name+'['+ idx +']';\n                formDataMultipart.append( name, file, file.name );\n            });\n        });\n        \n        ajaxOptions.body = formDataMultipart;\n    }\n\n    if( ajaxOptions.method === 'GET' ){\n\n        // FETCH WITH \"GET\" METHOD CAN'T HAVE \"body\". SO IT IS APPENDED TO THE URL\n        ajaxOptions.url += ( /\\?/.test(ajaxOptions.url) ? '&' : '?' ) + serializeObject( ajaxOptions.body );\n        delete ajaxOptions.body;\n\n    } else {\n\n        if( ajaxOptions.headers['Content-Type'].indexOf('application/x-www-form-urlencoded') > -1 ){\n            // POST A NORMAL FORM\n            ajaxOptions.body = serializeObject( ajaxOptions.body );\n        } else if( !isMultipart ){\n            // POST A JSON STRING\n            ajaxOptions.body = JSON.stringify(ajaxOptions.body);\n        }\n\n    }\n\n    ajaxOptions.headers = new Headers( ajaxOptions.headers );\n\n    if ( ajaxOptions.timeout > 0 ) {\n        const controller = new AbortController(),\n              signal = controller.signal;\n\n        ajaxOptions.signal = signal;\n        timeoutTimer = window.setTimeout(() => {\n            controller.abort();\n        }, ajaxOptions.timeout);\n    }\n\n    return fetch(ajaxOptions.url, ajaxOptions)\n        .then(response => {\n            if( !response.ok ){\n                throw new Error(response.statusText);\n            }\n            const fetchMethod = getFetchMethod(response, ajaxOptions);\n            return response[fetchMethod]();\n        })\n        .then(data => {\n            addClass( $form, options.formOptions.cssClasses.ajaxSuccess );\n            return data;\n        })\n        .catch(error => {\n            addClass( $form, options.formOptions.cssClasses.ajaxError );\n            throw new Error(error.message);\n        })\n        .finally(() => {\n            if( timeoutTimer ){\n                window.clearTimeout( timeoutTimer );\n            }\n            removeClass( $form, options.formOptions.cssClasses.submit + ' ' + options.formOptions.cssClasses.ajaxPending );\n            addClass( $form, options.formOptions.cssClasses.ajaxComplete );\n            $form.querySelector('[type=\"submit\"]').disabled = false;\n        });\n\n}\n","\nimport { addClass, customEvents, dispatchCustomEvent, removeClass, runFunctionsSequence } from '../helpers';\nimport { ajaxCall } from '../ajaxCall';\n\nexport function submit( event ){\n\n    const $form = event.target,\n          instance = $form.formjs,\n          options = instance.options,\n          formCssClasses = options.formOptions.cssClasses,\n          isAjaxForm = options.formOptions.ajaxSubmit,\n          $btn = $form.querySelector('[type=\"submit\"]'),\n          eventPreventDefault = ( enableBtn = true ) => {\n              if( $btn && enableBtn ){ $btn.disabled = false; }\n              if( event ){ event.preventDefault(); }\n          };\n\n    if( isAjaxForm ){\n        eventPreventDefault(false);\n    }\n\n    if( $btn ){\n        if( $btn.disabled ){\n            eventPreventDefault(false);\n            return false;\n        }\n        $btn.disabled = true;\n    }\n\n    removeClass( $form, (formCssClasses.ajaxComplete + ' ' + formCssClasses.ajaxError + ' ' + formCssClasses.ajaxSuccess) );\n    addClass( $form, formCssClasses.submit );\n\n    instance.validateForm()\n        .then(fields => {\n\n            const beforeSendData = {\n                stopExecution: false,\n                formData: isAjaxForm ? instance.getFormData() : null\n            };\n\n            const rfsObject = {\n                  functionsList: options.formOptions.beforeSend,\n                  data: beforeSendData,\n                  stopConditionFn: function(data){ return data.stopExecution; }\n            };\n            return runFunctionsSequence(rfsObject);\n\n        }).then(dataList => {\n\n            if( dataList.filter(data => data.stopExecution).length > 0 ){\n                eventPreventDefault();\n                return false;\n            }\n            \n            if( isAjaxForm ){\n                const formData = dataList.pop().formData;\n                addClass( $form, formCssClasses.ajaxPending );\n                dispatchCustomEvent( $form, customEvents.form.submit, { detail: ajaxCall( $form, formData, options ) } );\n            }\n\n        })\n        .catch(fields => {\n            eventPreventDefault();\n            removeClass( $form, formCssClasses.submit );\n        });\n    \n}\n","\nimport { fieldsStringSelector, isFieldForChangeEvent } from '../helpers';\n\nexport const validation = function( event ){\n\n    const isChangeEvent = event.type === 'change',\n          $field = event.target,\n          self = $field.closest('form').formjs;\n\n    if( $field.matches( fieldsStringSelector ) ){\n        const isFieldForChangeEventBoolean = isFieldForChangeEvent($field);\n        const hasOnlyChangeEvent = self.options.fieldOptions.validateOnEvents === 'change';\n        \n        if(\n            (isFieldForChangeEventBoolean && isChangeEvent) ||\n            (!isFieldForChangeEventBoolean && (!isChangeEvent || hasOnlyChangeEvent))\n        ){\n            \n            self.validateField( $field )\n                .then(() => {\n                    const type = $field.type;\n                    const $relatedEqualTo = $field.closest('form').querySelector('[data-equal-to=\"'+ $field.name +'\"]');\n\n                    if(\n                        // FIELD IS ( required OR data-validate-if-filled ) AND RELATED FIELD data-equal-to HAS A VALUE\n                        ($field.required || $field.matches('[data-validate-if-filled]')) && \n                        !(type === 'checkbox' || type === 'radio') && \n                        $relatedEqualTo && $relatedEqualTo.value.trim() !== ''\n                    ){\n                        self.validateField( $relatedEqualTo ).catch(errors => {});\n                    }\n                })\n                .catch(errors => {});\n\n        }\n    }\n    \n}\n","\nimport { addClass, getJSONobjectFromFieldAttribute, removeClass, mergeObjects } from '../helpers';\n\nexport const validationEnd = function( event ){\n\n    const eventDetail = event.detail,\n          $field = eventDetail.$field,\n          dataFieldOptions = getJSONobjectFromFieldAttribute( $field, 'data-field-options' ),\n          fieldOptions = mergeObjects({}, $field.closest('form').formjs.options.fieldOptions, dataFieldOptions),\n          $container = $field.closest( fieldOptions.questionContainer ),\n          isReqFrom = $field.matches('[data-required-from]'),\n          $reqMore = document.querySelector( $field.getAttribute('data-required-from') );\n\n    if( $container && !fieldOptions.skipUIfeedback ){\n\n        if( eventDetail.result ){\n\n            if( !isReqFrom || (isReqFrom && $reqMore.checked) ){\n                // IF FIELD IS VALID\n                const errorClasses = fieldOptions.cssClasses.error + ' ' + fieldOptions.cssClasses.errorEmpty + ' ' + fieldOptions.cssClasses.errorRule;\n                removeClass( $container, errorClasses );\n                addClass( $container, fieldOptions.cssClasses.valid );\n            }\n\n        } else {\n\n            // IF FIELD IS NOT VALID\n            let extraErrorClass = fieldOptions.cssClasses.errorRule;\n\n            // HANDLE CASE OF FIELD data-checks\n            const isChecks = $field.matches('[data-checks]'),\n                  checkedElLength = (isChecks ? $container.querySelectorAll('[name=\"' + $field.name + '\"]:checked').length : 0);\n\n            if( (!isChecks && (eventDetail.errors && eventDetail.errors.empty)) || (isChecks && checkedElLength === 0) ){\n                extraErrorClass = fieldOptions.cssClasses.errorEmpty;\n            }\n\n            let errorClasses = fieldOptions.cssClasses.error + ' ' + extraErrorClass,\n                errorClassToRemove = fieldOptions.cssClasses.errorEmpty + ' ' + fieldOptions.cssClasses.errorRule;\n            removeClass( $container, fieldOptions.cssClasses.valid + ' ' + errorClassToRemove );\n            addClass( $container, errorClasses );\n\n        }\n    }\n\n}\n","\nimport {    getJSONobjectFromFieldAttribute,\n            isDOMNode,\n            mergeObjects,\n            mergeValidateFieldDefault,\n            removeClass,\n            runFunctionsSequence\n        }           from './helpers';\nimport { isValid }  from './isValid';\n\nexport function checkFieldValidity( $field, fieldOptions, validationRules, validationErrors ){\n\n    if( !isDOMNode($field) ){\n        const obj = mergeValidateFieldDefault({$field});\n        return Promise.resolve(obj);\n    }\n\n    const $form = $field.closest('form'),\n          isValidValue = $field.value.trim().length > 0,\n          dataFieldOptions = getJSONobjectFromFieldAttribute( $field, 'data-field-options' );\n\n    fieldOptions = mergeObjects( fieldOptions, dataFieldOptions );\n\n    // HANDLE FIELD data-required-from WHEN CHANGING ITS RELATED RADIO\n    if( $field.type === 'radio' ){\n        const $checked = $field.checked ? $field : $form.querySelector('[name=\"'+ $field.name +'\"]:checked'),\n              reqMoreIsChecked = $checked && $checked.matches('[data-require-more]'),\n              $findReqMore = reqMoreIsChecked ? $checked : $form.querySelector('[data-require-more][name=\"'+ $field.name +'\"]'),\n              $findReqFrom = $findReqMore ? $form.querySelector('[data-required-from=\"#'+ $findReqMore.id +'\"]') : null;\n        \n        if( $checked && $findReqFrom ){\n            $findReqFrom.required = $findReqMore.required && $findReqMore.checked;\n            if( !reqMoreIsChecked ){\n                $findReqFrom.value = '';\n            } else if( fieldOptions.focusOnRelated ) {\n                $findReqFrom.focus();\n            }\n        }\n    }\n\n    // HANDLE FIELD data-require-more & data-required-from WHEN *-from IT'S FILLED\n    if( $field.matches('[data-required-from]') && isValidValue ){\n        const $reqMore = $form.querySelector( $field.getAttribute('data-required-from') );\n        $reqMore.checked = true;\n        $field.required = $reqMore.required;\n    }\n\n    const needsValidation = $field.required || ($field.matches('[data-validate-if-filled]') && isValidValue);\n\n    return runFunctionsSequence({\n            functionsList: fieldOptions.beforeValidation,\n            data: { $field, fieldOptions }\n        })\n        .then(data => {\n            const dataObj = data.pop();\n            return new Promise(resolve => {\n                if( !needsValidation ){\n                    dataObj.result = true;\n                }\n                resolve( needsValidation ? isValid($field, fieldOptions, validationRules, validationErrors) : dataObj );\n            });\n        })\n        .then(data => {\n            const $container = fieldOptions.questionContainer && data.$field.closest( fieldOptions.questionContainer );\n            if( $container ){\n                removeClass( $container, fieldOptions.cssClasses.pending );\n            }\n            return data;\n        })\n        ;\n\n}\n","\nimport { mergeValidateFieldDefault, mergeObjects, toCamelCase } from './helpers';\n\nexport function isValid( $field, fieldOptions, validationRules, validationErrors ){\n\n    const fieldValue = $field.value,\n          obj = mergeValidateFieldDefault({result: fieldValue.trim().length > 0, $field}),\n          isRadioOrCheckbox = /^(radio|checkbox)$/.test($field.type),\n          hasSelectedInput = $field.closest('form').querySelectorAll('[name=\"'+ $field.name +'\"]:checked').length > 0;\n\n    if( (!isRadioOrCheckbox && !obj.result) || (isRadioOrCheckbox && !hasSelectedInput) ){\n        obj.result = false;\n        obj.errors = { empty: true };\n        return Promise.resolve(obj);\n    }\n\n    // COLLECT VALIDATION METHOD NAMES ( USED TO RUN VALIDATIONS AND GET ERRORS )\n    const validationMethods = Array.from($field.attributes).reduce((accList, attr) => {\n        const attrName = toCamelCase( attr.name.replace('data-', '') ),\n              attrValue = toCamelCase( attr.value ),\n              isAttrValueWithFn = (attrName === 'type' || attrName === 'subtype') && validationRules[attrValue],\n              isAttrNameWithFn = validationRules[attrName];\n\n        if( isAttrValueWithFn || isAttrNameWithFn ){\n            accList.push( isAttrValueWithFn ? attrValue : attrName );\n        }\n        return accList;\n    }, []);\n\n    return new Promise(resolve => {\n\n        // RUN VALIDATIONS\n        const validationsResult = validationMethods.reduce((accPromise, methodName) => {\n            return accPromise.then(accObj => {\n                return new Promise(resolveVal => {\n                    // RUN VALIDATION INSIDE A PROMISE IS USEFUL FOR ASYNC VALIDATIONS\n                    resolveVal( validationRules[methodName](fieldValue, $field, fieldOptions) );\n                }).then(valObj => {\n                    // ADD CUSTOM ERROR-KEY FOR EACH VALIDATION RULE\n                    if( !valObj.result ){\n                        const errorObj = {};\n                        if( typeof valObj.errors === 'undefined' || typeof valObj.errors[methodName] === 'undefined' ){\n                            errorObj[methodName] = true;\n                        }\n                        valObj.errors = mergeObjects({}, valObj.errors, errorObj);\n                    }\n                    valObj = valObj.result ? {} : valObj;\n                    return mergeObjects(accObj, valObj);\n                });\n            });\n        }, Promise.resolve(obj));\n        resolve(validationsResult);\n\n    }).then(data => {\n\n        // GET ERRORS\n        if( !data.result ){\n            data.errors = validationMethods.reduce((accObj, methodName) => {\n                const errors = (validationErrors[methodName] && validationErrors[methodName](fieldValue, $field)) || {};\n                return mergeObjects(accObj, errors);\n            }, data.errors);\n        }\n        return data;\n\n    });\n\n}\n","\nimport { fieldsStringSelector, getUniqueFields, mergeValidateFieldDefault, mergeValidateFormDefault, mergeObjects } from './helpers';\nimport { checkFieldValidity } from './checkFieldValidity';\n\nexport function checkFormValidity( $form, fieldOptions, validationRules, validationErrors, fieldToSkip = null ){\n\n    fieldOptions = mergeObjects( {}, fieldOptions, {focusOnRelated: false} );\n    const $fieldsList = getUniqueFields( $form.querySelectorAll(fieldsStringSelector) );\n\n    return Promise.all( $fieldsList.map($field => {\n\n        if( fieldToSkip && $field === fieldToSkip ){\n            const obj = mergeValidateFieldDefault({$field, result: true});\n            return Promise.resolve(obj);\n        }\n        return checkFieldValidity( $field, fieldOptions, validationRules, validationErrors );\n\n    }) ).then(fields => {\n\n        const areAllFieldsValid = fields.filter(fieldObj => !fieldObj.result).length === 0;\n        return mergeValidateFormDefault({result: areAllFieldsValid, fields});\n\n    });\n\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const mergeValidateFormDefault = obj => {\n    return mergeObjects({}, { result: true, fields: [] }, obj);\n}\n","\nimport { getFilledFields, mergeValidateFieldDefault } from './helpers';\n\nexport const checkFilledFields = $form => {\n\n    const formFields = getFilledFields( $form );\n    return Promise.all( formFields.map($field => {\n        return $form.formjs.validateField( $field )\n            .then(() => mergeValidateFieldDefault({ result: true, $field }))\n            .catch(errors => mergeValidateFieldDefault({ $field, errors }));\n\n    }) )\n\n}\n","\nimport { fieldsStringSelector } from './fieldsStringSelector';\nimport { getUniqueFields } from './getUniqueFields';\n\nexport const getFilledFields = $form => {\n    return getUniqueFields( $form.querySelectorAll(fieldsStringSelector) )\n    .map($field => {\n\n        const name = $field.name,\n              type = $field.type,\n              isCheckboxOrRadio = type === 'checkbox' || type === 'radio',\n              fieldChecked = $form.querySelector('[name=\"' + name + '\"]:checked'),\n              isReqFrom = $field.matches('[data-required-from]'),\n              $reqMore = (isReqFrom ? $form.querySelector($field.getAttribute('data-required-from')) : null);\n\n        return (\n            isCheckboxOrRadio ? (fieldChecked || null) :\n            (isReqFrom && $reqMore.checked) || (!isReqFrom && $field.value) ? $field : null\n        );\n\n    })\n    .filter($field => $field !== null);\n}\n","\nimport { version }              from './modules/version';\nimport { \n    checkFormEl, \n    customEvents, \n    dispatchCustomEvent, \n    excludeSelector, \n    finalizeFieldPromise, \n    finalizeFormPromise, \n    isNodeList, \n    mergeObjects, \n    removeClass }               from './modules/helpers';\nimport { options }              from './modules/options';\nimport { validationRules }      from './modules/validationRules';\nimport { formStartup }          from './modules/formStartup';\nimport { destroy }              from './modules/destroy';\nimport { checkFieldValidity }   from './modules/checkFieldValidity';\nimport { checkFormValidity }    from './modules/checkFormValidity';\nimport { checkFilledFields }    from './modules/checkFilledFields';\n\nclass Form {\n\n    constructor( form, optionsObj ){\n        const argsL = arguments.length,\n              checkFormElem = checkFormEl(form);\n\n        if( argsL === 0 || (argsL > 0 && !form) ){\n            throw new Error('First argument \"form\" is missing or falsy!');\n        }\n        if( isNodeList(form) ){\n            throw new Error('First argument \"form\" must be a single DOM node or a form CSS selector, not a NodeList!');\n        }\n        if( !checkFormElem.result ){\n            throw new Error('First argument \"form\" is not a DOM node nor a form CSS selector!');\n        }\n\n        const self = this;\n\n        self.$form = checkFormElem.$el;\n        self.$form.formjs = self;\n        self.options = mergeObjects({}, Form.prototype.options, optionsObj);\n\n        // BINDING CONTEXT FOR FUTURE EXECUTION\n        const cbList = [\n            // IN fieldOptions\n            'beforeValidation',\n            // IN formOptions\n            'beforeSend',\n            'getFormData'\n        ];\n        cbList.forEach(cbName => {\n            const optionType = self.options.formOptions[cbName] ? 'formOptions' : 'fieldOptions';\n            let cbOpt = self.options[optionType][cbName];\n\n            if( cbOpt ){\n                self.options[optionType][cbName] = ( Array.isArray(cbOpt) ? cbOpt.map(cbFn => cbFn.bind(self)) : cbOpt.bind(self) );\n            }\n        });\n\n        formStartup( self.$form, self.options );\n\n        const initOptions = {};\n        if( self.options.formOptions.onInitCheckFilled ){\n            initOptions.detail = self.validateFilledFields();\n        }\n        dispatchCustomEvent( self.$form, customEvents.form.init, initOptions );\n    }\n\n    destroy(){\n        destroy(this.$form, this.options);\n        dispatchCustomEvent( this.$form, customEvents.form.destroy );\n    }\n    \n    getFormData( trimValues = this.options.fieldOptions.trimValue ){\n        const $formFields = this.$form.querySelectorAll('input, select, textarea'),\n              $filteredFields = Array.from( $formFields ).filter( elem => elem.matches(excludeSelector) );\n        return this.options.formOptions.getFormData( $filteredFields, trimValues );\n    }\n\n    validateField( field, fieldOptions ){\n        const self = this;\n        const $field = typeof field === 'string' ? self.$form.querySelector(field) : field;\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions);\n        const $form = self.$form;\n        return checkFieldValidity($field, fieldOptions, self.validationRules, self.validationErrors)\n            .then(obj => {\n                dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } );\n                if( obj.result && fieldOptions.onValidationCheckAll ){\n                    checkFormValidity( $form, fieldOptions, self.validationRules, self.validationErrors, obj.$field )\n                        .then(dataForm => {\n                            dispatchCustomEvent( $form, customEvents.form.validation, { detail: dataForm } );\n                        });\n                } else if( !obj.result ){\n                    removeClass( $form, self.options.formOptions.cssClasses.valid );\n                }\n                return obj;\n            })\n            .then(finalizeFieldPromise);\n    }\n\n    validateFilledFields(){\n        const focusOnRelated = this.options.fieldOptions.focusOnRelated;\n\n        this.options.fieldOptions.focusOnRelated = false;\n\n        return checkFilledFields(this.$form).then(fields => {\n            this.options.fieldOptions.focusOnRelated = focusOnRelated;\n            return fields;\n        });\n    }\n\n    validateForm( fieldOptions ){\n        const self = this;\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions);\n        const $form = self.$form;\n        return checkFormValidity($form, fieldOptions, self.validationRules, self.validationErrors)\n            .then(data => {\n                data.fields.forEach(obj => {\n                    obj.isCheckingForm = true;\n                    dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } );\n                });\n                dispatchCustomEvent( $form, customEvents.form.validation, { detail: data } );\n                return data;\n            })\n            .then(finalizeFormPromise);\n    }\n    \n    static addValidationErrors( errorsObj ){\n        Form.prototype.validationErrors = mergeObjects({}, Form.prototype.validationErrors, errorsObj);\n    }\n\n    static addValidationRules( rulesObj ){\n        Form.prototype.validationRules = mergeObjects({}, Form.prototype.validationRules, rulesObj);\n    }\n    \n    static setOptions( optionsObj ){\n        Form.prototype.options = mergeObjects({}, Form.prototype.options, optionsObj);\n    }\n\n}\n\nForm.prototype.options = options;\nForm.prototype.validationErrors = {};\nForm.prototype.validationRules = validationRules;\nForm.prototype.version = version;\n\nexport default Form;\n","\nimport { isDOMNode } from './isDOMNode';\n\nexport const checkFormEl = form => {\n    let isString = typeof form,\n        isValidNodeSelector = isString === 'string' && isDOMNode(document.querySelector(form)),\n        isFormSelector = isValidNodeSelector && document.querySelector(form).tagName.toLowerCase() === 'form',\n        obj = {\n            result: isDOMNode(form) || isFormSelector,\n            $el: (isString === 'string' ? document.querySelector(form) : form)\n        };\n\n    return obj;\n}\n","\nimport { customEvents } from './helpers';\nimport { dataTypeNumber, formValidationEnd, keypressMaxlength, pastePrevent, submit, validation, validationEnd } from './listenerCallbacks';\n\nexport function formStartup( $form, options ){\n\n    $form.noValidate = true;\n\n    const fieldOptions = options.fieldOptions,\n          formOptions = options.formOptions;\n        \n    // VALIDATION WITH ATTRIBUTES LIKE HTML ONES ( ALSO FOR BUG FIXING, EG: maxlength IN ANDROID )\n    if( fieldOptions.strictHtmlValidation ){\n        \n        // maxlength\n        // MAXLENGTH IS BUGGY IN ANDROID BROWSERS\n        $form.addEventListener('keypress', keypressMaxlength, false);\n\n        // data-type=\"number\"\n        // SINCE VALIDATING type=\"number\" WITH NON NUMERIC CHARS WILL RETURN EMPTY STRING IN SOME BROWSERS ( EG: FIREFOX )\n        $form.addEventListener('input', dataTypeNumber, false);\n        \n    }\n    \n    if( fieldOptions.preventPasteFields && $form.querySelectorAll( fieldOptions.preventPasteFields ).length ){\n        // INIT EVENT LISTENER FOR \"PASTE\" EVENT TO PREVENT IT ON SPECIFIED FIELDS\n        $form.addEventListener('paste', pastePrevent, false);\n    }\n\n    // INIT EVENTS LISTENER ( AS IN fieldOptions )\n    fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n        const useCapture = /^(blur|focus)$/.test(eventName);\n        $form.addEventListener(eventName, validation, useCapture);\n    });\n\n    $form.addEventListener(customEvents.field.validation, validationEnd, false);\n    $form.addEventListener(customEvents.form.validation, formValidationEnd, false);\n    \n    // HANDLE FORM SUBMIT\n    if( formOptions.handleSubmit ){\n        // INIT FORM SUBMIT ( DEFAULT AND AJAX )\n        $form.addEventListener('submit', submit);\n\n        if( formOptions.ajaxSubmit ){\n            if( $form.getAttribute('enctype') ){\n                formOptions.ajaxOptions.headers['Content-Type'] = $form.getAttribute('enctype');\n            }\n\n            if( $form.getAttribute('method') ){\n                formOptions.ajaxOptions.method = $form.getAttribute('method').toUpperCase();\n            }\n\n            if( $form.getAttribute('action') ){\n                formOptions.ajaxOptions.url = $form.getAttribute('action');\n            }\n        }\n    }\n\n}\n","\nimport { customEvents } from './helpers';\nimport { dataTypeNumber, formValidationEnd, keypressMaxlength, pastePrevent, submit, validation, validationEnd } from './listenerCallbacks';\n\n\nexport function destroy( $form, options ){\n\n    if( options.fieldOptions.strictHtmlValidation ){\n        $form.removeEventListener('keypress', keypressMaxlength, false);\n        $form.removeEventListener('input', dataTypeNumber, false);\n    }\n\n    if( options.fieldOptions.preventPasteFields ){\n        $form.removeEventListener('paste', pastePrevent, false);\n    }\n\n    if( options.formOptions.handleSubmit ){\n        $form.removeEventListener('submit', submit);\n    }\n\n    options.fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n        const useCapturing = eventName === 'blur' ? true : false;\n        $form.removeEventListener(eventName, validation, useCapturing);\n    });\n\n    $form.removeEventListener(customEvents.field.validation, validationEnd, false);\n    $form.removeEventListener(customEvents.form.validation, formValidationEnd, false);\n\n    delete $form.formjs;\n    \n}\n","\nexport const excludeSelector = ':not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"file\"]):not([data-exclude-data])'\n"],"names":["addClass","element","cssClasses","split","forEach","className","classList","add","isNodeList","nodeList","NodeList","prototype","isPrototypeOf","removeClass","remove","isDOMNode","node","Element","customEvents","validation","destroy","init","submit","isPlainObject","object","Object","toString","call","mergeObjects","out","Array","from","arguments","slice","filter","arg","keys","key","isArray","concat","push","dispatchCustomEvent","elem","eventName","eventOptions","bubbles","eventObj","CustomEvent","dispatchEvent","fieldsStringSelector","finalizeFieldPromise","obj","result","Promise","resolve","reject","errors","finalizeFormPromise","fields","formatMap","YYYY-MM-DD","dateArray","MM-DD-YYYY","DD-MM-YYYY","reverse","getDateAsNumber","dateString","dateFormat","splitChar","string","separator","match","length","getSplitChar","indexOf","replace","join","getJSONobjectFromFieldAttribute","fieldEl","attrName","customAttrEl","closest","JSON","parse","getAttribute","getUniqueFields","$nodeList","currentFieldName","currentFieldType","$field","name","type","matches","mergeValidateFieldDefault","isFieldForChangeEvent","runFunctionsSequence","functionsList","data","stopConditionFn","reduce","acc","promiseFn","then","res","dataNew","dataList","serializeObject","constructor","a","k","encodeURIComponent","toCamelCase","all","letter","toUpperCase","options","fieldOptions","beforeValidation","trimValue","value","trim","$fields","$container","questionContainer","dirty","checkDirtyField","skipUIfeedback","pending","error","errorEmpty","errorRule","valid","focusOnRelated","maxFileSize","onValidationCheckAll","preventPasteFields","strictHtmlValidation","validateOnEvents","formOptions","ajaxOptions","cache","credentials","headers","Content-Type","Accept","method","mode","redirect","timeout","url","location","href","ajaxSubmit","beforeSend","ajaxComplete","ajaxError","ajaxPending","ajaxSuccess","getFormData","$filteredFields","trimValues","formData","$form","this","prevObj","isCheckbox","isRadio","isSelect","checked","$checkboxes","querySelectorAll","field","$checkedRadio","querySelector","$selectedOpts","option","selected","keyName","index","list","isLastKeyName","keyNameSplit","arrPos","arrayHasItemAtIndex","arrItemKeyName","isKeyNameArray","endsWith","handleFileUpload","handleSubmit","onInitCheckFilled","validationRules","date","test","email","number","checkbox","$dataChecks","attrValue","checkedLength","isMinOk","isMaxOk","checks","minChecks","maxChecks","equalTo","exactLength","valueLength","minlength","maxlength","file","MIMEtype","accept","RegExp","filesList","files","exceedMaxFileSize","size","isAcceptedFileType","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","max","maxVal","maxLength","min","minVal","minLength","pattern","radio","$fieldChecked","dataTypeNumber","event","target","fieldValue","stopImmediatePropagation","valueReplaced","formValidationEnd","formEl","formjs","clMethodName","detail","keypressMaxlength","keyPressed","which","keyCode","allowedKeys","pastePrevent","preventDefault","ajaxCall","formDataObj","timeoutTimer","isMultipart","body","formDataMultipart","FormData","append","idx","stringify","Headers","controller","AbortController","signal","window","setTimeout","abort","fetch","response","ok","Error","statusText","fetchMethod","get","contentType","headerOpt","getFetchMethod","catch","message","finally","clearTimeout","disabled","instance","formCssClasses","isAjaxForm","$btn","eventPreventDefault","enableBtn","validateForm","beforeSendData","stopExecution","rfsObject","pop","isChangeEvent","self","isFieldForChangeEventBoolean","hasOnlyChangeEvent","validateField","$relatedEqualTo","required","validationEnd","eventDetail","dataFieldOptions","isReqFrom","$reqMore","document","errorClasses","extraErrorClass","isChecks","checkedElLength","empty","errorClassToRemove","checkFieldValidity","validationErrors","isValidValue","$checked","reqMoreIsChecked","$findReqMore","$findReqFrom","id","focus","needsValidation","dataObj","isRadioOrCheckbox","hasSelectedInput","validationMethods","attributes","accList","attr","isAttrValueWithFn","isAttrNameWithFn","accPromise","methodName","accObj","resolveVal","valObj","errorObj","isValid","checkFormValidity","fieldToSkip","$fieldsList","map","areAllFieldsValid","fieldObj","checkFilledFields","formFields","isCheckboxOrRadio","fieldChecked","getFilledFields","Form","[object Object]","form","optionsObj","argsL","checkFormElem","isString","isFormSelector","tagName","toLowerCase","$el","checkFormEl","cbName","optionType","cbOpt","cbFn","bind","noValidate","addEventListener","useCapture","formStartup","initOptions","validateFilledFields","removeEventListener","useCapturing","$formFields","dataForm","isCheckingForm","errorsObj","rulesObj","version"],"mappings":"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"}