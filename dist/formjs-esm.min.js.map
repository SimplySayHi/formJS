{"version":3,"file":"formjs-esm.min.js","sources":["../src/modules/version.js","../src/modules/helpers/addClass.js","../src/modules/helpers/isNodeList.js","../src/modules/helpers/removeClass.js","../src/modules/helpers/isDOMNode.js","../src/modules/helpers/checkFormEl.js","../src/modules/helpers/customEvents.js","../src/modules/helpers/mergeObjects.js","../src/modules/helpers/dispatchCustomEvent.js","../src/modules/helpers/fieldsStringSelector.js","../src/modules/helpers/getDateAsNumber.js","../src/modules/helpers/getSplitChar.js","../src/modules/helpers/getUniqueFields.js","../src/modules/helpers/getValidateFieldDefault.js","../src/modules/helpers/getValidateFormDefault.js","../src/modules/helpers/isFieldForChangeEvent.js","../src/modules/helpers/runFunctionsSequence.js","../src/modules/helpers/serializeObject.js","../src/modules/helpers/toCamelCase.js","../src/modules/optionsUtils.js","../src/modules/helpers/checkDirtyField.js","../src/modules/options.js","../src/modules/validationRules.js","../src/modules/validationRules/date.js","../src/modules/validationRules/email.js","../src/modules/validationRules/number.js","../src/modules/validationRules/checkbox.js","../src/modules/validationRules/checks.js","../src/modules/validationRules/equalTo.js","../src/modules/validationRules/exactLength.js","../src/modules/validationRules/file.js","../src/modules/validationRules/length.js","../src/modules/validationRules/max.js","../src/modules/validationRules/maxlength.js","../src/modules/validationRules/min.js","../src/modules/validationRules/minlength.js","../src/modules/validationRules/pattern.js","../src/modules/validationRules/radio.js","../src/modules/listenerCallbacks/dataTypeNumber.js","../src/modules/listenerCallbacks/keypressMaxlength.js","../src/modules/listenerCallbacks/pastePrevent.js","../src/modules/listenerCallbacks/submit.js","../src/modules/ajaxCall.js","../src/modules/listenerCallbacks/validation.js","../src/modules/listenerCallbacks/validationEnd.js","../src/modules/formStartup.js","../src/modules/init.js","../src/modules/helpers/getFilledFields.js","../src/modules/checkFieldValidity.js","../src/modules/isValid.js","../src/modules/checkFormValidity.js","../src/index.js","../src/modules/constructor.js","../src/modules/destroy.js","../src/modules/helpers/excludeSelector.js","../src/modules/validationErrors.js"],"sourcesContent":["\nexport const version = '4.1.0';\n","\nexport const addClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.add( className );\n    });\n}\n","\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList );\n}\n","\nexport const removeClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.remove( className );\n    });\n}\n","\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node );\n}\n","\nimport { isDOMNode } from './isDOMNode';\n\nexport const checkFormEl = formEl => {\n    let isString = typeof formEl,\n        isValidNodeSelector = isString === 'string' && isDOMNode(document.querySelector(formEl)),\n        isFormSelector = isValidNodeSelector && document.querySelector(formEl).tagName.toLowerCase() === 'form',\n        obj = {\n            result: isDOMNode(formEl) || isFormSelector,\n            element: (isString === 'string' ? document.querySelector(formEl) : formEl)\n        };\n\n    return obj;\n}\n","\nexport const customEvents = {\n    field: {\n        validation: 'fjs.field:validation'\n    },\n    form: {\n        submit:     'fjs.form:submit',\n        validation: 'fjs.form:validation'\n    }\n}\n","\nexport const mergeObjects = function( out = {} ){\n    for(let i=1; i<arguments.length; i++){\n        let obj = arguments[i];\n\n        if(!obj){ continue; }\n\n        for(let key in obj){\n            let isArray = Object.prototype.toString.call(obj[key]) === \"[object Array]\";\n            let isObject = Object.prototype.toString.call(obj[key]) === \"[object Object]\";\n\n            // COPY ONLY ENUMERABLE PROPERTIES\n            if( obj.hasOwnProperty(key) ){\n                if( isArray ){\n\n                    if( typeof out[key] === 'undefined' ){\n                        out[key] = [];\n                    }\n                    out[key] = out[key].concat( obj[key].slice(0) );\n\n                } else if( isObject ){\n\n                    out[key] = mergeObjects(out[key], obj[key]);\n\n                } else {\n\n                    // * STRING | NUMBER | BOOLEAN | FUNCTION\n                    if( Array.isArray(out[key]) ){\n                        // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                        out[key].push(obj[key]);\n                    } else {\n                        out[key] = obj[key];\n                    }\n\n                }\n            }\n        }\n    }\n\n    return out;\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const dispatchCustomEvent = ( elem, eventName, data = {}, eventOptions = {} ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions);\n    const eventObj = new Event(eventName, eventOptions);\n    eventObj.data = data;\n    elem.dispatchEvent( eventObj );\n}\n","\nexport const fieldsStringSelector = 'input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"hidden\"]), select, textarea'\n","\nimport { getSplitChar } from './getSplitChar';\n\nconst formatMap = {\n    'YYYY-MM-DD': function(dateArray){\n        return dateArray;\n    },\n    'MM-DD-YYYY': function(dateArray){\n        return [dateArray[2], dateArray[0], dateArray[1]];\n    },\n    'DD-MM-YYYY': function(dateArray){\n        return dateArray.reverse();\n    }\n};\n\nexport const getDateAsNumber = ( dateString, dateFormat ) => {\n    dateFormat = dateFormat || 'YYYY-MM-DD';\n    const splitChar = getSplitChar(dateString);\n\n    if( dateFormat.indexOf(splitChar) < 0 ){\n        return;\n    }\n\n    dateFormat = dateFormat.replace(/[^YMD]/g, '-');\n    dateString = dateString.split(splitChar);\n    dateString = formatMap[dateFormat](dateString).join('');\n    \n    return dateString;\n}\n","\nexport const getSplitChar = string => {\n    // MATCH ANY NON-DIGIT CHAR\n    const separator = string.match(/\\D/);\n    return (separator && separator.length > 0) ? separator[0] : null;\n}\n","\nexport const getUniqueFields = nodeList => {\n\n    let currentFieldName = '',\n        currentFieldType = '';\n\n    return Array.from( nodeList ).filter(fieldEl => {\n        const name = fieldEl.name,\n              type = fieldEl.type;\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false;\n        }\n        \n        if( !fieldEl.matches('[data-required-from]') ){\n            currentFieldName = name;\n            currentFieldType = type;\n        }\n        return true;\n    });\n    \n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const getValidateFieldDefault = obj => {\n    return mergeObjects({}, { result: false, fieldEl: null }, obj);\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const getValidateFormDefault = obj => {\n    return mergeObjects({}, { result: true, fields: [] }, obj);\n}\n","\nexport const isFieldForChangeEvent = fieldEl => {\n    return fieldEl.matches('select, [type=\"radio\"], [type=\"checkbox\"], [type=\"file\"]');\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const runFunctionsSequence = ( { functionsList = [], data = {}, stopConditionFn = () => false } = {} ) => {\n    return functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1]);\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res);\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result);\n                    return res;\n                });\n        });\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList);\n}\n","\nexport const serializeObject = obj => {\n    var objToString = (\n            (obj && typeof obj === 'object' && obj.constructor === Object) ? \n            Object.keys(obj)\n                .reduce((a,k) => {\n                    a.push(k+'='+encodeURIComponent(obj[k]));\n                    return a\n                },[]).join('&') : \n            obj\n    );\n    return objToString;\n}\n","\nexport const toCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase(); });\n}\n","\nimport { addClass, checkDirtyField } from './helpers';\n\nexport const defaultCallbacksInOptions = {\n    fieldOptions: {\n\n        beforeValidation: function beforeValidationDefault ( fieldObj ) {\n\n            const fieldOptions = this.options.fieldOptions;\n\n            checkDirtyField( fieldObj.fieldEl, fieldOptions );\n            if( !fieldOptions.skipUIfeedback ){\n                addClass( fieldObj.fieldEl.closest( fieldOptions.questionContainer ), fieldOptions.cssClasses.pending );\n            }\n\n        }\n\n    },\n    formOptions: {\n\n        getFormData: function getFormDataDefault ( filteredFields ) {\n\n            const formData = {},\n                  formEl = this.formEl;\n\n            filteredFields.forEach(function( fieldEl ){\n                const isCheckbox = fieldEl.type === 'checkbox',\n                      isRadio = fieldEl.type === 'radio',\n                      isSelect = fieldEl.matches('select'),\n                      name = fieldEl.name;\n                let value = fieldEl.value;\n                                \n                if( isCheckbox ) {\n                    \n                    value = fieldEl.checked;\n                    let checkboxes = Array.from( formEl.querySelectorAll('[name=\"'+ name +'\"]') );\n                    if( checkboxes.length > 1 ){\n\n                        value = [];\n                        let checkedElems = checkboxes.filter(field => field.checked);\n                        checkedElems.forEach(fieldEl => {\n                            value.push( fieldEl.value );\n                        });\n\n                    }\n                        \n                } else if( isRadio ){\n                    \n                    let checkedRadio = formEl.querySelector('[name=\"'+ name +'\"]:checked');\n                    value = (checkedRadio === null ? null : checkedRadio.value);\n                    \n                } else if( isSelect ){\n\n                    let selectedOpts = Array.from( fieldEl.options ).filter(option => option.selected);\n                    if( selectedOpts.length > 1 ){\n\n                        value = [];\n                        selectedOpts.forEach(fieldEl => {\n                            value.push( fieldEl.value );\n                        });\n\n                    }\n                }\n\n                formData[ name ] = value;\n            });\n\n            return formData;\n\n        }\n\n    }\n}\n","\nimport { addClass } from './addClass';\nimport { isNodeList } from './isNodeList';\nimport { removeClass } from './removeClass';\n\nexport const checkDirtyField = ( fields, fieldOptions ) => {\n\n    fields = isNodeList(fields) ? Array.from( fields ) : [fields];\n    fields.forEach(fieldEl => {\n        if( fieldEl.type !== 'checkbox' && fieldEl.type !== 'radio' ){\n            const containerEl = fieldEl.closest( fieldOptions.questionContainer ) || fieldEl;\n            if( fieldEl.value ){\n                addClass( containerEl, fieldOptions.cssClasses.dirty );\n            } else {\n                removeClass( containerEl, fieldOptions.cssClasses.dirty );\n            }\n        }\n    });\n    \n}\n","\nimport { defaultCallbacksInOptions } from './optionsUtils';\n\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [defaultCallbacksInOptions.fieldOptions.beforeValidation],\n        cssClasses: {\n            dirty:              'is-dirty',\n            error:              'has-error',\n            errorEmpty:         'has-error-empty',\n            errorRule:          'has-error-rule',\n            pending:            'is-pending',\n            valid:              'is-valid'\n        },\n        focusOnRelated:         true,\n        handleFileUpload:       true,\n        handleValidation:       true,\n        maxFileSize:            10,\n        onValidationCheckAll:   true,\n        preventPasteFields:     '[type=\"password\"], [data-equal-to]',\n        questionContainer:      '[data-formjs-question]',\n        skipUIfeedback:         false,\n        strictHtmlValidation:   true,\n        validateOnEvents:       'input change'\n    },\n\n    formOptions: {\n        ajaxOptions:            {\n            cache:              'no-store',\n            credentials:        'same-origin',\n            headers: {\n                                'Content-Type': 'application/json',\n                                'Accept':       'application/json'\n            },\n            method:             'POST',\n            mode:               'same-origin',\n            redirect:           'follow',\n            timeout:            0,\n            url:                location.href\n        },\n        ajaxSubmit:             true,\n        beforeSend:             [],\n        cssClasses: {\n            ajaxComplete:       'ajax-complete',\n            ajaxError:          'ajax-error',\n            ajaxPending:        'ajax-pending',\n            ajaxSuccess:        'ajax-success',\n            submit:             'is-submitting',\n            valid:              'is-valid'\n        },\n        getFormData:            defaultCallbacksInOptions.formOptions.getFormData,\n        handleSubmit:           true\n    }\n    \n}\n","\nimport { date }         from './validationRules/date';\nimport { email }        from './validationRules/email';\nimport { number }       from './validationRules/number';\n\nimport { checkbox }     from './validationRules/checkbox';\nimport { equalTo }      from './validationRules/equalTo';\nimport { exactLength }  from './validationRules/exactLength';\nimport { file }         from './validationRules/file';\nimport { length }       from './validationRules/length';\nimport { max }          from './validationRules/max';\nimport { maxlength }    from './validationRules/maxlength';\nimport { min }          from './validationRules/min';\nimport { minlength }    from './validationRules/minlength';\nimport { pattern }      from './validationRules/pattern';\nimport { radio }        from './validationRules/radio';\n\nexport const validationRules = {\n    date,\n    email,\n    number,\n\n    checkbox,\n    equalTo,\n    exactLength,\n    file,\n    length,\n    max,\n    maxlength,\n    min,\n    minlength,\n    pattern,\n    radio\n}\n","\n/*\n    DATE AS ISO 8601 DATE FORMAT:\n    YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n*/\n\nexport const date = function( string ){\n    let date = /^((((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13578]|1[02])[ \\/\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13456789]|1[012])[ \\/\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.]02[ \\/\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ \\/\\-.]02[ \\/\\-.]29))$/g.test( string ),\n        obj = {\n            result: date\n        };\n\n    return obj;\n}\n","\n// https://regex101.com/r/cdlyJy/3\n\nexport const email = function( string ){\n    let obj = {\n        result: /^[a-zA-Z_-]([\\w.-]?[a-zA-Z0-9])*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?){2,})+$/.test( string )\n    };\n\n    return obj;\n}\n","\n/*\n    ALL NUMBERS ( INTEGERS AND FLOATING )\n    VALID NUMBERS: 123 | 123.456 | .123\n*/\n\nexport const number = function( string ){\n    let obj = {\n        result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n    };\n\n    return obj;\n}","\nimport { checks } from './checks';\n\nexport const checkbox = function( value, fieldEl ){\n    let dataChecksEl = fieldEl.closest('form').querySelector('[name=\"' + fieldEl.name + '\"][data-checks]');\n    return dataChecksEl ? checks(dataChecksEl): {result: fieldEl.checked};\n}\n","\nexport const checks = function( fieldEl ){\n    let attrValue = JSON.parse( fieldEl.getAttribute('data-checks') ),\n        checkedElLength = fieldEl.closest('form').querySelectorAll('[name=\"' + fieldEl.name + '\"]:checked').length,\n        isMinOk = checkedElLength >= attrValue[0],\n        isMaxOk = checkedElLength <= attrValue[1],\n        obj = { result: isMinOk && isMaxOk };\n\n    if( !obj.result ){\n        obj.errors = { checks: true };\n        if( !isMinOk ){ obj.errors.minChecks = true; }\n        if( !isMaxOk ){ obj.errors.maxChecks = true; }\n    }\n\n    return obj;\n}\n","\nexport const equalTo = function( value, fieldEl ){\n    let checkFromEl = fieldEl.closest('form').querySelector( '[name=\"' + fieldEl.getAttribute('data-equal-to') + '\"]' ),\n        obj = { result: value === checkFromEl.value };\n\n    if( !obj.result ){\n        obj.errors = { equalTo: true };\n    }\n\n    return obj;\n}\n","\nexport const exactLength = function( value, fieldEl ){\n    let valueLength = value.length,\n        exactLength = fieldEl.getAttribute('data-exact-length') * 1,\n        obj = { result: valueLength === exactLength };\n\n    if( !obj.result ){\n        obj.errors = { exactLength: true };\n        if( valueLength < exactLength ){ obj.errors.minlength = true; }\n        else { obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nexport const file = function( value, fieldEl, fieldOptions ){\n    let maxFileSize = (fieldEl.getAttribute('data-max-file-size') || fieldOptions.maxFileSize) * 1,\n        MIMEtype = (fieldEl.accept ? new RegExp(fieldEl.accept.replace( '*', '[^\\\\/,]+' )) : null),\n        filesList = Array.from(fieldEl.files),\n        obj = { result: true };\n\n    filesList.forEach(function( file ){\n        let exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize,\n            isAcceptedFileType = (MIMEtype !== null ? MIMEtype.test(file.type) : true);\n\n        if( exceedMaxFileSize || !isAcceptedFileType ){\n            obj.result = false;\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {};\n            }\n            obj.errors.file = true;\n            if( exceedMaxFileSize ){ obj.errors.maxFileSize = true; }\n            if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true; }\n\n        }\n    });\n\n    return obj;\n}\n","\nexport const length = function( value, fieldEl ){\n    let valueL = value.length,\n        attrValue = JSON.parse( fieldEl.getAttribute('data-length') ),\n        isMinlengthOk = valueL >= attrValue[0],\n        isMaxlengthOk = valueL <= attrValue[1],\n        obj = { result: isMinlengthOk && isMaxlengthOk };\n\n    if( !obj.result ){\n        obj.errors = { stringLength: true };\n        if( !isMinlengthOk ){ obj.errors.minlength = true; }\n        if( !isMaxlengthOk ){ obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const max = function( value, fieldEl ){\n    let maxVal = fieldEl.max,\n        dateFormat = fieldEl.getAttribute('data-date-format');\n    \n    if( fieldEl.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat );\n        maxVal = maxVal.split('-').join('');\n    }\n\n    value = value * 1;\n    maxVal = maxVal * 1;\n\n    let obj = { result: value <= maxVal };\n\n    if( !obj.result ){\n        obj.errors = { max: true };\n    }\n    \n    return obj;\n}\n","\nexport const maxlength = function( value, fieldEl ){\n    const obj = { result: value.length <= fieldEl.maxLength * 1 };\n\n    if( !obj.result ){\n        obj.errors = { maxlength: true };\n    }\n\n    return obj;\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const min = function( value, fieldEl ){\n    let minVal = fieldEl.min,\n        dateFormat = fieldEl.getAttribute('data-date-format');\n    \n    if( fieldEl.type === 'date' || fieldEl.getAttribute('data-date-format') ){\n        value = getDateAsNumber( value, dateFormat );\n        minVal = minVal.split('-').join('');\n    }\n\n    value = value * 1;\n    minVal = minVal * 1;\n\n    let obj = { result: value >= minVal };\n\n    if( !obj.result ){\n        obj.errors = { min: true };\n    }\n    \n    return obj;\n}\n","\nexport const minlength = function( value, fieldEl ){\n    const obj = { result: value.length >= fieldEl.minLength * 1 };\n\n    if( !obj.result ){\n        obj.errors = { minlength: true };\n    }\n\n    return obj;\n}\n","\nexport const pattern = function( value, fieldEl ){\n    let fieldPattern = fieldEl.pattern,\n        fieldRegex = new RegExp( fieldPattern ),\n        obj = { result: fieldRegex.test( value ) };\n\n    if( !obj.result ){\n        obj.errors = { pattern: true };\n    }\n\n    return obj;\n}\n","\nexport const radio = function( value, fieldEl ){\n    let fieldChecked = fieldEl.closest('form').querySelector( '[name=\"'+ fieldEl.name +'\"]:checked' ),\n        isValid = fieldChecked !== null && fieldChecked.value.trim().length > 0;\n\n    return { result: isValid };\n}\n","\nexport const dataTypeNumber = function( event ){\n\n    const fieldEl = event.target;\n    \n    if( fieldEl.matches('[data-type=\"number\"]') ){\n        let fieldValue = fieldEl.value,\n            hasInvalidChars = /[^\\d.,+\\-]/.test(fieldValue);\n        \n        if( hasInvalidChars ){\n            event.stopImmediatePropagation();\n            let valueReplaced = fieldValue.replace(/[^\\d.,+\\-]/g, '');\n            fieldEl.value = valueReplaced;\n        }\n    }\n\n}\n","\nexport const keypressMaxlength = function( event ){\n\n    const fieldEl = event.target;\n    \n    if( fieldEl.matches( '[maxlength]' ) ){\n        const maxLength = fieldEl.maxLength * 1,\n            keyPressed = event.which || event.keyCode,\n            allowedKeys = [8, 37, 38, 39, 46];\n\n        if( fieldEl.value.length >= maxLength && allowedKeys.indexOf(keyPressed) === -1 ){\n            return false;\n        }\n    }\n\n}\n","\nexport const pastePrevent = function( event ){\n\n    const fieldEl = event.target;\n    let fieldOptions = fieldEl.closest('form').formjs.options.fieldOptions;\n\n    if( fieldEl.matches( fieldOptions.preventPasteFields ) ){     \n        event.preventDefault();\n    }\n\n}\n","\nimport { addClass, customEvents, dispatchCustomEvent, getValidateFormDefault, removeClass, runFunctionsSequence } from '../helpers';\nimport { ajaxCall } from '../ajaxCall';\n\nexport function submit( event ){\n\n    const formEl = event.target,\n          instance = formEl.formjs,\n          options = instance.options,\n          formCssClasses = options.formOptions.cssClasses,\n          isAjaxForm = options.formOptions.ajaxSubmit,\n          btnEl = formEl.querySelector('[type=\"submit\"]'),\n          eventPreventDefault = ( enableBtn = true ) => {\n              if( btnEl && enableBtn ){ btnEl.disabled = false; }\n              if( event ){ event.preventDefault(); }\n          };\n\n    if( isAjaxForm ){\n        eventPreventDefault(false);\n    }\n\n    if( btnEl ){\n        if( btnEl.disabled ){\n            eventPreventDefault(false);\n            return false;\n        }\n        btnEl.disabled = true;\n    }\n\n    removeClass( formEl, (formCssClasses.ajaxComplete + ' ' + formCssClasses.ajaxError + ' ' + formCssClasses.ajaxSuccess) );\n    addClass( formEl, formCssClasses.submit );\n    \n    const handleValidation = options.fieldOptions.handleValidation,\n          formValidationPromise = (handleValidation ? instance.validateForm() : Promise.resolve(getValidateFormDefault()));\n\n    formValidationPromise.then(formValidation => {\n\n        let beforeSendData = { stopExecution: false, formData: {} };\n\n        if( !formValidation.result ){\n            eventPreventDefault();\n            removeClass( formEl, formCssClasses.submit );\n            beforeSendData.stopExecution = true;\n            return [beforeSendData];\n        }\n        \n        let formDataObj = (isAjaxForm ? instance.getFormData() : null),\n            callbacksBeforeSend = options.formOptions.beforeSend;\n\n        if( formDataObj ){\n            beforeSendData.formData = formDataObj;\n        }\n\n        const rfsObject = {\n            functionsList: callbacksBeforeSend,\n            data: beforeSendData,\n            stopConditionFn: function(data){ return data.stopExecution; }\n        };\n        return runFunctionsSequence(rfsObject);\n\n    }).then(dataList => {\n\n        if( dataList.filter(data => data.stopExecution).length > 0 ){\n            eventPreventDefault();\n            return false;\n        }\n        \n        if( isAjaxForm ){\n\n            const formData = dataList.pop().formData;\n            addClass( formEl, formCssClasses.ajaxPending );\n            dispatchCustomEvent( formEl, customEvents.form.submit, ajaxCall( formEl, formData, options ) );\n            \n        }\n\n    });\n    \n}\n","\nimport { addClass, mergeObjects, removeClass, serializeObject } from './helpers';\n\nconst getFetchMethod = (response, options) => {\n    const accept = options.headers.get('Accept');\n    const contentType = response.headers.get('Content-Type');\n    const headerOpt = accept || contentType || '';\n\n    if( headerOpt.indexOf('application/json') > -1 || headerOpt === '' ){\n        return 'json';\n    } else if( headerOpt.indexOf('text/') > -1 ){\n        return 'text';\n    } else {\n        return 'blob';\n    }\n};\n\nexport function ajaxCall( formEl, formDataObj, options ){\n\n    let btnEl = formEl.querySelector('[type=\"submit\"]'),\n        timeoutTimer,\n        ajaxOptions = mergeObjects( {}, options.formOptions.ajaxOptions ),\n        isMultipart = ajaxOptions.headers['Content-Type'] === 'multipart/form-data';\n\n    ajaxOptions.body = formDataObj;\n    \n    // POST A FormData OBJECT ( multipart )\n    if( isMultipart && options.fieldOptions.handleFileUpload ){\n        let formDataMultipart = new FormData();\n        \n        for(let key in ajaxOptions.body){\n            formDataMultipart.append( key, ajaxOptions.body[key] );\n        }\n        \n        Array.from( formEl.querySelectorAll('[type=\"file\"]') ).forEach(function( field ){\n            Array.from(field.files).forEach(function( file, idx ){\n                let name = field.name+'['+ idx +']';\n                formDataMultipart.append( name, file, file.name );\n            });\n        });\n        \n        ajaxOptions.body = formDataMultipart;\n    }\n\n    if( ajaxOptions.method === 'GET' ){\n\n        // FETCH WITH \"GET\" METHOD CAN'T HAVE \"body\". SO IT IS APPENDED TO THE URL\n        ajaxOptions.url += ( /\\?/.test(ajaxOptions.url) ? '&' : '?' ) + serializeObject( ajaxOptions.body );\n        delete ajaxOptions.body;\n\n    } else {\n\n        if( ajaxOptions.headers['Content-Type'].indexOf('application/x-www-form-urlencoded') > -1 ){\n            // POST A NORMAL FORM\n            ajaxOptions.body = serializeObject( ajaxOptions.body );\n        } else if( !isMultipart ){\n            // POST A JSON STRING\n            ajaxOptions.body = JSON.stringify(ajaxOptions.body);\n        }\n\n    }\n\n    ajaxOptions.headers = new Headers( ajaxOptions.headers );\n\n    if ( ajaxOptions.timeout > 0 ) {\n        const controller = new AbortController();\n        const signal = controller.signal;\n\n        ajaxOptions.signal = signal;\n\n        timeoutTimer = window.setTimeout(function() {\n            controller.abort();\n        }, ajaxOptions.timeout);\n    }\n\n    return fetch(ajaxOptions.url, ajaxOptions)\n        .then(function( response ){\n            if( !response.ok ){\n                return Promise.reject(response);\n            }\n\n            let fetchMethod = getFetchMethod(response, ajaxOptions);\n\n            return response[fetchMethod]();\n        })\n        .then(function( data ){\n            addClass( formEl, options.formOptions.cssClasses.ajaxSuccess );\n            return data;\n        })\n        .catch(function( error ){\n            addClass( formEl, options.formOptions.cssClasses.ajaxError );\n            return Promise.reject(error);\n        })\n        .finally(function(){\n            if( timeoutTimer ){\n                window.clearTimeout( timeoutTimer );\n            }\n            removeClass( formEl, options.formOptions.cssClasses.submit + ' ' + options.formOptions.cssClasses.ajaxPending );\n            addClass( formEl, options.formOptions.cssClasses.ajaxComplete );\n            btnEl.disabled = false;\n        });\n\n}\n","\nimport { fieldsStringSelector, isFieldForChangeEvent } from '../helpers';\n\nexport const validation = function( event ){\n\n    const isChangeEvent = event.type === 'change',\n          fieldEl = event.target,\n          self = fieldEl.closest('form').formjs;\n\n    if( fieldEl.matches( fieldsStringSelector ) ){\n        const isFieldForChangeEventBoolean = isFieldForChangeEvent(fieldEl);\n        \n        if(\n            (isFieldForChangeEventBoolean && isChangeEvent) ||\n            (!isFieldForChangeEventBoolean && !isChangeEvent)\n        ){\n            \n            return self.validateField( fieldEl ).then(obj => {\n                const type = obj.fieldEl.type,\n                      realtedFieldEqualTo = obj.fieldEl.closest('form').querySelector('[data-equal-to=\"'+ obj.fieldEl.name +'\"]');\n\n                if(\n                    // FIELD IS ( required OR data-validate-if-filled ) AND RELATED FIELD data-equal-to HAS A VALUE\n                    (obj.fieldEl.required || obj.fieldEl.matches('[data-validate-if-filled]')) && \n                    !(type === 'checkbox' || type === 'radio') && \n                    realtedFieldEqualTo && realtedFieldEqualTo.value.trim() !== ''\n                ){\n                    return self.validateField( realtedFieldEqualTo );\n                } else {\n                    return obj;\n                }\n            });\n\n        }\n    }\n    \n}\n","\nimport { addClass, fieldsStringSelector, removeClass } from '../helpers';\n\nexport const validationEnd = function( event ){\n\n    const fieldsArray = event.data.fieldEl ? [event.data] : event.data.fields,\n          options = fieldsArray[0].fieldEl.closest('form').formjs.options.fieldOptions;\n\n    fieldsArray.forEach(function( obj ){\n        let fieldEl = obj.fieldEl;\n        if( fieldEl.matches( fieldsStringSelector ) ){\n            let containerEl = fieldEl.closest( options.questionContainer ),\n                isReqFrom = fieldEl.matches('[data-required-from]'),\n                reqMoreEl = document.querySelector( fieldEl.getAttribute('data-required-from') );\n\n            if( containerEl !== null ){\n                removeClass( containerEl, options.cssClasses.pending );\n            }\n\n            if( containerEl !== null && !options.skipUIfeedback ){\n\n                if( obj.result ){\n\n                    if( !isReqFrom || (isReqFrom && reqMoreEl.checked) ){\n                        // IF FIELD IS VALID\n                        let errorClasses = options.cssClasses.error + ' ' + options.cssClasses.errorEmpty + ' ' + options.cssClasses.errorRule;\n                        removeClass( containerEl, errorClasses );\n                        addClass( containerEl, options.cssClasses.valid );\n                    }\n\n                } else {\n\n                    // IF FIELD IS NOT VALID\n                    let extraErrorClass = options.cssClasses.errorRule;\n\n                    // HANDLE CASE OF FIELD data-checks\n                    let isChecks = fieldEl.matches('[data-checks]'),\n                        checkedElLength = (isChecks ? containerEl.querySelectorAll('[name=\"' + fieldEl.name + '\"]:checked').length : 0);\n\n                    if( (!isChecks && (obj.errors && obj.errors.empty)) || (isChecks && checkedElLength === 0) ){\n                        extraErrorClass = options.cssClasses.errorEmpty;\n                    }\n\n                    let errorClasses = options.cssClasses.error + ' ' + extraErrorClass,\n                        errorClassToRemove = options.cssClasses.errorEmpty + ' ' + options.cssClasses.errorRule;\n                    removeClass( containerEl, options.cssClasses.valid + ' ' + errorClassToRemove );\n                    addClass( containerEl, errorClasses );\n\n                }\n            }\n        }\n    });\n\n}\n","\nimport { customEvents } from './helpers';\nimport { keypressMaxlength, dataTypeNumber, pastePrevent, submit, validation, validationEnd } from './listenerCallbacks';\n\nexport function formStartup( formEl, options ){\n\n    formEl.noValidate = true;\n\n    let fieldOptions = options.fieldOptions,\n        formOptions = options.formOptions;\n\n    // HANDLE FIELD VALIDATION\n    if( fieldOptions.handleValidation ){\n        \n        // VALIDATION WITH ATTRIBUTES LIKE HTML ONES ( ALSO FOR BUG FIXING, EG: maxlength IN ANDROID )\n        if( fieldOptions.strictHtmlValidation ){\n            \n            // maxlength\n            // MAXLENGTH IS BUGGY IN ANDROID BROWSERS\n            formEl.addEventListener('keypress', keypressMaxlength, false);\n\n            // data-type=\"number\"\n            // SINCE VALIDATING type=\"number\" WITH NON NUMERIC CHARS WILL RETURN EMPTY STRING IN SOME BROWSERS ( EG: FIREFOX )\n            formEl.addEventListener('input', dataTypeNumber, false);\n            \n        }\n        \n        if( fieldOptions.preventPasteFields && formEl.querySelectorAll( fieldOptions.preventPasteFields ).length ){\n            // INIT EVENT LISTENER FOR \"PASTE\" EVENT TO PREVENT IT ON SPECIFIED FIELDS\n            formEl.addEventListener('paste', pastePrevent, false);\n        }\n\n        // INIT EVENTS LISTENER ( AS IN fieldOptions )\n        fieldOptions.validateOnEvents.split(' ').forEach(function( eventName ){\n            let useCapturing = (eventName === 'blur' ? true : false);\n            formEl.addEventListener(eventName, validation, useCapturing);\n        });\n\n        formEl.addEventListener(customEvents.field.validation, validationEnd, false);\n\n    }\n    \n    // HANDLE FORM SUBMIT\n    if( formOptions.handleSubmit ){\n        // INIT FORM SUBMIT ( DEFAULT AND AJAX )\n        formEl.addEventListener('submit', submit);\n\n        if( formOptions.ajaxSubmit ){\n            if( formEl.getAttribute('enctype') ){\n                formOptions.ajaxOptions.headers['Content-Type'] = formEl.getAttribute('enctype');\n            }\n\n            if( formEl.getAttribute('method') ){\n                formOptions.ajaxOptions.method = formEl.getAttribute('method').toUpperCase();\n            }\n\n            if( formEl.getAttribute('action') ){\n                formOptions.ajaxOptions.url = formEl.getAttribute('action');\n            }\n        }\n    }\n\n}\n","\nimport { getFilledFields, isFieldForChangeEvent } from './helpers';\nimport { validation } from './listenerCallbacks';\n\nexport const init = function( formEl ){\n\n    const instance = formEl.formjs;\n    const formFields = getFilledFields( formEl );\n\n    // VALIDATE ALL FILLED FIELDS\n    return Promise.all( formFields.map(fieldEl => {\n\n        const isFieldForChangeEventBoolean = isFieldForChangeEvent(fieldEl);\n        const fakeEventObj = { target: fieldEl, type: (isFieldForChangeEventBoolean ? 'change': '') };\n        return validation( fakeEventObj );\n\n    }) ).then(fields => {\n        instance.isInitialized = true;\n        return { instance, fields };\n    });;\n\n}\n","\nimport { fieldsStringSelector } from './fieldsStringSelector';\nimport { getUniqueFields } from './getUniqueFields';\n\nexport const getFilledFields = formEl => {\n    return getUniqueFields( formEl.querySelectorAll(fieldsStringSelector) )\n    .map(fieldEl => {\n\n        const name = fieldEl.name,\n              type = fieldEl.type,\n              isCheckboxOrRadio = (type === 'checkbox' || type === 'radio'),\n              fieldChecked = formEl.querySelector('[name=\"' + name + '\"]:checked'),\n              isReqFrom = fieldEl.matches('[data-required-from]'),\n              reqMoreEl = (isReqFrom ? formEl.querySelector(fieldEl.getAttribute('data-required-from')) : null);\n\n        return (\n            isCheckboxOrRadio ? (fieldChecked || null) :\n            (isReqFrom && reqMoreEl.checked) || (!isReqFrom && fieldEl.value) ? fieldEl : null\n        );\n\n    })\n    .filter(fieldEl => fieldEl !== null);\n}\n","\nimport { getValidateFieldDefault, isDOMNode, runFunctionsSequence } from './helpers';\nimport { isValid } from './isValid';\n\nexport function checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    if( !isDOMNode(fieldEl) ){\n        const obj = getValidateFieldDefault({fieldEl});\n        return Promise.resolve(obj);\n    }\n\n    const formEl = fieldEl.closest('form'),\n          isValidValue = fieldEl.value.trim().length > 0;\n\n     // HANDLE FIELDS radio/data-require-more\n     if( fieldEl.type === 'radio' ){\n        const checkedEl = fieldEl.checked ? fieldEl : formEl.querySelector('[name=\"'+ fieldEl.name +'\"]:checked'),\n              reqMoreIsChecked = checkedEl && checkedEl.matches('[data-require-more]'),\n              findReqMoreEl = reqMoreIsChecked ? checkedEl : formEl.querySelector('[data-require-more][name=\"'+ fieldEl.name +'\"]'),\n              findReqFromEl = findReqMoreEl ? formEl.querySelector('[data-required-from=\"#'+ findReqMoreEl.id +'\"]') : null;\n        \n        if( checkedEl && findReqFromEl ){\n            findReqFromEl.required = findReqMoreEl.required && findReqMoreEl.checked;\n            if( !reqMoreIsChecked ){\n                findReqFromEl.value = '';\n            } else if( fieldOptions.focusOnRelated ) {\n                findReqFromEl.focus();\n            }\n        }\n    }\n\n    // HANDLE FIELDS data-required-from\n    if( fieldEl.matches('[data-required-from]') && isValidValue ){\n        const reqMoreEl = formEl.querySelector( fieldEl.getAttribute('data-required-from') );\n        reqMoreEl.checked = true;\n        fieldEl.required = reqMoreEl.required;\n    }\n\n    const needsValidation = fieldEl.required || (fieldEl.matches('[data-validate-if-filled]') && isValidValue);\n\n    return runFunctionsSequence({\n            functionsList: fieldOptions.beforeValidation,\n            data: {fieldEl}\n        })\n        .then(data => {\n            let dataObj = data.pop();\n            return new Promise(resolve => {\n                if( !needsValidation ){\n                    dataObj.result = true;\n                }\n                resolve( needsValidation ? isValid(fieldEl, fieldOptions, validationRules, validationErrors) : dataObj );\n            });\n        });\n\n}\n","\nimport { getValidateFieldDefault, mergeObjects, toCamelCase } from './helpers';\n\nexport function isValid( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    const fieldValue = fieldEl.value;\n\n    let obj = getValidateFieldDefault({result: fieldValue.trim().length > 0, fieldEl});\n\n    if( !obj.result ){\n        obj.errors = { empty: true };\n        return Promise.resolve(obj);\n    }\n\n    // COLLECT VALIDATION METHOD NAMES ( USED TO RUN VALIDATIONS AND GET ERRORS )\n    const validationMethods = Array.from(fieldEl.attributes).reduce((accList, attr) => {\n        const attrName = toCamelCase( attr.name.replace('data-', '') ),\n              attrValue = toCamelCase( attr.value ),\n              isAttrValueWithFn = (attrName === 'type' || attrName === 'subtype') && validationRules[attrValue],\n              isAttrNameWithFn = validationRules[attrName];\n\n        if( isAttrValueWithFn || isAttrNameWithFn ){\n            accList.push( isAttrValueWithFn ? attrValue : attrName );\n\n        }\n\n        return accList;\n    }, []);\n\n    return new Promise(resolve => {\n\n        // RUN VALIDATIONS\n        const validationsResult = validationMethods.reduce((accPromise, methodName) => {\n            return accPromise.then(accObj => {\n                return new Promise(resolveVal => {\n                    // RUN VALIDATION INSIDE A PROMISE IS USEFUL FOR ASYNC VALIDATIONS\n                    resolveVal( validationRules[methodName](fieldValue, fieldEl, fieldOptions) );\n                }).then(valObj => {\n                    valObj = valObj.result ? {} : valObj;\n                    return mergeObjects(accObj, valObj);\n                });\n            });\n        }, Promise.resolve(obj));\n        \n        resolve(validationsResult);\n\n    }).then(data => {\n\n        // GET ERRORS\n        if( !data.result ){\n            data.errors = validationMethods.reduce((accObj, methodName) => {\n                const errors = (validationErrors[methodName] && validationErrors[methodName](fieldValue, fieldEl)) || {};\n                return mergeObjects(accObj, errors);\n            }, data.errors);\n            data.errors.rule = true;\n        }\n        return data;\n\n    });\n\n}\n","\nimport { fieldsStringSelector, getUniqueFields, getValidateFieldDefault, getValidateFormDefault, mergeObjects } from './helpers';\nimport { checkFieldValidity } from './checkFieldValidity';\n\nexport function checkFormValidity( formEl, fieldOptions, validationRules, validationErrors, fieldToSkip = null ){\n\n    fieldOptions = mergeObjects( {}, fieldOptions, {focusOnRelated: false} );\n\n    const obj = getValidateFormDefault(),\n          fieldsList = getUniqueFields( formEl.querySelectorAll(fieldsStringSelector) );\n\n    return Promise.all( fieldsList.map(fieldEl => {\n\n        if( fieldToSkip && fieldEl === fieldToSkip ){\n            const obj2 = getValidateFieldDefault({fieldEl, result: true});\n            return Promise.resolve(obj2);\n        }\n        \n        return checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors );\n\n    }) ).then(list => {\n\n        let areAllFieldsValid = list.filter(fieldObj => !fieldObj.result).length === 0;\n        obj.result = areAllFieldsValid;\n        obj.fields = list;\n\n        return obj;\n\n    });\n\n}\n","\nimport { version }              from './modules/version';\nimport { customEvents, dispatchCustomEvent, excludeSelector, mergeObjects, removeClass } from './modules/helpers';\nimport { options }              from './modules/options';\nimport { validationRules }      from './modules/validationRules';\nimport { validationErrors }     from './modules/validationErrors';\nimport { validationEnd }        from './modules/listenerCallbacks';\nimport { constructorFn }        from './modules/constructor';\nimport { destroy }              from './modules/destroy';\nimport { init }                 from './modules/init';\nimport { checkFieldValidity }   from './modules/checkFieldValidity';\nimport { checkFormValidity }    from './modules/checkFormValidity';\n\nclass Form {\n\n    constructor( formEl, optionsObj ){\n        constructorFn(this, formEl, optionsObj);\n    }\n\n    destroy(){\n        destroy(this.formEl, this.options);\n    }\n    \n    getFormData(){\n        const formFieldsEl = this.formEl.querySelectorAll('input, select, textarea'),\n              filteredFields = Array.from( formFieldsEl ).filter( elem => elem.matches(excludeSelector) );\n        return this.options.formOptions.getFormData(filteredFields);\n    }\n\n    init(){\n        return init(this.formEl);\n    }\n\n    validateField( fieldEl, fieldOptions ){\n        fieldEl = (typeof fieldEl === 'string' ? this.formEl.querySelector(fieldEl) : fieldEl);\n        fieldOptions = mergeObjects({}, this.options.fieldOptions, fieldOptions);\n        const formEl = this.formEl;\n        const skipUIfeedback = this.options.fieldOptions.skipUIfeedback;\n        return checkFieldValidity(fieldEl, fieldOptions, this.validationRules, this.validationErrors)\n            .then(obj => {\n                return new Promise(resolve => {\n                    if( obj.fieldEl ){\n                        dispatchCustomEvent( obj.fieldEl, customEvents.field.validation, obj, { bubbles: false } );\n                        dispatchCustomEvent( formEl, customEvents.field.validation, obj );\n                        if( fieldOptions.onValidationCheckAll && obj.result ){\n                            // FORCE skipUIfeedback TO true\n                            fieldOptions.skipUIfeedback = true;\n                            resolve(\n                                checkFormValidity( formEl, fieldOptions, this.validationRules, this.validationErrors, obj.fieldEl )\n                                    .then(dataForm => {\n                                        const clMethodName = dataForm.result ? 'add' : 'remove';\n                                        formEl.classList[clMethodName]( this.options.formOptions.cssClasses.valid );\n                                        dispatchCustomEvent( formEl, customEvents.form.validation, dataForm );\n                                        // RESTORE skipUIfeedback TO THE ORIGINAL VALUE\n                                        fieldOptions.skipUIfeedback = skipUIfeedback;\n                                        return obj;\n                                    })\n                            );\n                        } else if( !obj.result ){\n                            removeClass( formEl, this.options.formOptions.cssClasses.valid );\n                        }\n                    }\n                    resolve( obj );\n                });\n            });\n    }\n\n    validateForm( fieldOptions ){\n        fieldOptions = mergeObjects({}, this.options.fieldOptions, fieldOptions);\n        const formEl = this.formEl;\n        return checkFormValidity(formEl, fieldOptions, this.validationRules, this.validationErrors)\n            .then(data => {\n                const clMethodName = data.result ? 'add' : 'remove';\n                formEl.classList[clMethodName]( this.options.formOptions.cssClasses.valid );\n                validationEnd( {data} );\n                dispatchCustomEvent( formEl, customEvents.form.validation, data );\n                return data;\n            });\n\n    }\n    \n    static addValidationErrors( errorsObj ){\n        this.prototype.validationErrors = mergeObjects({}, this.prototype.validationErrors, errorsObj);\n    }\n\n    static addValidationRules( rulesObj ){\n        this.prototype.validationRules = mergeObjects({}, this.prototype.validationRules, rulesObj);\n    }\n    \n    static setOptions( optionsObj ){\n        this.prototype.options = mergeObjects({}, this.prototype.options, optionsObj);\n    }\n\n}\n\nForm.prototype.isInitialized = false;\nForm.prototype.options = options;\nForm.prototype.validationErrors = validationErrors;\nForm.prototype.validationRules = validationRules;\nForm.prototype.version = version;\n\nexport default Form;\n","\nimport { checkFormEl, isNodeList, mergeObjects }   from './helpers';\nimport { formStartup }                             from './formStartup';\n\nexport function constructorFn( self, formEl, optionsObj ){\n\n    let argsL = arguments.length,\n        checkFormElem = checkFormEl(formEl);\n\n    if( argsL === 0 || (argsL > 0 && !formEl) ){\n        throw new Error('First argument \"formEl\" is missing or falsy!');\n    }\n    if( isNodeList(formEl) ){\n        throw new Error('First argument \"formEl\" must be a single DOM node or a form CSS selector, not a NodeList!');\n    }\n    if( !checkFormElem.result ){\n        throw new Error('First argument \"formEl\" is not a DOM node nor a form CSS selector!');\n    }\n\n    self.formEl = checkFormElem.element;\n    self.formEl.formjs = self;\n    self.options = mergeObjects({}, self.constructor.prototype.options, optionsObj);\n\n    // BINDING CONTEXT FOR FUTURE EXECUTION\n    const cbList = [\n        // IN fieldOptions\n        'beforeValidation',\n        // IN formOptions\n        'beforeSend',\n        'getFormData'\n    ];\n    cbList.forEach(cbName => {\n        let optionType = self.options.formOptions[cbName] ? 'formOptions' : 'fieldOptions',\n            cbOpt = self.options[optionType][cbName];\n\n        if( cbOpt ){\n            self.options[optionType][cbName] = ( Array.isArray(cbOpt) ? cbOpt.map(cbFn => cbFn.bind(self)) : cbOpt.bind(self) );\n        }\n    });\n\n    formStartup( self.formEl, self.options );\n    \n}\n","\nimport { customEvents } from './helpers';\nimport { keypressMaxlength, dataTypeNumber, pastePrevent, submit, validation, validationEnd } from './listenerCallbacks';\n\n\nexport function destroy( formEl, options ){\n\n    if( options.fieldOptions.strictHtmlValidation ){\n        formEl.removeEventListener('keypress', keypressMaxlength, false);\n        formEl.removeEventListener('input', dataTypeNumber, false);\n    }\n\n    if( options.fieldOptions.preventPasteFields ){\n        formEl.removeEventListener('paste', pastePrevent, false);\n    }\n\n    if( options.formOptions.handleSubmit ){\n        formEl.removeEventListener('submit', submit);\n    }\n\n    options.fieldOptions.validateOnEvents.split(' ').forEach(function( eventName ){\n        let useCapturing = (eventName === 'blur' ? true : false);\n        formEl.removeEventListener(eventName, validation, useCapturing);\n    });\n\n    formEl.removeEventListener(customEvents.field.validation, validationEnd, false);\n\n    delete formEl.formjs;\n    \n}\n","\nexport const excludeSelector = ':not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"file\"]):not([data-exclude-data])'\n","\nexport const validationErrors = {\n\n    email: function ( string ) {\n        const obj = {};\n\n        if( string.indexOf('@') === -1 ){\n\n            // @ IS MISSING\n            obj.missingAtChar = true;\n\n        } else {\n\n            let splitAt_at = string.split('@');\n            if( splitAt_at[0].length === 0 ){\n\n                // USER NAME IS MISSING\n                obj.missingUserName = true;\n\n            }\n\n            if( splitAt_at[1].length === 0 ){\n\n                // IS EMPTY AFTER @\n                obj.missingDomain = true;\n                obj.missingExtensionDot = true;\n                obj.missingExtension = true;\n\n            } else if( splitAt_at[1].indexOf('.') === -1 ) {\n\n                // DOT IS MISSING\n                obj.missingExtensionDot = true;\n                obj.missingExtension = true;\n\n            } else {\n\n                // EXTENSION MISSING OR NOT LONG ENOUGH\n                let splitAt_dot = splitAt_at[1].split('.'),\n                    extLength = splitAt_dot[1].length;\n                if( extLength === 0 ) {\n                    obj.missingExtension = true;\n                } else if( extLength < 2 ){\n                    obj.minlengthExtension = true;\n                }\n\n            }\n        }\n\n        return obj;\n\n    }\n\n}"],"names":["addClass","element","cssClasses","split","forEach","className","classList","add","isNodeList","nodeList","NodeList","prototype","isPrototypeOf","removeClass","remove","isDOMNode","node","Element","checkFormEl","formEl","isString","isFormSelector","document","querySelector","tagName","toLowerCase","result","customEvents","validation","submit","mergeObjects","out","i","arguments","length","obj","key","isArray","Object","toString","call","isObject","hasOwnProperty","concat","slice","Array","push","dispatchCustomEvent","elem","eventName","data","eventOptions","bubbles","eventObj","Event","dispatchEvent","fieldsStringSelector","formatMap","YYYY-MM-DD","dateArray","MM-DD-YYYY","DD-MM-YYYY","reverse","getDateAsNumber","dateString","dateFormat","splitChar","string","separator","match","getSplitChar","indexOf","replace","join","getUniqueFields","currentFieldName","currentFieldType","from","filter","fieldEl","name","type","matches","getValidateFieldDefault","getValidateFormDefault","fields","isFieldForChangeEvent","runFunctionsSequence","functionsList","stopConditionFn","reduce","acc","promiseFn","then","res","dataNew","Promise","resolve","dataList","serializeObject","constructor","keys","a","k","encodeURIComponent","toCamelCase","all","letter","toUpperCase","defaultCallbacksInOptions","fieldOptions","beforeValidation","fieldObj","this","options","containerEl","closest","questionContainer","value","dirty","checkDirtyField","skipUIfeedback","pending","formOptions","getFormData","filteredFields","formData","isCheckbox","isRadio","isSelect","checked","checkboxes","querySelectorAll","field","checkedRadio","selectedOpts","option","selected","error","errorEmpty","errorRule","valid","focusOnRelated","handleFileUpload","handleValidation","maxFileSize","onValidationCheckAll","preventPasteFields","strictHtmlValidation","validateOnEvents","ajaxOptions","cache","credentials","headers","Content-Type","Accept","method","mode","redirect","timeout","url","location","href","ajaxSubmit","beforeSend","ajaxComplete","ajaxError","ajaxPending","ajaxSuccess","handleSubmit","validationRules","date","test","email","number","checkbox","dataChecksEl","attrValue","JSON","parse","getAttribute","checkedElLength","isMinOk","isMaxOk","errors","checks","minChecks","maxChecks","equalTo","exactLength","valueLength","minlength","maxlength","file","MIMEtype","accept","RegExp","filesList","files","exceedMaxFileSize","size","isAcceptedFileType","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","stringLength","max","maxVal","maxLength","min","minVal","minLength","pattern","fieldPattern","radio","fieldChecked","trim","dataTypeNumber","event","target","fieldValue","stopImmediatePropagation","valueReplaced","keypressMaxlength","keyPressed","which","keyCode","allowedKeys","pastePrevent","formjs","preventDefault","instance","formCssClasses","isAjaxForm","btnEl","eventPreventDefault","enableBtn","disabled","validateForm","formValidation","beforeSendData","stopExecution","formDataObj","callbacksBeforeSend","pop","timeoutTimer","isMultipart","body","formDataMultipart","FormData","append","idx","stringify","Headers","controller","AbortController","signal","window","setTimeout","abort","fetch","response","ok","reject","fetchMethod","get","contentType","headerOpt","getFetchMethod","catch","finally","clearTimeout","ajaxCall","isChangeEvent","self","isFieldForChangeEventBoolean","validateField","realtedFieldEqualTo","required","validationEnd","fieldsArray","isReqFrom","reqMoreEl","errorClasses","extraErrorClass","isChecks","empty","errorClassToRemove","formStartup","noValidate","addEventListener","useCapturing","init","formFields","map","isCheckboxOrRadio","getFilledFields","isInitialized","checkFieldValidity","validationErrors","isValidValue","checkedEl","reqMoreIsChecked","findReqMoreEl","findReqFromEl","id","focus","needsValidation","dataObj","validationMethods","attributes","accList","attr","attrName","isAttrValueWithFn","isAttrNameWithFn","accPromise","methodName","accObj","resolveVal","valObj","rule","isValid","checkFormValidity","fieldToSkip","fieldsList","obj2","list","areAllFieldsValid","Form","[object Object]","optionsObj","argsL","checkFormElem","Error","cbList","cbName","optionType","cbOpt","cbFn","bind","constructorFn","removeEventListener","destroy","formFieldsEl","dataForm","clMethodName","errorsObj","rulesObj","missingAtChar","splitAt_at","missingUserName","missingDomain","missingExtensionDot","missingExtension","extLength","minlengthExtension","version"],"mappings":"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"}