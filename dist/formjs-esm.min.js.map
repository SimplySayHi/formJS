{"version":3,"file":"formjs-esm.min.js","sources":["../src/modules/helpers/addClass.js","../src/modules/helpers/isNodeList.js","../src/modules/helpers/removeClass.js","../src/modules/helpers/isDOMNode.js","../src/modules/helpers/checkTouchedField.js","../src/modules/helpers/customEvents.js","../src/modules/helpers/isPlainObject.js","../src/modules/helpers/mergeObjects.js","../src/modules/helpers/dispatchCustomEvent.js","../src/modules/helpers/excludeSelector.js","../src/modules/helpers/fieldsStringSelector.js","../src/modules/helpers/finalizeFieldPromise.js","../src/modules/helpers/finalizeFieldsGroupPromise.js","../src/modules/helpers/finalizeFormPromise.js","../src/modules/helpers/getDateAsNumber.js","../src/modules/helpers/getSplitChar.js","../src/modules/helpers/getJSONobjectFromFieldAttribute.js","../src/modules/helpers/getUniqueFields.js","../src/modules/helpers/mergeValidateFieldDefault.js","../src/modules/helpers/isFieldForChangeEvent.js","../src/modules/helpers/runFunctionsSequence.js","../src/modules/helpers/serializeObject.js","../src/modules/helpers/toCamelCase.js","../src/modules/options.js","../src/modules/optionsUtils/beforeValidation.js","../src/modules/helpers/checkDirtyField.js","../src/modules/helpers/checkModifiedField.js","../src/modules/optionsUtils/getFormData.js","../src/modules/validationRules.js","../src/modules/validationRules/date.js","../src/modules/validationRules/email.js","../src/modules/validationRules/number.js","../src/modules/validationRules/checkbox.js","../src/modules/validationRules/checks.js","../src/modules/validationRules/equalTo.js","../src/modules/validationRules/exactLength.js","../src/modules/validationRules/file.js","../src/modules/validationRules/length.js","../src/modules/validationRules/max.js","../src/modules/validationRules/maxlength.js","../src/modules/validationRules/min.js","../src/modules/validationRules/minlength.js","../src/modules/validationRules/pattern.js","../src/modules/validationRules/radio.js","../src/modules/listenerCallbacks/blurHandler.js","../src/modules/listenerCallbacks/dataTypeNumber.js","../src/modules/listenerCallbacks/formValidationEnd.js","../src/modules/listenerCallbacks/keypressMaxlength.js","../src/modules/listenerCallbacks/pastePrevent.js","../src/modules/ajaxCall.js","../src/modules/listenerCallbacks/submit.js","../src/modules/listenerCallbacks/groupValidationEnd.js","../src/modules/listenerCallbacks/validation.js","../src/modules/listenerCallbacks/validationEnd.js","../src/modules/checkFieldValidity.js","../src/modules/isValid.js","../src/modules/checkFieldsValidity.js","../src/modules/helpers/mergeValidateFormDefault.js","../src/index.js","../src/modules/helpers/checkFormEl.js","../src/modules/helpers/getInitialValues.js","../src/modules/formStartup.js","../src/modules/destroy.js","../src/modules/helpers/getFilledFields.js"],"sourcesContent":["\nexport const addClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.add( className );\n    });\n}\n","\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList );\n}\n","\nexport const removeClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.remove( className );\n    });\n}\n","\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node );\n}\n","\nimport { addClass } from './addClass';\n\nexport const checkTouchedField = ( $field, fieldOptions ) => {\n\n    const $container = $field.closest( fieldOptions.questionContainer ) || $field;\n    addClass( $container, fieldOptions.cssClasses.touched );\n    \n}\n","\nexport const customEvents = {\n    field: {\n        validation: 'fjs.field:validation'\n    },\n    form: {\n        destroy:    'fjs.form:destroy',\n        init:       'fjs.form:init',\n        submit:     'fjs.form:submit',\n        validation: 'fjs.form:validation'\n    },\n    group: {\n        validation: 'fjs.group:validation'\n    }\n}\n","\nexport const isPlainObject = object => {\n    return Object.prototype.toString.call( object ) === '[object Object]';\n}\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const mergeObjects = function( out = {} ){\n    Array.from(arguments).slice(1).filter(arg => !!arg).forEach(arg => {\n        Object.keys(arg).forEach(key => {\n            if( Array.isArray(arg[key]) ){\n                out[key] = (out[key] || []).concat( arg[key].slice(0) );\n            } else if( isPlainObject(arg[key]) ){\n                out[key] = mergeObjects((out[key] || {}), arg[key]);\n            } else {\n                // * STRING | NUMBER | BOOLEAN | FUNCTION\n                if( Array.isArray(out[key]) ){\n                    // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                    out[key].push(arg[key]);\n                } else {\n                    out[key] = arg[key];\n                }\n            }\n        });\n    });\n\n    return out;\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const dispatchCustomEvent = ( elem, eventName, eventOptions ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions);\n    const eventObj = new CustomEvent(eventName, eventOptions);\n    elem.dispatchEvent( eventObj );\n}\n","\nexport const excludeSelector = ':not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"file\"]):not([data-exclude-data])'\n","\nexport const fieldsStringSelector = 'input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"hidden\"]), select, textarea'\n","\nexport const finalizeFieldPromise = ({errors, result}) => {\n    if( result ){\n        return Promise.resolve();\n    }\n    return Promise.reject(errors);\n}\n","\nexport const finalizeFieldsGroupPromise = ({canSubmit, fields, group, result}) => {\n    if( result ){\n        return Promise.resolve({canSubmit, fields, group});\n    }\n    return Promise.reject({fields, group});\n}\n","\nexport const finalizeFormPromise = ({fields, result}) => {\n    if( result ){\n        return Promise.resolve(fields);\n    }\n    return Promise.reject(fields);\n}\n","\nimport { getSplitChar } from './getSplitChar';\n\nconst formatMap = {\n    'YYYY-MM-DD': function(dateArray){\n        return dateArray;\n    },\n    'MM-DD-YYYY': function(dateArray){\n        return [dateArray[2], dateArray[0], dateArray[1]];\n    },\n    'DD-MM-YYYY': function(dateArray){\n        return dateArray.reverse();\n    }\n};\n\nexport const getDateAsNumber = ( dateString, dateFormat ) => {\n    dateFormat = dateFormat || 'YYYY-MM-DD';\n    const splitChar = getSplitChar(dateString);\n\n    if( dateFormat.indexOf(splitChar) < 0 ){\n        return;\n    }\n\n    dateFormat = dateFormat.replace(/[^YMD]/g, '-');\n    dateString = dateString.split(splitChar);\n    dateString = formatMap[dateFormat](dateString).join('');\n    \n    return dateString;\n}\n","\nexport const getSplitChar = string => {\n    // MATCH ANY NON-DIGIT CHAR\n    const separator = string.match(/\\D/);\n    return (separator && separator.length > 0) ? separator[0] : null;\n}\n","\nexport const getJSONobjectFromFieldAttribute = ( fieldEl, attrName ) => {\n    const customAttrEl = fieldEl.closest('['+ attrName +']');\n    return (customAttrEl && JSON.parse(customAttrEl.getAttribute(attrName))) || {};\n}\n","\nexport const getUniqueFields = $nodeList => {\n\n    let currentFieldName = '',\n        currentFieldType = '';\n\n    return Array.from( $nodeList ).filter($field => {\n        const name = $field.name,\n              type = $field.type;\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false;\n        }\n        \n        if( !$field.matches('[data-required-from]') ){\n            currentFieldName = name;\n            currentFieldType = type;\n        }\n        return true;\n    });\n    \n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const mergeValidateFieldDefault = obj => {\n    return mergeObjects({}, { result: false, $field: null }, obj);\n}\n","\nexport const isFieldForChangeEvent = $field => {\n    return $field.matches('select, [type=\"radio\"], [type=\"checkbox\"], [type=\"file\"]');\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const runFunctionsSequence = ( { functionsList = [], data = {}, stopConditionFn = () => false } = {} ) => {\n    return functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1]);\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res);\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result);\n                    return res;\n                });\n        });\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList);\n}\n","\nexport const serializeObject = obj => {\n    const objToString = (\n            (obj && typeof obj === 'object' && obj.constructor === Object) ? \n            Object.keys(obj)\n                .reduce((a,k) => {\n                    a.push(k+'='+encodeURIComponent(obj[k]));\n                    return a\n                },[]).join('&') : \n            obj\n    );\n    return objToString;\n}\n","\nexport const toCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase(); });\n}\n","\nimport { beforeValidation } from './optionsUtils/beforeValidation';\nimport { getFormData } from './optionsUtils/getFormData';\n\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [beforeValidation],\n        cssClasses: {\n            dirty:              'is-dirty',\n            error:              'has-error',\n            errorEmpty:         'has-error-empty',\n            errorRule:          'has-error-rule',\n            modified:           'is-modified',\n            pending:            'is-pending',\n            touched:            'is-touched',\n            valid:              'is-valid'\n        },\n        focusOnRelated:         true,\n        maxFileSize:            10,\n        onValidationCheckAll:   false,\n        preventPasteFields:     '[type=\"password\"], [data-equal-to]',\n        questionContainer:      '[data-formjs-question]',\n        skipUIfeedback:         false,\n        strictHtmlValidation:   true,\n        trimValue:              false,\n        validateOnEvents:       'input change'\n    },\n\n    formOptions: {\n        ajaxOptions:            {\n            cache:              'no-store',\n            credentials:        'same-origin',\n            headers: {\n                                'Content-Type': 'application/json',\n                                'Accept':       'application/json'\n            },\n            method:             'POST',\n            mode:               'same-origin',\n            redirect:           'follow',\n            timeout:            0,\n            url:                location.href\n        },\n        ajaxSubmit:             true,\n        beforeSend:             [],\n        cssClasses: {\n            ajaxComplete:       'ajax-complete',\n            ajaxError:          'ajax-error',\n            ajaxPending:        'ajax-pending',\n            ajaxSuccess:        'ajax-success',\n            submit:             'is-submitting',\n            valid:              'is-valid'\n        },\n        getFormData:            getFormData,\n        groups:                 [],\n        handleFileUpload:       true,\n        handleSubmit:           true,\n        onInitCheckFilled:      true\n    }\n    \n}\n","\nimport { addClass, checkDirtyField, checkModifiedField, isFieldForChangeEvent } from '../helpers';\n\nexport const beforeValidation = function beforeValidationDefault ( { $field, fieldOptions } ) {\n\n    const initialValues = $field.form.formjs._.initialValues\n\n    if( fieldOptions.trimValue && !isFieldForChangeEvent($field) ){\n        $field.value = $field.value.trim();\n    }\n\n    checkDirtyField( $field, fieldOptions );\n    checkModifiedField( $field, initialValues, fieldOptions );\n\n    if( !fieldOptions.skipUIfeedback ){\n        addClass( $field.closest( fieldOptions.questionContainer ), fieldOptions.cssClasses.pending );\n    }\n\n}\n","\nimport { addClass } from './addClass';\nimport { isNodeList } from './isNodeList';\nimport { removeClass } from './removeClass';\n\nexport const checkDirtyField = ( $fields, fieldOptions ) => {\n\n    $fields = isNodeList($fields) ? Array.from( $fields ) : [$fields];\n    $fields.forEach($field => {\n        if( $field.type !== 'checkbox' && $field.type !== 'radio' ){\n            const $container = $field.closest( fieldOptions.questionContainer ) || $field;\n            if( $field.value ){\n                addClass( $container, fieldOptions.cssClasses.dirty );\n            } else {\n                removeClass( $container, fieldOptions.cssClasses.dirty );\n            }\n        }\n    });\n    \n}\n","\nimport { addClass } from './addClass';\nimport { removeClass } from './removeClass';\n\nconst isValueModified = ( { form, tagName, type, name, value, multiple, options }, initValues ) => {\n    const isRadio = type === 'radio';\n    const isCheckbox = type === 'checkbox';\n    const isSelect = tagName === 'SELECT';\n    const isMultiAnswer = (isCheckbox && form.querySelectorAll(`[name=\"${name}\"]`).length > 1) || (isSelect && multiple);\n\n    if( isMultiAnswer ){\n        const multiValues = isCheckbox ? \n                            [...form.querySelectorAll(`[name=\"${name}\"]:checked`)].map($el => $el.value) : \n                            [...options].filter(opt => opt.selected);\n        \n        const checkValues = initValues[name].length !== multiValues.length || \n                            multiValues.filter(val => initValues[name].includes(val)).length !== initValues[name].length;\n\n        return checkValues;\n    } else if( isRadio ){\n        const $checkedRadio = form.querySelector(`[name=\"${name}\"]:checked`);\n\n        value = null;\n\n        if( $checkedRadio ){\n            value = $checkedRadio.value;\n        }\n    }\n\n    return value !== initValues[name];\n}\n\nexport const checkModifiedField = ( $field, initialValues, fieldOptions ) => {\n\n    const $container = $field.closest( fieldOptions.questionContainer ) || $field;\n    const isModified = isValueModified( $field, initialValues );\n    \n    if( isModified ){\n        addClass( $container, fieldOptions.cssClasses.modified );\n    } else {\n        removeClass( $container, fieldOptions.cssClasses.modified );\n    }\n    \n}\n","\nexport const getFormData = function getFormDataDefault( $filteredFields, trimValues ){\n\n    const formData = {};\n    const $form = this.$form;\n    let prevObj = formData;\n  \n    $filteredFields.forEach($field => {\n        const isCheckbox = $field.type === \"checkbox\";\n        const isRadio = $field.type === \"radio\";\n        const isSelect = $field.matches(\"select\");\n        const name = $field.name;\n        let value = trimValues ? $field.value.trim() : $field.value;\n  \n        if( isCheckbox ){\n\n            value = $field.checked;\n            let $checkboxes = Array.from( $form.querySelectorAll('[name=\"' + name + '\"]') );\n            if( $checkboxes.length > 1 ){\n                value = [];\n                let $checked = $checkboxes.filter((field) => field.checked);\n                $checked.forEach($field => {\n                    value.push($field.value);\n                });\n            }\n\n        } else if( isRadio ){\n\n            const $checkedRadio = $form.querySelector('[name=\"' + name + '\"]:checked');\n            value = $checkedRadio === null ? null : $checkedRadio.value;\n\n        } else if( isSelect ){\n\n            const $selectedOpts = Array.from($field.options).filter(option => option.selected);\n            if( $selectedOpts.length > 1 ){\n                value = [];\n                $selectedOpts.forEach($field => { \n                    value.push($field.value); \n                });\n            }\n        }\n  \n        const nameSplit = name.split(\".\");\n        nameSplit.forEach((keyName, index, list) => {\n            const isLastKeyName = index + 1 === list.length;\n  \n            if( Array.isArray(prevObj) ){\n                const keyNameSplit = keyName.split(\"___\");\n                const arrPos = keyNameSplit[0] - 1;\n                const arrayHasItemAtIndex = typeof prevObj[arrPos] !== \"undefined\";\n                const arrItemKeyName = keyNameSplit[1];\n  \n                if( !arrayHasItemAtIndex ){\n                    prevObj.push({});\n                }\n  \n                keyName = arrItemKeyName;\n\n                if( isLastKeyName ){\n                    prevObj[arrPos][keyName] = value;\n                } else if( typeof prevObj[arrPos][keyName] === 'undefined' ) {\n                    prevObj[arrPos][keyName] = {};\n                }\n                \n                if( !isLastKeyName ){\n                    prevObj = prevObj[arrPos][keyName];\n                    return;\n                }\n            } else {\n                const isKeyNameArray = keyName.endsWith(\"[]\");\n                keyName = keyName.replace(\"[]\", \"\");\n  \n                if( isLastKeyName ){\n                    prevObj[keyName] = value;\n                } else if( typeof prevObj[keyName] === \"undefined\" ){\n                    if( isKeyNameArray ){\n                        prevObj[keyName] = [];\n                    } else {\n                        prevObj[keyName] = {};\n                    }\n                }\n            }\n  \n            prevObj = isLastKeyName ? formData : prevObj[keyName];\n        });\n    });\n  \n    return formData;\n\n}\n","\nimport { date }         from './validationRules/date';\nimport { email }        from './validationRules/email';\nimport { number }       from './validationRules/number';\n\nimport { checkbox }     from './validationRules/checkbox';\nimport { equalTo }      from './validationRules/equalTo';\nimport { exactLength }  from './validationRules/exactLength';\nimport { file }         from './validationRules/file';\nimport { length }       from './validationRules/length';\nimport { max }          from './validationRules/max';\nimport { maxlength }    from './validationRules/maxlength';\nimport { min }          from './validationRules/min';\nimport { minlength }    from './validationRules/minlength';\nimport { pattern }      from './validationRules/pattern';\nimport { radio }        from './validationRules/radio';\n\nexport const validationRules = {\n    date,\n    email,\n    number,\n\n    checkbox,\n    equalTo,\n    exactLength,\n    file,\n    length,\n    max,\n    maxlength,\n    min,\n    minlength,\n    pattern,\n    radio\n}\n","\n/*\n    DATE AS ISO 8601 DATE FORMAT:\n    YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n*/\n\nexport const date = function( string ){\n    return {\n        result: /^((((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13578]|1[02])[ \\/\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13456789]|1[012])[ \\/\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.]02[ \\/\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ \\/\\-.]02[ \\/\\-.]29))$/g.test( string )\n    };\n}\n","\n// https://regex101.com/r/cdlyJy/3\n\nexport const email = function( string ){\n    return {\n        result: /^[a-zA-Z_-]([\\w.-]?[a-zA-Z0-9])*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?){2,})+$/.test( string )\n    };\n}\n","\n/*\n    ALL NUMBERS ( INTEGERS AND FLOATING )\n    VALID NUMBERS: 123 | 123.456 | .123\n*/\n\nexport const number = function( string ){\n    return {\n        result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n    };\n}","\nimport { checks } from './checks';\n\nexport const checkbox = function( value, $field ){\n    const $dataChecks = $field.closest('form').querySelector('[name=\"' + $field.name + '\"][data-checks]');\n    return $dataChecks ? checks($dataChecks) : { result: $field.checked };\n}\n","\nexport const checks = function( $field ){\n    const attrValue = JSON.parse( $field.getAttribute('data-checks') ),\n          checkedLength = $field.closest('form').querySelectorAll('[name=\"' + $field.name + '\"]:checked').length,\n          isMinOk = checkedLength >= attrValue[0],\n          isMaxOk = checkedLength <= attrValue[1],\n          obj = { result: isMinOk && isMaxOk };\n\n    if( !obj.result ){\n        obj.errors = { checks: true };\n        if( !isMinOk ){ obj.errors.minChecks = true; }\n        if( !isMaxOk ){ obj.errors.maxChecks = true; }\n    }\n\n    return obj;\n}\n","\nexport const equalTo = function( value, $field ){\n    const $checkFrom = $field.closest('form').querySelector( '[name=\"' + $field.getAttribute('data-equal-to') + '\"]' );\n    return { result: value === $checkFrom.value };\n}\n","\nexport const exactLength = function( value, $field ){\n    const valueLength = value.length,\n          exactLength = $field.getAttribute('data-exact-length') * 1,\n          obj = { result: valueLength === exactLength };\n\n    if( !obj.result ){\n        obj.errors = {};\n        if( valueLength < exactLength ){ obj.errors.minlength = true; }\n        else { obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nexport const file = function( value, $field, fieldOptions ){\n    const maxFileSize = ($field.getAttribute('data-max-file-size') || fieldOptions.maxFileSize) * 1,\n          MIMEtype = $field.accept ? new RegExp($field.accept.replace( '*', '[^\\\\/,]+' )) : null,\n          filesList = Array.from($field.files),\n          obj = { result: true };\n\n    filesList.forEach(file => {\n        const exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize,\n              isAcceptedFileType = MIMEtype !== null ? MIMEtype.test(file.type) : true;\n\n        if( exceedMaxFileSize || !isAcceptedFileType ){\n            obj.result = false;\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {};\n            }\n            if( exceedMaxFileSize ){ obj.errors.maxFileSize = true; }\n            if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true; }\n\n        }\n    });\n\n    return obj;\n}\n","\nexport const length = function( value, $field ){\n    const valueL = value.length,\n          attrValue = JSON.parse( $field.getAttribute('data-length') ),\n          isMinlengthOk = valueL >= attrValue[0],\n          isMaxlengthOk = valueL <= attrValue[1],\n          obj = { result: isMinlengthOk && isMaxlengthOk };\n\n    if( !obj.result ){\n        obj.errors = {};\n        if( !isMinlengthOk ){ obj.errors.minlength = true; }\n        if( !isMaxlengthOk ){ obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const max = function( value, $field ){\n    let maxVal = $field.max;\n    const dateFormat = $field.getAttribute('data-date-format');\n    \n    if( $field.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat );\n        maxVal = maxVal.split('-').join('');\n    }\n\n    value = value * 1;\n    maxVal = maxVal * 1;\n    \n    return { result: value <= maxVal };\n}\n","\nexport const maxlength = function( value, $field ){\n    return { result: value.length <= $field.maxLength * 1 };\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const min = function( value, $field ){\n    let minVal = $field.min;\n    const dateFormat = $field.getAttribute('data-date-format');\n    \n    if( $field.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat );\n        minVal = minVal.split('-').join('');\n    }\n\n    value = value * 1;\n    minVal = minVal * 1;\n    \n    return { result: value >= minVal };\n}\n","\nexport const minlength = function( value, $field ){\n    return { result: value.length >= $field.minLength * 1 };\n}\n","\nexport const pattern = function( value, $field ){\n    return { result: new RegExp($field.pattern).test(value) };\n}\n","\nexport const radio = function( value, $field ){\n    const $fieldChecked = $field.closest('form').querySelector( '[name=\"'+ $field.name +'\"]:checked' ),\n          isValid = $fieldChecked !== null && $fieldChecked.value.trim().length > 0;\n\n    return { result: isValid };\n}\n","\nimport { checkTouchedField } from '../helpers';\n\nexport const blurHandler = function( event ){\n\n    const $field = event.target;\n    const { fieldOptions } = $field.form.formjs.options;\n\n    checkTouchedField( $field, fieldOptions );\n\n}\n","\nexport const dataTypeNumber = function( event ){\n\n    const $field = event.target;\n    \n    if( $field.matches('[data-type=\"number\"]') ){\n        let fieldValue = $field.value;\n        const hasInvalidChars = /[^\\d.,+\\-]/.test(fieldValue);\n        \n        if( hasInvalidChars ){\n            event.stopImmediatePropagation();\n            let valueReplaced = fieldValue.replace(/[^\\d.,+\\-]/g, '');\n            $field.value = valueReplaced;\n        }\n    }\n\n}\n","\nimport { checkTouchedField } from '../helpers';\n\nexport const formValidationEnd = function( event ){\n    const $form = event.target;\n    const options = $form.formjs.options;\n    \n    if( !options.fieldOptions.skipUIfeedback ){\n        const clMethodName = event.detail.result ? 'add' : 'remove';\n        $form.classList[clMethodName]( options.formOptions.cssClasses.valid );\n    }\n\n    if( event.detail.fields[0].isCheckingForm ){\n        event.detail.fields.forEach(({ $field }) => {\n            checkTouchedField( $field, options.fieldOptions );\n        });\n    }\n}\n","\nexport const keypressMaxlength = function( event ){\n\n    const $field = event.target;\n    \n    if( $field.matches( '[maxlength]' ) ){\n        const maxLength = $field.maxLength * 1,\n              keyPressed = event.which || event.keyCode,\n              allowedKeys = [8, 37, 38, 39, 46];\n\n        if( $field.value.length >= maxLength && allowedKeys.indexOf(keyPressed) === -1 ){\n            return false;\n        }\n    }\n\n}\n","\nexport const pastePrevent = function( event ){\n\n    const $field = event.target;\n    const fieldOptions = $field.closest('form').formjs.options.fieldOptions;\n\n    if( $field.matches( fieldOptions.preventPasteFields ) ){     \n        event.preventDefault();\n    }\n\n}\n","\nimport { addClass, mergeObjects, removeClass, serializeObject } from './helpers';\n\nconst getFetchMethod = (response, options) => {\n    const accept = options.headers.get('Accept'),\n          contentType = response.headers.get('Content-Type'),\n          headerOpt = accept || contentType || '';\n\n    if( headerOpt.indexOf('application/json') > -1 || headerOpt === '' ){\n        return 'json';\n    } else if( headerOpt.indexOf('text/') > -1 ){\n        return 'text';\n    } else {\n        return 'blob';\n    }\n};\n\nexport function ajaxCall( $form, formDataObj, options ){\n\n    let timeoutTimer;\n    const ajaxOptions = mergeObjects( {}, options.formOptions.ajaxOptions ),\n          isMultipart = ajaxOptions.headers['Content-Type'] === 'multipart/form-data';\n\n    ajaxOptions.body = formDataObj;\n    \n    // POST A FormData OBJECT ( multipart )\n    if( isMultipart && options.formOptions.handleFileUpload ){\n        let formDataMultipart = new FormData();\n        \n        for(let key in ajaxOptions.body){\n            formDataMultipart.append( key, ajaxOptions.body[key] );\n        }\n        \n        Array.from( $form.querySelectorAll('[type=\"file\"]') ).forEach($field => {\n            Array.from($field.files).forEach((file, idx) => {\n                const name = $field.name+'['+ idx +']';\n                formDataMultipart.append( name, file, file.name );\n            });\n        });\n        \n        ajaxOptions.body = formDataMultipart;\n    }\n\n    if( ajaxOptions.method === 'GET' ){\n\n        // FETCH WITH \"GET\" METHOD CAN'T HAVE \"body\". SO IT IS APPENDED TO THE URL\n        ajaxOptions.url += ( /\\?/.test(ajaxOptions.url) ? '&' : '?' ) + serializeObject( ajaxOptions.body );\n        delete ajaxOptions.body;\n\n    } else {\n\n        if( ajaxOptions.headers['Content-Type'].indexOf('application/x-www-form-urlencoded') > -1 ){\n            // POST A NORMAL FORM\n            ajaxOptions.body = serializeObject( ajaxOptions.body );\n        } else if( !isMultipart ){\n            // POST A JSON STRING\n            ajaxOptions.body = JSON.stringify(ajaxOptions.body);\n        }\n\n    }\n\n    ajaxOptions.headers = new Headers( ajaxOptions.headers );\n\n    if ( ajaxOptions.timeout > 0 ) {\n        const controller = new AbortController(),\n              signal = controller.signal;\n\n        ajaxOptions.signal = signal;\n        timeoutTimer = window.setTimeout(() => {\n            controller.abort();\n        }, ajaxOptions.timeout);\n    }\n\n    return fetch(ajaxOptions.url, ajaxOptions)\n        .then(response => {\n            if( !response.ok ){\n                throw new Error(response.statusText);\n            }\n            const fetchMethod = getFetchMethod(response, ajaxOptions);\n            return response[fetchMethod]();\n        })\n        .then(data => {\n            addClass( $form, options.formOptions.cssClasses.ajaxSuccess );\n            return data;\n        })\n        .catch(error => {\n            addClass( $form, options.formOptions.cssClasses.ajaxError );\n            throw new Error(error.message);\n        })\n        .finally(() => {\n            if( timeoutTimer ){\n                window.clearTimeout( timeoutTimer );\n            }\n            removeClass( $form, options.formOptions.cssClasses.submit + ' ' + options.formOptions.cssClasses.ajaxPending );\n            addClass( $form, options.formOptions.cssClasses.ajaxComplete );\n            $form.querySelector('[type=\"submit\"]').disabled = false;\n        });\n\n}\n","\nimport { addClass, customEvents, dispatchCustomEvent, removeClass, runFunctionsSequence } from '../helpers';\nimport { ajaxCall } from '../ajaxCall';\n\nexport function submit( event ){\n\n    const $form = event.target,\n          instance = $form.formjs,\n          options = instance.options,\n          formCssClasses = options.formOptions.cssClasses,\n          isAjaxForm = options.formOptions.ajaxSubmit,\n          $btn = $form.querySelector('[type=\"submit\"]'),\n          eventPreventDefault = ( enableBtn = true ) => {\n              if( $btn && enableBtn ){ $btn.disabled = false; }\n              if( event ){ event.preventDefault(); }\n          };\n\n    if( isAjaxForm ){\n        eventPreventDefault(false);\n    }\n\n    if( $btn ){\n        if( $btn.disabled ){\n            eventPreventDefault(false);\n            return false;\n        }\n        $btn.disabled = true;\n    }\n\n    removeClass( $form, (formCssClasses.ajaxComplete + ' ' + formCssClasses.ajaxError + ' ' + formCssClasses.ajaxSuccess) );\n    addClass( $form, formCssClasses.submit );\n\n    instance.validateForm()\n        .then(data => {\n            \n            const hasGroup = typeof data.group !== 'undefined';\n\n            if( hasGroup && !data.canSubmit ){\n                return [{ stopExecution: true }]\n            }\n\n            const beforeSendData = {\n                stopExecution: false,\n                formData: isAjaxForm ? instance.getFormData() : null\n            };\n\n            const rfsObject = {\n                  functionsList: options.formOptions.beforeSend,\n                  data: beforeSendData,\n                  stopConditionFn: function(data){ return data.stopExecution; }\n            };\n            return runFunctionsSequence(rfsObject);\n\n        }).then(dataList => {\n\n            if( dataList.some(({stopExecution}) => stopExecution) ){\n                eventPreventDefault();\n                return false;\n            }\n            \n            if( isAjaxForm ){\n                const formData = dataList.pop().formData;\n                addClass( $form, formCssClasses.ajaxPending );\n                dispatchCustomEvent( $form, customEvents.form.submit, { detail: ajaxCall( $form, formData, options ) } );\n            }\n\n        })\n        .catch(fields => {\n            eventPreventDefault();\n            removeClass( $form, formCssClasses.submit );\n        });\n    \n}\n","\nimport { checkTouchedField } from '../helpers';\n\nexport const groupValidationEnd = function( event ){\n\n    const detail = event.detail;\n    const { fieldOptions } = event.target.formjs.options;\n\n    if( detail.result ){\n        event.target.formjs.currentGroup = detail.group.next;\n    }\n\n    if( detail.fields[0].isCheckingGroup ){\n        detail.fields.forEach(({ $field }) => {\n            checkTouchedField( $field, fieldOptions );\n        });\n    }\n    \n}\n","\nimport { fieldsStringSelector, isFieldForChangeEvent } from '../helpers';\n\nexport const validation = function( event ){\n\n    const isChangeEvent = event.type === 'change',\n          $field = event.target,\n          self = $field.closest('form').formjs;\n\n    if( $field.matches( fieldsStringSelector ) ){\n        const isFieldForChangeEventBoolean = isFieldForChangeEvent($field);\n        const hasOnlyChangeEvent = self.options.fieldOptions.validateOnEvents === 'change';\n        \n        if(\n            (isFieldForChangeEventBoolean && isChangeEvent) ||\n            (!isFieldForChangeEventBoolean && (!isChangeEvent || hasOnlyChangeEvent))\n        ){\n            \n            self.validateField( $field )\n                .then(() => {\n                    const type = $field.type;\n                    const $relatedEqualTo = $field.closest('form').querySelector('[data-equal-to=\"'+ $field.name +'\"]');\n\n                    if(\n                        // FIELD IS ( required OR data-validate-if-filled ) AND RELATED FIELD data-equal-to HAS A VALUE\n                        ($field.required || $field.matches('[data-validate-if-filled]')) && \n                        !(type === 'checkbox' || type === 'radio') && \n                        $relatedEqualTo && $relatedEqualTo.value.trim() !== ''\n                    ){\n                        self.validateField( $relatedEqualTo ).catch(errors => {});\n                    }\n                })\n                .catch(errors => {});\n\n        }\n    }\n    \n}\n","\nimport { addClass, getJSONobjectFromFieldAttribute, removeClass, mergeObjects } from '../helpers';\n\nexport const validationEnd = function( event ){\n\n    const eventDetail = event.detail,\n          $field = eventDetail.$field,\n          dataFieldOptions = getJSONobjectFromFieldAttribute( $field, 'data-field-options' ),\n          fieldOptions = mergeObjects({}, $field.closest('form').formjs.options.fieldOptions, dataFieldOptions),\n          $container = $field.closest( fieldOptions.questionContainer ),\n          isReqFrom = $field.matches('[data-required-from]'),\n          $reqMore = document.querySelector( $field.getAttribute('data-required-from') );\n\n    if( $container && !fieldOptions.skipUIfeedback ){\n\n        if( eventDetail.result ){\n\n            if( !isReqFrom || (isReqFrom && $reqMore.checked) ){\n                // IF FIELD IS VALID\n                const errorClasses = fieldOptions.cssClasses.error + ' ' + fieldOptions.cssClasses.errorEmpty + ' ' + fieldOptions.cssClasses.errorRule;\n                removeClass( $container, errorClasses );\n                addClass( $container, fieldOptions.cssClasses.valid );\n            }\n\n        } else {\n\n            // IF FIELD IS NOT VALID\n            let extraErrorClass = fieldOptions.cssClasses.errorRule;\n\n            // HANDLE CASE OF FIELD data-checks\n            const isChecks = $field.matches('[data-checks]'),\n                  checkedElLength = (isChecks ? $container.querySelectorAll('[name=\"' + $field.name + '\"]:checked').length : 0);\n\n            if( (!isChecks && (eventDetail.errors && eventDetail.errors.empty)) || (isChecks && checkedElLength === 0) ){\n                extraErrorClass = fieldOptions.cssClasses.errorEmpty;\n            }\n\n            let errorClasses = fieldOptions.cssClasses.error + ' ' + extraErrorClass,\n                errorClassToRemove = fieldOptions.cssClasses.errorEmpty + ' ' + fieldOptions.cssClasses.errorRule;\n            removeClass( $container, fieldOptions.cssClasses.valid + ' ' + errorClassToRemove );\n            addClass( $container, errorClasses );\n\n        }\n    }\n\n}\n","\nimport {    getJSONobjectFromFieldAttribute,\n            isDOMNode,\n            mergeObjects,\n            mergeValidateFieldDefault,\n            removeClass,\n            runFunctionsSequence\n        }           from './helpers';\nimport { isValid }  from './isValid';\n\nexport function checkFieldValidity( $field, fieldOptions, validationRules, validationErrors ){\n\n    if( !isDOMNode($field) ){\n        const obj = mergeValidateFieldDefault({$field});\n        return Promise.resolve(obj);\n    }\n\n    const $form = $field.closest('form'),\n          isValidValue = $field.value.trim().length > 0,\n          dataFieldOptions = getJSONobjectFromFieldAttribute( $field, 'data-field-options' );\n\n    fieldOptions = mergeObjects( fieldOptions, dataFieldOptions );\n\n    // HANDLE FIELD data-required-from WHEN CHANGING ITS RELATED RADIO\n    if( $field.type === 'radio' ){\n        const $checked = $field.checked ? $field : $form.querySelector('[name=\"'+ $field.name +'\"]:checked'),\n              reqMoreIsChecked = $checked && $checked.matches('[data-require-more]'),\n              $findReqMore = reqMoreIsChecked ? $checked : $form.querySelector('[data-require-more][name=\"'+ $field.name +'\"]'),\n              $findReqFrom = $findReqMore ? $form.querySelector('[data-required-from=\"#'+ $findReqMore.id +'\"]') : null;\n        \n        if( $checked && $findReqFrom ){\n            $findReqFrom.required = $findReqMore.required && $findReqMore.checked;\n            if( !reqMoreIsChecked ){\n                $findReqFrom.value = '';\n            } else if( fieldOptions.focusOnRelated ) {\n                $findReqFrom.focus();\n            }\n        }\n    }\n\n    // HANDLE FIELD data-require-more & data-required-from WHEN *-from IT'S FILLED\n    if( $field.matches('[data-required-from]') && isValidValue ){\n        const $reqMore = $form.querySelector( $field.getAttribute('data-required-from') );\n        $reqMore.checked = true;\n        $field.required = $reqMore.required;\n    }\n\n    const needsValidation = $field.required || ($field.matches('[data-validate-if-filled]') && isValidValue);\n\n    return runFunctionsSequence({\n            functionsList: fieldOptions.beforeValidation,\n            data: { $field, fieldOptions }\n        })\n        .then(data => {\n            const dataObj = data.pop();\n            return new Promise(resolve => {\n                if( !needsValidation ){\n                    dataObj.result = true;\n                }\n                resolve( needsValidation ? isValid($field, fieldOptions, validationRules, validationErrors) : dataObj );\n            });\n        })\n        .then(data => {\n            const $container = fieldOptions.questionContainer && data.$field.closest( fieldOptions.questionContainer );\n            if( $container ){\n                removeClass( $container, fieldOptions.cssClasses.pending );\n            }\n            return data;\n        })\n        ;\n\n}\n","\nimport { mergeValidateFieldDefault, mergeObjects, toCamelCase } from './helpers';\n\nexport function isValid( $field, fieldOptions, validationRules, validationErrors ){\n\n    const fieldValue = $field.value,\n          obj = mergeValidateFieldDefault({result: fieldValue.trim().length > 0, $field}),\n          isRadioOrCheckbox = /^(radio|checkbox)$/.test($field.type),\n          hasSelectedInput = $field.closest('form').querySelectorAll('[name=\"'+ $field.name +'\"]:checked').length > 0;\n\n    if( (!isRadioOrCheckbox && !obj.result) || (isRadioOrCheckbox && !hasSelectedInput) ){\n        obj.result = false;\n        obj.errors = { empty: true };\n        return Promise.resolve(obj);\n    }\n\n    // COLLECT VALIDATION METHOD NAMES ( USED TO RUN VALIDATIONS AND GET ERRORS )\n    const validationMethods = Array.from($field.attributes).reduce((accList, attr) => {\n        const attrName = toCamelCase( attr.name.replace('data-', '') ),\n              attrValue = toCamelCase( attr.value ),\n              isAttrValueWithFn = (attrName === 'type' || attrName === 'subtype') && validationRules[attrValue],\n              isAttrNameWithFn = validationRules[attrName];\n\n        if( isAttrValueWithFn || isAttrNameWithFn ){\n            accList.push( isAttrValueWithFn ? attrValue : attrName );\n        }\n        return accList;\n    }, []);\n\n    return new Promise(resolve => {\n\n        // RUN VALIDATIONS\n        const validationsResult = validationMethods.reduce((accPromise, methodName) => {\n            return accPromise.then(accObj => {\n                return new Promise(resolveVal => {\n                    // RUN VALIDATION INSIDE A PROMISE IS USEFUL FOR ASYNC VALIDATIONS\n                    resolveVal( validationRules[methodName](fieldValue, $field, fieldOptions) );\n                }).then(valObj => {\n                    // ADD CUSTOM ERROR-KEY FOR EACH VALIDATION RULE\n                    if( !valObj.result ){\n                        const errorObj = {};\n                        if( typeof valObj.errors === 'undefined' || typeof valObj.errors[methodName] === 'undefined' ){\n                            errorObj[methodName] = true;\n                        }\n                        valObj.errors = mergeObjects({}, valObj.errors, errorObj);\n                    }\n                    valObj = valObj.result ? {} : valObj;\n                    return mergeObjects(accObj, valObj);\n                });\n            });\n        }, Promise.resolve(obj));\n        resolve(validationsResult);\n\n    }).then(data => {\n\n        // GET ERRORS\n        if( !data.result ){\n            data.errors = validationMethods.reduce((accObj, methodName) => {\n                const errors = (validationErrors[methodName] && validationErrors[methodName](fieldValue, $field)) || {};\n                return mergeObjects(accObj, errors);\n            }, data.errors);\n        }\n        return data;\n\n    });\n\n}\n","\nimport { getUniqueFields, mergeValidateFieldDefault, mergeValidateFormDefault, mergeObjects } from './helpers';\nimport { checkFieldValidity } from './checkFieldValidity';\n\nexport function checkFieldsValidity( $fields, fieldOptions, validationRules, validationErrors, fieldToSkip = null ){\n\n    fieldOptions = mergeObjects( {}, fieldOptions, {focusOnRelated: false} );\n    const $fieldsList = getUniqueFields( $fields );\n\n    return Promise.all( $fieldsList.map($field => {\n\n        if( fieldToSkip && $field === fieldToSkip ){\n            const obj = mergeValidateFieldDefault({$field, result: true});\n            return Promise.resolve(obj);\n        }\n        return checkFieldValidity( $field, fieldOptions, validationRules, validationErrors );\n\n    }) ).then(fields => {\n\n        const areAllFieldsValid = fields.every(({result}) => result);\n        return mergeValidateFormDefault({result: areAllFieldsValid, fields});\n\n    });\n\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const mergeValidateFormDefault = obj => {\n    return mergeObjects({}, { result: true, fields: [] }, obj);\n}\n","\nimport { version }              from '../package.json';\nimport { \n    checkFormEl, \n    customEvents, \n    dispatchCustomEvent, \n    excludeSelector, \n    fieldsStringSelector, \n    finalizeFieldPromise, \n    finalizeFieldsGroupPromise, \n    finalizeFormPromise, \n    getFilledFields, \n    getInitialValues,\n    isNodeList,\n    mergeObjects, \n    removeClass }               from './modules/helpers';\nimport { options }              from './modules/options';\nimport { validationRules }      from './modules/validationRules';\nimport { formStartup }          from './modules/formStartup';\nimport { destroy }              from './modules/destroy';\nimport { checkFieldValidity }   from './modules/checkFieldValidity';\nimport { checkFieldsValidity }  from './modules/checkFieldsValidity';\n\nclass Form {\n\n    constructor( form, optionsObj ){\n        const argsL = arguments.length,\n              checkFormElem = checkFormEl(form);\n\n        if( argsL === 0 || (argsL > 0 && !form) ){\n            throw new Error('First argument \"form\" is missing or falsy!');\n        }\n        if( isNodeList(form) ){\n            throw new Error('First argument \"form\" must be a single DOM node or a form CSS selector, not a NodeList!');\n        }\n        if( !checkFormElem.result ){\n            throw new Error('First argument \"form\" is not a DOM node nor a form CSS selector!');\n        }\n\n        const self = this;\n\n        self.$form = checkFormElem.$el;\n        self.$form.formjs = self;\n        self.options = mergeObjects({}, Form.prototype.options, optionsObj);\n        self.currentGroup = self.options.formOptions.groups[0];\n\n        // BINDING CONTEXT FOR FUTURE EXECUTION\n        const cbList = [\n            // IN fieldOptions\n            'beforeValidation',\n            // IN formOptions\n            'beforeSend',\n            'getFormData'\n        ];\n        cbList.forEach(cbName => {\n            const optionType = self.options.formOptions[cbName] ? 'formOptions' : 'fieldOptions';\n            let cbOpt = self.options[optionType][cbName];\n\n            if( cbOpt ){\n                self.options[optionType][cbName] = ( Array.isArray(cbOpt) ? cbOpt.map(cbFn => cbFn.bind(self)) : cbOpt.bind(self) );\n            }\n        });\n\n        self._ = { initialValues: getInitialValues(self.$form) }\n\n        formStartup( self.$form, self.options );\n\n        const initOptions = {};\n        if( self.options.formOptions.onInitCheckFilled ){\n            initOptions.detail = self.validateFilledFields().catch(fields => {});\n        }\n        dispatchCustomEvent( self.$form, customEvents.form.init, initOptions );\n    }\n\n    destroy(){\n        destroy(this.$form, this.options);\n        dispatchCustomEvent( this.$form, customEvents.form.destroy );\n    }\n    \n    getFormData( trimValues = this.options.fieldOptions.trimValue ){\n        const $formFields = this.$form.querySelectorAll('input, select, textarea'),\n              $filteredFields = Array.from( $formFields ).filter( elem => elem.matches(excludeSelector) );\n        return this.options.formOptions.getFormData( $filteredFields, trimValues );\n    }\n\n    validateField( field, fieldOptions ){\n        const self = this;\n        const $form = self.$form;\n        const $field = typeof field === 'string' ? $form.querySelector(field) : field;\n\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions);\n        \n        return checkFieldValidity($field, fieldOptions, self.validationRules, self.validationErrors)\n            .then(obj => {\n                dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } );\n                if( obj.result ){\n                    if( fieldOptions.onValidationCheckAll ){\n                        const selector = self.currentGroup || fieldsStringSelector;\n                        const $fields = $form.querySelectorAll(selector);\n                        checkFieldsValidity( $fields, fieldOptions, self.validationRules, self.validationErrors, obj.$field )\n                            .then(dataForm => {\n                                const groups = self.options.formOptions.groups;\n                                const validationEventName = self.currentGroup ? customEvents.group.validation : customEvents.form.validation;\n                                if( groups.length > 0 ){\n                                    dataForm.group = {\n                                        prev: groups[groups.indexOf(selector) - 1],\n                                        current: selector,\n                                        next: groups[groups.indexOf(selector) + 1]\n                                    }\n                                    dataForm.canSubmit = dataForm.result && !dataForm.group.next;\n                                }\n                                dispatchCustomEvent( $form, validationEventName, { detail: dataForm } );\n                            });\n                    }\n                } else {\n                    removeClass( $form, self.options.formOptions.cssClasses.valid );\n                }\n                return obj;\n            })\n            .then(finalizeFieldPromise);\n    }\n\n    validateFieldsGroup( group = this.currentGroup, fieldOptions ){\n        const self = this;\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions);\n        const $fields = self.$form.querySelectorAll(group);\n\n        return checkFieldsValidity($fields, fieldOptions, self.validationRules, self.validationErrors)\n            .then(data => {\n                data.fields.forEach(obj => {\n                    obj.isCheckingGroup = true;\n                    dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } );\n                });\n                const groups = self.options.formOptions.groups;\n                if( groups.length > 0 ){\n                    data.group = {\n                        prev: groups[groups.indexOf(group) - 1],\n                        current: group,\n                        next: groups[groups.indexOf(group) + 1]\n                    }\n                    data.canSubmit = data.result && !data.group.next;\n                }\n                dispatchCustomEvent( self.$form, customEvents.group.validation, { detail: data } );\n                return data;\n            })\n            .then(finalizeFieldsGroupPromise);\n    }\n\n    validateFilledFields( fieldOptions ){\n        const self = this;\n        const $filledFields = getFilledFields( self.$form );\n\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions);\n\n        return checkFieldsValidity($filledFields, fieldOptions, self.validationRules, self.validationErrors)\n            .then(data => {\n                data.fields.forEach(obj => {\n                    dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } );\n                });\n                return data;\n            })\n            .then(finalizeFormPromise);\n    }\n\n    validateForm( fieldOptions ){\n        const self = this;\n\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions);\n\n        if( self.currentGroup ){\n            return self.validateFieldsGroup( self.currentGroup, fieldOptions )\n        }\n\n        const $form = self.$form;\n        const $fields = $form.querySelectorAll(fieldsStringSelector);\n\n        return checkFieldsValidity($fields, fieldOptions, self.validationRules, self.validationErrors)\n            .then(data => {\n                data.fields.forEach(obj => {\n                    obj.isCheckingForm = true;\n                    dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } );\n                });\n                dispatchCustomEvent( $form, customEvents.form.validation, { detail: data } );\n                return data;\n            })\n            .then(finalizeFormPromise);\n    }\n    \n    static addValidationErrors( errorsObj ){\n        Form.prototype.validationErrors = mergeObjects({}, Form.prototype.validationErrors, errorsObj);\n    }\n\n    static addValidationRules( rulesObj ){\n        Form.prototype.validationRules = mergeObjects({}, Form.prototype.validationRules, rulesObj);\n    }\n    \n    static setOptions( optionsObj ){\n        Form.prototype.options = mergeObjects({}, Form.prototype.options, optionsObj);\n    }\n\n}\n\nForm.prototype.options = options;\nForm.prototype.validationErrors = {};\nForm.prototype.validationRules = validationRules;\nForm.prototype.version = version;\n\nexport default Form;\n","\nimport { isDOMNode } from './isDOMNode';\n\nexport const checkFormEl = form => {\n    let isString = typeof form,\n        isValidNodeSelector = isString === 'string' && isDOMNode(document.querySelector(form)),\n        isFormSelector = isValidNodeSelector && document.querySelector(form).tagName.toLowerCase() === 'form',\n        obj = {\n            result: isDOMNode(form) || isFormSelector,\n            $el: (isString === 'string' ? document.querySelector(form) : form)\n        };\n\n    return obj;\n}\n","\nimport { excludeSelector } from './excludeSelector'\n\nexport const getInitialValues = $form => {\n    const $fields = [...$form.querySelectorAll('input, select, textarea')].filter($el => $el.matches(excludeSelector))\n\n    const data = $fields.reduce((accData, { tagName, type, name, value, checked, multiple, options }) => {\n        const isCheckboxOrRadio = ['checkbox', 'radio'].includes(type)\n        const isMultiCheckbox = type === 'checkbox' && $form.querySelectorAll(`[name=\"${name}\"]`).length > 1\n\n        if( typeof accData[name] !== 'undefined' && isCheckboxOrRadio && !checked ){\n            return accData\n        }\n        \n        if( typeof accData[name] === 'undefined' ){\n            if( isCheckboxOrRadio && !checked ){\n                accData[name] = isMultiCheckbox ? [] : null\n                return accData\n            }\n\n            const isMultiSelect = tagName === 'SELECT' && multiple\n            const multiSelectValues = options && [...options].filter(opt => opt.selected)\n            accData[name] = isMultiSelect ? multiSelectValues : (isMultiCheckbox ? [value] : value)\n        } else if( isMultiCheckbox ){\n            accData[name].push(value)\n        } else {\n            accData[name] = value\n        }\n\n        return accData\n    }, {})\n\n    return data\n}\n","\nimport { customEvents } from './helpers';\nimport { \n    blurHandler,\n    dataTypeNumber,\n    formValidationEnd,\n    groupValidationEnd,\n    keypressMaxlength,\n    pastePrevent,\n    submit,\n    validation, \n    validationEnd \n} from './listenerCallbacks';\n\nexport function formStartup( $form, options ){\n\n    $form.noValidate = true;\n\n    const fieldOptions = options.fieldOptions,\n          formOptions = options.formOptions;\n        \n    // VALIDATION WITH ATTRIBUTES LIKE HTML ONES ( ALSO FOR BUG FIXING, EG: maxlength IN ANDROID )\n    if( fieldOptions.strictHtmlValidation ){\n        \n        // maxlength\n        // MAXLENGTH IS BUGGY IN ANDROID BROWSERS\n        $form.addEventListener('keypress', keypressMaxlength, false);\n\n        // data-type=\"number\"\n        // SINCE VALIDATING type=\"number\" WITH NON NUMERIC CHARS WILL RETURN EMPTY STRING IN SOME BROWSERS ( EG: FIREFOX )\n        $form.addEventListener('input', dataTypeNumber, false);\n        \n    }\n    \n    if( fieldOptions.preventPasteFields && $form.querySelectorAll( fieldOptions.preventPasteFields ).length ){\n        // INIT EVENT LISTENER FOR \"PASTE\" EVENT TO PREVENT IT ON SPECIFIED FIELDS\n        $form.addEventListener('paste', pastePrevent, false);\n    }\n\n    $form.addEventListener('blur', blurHandler, true);\n\n    // INIT EVENTS LISTENER ( AS IN fieldOptions )\n    fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n        const useCapture = /^(blur|focus)$/.test(eventName);\n        $form.addEventListener(eventName, validation, useCapture);\n    });\n\n    $form.addEventListener(customEvents.field.validation, validationEnd, false);\n    if( formOptions.groups.length > 0 ){\n        $form.addEventListener(customEvents.group.validation, groupValidationEnd, false);\n    }\n    $form.addEventListener(customEvents.form.validation, formValidationEnd, false);\n    \n    // HANDLE FORM SUBMIT\n    if( formOptions.handleSubmit ){\n        // INIT FORM SUBMIT ( DEFAULT AND AJAX )\n        $form.addEventListener('submit', submit);\n\n        if( formOptions.ajaxSubmit ){\n            if( $form.getAttribute('enctype') ){\n                formOptions.ajaxOptions.headers['Content-Type'] = $form.getAttribute('enctype');\n            }\n\n            if( $form.getAttribute('method') ){\n                formOptions.ajaxOptions.method = $form.getAttribute('method').toUpperCase();\n            }\n\n            if( $form.getAttribute('action') ){\n                formOptions.ajaxOptions.url = $form.getAttribute('action');\n            }\n        }\n    }\n\n}\n","\nimport { customEvents } from './helpers';\nimport { blurHandler, dataTypeNumber, formValidationEnd, groupValidationEnd, keypressMaxlength, pastePrevent, submit, validation, validationEnd } from './listenerCallbacks';\n\nexport function destroy( $form, options ){\n\n    if( options.fieldOptions.strictHtmlValidation ){\n        $form.removeEventListener('keypress', keypressMaxlength, false);\n        $form.removeEventListener('input', dataTypeNumber, false);\n    }\n\n    if( options.fieldOptions.preventPasteFields ){\n        $form.removeEventListener('paste', pastePrevent, false);\n    }\n\n    if( options.formOptions.handleSubmit ){\n        $form.removeEventListener('submit', submit);\n    }\n\n    $form.removeEventListener('blur', blurHandler, true);\n\n    options.fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n        const useCapturing = ['blur', 'focus'].includes(eventName);\n        $form.removeEventListener(eventName, validation, useCapturing);\n    });\n\n    $form.removeEventListener(customEvents.field.validation, validationEnd, false);\n    if( options.formOptions.groups.length > 0 ){\n        $form.removeEventListener(customEvents.group.validation, groupValidationEnd, false);\n    }\n    $form.removeEventListener(customEvents.form.validation, formValidationEnd, false);\n\n    delete $form.formjs;\n    \n}\n","\nimport { fieldsStringSelector } from './fieldsStringSelector';\nimport { getUniqueFields } from './getUniqueFields';\n\nexport const getFilledFields = $form => {\n    return getUniqueFields( $form.querySelectorAll(fieldsStringSelector) )\n    .map($field => {\n\n        const name = $field.name,\n              type = $field.type,\n              isCheckboxOrRadio = type === 'checkbox' || type === 'radio',\n              fieldChecked = $form.querySelector('[name=\"' + name + '\"]:checked'),\n              isReqFrom = $field.matches('[data-required-from]'),\n              $reqMore = (isReqFrom ? $form.querySelector($field.getAttribute('data-required-from')) : null);\n\n        return (\n            isCheckboxOrRadio ? (fieldChecked || null) :\n            (isReqFrom && $reqMore.checked) || (!isReqFrom && $field.value) ? $field : null\n        );\n\n    })\n    .filter($field => $field !== null);\n}\n"],"names":["addClass","element","cssClasses","split","forEach","className","classList","add","isNodeList","nodeList","NodeList","prototype","isPrototypeOf","removeClass","remove","isDOMNode","node","Element","checkTouchedField","$field","fieldOptions","$container","closest","questionContainer","touched","customEvents","validation","destroy","init","submit","isPlainObject","object","Object","toString","call","mergeObjects","out","Array","from","arguments","slice","filter","arg","keys","key","isArray","concat","push","dispatchCustomEvent","elem","eventName","eventOptions","bubbles","eventObj","CustomEvent","dispatchEvent","excludeSelector","fieldsStringSelector","finalizeFieldPromise","errors","result","Promise","resolve","reject","finalizeFieldsGroupPromise","canSubmit","fields","group","finalizeFormPromise","formatMap","YYYY-MM-DD","dateArray","MM-DD-YYYY","DD-MM-YYYY","reverse","getDateAsNumber","dateString","dateFormat","splitChar","string","separator","match","length","getSplitChar","indexOf","replace","join","getJSONobjectFromFieldAttribute","fieldEl","attrName","customAttrEl","JSON","parse","getAttribute","getUniqueFields","$nodeList","currentFieldName","currentFieldType","name","type","matches","mergeValidateFieldDefault","obj","isFieldForChangeEvent","runFunctionsSequence","functionsList","data","stopConditionFn","reduce","acc","promiseFn","then","res","dataNew","dataList","serializeObject","constructor","a","k","encodeURIComponent","toCamelCase","all","letter","toUpperCase","options","beforeValidation","initialValues","form","formjs","_","trimValue","value","trim","$fields","dirty","checkDirtyField","tagName","multiple","initValues","isRadio","isCheckbox","isSelect","querySelectorAll","multiValues","map","$el","opt","selected","val","includes","$checkedRadio","querySelector","isValueModified","modified","checkModifiedField","skipUIfeedback","pending","error","errorEmpty","errorRule","valid","focusOnRelated","maxFileSize","onValidationCheckAll","preventPasteFields","strictHtmlValidation","validateOnEvents","formOptions","ajaxOptions","cache","credentials","headers","Content-Type","Accept","method","mode","redirect","timeout","url","location","href","ajaxSubmit","beforeSend","ajaxComplete","ajaxError","ajaxPending","ajaxSuccess","getFormData","$filteredFields","trimValues","formData","$form","this","prevObj","checked","$checkboxes","field","$selectedOpts","option","keyName","index","list","isLastKeyName","keyNameSplit","arrPos","arrayHasItemAtIndex","arrItemKeyName","isKeyNameArray","endsWith","groups","handleFileUpload","handleSubmit","onInitCheckFilled","validationRules","date","test","email","number","checkbox","$dataChecks","attrValue","checkedLength","isMinOk","isMaxOk","checks","minChecks","maxChecks","equalTo","exactLength","valueLength","minlength","maxlength","file","MIMEtype","accept","RegExp","filesList","files","exceedMaxFileSize","size","isAcceptedFileType","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","max","maxVal","maxLength","min","minVal","minLength","pattern","radio","$fieldChecked","blurHandler","event","target","dataTypeNumber","fieldValue","stopImmediatePropagation","valueReplaced","formValidationEnd","clMethodName","detail","isCheckingForm","keypressMaxlength","keyPressed","which","keyCode","allowedKeys","pastePrevent","preventDefault","ajaxCall","formDataObj","timeoutTimer","isMultipart","body","formDataMultipart","FormData","append","idx","stringify","Headers","controller","AbortController","signal","window","setTimeout","abort","fetch","response","ok","Error","statusText","fetchMethod","get","contentType","headerOpt","getFetchMethod","catch","message","finally","clearTimeout","disabled","instance","formCssClasses","isAjaxForm","$btn","eventPreventDefault","enableBtn","validateForm","stopExecution","beforeSendData","rfsObject","some","pop","groupValidationEnd","currentGroup","next","isCheckingGroup","isChangeEvent","self","isFieldForChangeEventBoolean","hasOnlyChangeEvent","validateField","$relatedEqualTo","required","validationEnd","eventDetail","dataFieldOptions","isReqFrom","$reqMore","document","errorClasses","extraErrorClass","isChecks","checkedElLength","empty","errorClassToRemove","checkFieldValidity","validationErrors","isValidValue","$checked","reqMoreIsChecked","$findReqMore","$findReqFrom","id","focus","needsValidation","dataObj","isRadioOrCheckbox","hasSelectedInput","validationMethods","attributes","accList","attr","isAttrValueWithFn","isAttrNameWithFn","accPromise","methodName","accObj","resolveVal","valObj","errorObj","isValid","checkFieldsValidity","fieldToSkip","$fieldsList","areAllFieldsValid","every","Form","[object Object]","optionsObj","argsL","checkFormElem","isString","isFormSelector","toLowerCase","checkFormEl","cbName","optionType","cbOpt","cbFn","bind","accData","isCheckboxOrRadio","isMultiCheckbox","isMultiSelect","multiSelectValues","noValidate","addEventListener","useCapture","formStartup","initOptions","validateFilledFields","removeEventListener","useCapturing","$formFields","selector","dataForm","validationEventName","prev","current","fieldChecked","validateFieldsGroup","errorsObj","rulesObj","version"],"mappings":"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"}