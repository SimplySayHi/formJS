{"version":3,"file":"formjs-esm.min.js","sources":["../src/modules/version.js","../src/modules/helpers/addClass.js","../src/modules/helpers/isNodeList.js","../src/modules/helpers/removeClass.js","../src/modules/helpers/isDOMNode.js","../src/modules/helpers/customEvents.js","../src/modules/helpers/isPlainObject.js","../src/modules/helpers/mergeObjects.js","../src/modules/helpers/dispatchCustomEvent.js","../src/modules/helpers/fieldsStringSelector.js","../src/modules/helpers/finalizeFieldPromise.js","../src/modules/helpers/finalizeFormPromise.js","../src/modules/helpers/getDateAsNumber.js","../src/modules/helpers/getSplitChar.js","../src/modules/helpers/getUniqueFields.js","../src/modules/helpers/mergeValidateFieldDefault.js","../src/modules/helpers/isFieldForChangeEvent.js","../src/modules/helpers/runFunctionsSequence.js","../src/modules/helpers/serializeObject.js","../src/modules/helpers/toCamelCase.js","../src/modules/optionsUtils.js","../src/modules/helpers/checkDirtyField.js","../src/modules/options.js","../src/modules/validationRules.js","../src/modules/validationRules/date.js","../src/modules/validationRules/email.js","../src/modules/validationRules/number.js","../src/modules/validationRules/checkbox.js","../src/modules/validationRules/checks.js","../src/modules/validationRules/equalTo.js","../src/modules/validationRules/exactLength.js","../src/modules/validationRules/file.js","../src/modules/validationRules/length.js","../src/modules/validationRules/max.js","../src/modules/validationRules/maxlength.js","../src/modules/validationRules/min.js","../src/modules/validationRules/minlength.js","../src/modules/validationRules/pattern.js","../src/modules/validationRules/radio.js","../src/modules/listenerCallbacks/dataTypeNumber.js","../src/modules/listenerCallbacks/formValidationEnd.js","../src/modules/listenerCallbacks/keypressMaxlength.js","../src/modules/listenerCallbacks/pastePrevent.js","../src/modules/ajaxCall.js","../src/modules/listenerCallbacks/submit.js","../src/modules/listenerCallbacks/validation.js","../src/modules/listenerCallbacks/validationEnd.js","../src/modules/checkFilledFields.js","../src/modules/helpers/getFilledFields.js","../src/modules/checkFieldValidity.js","../src/modules/isValid.js","../src/modules/checkFormValidity.js","../src/modules/helpers/mergeValidateFormDefault.js","../src/index.js","../src/modules/helpers/checkFormEl.js","../src/modules/formStartup.js","../src/modules/destroy.js","../src/modules/helpers/excludeSelector.js"],"sourcesContent":["\nexport const version = '5.0.0';\n","\nexport const addClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.add( className );\n    });\n}\n","\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList );\n}\n","\nexport const removeClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.remove( className );\n    });\n}\n","\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node );\n}\n","\nexport const customEvents = {\n    field: {\n        validation: 'fjs.field:validation'\n    },\n    form: {\n        init:       'fjs.form:init',\n        submit:     'fjs.form:submit',\n        validation: 'fjs.form:validation'\n    }\n}\n","\nexport const isPlainObject = object => {\n    return Object.prototype.toString.call( object ) === '[object Object]';\n}\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const mergeObjects = function( out = {} ){\n    Array.from(arguments).slice(1).filter(arg => !!arg).forEach(arg => {\n        Object.keys(arg).forEach(key => {\n            if( Array.isArray(arg[key]) ){\n                out[key] = (out[key] || []).concat( arg[key].slice(0) );\n            } else if( isPlainObject(arg[key]) ){\n                out[key] = mergeObjects((out[key] || {}), arg[key]);\n            } else {\n                // * STRING | NUMBER | BOOLEAN | FUNCTION\n                if( Array.isArray(out[key]) ){\n                    // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                    out[key].push(arg[key]);\n                } else {\n                    out[key] = arg[key];\n                }\n            }\n        });\n    });\n\n    return out;\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const dispatchCustomEvent = ( elem, eventName, eventOptions ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions);\n    const eventObj = new CustomEvent(eventName, eventOptions);\n    elem.dispatchEvent( eventObj );\n}\n","\nexport const fieldsStringSelector = 'input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"hidden\"]), select, textarea'\n","\nexport const finalizeFieldPromise = obj => {\n    if( obj.result ){\n        return Promise.resolve();\n    }\n    return Promise.reject(obj.errors);\n}\n","\nexport const finalizeFormPromise = obj => {\n    if( obj.result ){\n        return Promise.resolve(obj.fields);\n    }\n    return Promise.reject(obj.fields);\n}\n","\nimport { getSplitChar } from './getSplitChar';\n\nconst formatMap = {\n    'YYYY-MM-DD': function(dateArray){\n        return dateArray;\n    },\n    'MM-DD-YYYY': function(dateArray){\n        return [dateArray[2], dateArray[0], dateArray[1]];\n    },\n    'DD-MM-YYYY': function(dateArray){\n        return dateArray.reverse();\n    }\n};\n\nexport const getDateAsNumber = ( dateString, dateFormat ) => {\n    dateFormat = dateFormat || 'YYYY-MM-DD';\n    const splitChar = getSplitChar(dateString);\n\n    if( dateFormat.indexOf(splitChar) < 0 ){\n        return;\n    }\n\n    dateFormat = dateFormat.replace(/[^YMD]/g, '-');\n    dateString = dateString.split(splitChar);\n    dateString = formatMap[dateFormat](dateString).join('');\n    \n    return dateString;\n}\n","\nexport const getSplitChar = string => {\n    // MATCH ANY NON-DIGIT CHAR\n    const separator = string.match(/\\D/);\n    return (separator && separator.length > 0) ? separator[0] : null;\n}\n","\nexport const getUniqueFields = $nodeList => {\n\n    let currentFieldName = '',\n        currentFieldType = '';\n\n    return Array.from( $nodeList ).filter($field => {\n        const name = $field.name,\n              type = $field.type;\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false;\n        }\n        \n        if( !$field.matches('[data-required-from]') ){\n            currentFieldName = name;\n            currentFieldType = type;\n        }\n        return true;\n    });\n    \n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const mergeValidateFieldDefault = obj => {\n    return mergeObjects({}, { result: false, $field: null }, obj);\n}\n","\nexport const isFieldForChangeEvent = $field => {\n    return $field.matches('select, [type=\"radio\"], [type=\"checkbox\"], [type=\"file\"]');\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const runFunctionsSequence = ( { functionsList = [], data = {}, stopConditionFn = () => false } = {} ) => {\n    return functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1]);\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res);\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result);\n                    return res;\n                });\n        });\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList);\n}\n","\nexport const serializeObject = obj => {\n    var objToString = (\n            (obj && typeof obj === 'object' && obj.constructor === Object) ? \n            Object.keys(obj)\n                .reduce((a,k) => {\n                    a.push(k+'='+encodeURIComponent(obj[k]));\n                    return a\n                },[]).join('&') : \n            obj\n    );\n    return objToString;\n}\n","\nexport const toCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase(); });\n}\n","\nimport { addClass, checkDirtyField } from './helpers';\n\nexport const defaultCallbacksInOptions = {\n    fieldOptions: {\n\n        beforeValidation: function beforeValidationDefault ( fieldObj ) {\n\n            const fieldOptions = this.options.fieldOptions;\n\n            checkDirtyField( fieldObj.$field, fieldOptions );\n            if( !fieldOptions.skipUIfeedback ){\n                addClass( fieldObj.$field.closest( fieldOptions.questionContainer ), fieldOptions.cssClasses.pending );\n            }\n\n        }\n\n    },\n    formOptions: {\n\n        getFormData: function getFormDataDefault ( $filteredFields ) {\n\n            const formData = {},\n                  $form = this.$form;\n\n            $filteredFields.forEach($field => {\n                const isCheckbox = $field.type === 'checkbox',\n                      isRadio = $field.type === 'radio',\n                      isSelect = $field.matches('select'),\n                      name = $field.name;\n                let value = $field.value;\n                                \n                if( isCheckbox ) {\n                    \n                    value = $field.checked;\n                    let $checkboxes = Array.from( $form.querySelectorAll('[name=\"'+ name +'\"]') );\n                    if( $checkboxes.length > 1 ){\n\n                        value = [];\n                        let $checked = $checkboxes.filter(field => field.checked);\n                        $checked.forEach($field => {\n                            value.push( $field.value );\n                        });\n\n                    }\n                        \n                } else if( isRadio ){\n                    \n                    const $checkedRadio = $form.querySelector('[name=\"'+ name +'\"]:checked');\n                    value = ($checkedRadio === null ? null : $checkedRadio.value);\n                    \n                } else if( isSelect ){\n\n                    const $selectedOpts = Array.from( $field.options ).filter(option => option.selected);\n                    if( $selectedOpts.length > 1 ){\n\n                        value = [];\n                        $selectedOpts.forEach($field => {\n                            value.push( $field.value );\n                        });\n\n                    }\n                }\n\n                formData[ name ] = value;\n            });\n\n            return formData;\n\n        }\n\n    }\n}\n","\nimport { addClass } from './addClass';\nimport { isNodeList } from './isNodeList';\nimport { removeClass } from './removeClass';\n\nexport const checkDirtyField = ( $fields, fieldOptions ) => {\n\n    $fields = isNodeList($fields) ? Array.from( $fields ) : [$fields];\n    $fields.forEach($field => {\n        if( $field.type !== 'checkbox' && $field.type !== 'radio' ){\n            const $container = $field.closest( fieldOptions.questionContainer ) || $field;\n            if( $field.value ){\n                addClass( $container, fieldOptions.cssClasses.dirty );\n            } else {\n                removeClass( $container, fieldOptions.cssClasses.dirty );\n            }\n        }\n    });\n    \n}\n","\nimport { defaultCallbacksInOptions } from './optionsUtils';\n\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [defaultCallbacksInOptions.fieldOptions.beforeValidation],\n        cssClasses: {\n            dirty:              'is-dirty',\n            error:              'has-error',\n            errorEmpty:         'has-error-empty',\n            errorRule:          'has-error-rule',\n            pending:            'is-pending',\n            valid:              'is-valid'\n        },\n        focusOnRelated:         true,\n        onValidationCheckAll:   false,\n        preventPasteFields:     '[type=\"password\"], [data-equal-to]',\n        questionContainer:      '[data-formjs-question]',\n        skipUIfeedback:         false,\n        strictHtmlValidation:   true,\n        validateOnEvents:       'input change'\n    },\n\n    formOptions: {\n        ajaxOptions:            {\n            cache:              'no-store',\n            credentials:        'same-origin',\n            headers: {\n                                'Content-Type': 'application/json',\n                                'Accept':       'application/json'\n            },\n            method:             'POST',\n            mode:               'same-origin',\n            redirect:           'follow',\n            timeout:            0,\n            url:                location.href\n        },\n        ajaxSubmit:             true,\n        beforeSend:             [],\n        cssClasses: {\n            ajaxComplete:       'ajax-complete',\n            ajaxError:          'ajax-error',\n            ajaxPending:        'ajax-pending',\n            ajaxSuccess:        'ajax-success',\n            submit:             'is-submitting',\n            valid:              'is-valid'\n        },\n        getFormData:            defaultCallbacksInOptions.formOptions.getFormData,\n        handleFileUpload:       true,\n        handleSubmit:           true,\n        onInitCheckFilled:      true\n    }\n    \n}\n","\nimport { date }         from './validationRules/date';\nimport { email }        from './validationRules/email';\nimport { number }       from './validationRules/number';\n\nimport { checkbox }     from './validationRules/checkbox';\nimport { equalTo }      from './validationRules/equalTo';\nimport { exactLength }  from './validationRules/exactLength';\nimport { file }         from './validationRules/file';\nimport { length }       from './validationRules/length';\nimport { max }          from './validationRules/max';\nimport { maxlength }    from './validationRules/maxlength';\nimport { min }          from './validationRules/min';\nimport { minlength }    from './validationRules/minlength';\nimport { pattern }      from './validationRules/pattern';\nimport { radio }        from './validationRules/radio';\n\nexport const validationRules = {\n    date,\n    email,\n    number,\n\n    checkbox,\n    equalTo,\n    exactLength,\n    file,\n    length,\n    max,\n    maxlength,\n    min,\n    minlength,\n    pattern,\n    radio\n}\n","\n/*\n    DATE AS ISO 8601 DATE FORMAT:\n    YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n*/\n\nexport const date = function( string ){\n    return {\n        result: /^((((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13578]|1[02])[ \\/\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13456789]|1[012])[ \\/\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.]02[ \\/\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ \\/\\-.]02[ \\/\\-.]29))$/g.test( string )\n    };\n}\n","\n// https://regex101.com/r/cdlyJy/3\n\nexport const email = function( string ){\n    return {\n        result: /^[a-zA-Z_-]([\\w.-]?[a-zA-Z0-9])*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?){2,})+$/.test( string )\n    };\n}\n","\n/*\n    ALL NUMBERS ( INTEGERS AND FLOATING )\n    VALID NUMBERS: 123 | 123.456 | .123\n*/\n\nexport const number = function( string ){\n    return {\n        result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n    };\n}","\nimport { checks } from './checks';\n\nexport const checkbox = function( value, $field ){\n    const $dataChecks = $field.closest('form').querySelector('[name=\"' + $field.name + '\"][data-checks]');\n    return $dataChecks ? checks($dataChecks) : { result: $field.checked };\n}\n","\nexport const checks = function( $field ){\n    const attrValue = JSON.parse( $field.getAttribute('data-checks') ),\n          checkedLength = $field.closest('form').querySelectorAll('[name=\"' + $field.name + '\"]:checked').length,\n          isMinOk = checkedLength >= attrValue[0],\n          isMaxOk = checkedLength <= attrValue[1],\n          obj = { result: isMinOk && isMaxOk };\n\n    if( !obj.result ){\n        obj.errors = { checks: true };\n        if( !isMinOk ){ obj.errors.minChecks = true; }\n        if( !isMaxOk ){ obj.errors.maxChecks = true; }\n    }\n\n    return obj;\n}\n","\nexport const equalTo = function( value, $field ){\n    const $checkFrom = $field.closest('form').querySelector( '[name=\"' + $field.getAttribute('data-equal-to') + '\"]' );\n    return { result: value === $checkFrom.value };\n}\n","\nexport const exactLength = function( value, $field ){\n    const valueLength = value.length,\n          exactLength = $field.getAttribute('data-exact-length') * 1,\n          obj = { result: valueLength === exactLength };\n\n    if( !obj.result ){\n        obj.errors = {};\n        if( valueLength < exactLength ){ obj.errors.minlength = true; }\n        else { obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nexport const file = function( value, $field ){\n    const maxFileSize = ($field.getAttribute('data-max-file-size') || 0) * 1,\n          MIMEtype = $field.accept ? new RegExp($field.accept.replace( '*', '[^\\\\/,]+' )) : null,\n          filesList = Array.from($field.files),\n          obj = { result: true };\n\n    filesList.forEach(file => {\n        const exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize,\n              isAcceptedFileType = MIMEtype !== null ? MIMEtype.test(file.type) : true;\n\n        if( exceedMaxFileSize || !isAcceptedFileType ){\n            obj.result = false;\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {};\n            }\n            if( exceedMaxFileSize ){ obj.errors.maxFileSize = true; }\n            if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true; }\n\n        }\n    });\n\n    return obj;\n}\n","\nexport const length = function( value, $field ){\n    const valueL = value.length,\n          attrValue = JSON.parse( $field.getAttribute('data-length') ),\n          isMinlengthOk = valueL >= attrValue[0],\n          isMaxlengthOk = valueL <= attrValue[1],\n          obj = { result: isMinlengthOk && isMaxlengthOk };\n\n    if( !obj.result ){\n        obj.errors = {};\n        if( !isMinlengthOk ){ obj.errors.minlength = true; }\n        if( !isMaxlengthOk ){ obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const max = function( value, $field ){\n    let maxVal = $field.max;\n    const dateFormat = $field.getAttribute('data-date-format');\n    \n    if( $field.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat );\n        maxVal = maxVal.split('-').join('');\n    }\n\n    value = value * 1;\n    maxVal = maxVal * 1;\n    \n    return { result: value <= maxVal };\n}\n","\nexport const maxlength = function( value, $field ){\n    return { result: value.length <= $field.maxLength * 1 };\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const min = function( value, $field ){\n    let minVal = $field.min;\n    const dateFormat = $field.getAttribute('data-date-format');\n    \n    if( $field.type === 'date' || $field.getAttribute('data-date-format') ){\n        value = getDateAsNumber( value, dateFormat );\n        minVal = minVal.split('-').join('');\n    }\n\n    value = value * 1;\n    minVal = minVal * 1;\n    \n    return { result: value >= minVal };\n}\n","\nexport const minlength = function( value, $field ){\n    return { result: value.length >= $field.minLength * 1 };\n}\n","\nexport const pattern = function( value, $field ){\n    return { result: new RegExp($field.pattern).test(value) };\n}\n","\nexport const radio = function( value, $field ){\n    const $fieldChecked = $field.closest('form').querySelector( '[name=\"'+ $field.name +'\"]:checked' ),\n          isValid = $fieldChecked !== null && $fieldChecked.value.trim().length > 0;\n\n    return { result: isValid };\n}\n","\nexport const dataTypeNumber = function( event ){\n\n    const $field = event.target;\n    \n    if( $field.matches('[data-type=\"number\"]') ){\n        let fieldValue = $field.value;\n        const hasInvalidChars = /[^\\d.,+\\-]/.test(fieldValue);\n        \n        if( hasInvalidChars ){\n            event.stopImmediatePropagation();\n            let valueReplaced = fieldValue.replace(/[^\\d.,+\\-]/g, '');\n            $field.value = valueReplaced;\n        }\n    }\n\n}\n","\nexport const formValidationEnd = function( event ){\n    const formEl = event.target;\n    const options = formEl.formjs.options;\n    \n    if( !options.fieldOptions.skipUIfeedback ){\n        const clMethodName = event.detail.result ? 'add' : 'remove';\n        formEl.classList[clMethodName]( options.formOptions.cssClasses.valid );\n    }\n}\n","\nexport const keypressMaxlength = function( event ){\n\n    const $field = event.target;\n    \n    if( $field.matches( '[maxlength]' ) ){\n        const maxLength = $field.maxLength * 1,\n              keyPressed = event.which || event.keyCode,\n              allowedKeys = [8, 37, 38, 39, 46];\n\n        if( $field.value.length >= maxLength && allowedKeys.indexOf(keyPressed) === -1 ){\n            return false;\n        }\n    }\n\n}\n","\nexport const pastePrevent = function( event ){\n\n    const $field = event.target;\n    const fieldOptions = $field.closest('form').formjs.options.fieldOptions;\n\n    if( $field.matches( fieldOptions.preventPasteFields ) ){     \n        event.preventDefault();\n    }\n\n}\n","\nimport { addClass, mergeObjects, removeClass, serializeObject } from './helpers';\n\nconst getFetchMethod = (response, options) => {\n    const accept = options.headers.get('Accept'),\n          contentType = response.headers.get('Content-Type'),\n          headerOpt = accept || contentType || '';\n\n    if( headerOpt.indexOf('application/json') > -1 || headerOpt === '' ){\n        return 'json';\n    } else if( headerOpt.indexOf('text/') > -1 ){\n        return 'text';\n    } else {\n        return 'blob';\n    }\n};\n\nexport function ajaxCall( $form, formDataObj, options ){\n\n    let timeoutTimer;\n    const ajaxOptions = mergeObjects( {}, options.formOptions.ajaxOptions ),\n          isMultipart = ajaxOptions.headers['Content-Type'] === 'multipart/form-data';\n\n    ajaxOptions.body = formDataObj;\n    \n    // POST A FormData OBJECT ( multipart )\n    if( isMultipart && options.formOptions.handleFileUpload ){\n        let formDataMultipart = new FormData();\n        \n        for(let key in ajaxOptions.body){\n            formDataMultipart.append( key, ajaxOptions.body[key] );\n        }\n        \n        Array.from( $form.querySelectorAll('[type=\"file\"]') ).forEach($field => {\n            Array.from($field.files).forEach((file, idx) => {\n                const name = $field.name+'['+ idx +']';\n                formDataMultipart.append( name, file, file.name );\n            });\n        });\n        \n        ajaxOptions.body = formDataMultipart;\n    }\n\n    if( ajaxOptions.method === 'GET' ){\n\n        // FETCH WITH \"GET\" METHOD CAN'T HAVE \"body\". SO IT IS APPENDED TO THE URL\n        ajaxOptions.url += ( /\\?/.test(ajaxOptions.url) ? '&' : '?' ) + serializeObject( ajaxOptions.body );\n        delete ajaxOptions.body;\n\n    } else {\n\n        if( ajaxOptions.headers['Content-Type'].indexOf('application/x-www-form-urlencoded') > -1 ){\n            // POST A NORMAL FORM\n            ajaxOptions.body = serializeObject( ajaxOptions.body );\n        } else if( !isMultipart ){\n            // POST A JSON STRING\n            ajaxOptions.body = JSON.stringify(ajaxOptions.body);\n        }\n\n    }\n\n    ajaxOptions.headers = new Headers( ajaxOptions.headers );\n\n    if ( ajaxOptions.timeout > 0 ) {\n        const controller = new AbortController(),\n              signal = controller.signal;\n\n        ajaxOptions.signal = signal;\n        timeoutTimer = window.setTimeout(() => {\n            controller.abort();\n        }, ajaxOptions.timeout);\n    }\n\n    return fetch(ajaxOptions.url, ajaxOptions)\n        .then(response => {\n            if( !response.ok ){\n                // return Promise.reject(response);\n                throw new Error(response.statusText);\n            }\n            const fetchMethod = getFetchMethod(response, ajaxOptions);\n            return response[fetchMethod]();\n        })\n        .then(data => {\n            addClass( $form, options.formOptions.cssClasses.ajaxSuccess );\n            return data;\n        })\n        .catch(error => {\n            addClass( $form, options.formOptions.cssClasses.ajaxError );\n            // return Promise.reject(error);\n            throw new Error(error.message);\n        })\n        .finally(() => {\n            if( timeoutTimer ){\n                window.clearTimeout( timeoutTimer );\n            }\n            removeClass( $form, options.formOptions.cssClasses.submit + ' ' + options.formOptions.cssClasses.ajaxPending );\n            addClass( $form, options.formOptions.cssClasses.ajaxComplete );\n            $form.querySelector('[type=\"submit\"]').disabled = false;\n        });\n\n}\n","\nimport { addClass, customEvents, dispatchCustomEvent, removeClass, runFunctionsSequence } from '../helpers';\nimport { ajaxCall } from '../ajaxCall';\n\nexport function submit( event ){\n\n    const $form = event.target,\n          instance = $form.formjs,\n          options = instance.options,\n          formCssClasses = options.formOptions.cssClasses,\n          isAjaxForm = options.formOptions.ajaxSubmit,\n          $btn = $form.querySelector('[type=\"submit\"]'),\n          eventPreventDefault = ( enableBtn = true ) => {\n              if( $btn && enableBtn ){ $btn.disabled = false; }\n              if( event ){ event.preventDefault(); }\n          };\n\n    if( isAjaxForm ){\n        eventPreventDefault(false);\n    }\n\n    if( $btn ){\n        if( $btn.disabled ){\n            eventPreventDefault(false);\n            return false;\n        }\n        $btn.disabled = true;\n    }\n\n    removeClass( $form, (formCssClasses.ajaxComplete + ' ' + formCssClasses.ajaxError + ' ' + formCssClasses.ajaxSuccess) );\n    addClass( $form, formCssClasses.submit );\n\n    instance.validateForm()\n        .then(fields => {\n\n            const beforeSendData = {\n                stopExecution: false,\n                formData: isAjaxForm ? instance.getFormData() : null\n            };\n\n            const rfsObject = {\n                  functionsList: options.formOptions.beforeSend,\n                  data: beforeSendData,\n                  stopConditionFn: function(data){ return data.stopExecution; }\n            };\n            return runFunctionsSequence(rfsObject);\n\n        }).then(dataList => {\n\n            if( dataList.filter(data => data.stopExecution).length > 0 ){\n                eventPreventDefault();\n                return false;\n            }\n            \n            if( isAjaxForm ){\n                const formData = dataList.pop().formData;\n                addClass( $form, formCssClasses.ajaxPending );\n                dispatchCustomEvent( $form, customEvents.form.submit, { detail: ajaxCall( $form, formData, options ) } );\n            }\n\n        })\n        .catch(fields => {\n            eventPreventDefault();\n            removeClass( $form, formCssClasses.submit );\n        });\n    \n}\n","\nimport { fieldsStringSelector, mergeValidateFieldDefault, isFieldForChangeEvent } from '../helpers';\n\nexport const validation = function( event ){\n\n    const isChangeEvent = event.type === 'change',\n          $field = event.target,\n          self = $field.closest('form').formjs;\n\n    if( $field.matches( fieldsStringSelector ) ){\n        const isFieldForChangeEventBoolean = isFieldForChangeEvent($field);\n        \n        if(\n            (isFieldForChangeEventBoolean && isChangeEvent) ||\n            (!isFieldForChangeEventBoolean && !isChangeEvent)\n        ){\n            \n            return self.validateField( $field )\n                .then(() => {\n                    const type = $field.type,\n                          $realtedEqualTo = $field.closest('form').querySelector('[data-equal-to=\"'+ $field.name +'\"]');\n\n                    if(\n                        // FIELD IS ( required OR data-validate-if-filled ) AND RELATED FIELD data-equal-to HAS A VALUE\n                        ($field.required || $field.matches('[data-validate-if-filled]')) && \n                        !(type === 'checkbox' || type === 'radio') && \n                        $realtedEqualTo && $realtedEqualTo.value.trim() !== ''\n                    ){\n                        self.validateField( $realtedEqualTo ).catch(errors => {});\n                    }\n\n                    return mergeValidateFieldDefault({ result: true, $field });\n                })\n                .catch(errors => mergeValidateFieldDefault({$field, errors}));\n\n        }\n    }\n    \n}\n","\nimport { addClass, removeClass } from '../helpers';\n\nexport const validationEnd = function( event ){\n\n    const eventDetail = event.detail,\n          $field = eventDetail.$field,\n          options = $field.closest('form').formjs.options.fieldOptions,\n          $container = $field.closest( options.questionContainer ),\n          isReqFrom = $field.matches('[data-required-from]'),\n          $reqMore = document.querySelector( $field.getAttribute('data-required-from') );\n\n    if( $container !== null ){\n        removeClass( $container, options.cssClasses.pending );\n    }\n\n    if( $container !== null && !options.skipUIfeedback ){\n\n        if( eventDetail.result ){\n\n            if( !isReqFrom || (isReqFrom && $reqMore.checked) ){\n                // IF FIELD IS VALID\n                const errorClasses = options.cssClasses.error + ' ' + options.cssClasses.errorEmpty + ' ' + options.cssClasses.errorRule;\n                removeClass( $container, errorClasses );\n                addClass( $container, options.cssClasses.valid );\n            }\n\n        } else {\n\n            // IF FIELD IS NOT VALID\n            let extraErrorClass = options.cssClasses.errorRule;\n\n            // HANDLE CASE OF FIELD data-checks\n            const isChecks = $field.matches('[data-checks]'),\n                  checkedElLength = (isChecks ? $container.querySelectorAll('[name=\"' + $field.name + '\"]:checked').length : 0);\n\n            if( (!isChecks && (eventDetail.errors && eventDetail.errors.empty)) || (isChecks && checkedElLength === 0) ){\n                extraErrorClass = options.cssClasses.errorEmpty;\n            }\n\n            let errorClasses = options.cssClasses.error + ' ' + extraErrorClass,\n                errorClassToRemove = options.cssClasses.errorEmpty + ' ' + options.cssClasses.errorRule;\n            removeClass( $container, options.cssClasses.valid + ' ' + errorClassToRemove );\n            addClass( $container, errorClasses );\n\n        }\n    }\n\n}\n","\nimport { getFilledFields, isFieldForChangeEvent } from './helpers';\nimport { validation } from './listenerCallbacks';\n\nexport const checkFilledFields = $form => {\n\n    const formFields = getFilledFields( $form );\n    return Promise.all( formFields.map($field => {\n\n        const isFieldForChangeEventBoolean = isFieldForChangeEvent($field);\n        const fakeEventObj = { target: $field, type: (isFieldForChangeEventBoolean ? 'change': '') };\n        return validation( fakeEventObj );\n\n    }) )\n\n}\n","\nimport { fieldsStringSelector } from './fieldsStringSelector';\nimport { getUniqueFields } from './getUniqueFields';\n\nexport const getFilledFields = $form => {\n    return getUniqueFields( $form.querySelectorAll(fieldsStringSelector) )\n    .map($field => {\n\n        const name = $field.name,\n              type = $field.type,\n              isCheckboxOrRadio = type === 'checkbox' || type === 'radio',\n              fieldChecked = $form.querySelector('[name=\"' + name + '\"]:checked'),\n              isReqFrom = $field.matches('[data-required-from]'),\n              $reqMore = (isReqFrom ? $form.querySelector($field.getAttribute('data-required-from')) : null);\n\n        return (\n            isCheckboxOrRadio ? (fieldChecked || null) :\n            (isReqFrom && $reqMore.checked) || (!isReqFrom && $field.value) ? $field : null\n        );\n\n    })\n    .filter($field => $field !== null);\n}\n","\nimport { mergeValidateFieldDefault, isDOMNode, runFunctionsSequence } from './helpers';\nimport { isValid } from './isValid';\n\nexport function checkFieldValidity( $field, fieldOptions, validationRules, validationErrors ){\n\n    if( !isDOMNode($field) ){\n        const obj = mergeValidateFieldDefault({$field});\n        return Promise.resolve(obj);\n    }\n\n    const $form = $field.closest('form'),\n          isValidValue = $field.value.trim().length > 0;\n\n    // HANDLE FIELD data-required-from WHEN CHANGING ITS RELATED RADIO\n    if( $field.type === 'radio' ){\n        const $checked = $field.checked ? $field : $form.querySelector('[name=\"'+ $field.name +'\"]:checked'),\n              reqMoreIsChecked = $checked && $checked.matches('[data-require-more]'),\n              $findReqMore = reqMoreIsChecked ? $checked : $form.querySelector('[data-require-more][name=\"'+ $field.name +'\"]'),\n              $findReqFrom = $findReqMore ? $form.querySelector('[data-required-from=\"#'+ $findReqMore.id +'\"]') : null;\n        \n        if( $checked && $findReqFrom ){\n            $findReqFrom.required = $findReqMore.required && $findReqMore.checked;\n            if( !reqMoreIsChecked ){\n                $findReqFrom.value = '';\n            } else if( fieldOptions.focusOnRelated ) {\n                $findReqFrom.focus();\n            }\n        }\n    }\n\n    // HANDLE FIELD data-require-more & data-required-from WHEN *-from IT'S FILLED\n    if( $field.matches('[data-required-from]') && isValidValue ){\n        const $reqMore = $form.querySelector( $field.getAttribute('data-required-from') );\n        $reqMore.checked = true;\n        $field.required = $reqMore.required;\n    }\n\n    const needsValidation = $field.required || ($field.matches('[data-validate-if-filled]') && isValidValue);\n\n    return runFunctionsSequence({\n            functionsList: fieldOptions.beforeValidation,\n            data: {$field}\n        })\n        .then(data => {\n            const dataObj = data.pop();\n            return new Promise(resolve => {\n                if( !needsValidation ){\n                    dataObj.result = true;\n                }\n                resolve( needsValidation ? isValid($field, validationRules, validationErrors) : dataObj );\n            });\n        });\n\n}\n","\nimport { mergeValidateFieldDefault, mergeObjects, toCamelCase } from './helpers';\n\nexport function isValid( $field, validationRules, validationErrors ){\n\n    const fieldValue = $field.value,\n          obj = mergeValidateFieldDefault({result: fieldValue.trim().length > 0, $field}),\n          isRadioOrCheckbox = /^(radio|checkbox)$/.test($field.type),\n          hasSelectedInput = $field.closest('form').querySelectorAll('[name=\"'+ $field.name +'\"]:checked').length > 0;\n\n    if( (!isRadioOrCheckbox && !obj.result) || (isRadioOrCheckbox && !hasSelectedInput) ){\n        obj.result = false;\n        obj.errors = { empty: true };\n        return Promise.resolve(obj);\n    }\n\n    // COLLECT VALIDATION METHOD NAMES ( USED TO RUN VALIDATIONS AND GET ERRORS )\n    const validationMethods = Array.from($field.attributes).reduce((accList, attr) => {\n        const attrName = toCamelCase( attr.name.replace('data-', '') ),\n              attrValue = toCamelCase( attr.value ),\n              isAttrValueWithFn = (attrName === 'type' || attrName === 'subtype') && validationRules[attrValue],\n              isAttrNameWithFn = validationRules[attrName];\n\n        if( isAttrValueWithFn || isAttrNameWithFn ){\n            accList.push( isAttrValueWithFn ? attrValue : attrName );\n        }\n        return accList;\n    }, []);\n\n    return new Promise(resolve => {\n\n        // RUN VALIDATIONS\n        const validationsResult = validationMethods.reduce((accPromise, methodName) => {\n            return accPromise.then(accObj => {\n                return new Promise(resolveVal => {\n                    // RUN VALIDATION INSIDE A PROMISE IS USEFUL FOR ASYNC VALIDATIONS\n                    resolveVal( validationRules[methodName](fieldValue, $field) );\n                }).then(valObj => {\n                    // ADD CUSTOM ERROR-KEY FOR EACH VALIDATION RULE\n                    if( !valObj.result ){\n                        const errorObj = {};\n                        if( typeof valObj.errors === 'undefined' || typeof valObj.errors[methodName] === 'undefined' ){\n                            errorObj[methodName] = true;\n                        }\n                        valObj.errors = mergeObjects({}, valObj.errors, errorObj);\n                    }\n                    valObj = valObj.result ? {} : valObj;\n                    return mergeObjects(accObj, valObj);\n                });\n            });\n        }, Promise.resolve(obj));\n        resolve(validationsResult);\n\n    }).then(data => {\n\n        // GET ERRORS\n        if( !data.result ){\n            data.errors = validationMethods.reduce((accObj, methodName) => {\n                const errors = (validationErrors[methodName] && validationErrors[methodName](fieldValue, $field)) || {};\n                return mergeObjects(accObj, errors);\n            }, data.errors);\n        }\n        return data;\n\n    });\n\n}\n","\nimport { fieldsStringSelector, getUniqueFields, mergeValidateFieldDefault, mergeValidateFormDefault, mergeObjects } from './helpers';\nimport { checkFieldValidity } from './checkFieldValidity';\n\nexport function checkFormValidity( $form, fieldOptions, validationRules, validationErrors, fieldToSkip = null ){\n\n    fieldOptions = mergeObjects( {}, fieldOptions, {focusOnRelated: false} );\n    const $fieldsList = getUniqueFields( $form.querySelectorAll(fieldsStringSelector) );\n\n    return Promise.all( $fieldsList.map($field => {\n\n        if( fieldToSkip && $field === fieldToSkip ){\n            const obj = mergeValidateFieldDefault({$field, result: true});\n            return Promise.resolve(obj);\n        }\n        return checkFieldValidity( $field, fieldOptions, validationRules, validationErrors );\n\n    }) ).then(fields => {\n\n        const areAllFieldsValid = fields.filter(fieldObj => !fieldObj.result).length === 0;\n        return mergeValidateFormDefault({result: areAllFieldsValid, fields});\n\n    });\n\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const mergeValidateFormDefault = obj => {\n    return mergeObjects({}, { result: true, fields: [] }, obj);\n}\n","\nimport { version }              from './modules/version';\nimport { checkFormEl, customEvents, dispatchCustomEvent, excludeSelector, finalizeFieldPromise, finalizeFormPromise, isNodeList, mergeObjects, removeClass } from './modules/helpers';\nimport { options }              from './modules/options';\nimport { validationRules }      from './modules/validationRules';\nimport { formStartup }          from './modules/formStartup';\nimport { destroy }              from './modules/destroy';\nimport { checkFilledFields }    from './modules/checkFilledFields';\nimport { checkFieldValidity }   from './modules/checkFieldValidity';\nimport { checkFormValidity }    from './modules/checkFormValidity';\n\nclass Form {\n\n    constructor( form, optionsObj ){\n        const argsL = arguments.length,\n              checkFormElem = checkFormEl(form);\n\n        if( argsL === 0 || (argsL > 0 && !form) ){\n            throw new Error('First argument \"form\" is missing or falsy!');\n        }\n        if( isNodeList(form) ){\n            throw new Error('First argument \"form\" must be a single DOM node or a form CSS selector, not a NodeList!');\n        }\n        if( !checkFormElem.result ){\n            throw new Error('First argument \"form\" is not a DOM node nor a form CSS selector!');\n        }\n\n        const self = this;\n\n        self.$form = checkFormElem.$el;\n        self.$form.formjs = self;\n        self.options = mergeObjects({}, Form.prototype.options, optionsObj);\n\n        // BINDING CONTEXT FOR FUTURE EXECUTION\n        const cbList = [\n            // IN fieldOptions\n            'beforeValidation',\n            // IN formOptions\n            'beforeSend',\n            'getFormData'\n        ];\n        cbList.forEach(cbName => {\n            const optionType = self.options.formOptions[cbName] ? 'formOptions' : 'fieldOptions';\n            let cbOpt = self.options[optionType][cbName];\n\n            if( cbOpt ){\n                self.options[optionType][cbName] = ( Array.isArray(cbOpt) ? cbOpt.map(cbFn => cbFn.bind(self)) : cbOpt.bind(self) );\n            }\n        });\n\n        formStartup( self.$form, self.options );\n\n        let initOptions = {};\n        if( self.options.formOptions.onInitCheckFilled ){\n            const focusOnRelated = self.options.fieldOptions.focusOnRelated;\n            self.options.fieldOptions.focusOnRelated = false;\n            initOptions.detail = checkFilledFields(self.$form)\n                            .then(fields => {\n                                self.options.fieldOptions.focusOnRelated = focusOnRelated;\n                                return fields;\n                            });\n        }\n        dispatchCustomEvent( self.$form, customEvents.form.init, initOptions );\n    }\n\n    destroy(){\n        destroy(this.$form, this.options);\n    }\n    \n    getFormData(){\n        const $formFields = this.$form.querySelectorAll('input, select, textarea'),\n              $filteredFields = Array.from( $formFields ).filter( elem => elem.matches(excludeSelector) );\n        return this.options.formOptions.getFormData($filteredFields);\n    }\n\n    validateField( field, fieldOptions ){\n        const self = this;\n        const $field = typeof field === 'string' ? self.$form.querySelector(field) : field;\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions);\n        const $form = self.$form;\n        return checkFieldValidity($field, fieldOptions, self.validationRules, self.validationErrors)\n            .then(obj => {\n                dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } );\n                if( obj.result && fieldOptions.onValidationCheckAll ){\n                    checkFormValidity( $form, fieldOptions, self.validationRules, self.validationErrors, obj.$field )\n                        .then(dataForm => {\n                            dispatchCustomEvent( $form, customEvents.form.validation, { detail: dataForm } );\n                        });\n                } else if( !obj.result ){\n                    removeClass( $form, self.options.formOptions.cssClasses.valid );\n                }\n                return obj;\n            })\n            .then(finalizeFieldPromise);\n    }\n\n    validateForm( fieldOptions ){\n        const self = this;\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions);\n        const $form = self.$form;\n        return checkFormValidity($form, fieldOptions, self.validationRules, self.validationErrors)\n            .then(data => {\n                data.fields.forEach(obj => {\n                    obj.isCheckingForm = true;\n                    dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } );\n                });\n                dispatchCustomEvent( $form, customEvents.form.validation, { detail: data } );\n                return data;\n            })\n            .then(finalizeFormPromise);\n    }\n    \n    static addValidationErrors( errorsObj ){\n        Form.prototype.validationErrors = mergeObjects({}, Form.prototype.validationErrors, errorsObj);\n    }\n\n    static addValidationRules( rulesObj ){\n        Form.prototype.validationRules = mergeObjects({}, Form.prototype.validationRules, rulesObj);\n    }\n    \n    static setOptions( optionsObj ){\n        Form.prototype.options = mergeObjects({}, Form.prototype.options, optionsObj);\n    }\n\n}\n\nForm.prototype.options = options;\nForm.prototype.validationErrors = {};\nForm.prototype.validationRules = validationRules;\nForm.prototype.version = version;\n\nexport default Form;\n","\nimport { isDOMNode } from './isDOMNode';\n\nexport const checkFormEl = form => {\n    let isString = typeof form,\n        isValidNodeSelector = isString === 'string' && isDOMNode(document.querySelector(form)),\n        isFormSelector = isValidNodeSelector && document.querySelector(form).tagName.toLowerCase() === 'form',\n        obj = {\n            result: isDOMNode(form) || isFormSelector,\n            $el: (isString === 'string' ? document.querySelector(form) : form)\n        };\n\n    return obj;\n}\n","\nimport { customEvents } from './helpers';\nimport { dataTypeNumber, formValidationEnd, keypressMaxlength, pastePrevent, submit, validation, validationEnd } from './listenerCallbacks';\n\nexport function formStartup( $form, options ){\n\n    $form.noValidate = true;\n\n    const fieldOptions = options.fieldOptions,\n          formOptions = options.formOptions;\n        \n    // VALIDATION WITH ATTRIBUTES LIKE HTML ONES ( ALSO FOR BUG FIXING, EG: maxlength IN ANDROID )\n    if( fieldOptions.strictHtmlValidation ){\n        \n        // maxlength\n        // MAXLENGTH IS BUGGY IN ANDROID BROWSERS\n        $form.addEventListener('keypress', keypressMaxlength, false);\n\n        // data-type=\"number\"\n        // SINCE VALIDATING type=\"number\" WITH NON NUMERIC CHARS WILL RETURN EMPTY STRING IN SOME BROWSERS ( EG: FIREFOX )\n        $form.addEventListener('input', dataTypeNumber, false);\n        \n    }\n    \n    if( fieldOptions.preventPasteFields && $form.querySelectorAll( fieldOptions.preventPasteFields ).length ){\n        // INIT EVENT LISTENER FOR \"PASTE\" EVENT TO PREVENT IT ON SPECIFIED FIELDS\n        $form.addEventListener('paste', pastePrevent, false);\n    }\n\n    // INIT EVENTS LISTENER ( AS IN fieldOptions )\n    fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n        const useCapture = /^(blur|focus)$/.test(eventName);\n        $form.addEventListener(eventName, validation, useCapture);\n    });\n\n    $form.addEventListener(customEvents.field.validation, validationEnd, false);\n    $form.addEventListener(customEvents.form.validation, formValidationEnd, false);\n    \n    // HANDLE FORM SUBMIT\n    if( formOptions.handleSubmit ){\n        // INIT FORM SUBMIT ( DEFAULT AND AJAX )\n        $form.addEventListener('submit', submit);\n\n        if( formOptions.ajaxSubmit ){\n            if( $form.getAttribute('enctype') ){\n                formOptions.ajaxOptions.headers['Content-Type'] = $form.getAttribute('enctype');\n            }\n\n            if( $form.getAttribute('method') ){\n                formOptions.ajaxOptions.method = $form.getAttribute('method').toUpperCase();\n            }\n\n            if( $form.getAttribute('action') ){\n                formOptions.ajaxOptions.url = $form.getAttribute('action');\n            }\n        }\n    }\n\n}\n","\nimport { customEvents } from './helpers';\nimport { dataTypeNumber, formValidationEnd, keypressMaxlength, pastePrevent, submit, validation, validationEnd } from './listenerCallbacks';\n\n\nexport function destroy( $form, options ){\n\n    if( options.fieldOptions.strictHtmlValidation ){\n        $form.removeEventListener('keypress', keypressMaxlength, false);\n        $form.removeEventListener('input', dataTypeNumber, false);\n    }\n\n    if( options.fieldOptions.preventPasteFields ){\n        $form.removeEventListener('paste', pastePrevent, false);\n    }\n\n    if( options.formOptions.handleSubmit ){\n        $form.removeEventListener('submit', submit);\n    }\n\n    options.fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n        const useCapturing = eventName === 'blur' ? true : false;\n        $form.removeEventListener(eventName, validation, useCapturing);\n    });\n\n    $form.removeEventListener(customEvents.field.validation, validationEnd, false);\n    $form.removeEventListener(customEvents.form.validation, formValidationEnd, false);\n\n    delete $form.formjs;\n    \n}\n","\nexport const excludeSelector = ':not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"file\"]):not([data-exclude-data])'\n"],"names":["addClass","element","cssClasses","split","forEach","className","classList","add","isNodeList","nodeList","NodeList","prototype","isPrototypeOf","removeClass","remove","isDOMNode","node","Element","customEvents","validation","init","submit","isPlainObject","object","Object","toString","call","mergeObjects","out","Array","from","arguments","slice","filter","arg","keys","key","isArray","concat","push","dispatchCustomEvent","elem","eventName","eventOptions","bubbles","eventObj","CustomEvent","dispatchEvent","fieldsStringSelector","finalizeFieldPromise","obj","result","Promise","resolve","reject","errors","finalizeFormPromise","fields","formatMap","YYYY-MM-DD","dateArray","MM-DD-YYYY","DD-MM-YYYY","reverse","getDateAsNumber","dateString","dateFormat","splitChar","string","separator","match","length","getSplitChar","indexOf","replace","join","getUniqueFields","$nodeList","currentFieldName","currentFieldType","$field","name","type","matches","mergeValidateFieldDefault","isFieldForChangeEvent","runFunctionsSequence","functionsList","data","stopConditionFn","reduce","acc","promiseFn","then","res","dataNew","dataList","serializeObject","constructor","a","k","encodeURIComponent","toCamelCase","all","letter","toUpperCase","defaultCallbacksInOptions","fieldOptions","beforeValidation","fieldObj","this","options","$fields","$container","closest","questionContainer","value","dirty","checkDirtyField","skipUIfeedback","pending","formOptions","getFormData","$filteredFields","formData","$form","isCheckbox","isRadio","isSelect","checked","$checkboxes","querySelectorAll","field","$checkedRadio","querySelector","$selectedOpts","option","selected","error","errorEmpty","errorRule","valid","focusOnRelated","onValidationCheckAll","preventPasteFields","strictHtmlValidation","validateOnEvents","ajaxOptions","cache","credentials","headers","Content-Type","Accept","method","mode","redirect","timeout","url","location","href","ajaxSubmit","beforeSend","ajaxComplete","ajaxError","ajaxPending","ajaxSuccess","handleFileUpload","handleSubmit","onInitCheckFilled","validationRules","date","test","email","number","checkbox","$dataChecks","attrValue","JSON","parse","getAttribute","checkedLength","isMinOk","isMaxOk","checks","minChecks","maxChecks","equalTo","exactLength","valueLength","minlength","maxlength","file","maxFileSize","MIMEtype","accept","RegExp","filesList","files","exceedMaxFileSize","size","isAcceptedFileType","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","max","maxVal","maxLength","min","minVal","minLength","pattern","radio","$fieldChecked","trim","dataTypeNumber","event","target","fieldValue","stopImmediatePropagation","valueReplaced","formValidationEnd","formEl","formjs","clMethodName","detail","keypressMaxlength","keyPressed","which","keyCode","allowedKeys","pastePrevent","preventDefault","ajaxCall","formDataObj","timeoutTimer","isMultipart","body","formDataMultipart","FormData","append","idx","stringify","Headers","controller","AbortController","signal","window","setTimeout","abort","fetch","response","ok","Error","statusText","fetchMethod","get","contentType","headerOpt","getFetchMethod","catch","message","finally","clearTimeout","disabled","instance","formCssClasses","isAjaxForm","$btn","eventPreventDefault","enableBtn","validateForm","beforeSendData","stopExecution","rfsObject","pop","isChangeEvent","self","isFieldForChangeEventBoolean","validateField","$realtedEqualTo","required","validationEnd","eventDetail","isReqFrom","$reqMore","document","errorClasses","extraErrorClass","isChecks","checkedElLength","empty","errorClassToRemove","checkFilledFields","formFields","map","isCheckboxOrRadio","fieldChecked","getFilledFields","checkFieldValidity","validationErrors","isValidValue","$checked","reqMoreIsChecked","$findReqMore","$findReqFrom","id","focus","needsValidation","dataObj","isRadioOrCheckbox","hasSelectedInput","validationMethods","attributes","accList","attr","attrName","isAttrValueWithFn","isAttrNameWithFn","accPromise","methodName","accObj","resolveVal","valObj","errorObj","isValid","checkFormValidity","fieldToSkip","$fieldsList","areAllFieldsValid","Form","[object Object]","form","optionsObj","argsL","checkFormElem","isString","isFormSelector","tagName","toLowerCase","$el","checkFormEl","cbName","optionType","cbOpt","cbFn","bind","noValidate","addEventListener","useCapture","formStartup","initOptions","removeEventListener","useCapturing","destroy","$formFields","dataForm","isCheckingForm","errorsObj","rulesObj","version"],"mappings":"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"}