{"version":3,"file":"formjs-esm.min.js","sources":["../src/modules/version.js","../src/modules/helpers/addClass.js","../src/modules/helpers/isNodeList.js","../src/modules/helpers/removeClass.js","../src/modules/helpers/isDOMNode.js","../src/modules/helpers/customEvents.js","../src/modules/helpers/isPlainObject.js","../src/modules/helpers/mergeObjects.js","../src/modules/helpers/dispatchCustomEvent.js","../src/modules/helpers/fieldsStringSelector.js","../src/modules/helpers/finalizeFieldPromise.js","../src/modules/helpers/finalizeFormPromise.js","../src/modules/helpers/getDateAsNumber.js","../src/modules/helpers/getSplitChar.js","../src/modules/helpers/getUniqueFields.js","../src/modules/helpers/mergeValidateFieldDefault.js","../src/modules/helpers/isFieldForChangeEvent.js","../src/modules/helpers/runFunctionsSequence.js","../src/modules/helpers/serializeObject.js","../src/modules/helpers/toCamelCase.js","../src/modules/optionsUtils.js","../src/modules/helpers/checkDirtyField.js","../src/modules/options.js","../src/modules/validationRules.js","../src/modules/validationRules/date.js","../src/modules/validationRules/email.js","../src/modules/validationRules/number.js","../src/modules/validationRules/checkbox.js","../src/modules/validationRules/checks.js","../src/modules/validationRules/equalTo.js","../src/modules/validationRules/exactLength.js","../src/modules/validationRules/file.js","../src/modules/validationRules/length.js","../src/modules/validationRules/max.js","../src/modules/validationRules/maxlength.js","../src/modules/validationRules/min.js","../src/modules/validationRules/minlength.js","../src/modules/validationRules/pattern.js","../src/modules/validationRules/radio.js","../src/modules/listenerCallbacks/dataTypeNumber.js","../src/modules/listenerCallbacks/keypressMaxlength.js","../src/modules/listenerCallbacks/pastePrevent.js","../src/modules/ajaxCall.js","../src/modules/listenerCallbacks/submit.js","../src/modules/listenerCallbacks/validation.js","../src/modules/listenerCallbacks/validationEnd.js","../src/modules/checkFilledFields.js","../src/modules/helpers/getFilledFields.js","../src/modules/checkFieldValidity.js","../src/modules/isValid.js","../src/modules/checkFormValidity.js","../src/modules/helpers/mergeValidateFormDefault.js","../src/index.js","../src/modules/helpers/checkFormEl.js","../src/modules/formStartup.js","../src/modules/destroy.js","../src/modules/helpers/excludeSelector.js"],"sourcesContent":["\nexport const version = '5.0.0';\n","\nexport const addClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.add( className );\n    });\n}\n","\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList );\n}\n","\nexport const removeClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.remove( className );\n    });\n}\n","\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node );\n}\n","\nexport const customEvents = {\n    field: {\n        validation: 'fjs.field:validation'\n    },\n    form: {\n        submit:     'fjs.form:submit',\n        validation: 'fjs.form:validation'\n    }\n}\n","\nexport const isPlainObject = object => {\n    return Object.prototype.toString.call( object ) === '[object Object]';\n}\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const mergeObjects = function( out = {} ){\n    Array.from(arguments).slice(1).filter(arg => !!arg).forEach(arg => {\n        Object.keys(arg).forEach(key => {\n            if( Array.isArray(arg[key]) ){\n                out[key] = (out[key] || []).concat( arg[key].slice(0) );\n            } else if( isPlainObject(arg[key]) ){\n                out[key] = mergeObjects((out[key] || {}), arg[key]);\n            } else {\n                // * STRING | NUMBER | BOOLEAN | FUNCTION\n                if( Array.isArray(out[key]) ){\n                    // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                    out[key].push(arg[key]);\n                } else {\n                    out[key] = arg[key];\n                }\n            }\n        });\n    });\n\n    return out;\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const dispatchCustomEvent = ( elem, eventName, eventOptions ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions);\n    const eventObj = new CustomEvent(eventName, eventOptions);\n    elem.dispatchEvent( eventObj );\n}\n","\nexport const fieldsStringSelector = 'input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"hidden\"]), select, textarea'\n","\nexport const finalizeFieldPromise = obj => {\n    if( obj.result ){\n        return Promise.resolve();\n    }\n    return Promise.reject(obj.errors);\n}\n","\nexport const finalizeFormPromise = obj => {\n    if( obj.result ){\n        return Promise.resolve(obj.fields);\n    }\n    return Promise.reject(obj.fields);\n}\n","\nimport { getSplitChar } from './getSplitChar';\n\nconst formatMap = {\n    'YYYY-MM-DD': function(dateArray){\n        return dateArray;\n    },\n    'MM-DD-YYYY': function(dateArray){\n        return [dateArray[2], dateArray[0], dateArray[1]];\n    },\n    'DD-MM-YYYY': function(dateArray){\n        return dateArray.reverse();\n    }\n};\n\nexport const getDateAsNumber = ( dateString, dateFormat ) => {\n    dateFormat = dateFormat || 'YYYY-MM-DD';\n    const splitChar = getSplitChar(dateString);\n\n    if( dateFormat.indexOf(splitChar) < 0 ){\n        return;\n    }\n\n    dateFormat = dateFormat.replace(/[^YMD]/g, '-');\n    dateString = dateString.split(splitChar);\n    dateString = formatMap[dateFormat](dateString).join('');\n    \n    return dateString;\n}\n","\nexport const getSplitChar = string => {\n    // MATCH ANY NON-DIGIT CHAR\n    const separator = string.match(/\\D/);\n    return (separator && separator.length > 0) ? separator[0] : null;\n}\n","\nexport const getUniqueFields = $nodeList => {\n\n    let currentFieldName = '',\n        currentFieldType = '';\n\n    return Array.from( $nodeList ).filter($field => {\n        const name = $field.name,\n              type = $field.type;\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false;\n        }\n        \n        if( !$field.matches('[data-required-from]') ){\n            currentFieldName = name;\n            currentFieldType = type;\n        }\n        return true;\n    });\n    \n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const mergeValidateFieldDefault = obj => {\n    return mergeObjects({}, { result: false, $field: null }, obj);\n}\n","\nexport const isFieldForChangeEvent = $field => {\n    return $field.matches('select, [type=\"radio\"], [type=\"checkbox\"], [type=\"file\"]');\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const runFunctionsSequence = ( { functionsList = [], data = {}, stopConditionFn = () => false } = {} ) => {\n    return functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1]);\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res);\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result);\n                    return res;\n                });\n        });\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList);\n}\n","\nexport const serializeObject = obj => {\n    var objToString = (\n            (obj && typeof obj === 'object' && obj.constructor === Object) ? \n            Object.keys(obj)\n                .reduce((a,k) => {\n                    a.push(k+'='+encodeURIComponent(obj[k]));\n                    return a\n                },[]).join('&') : \n            obj\n    );\n    return objToString;\n}\n","\nexport const toCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase(); });\n}\n","\nimport { addClass, checkDirtyField } from './helpers';\n\nexport const defaultCallbacksInOptions = {\n    fieldOptions: {\n\n        beforeValidation: function beforeValidationDefault ( fieldObj ) {\n\n            const fieldOptions = this.options.fieldOptions;\n\n            checkDirtyField( fieldObj.$field, fieldOptions );\n            if( !fieldOptions.skipUIfeedback ){\n                addClass( fieldObj.$field.closest( fieldOptions.questionContainer ), fieldOptions.cssClasses.pending );\n            }\n\n        }\n\n    },\n    formOptions: {\n\n        getFormData: function getFormDataDefault ( $filteredFields ) {\n\n            const formData = {},\n                  $form = this.$form;\n\n            $filteredFields.forEach($field => {\n                const isCheckbox = $field.type === 'checkbox',\n                      isRadio = $field.type === 'radio',\n                      isSelect = $field.matches('select'),\n                      name = $field.name;\n                let value = $field.value;\n                                \n                if( isCheckbox ) {\n                    \n                    value = $field.checked;\n                    let $checkboxes = Array.from( $form.querySelectorAll('[name=\"'+ name +'\"]') );\n                    if( $checkboxes.length > 1 ){\n\n                        value = [];\n                        let $checked = $checkboxes.filter(field => field.checked);\n                        $checked.forEach($field => {\n                            value.push( $field.value );\n                        });\n\n                    }\n                        \n                } else if( isRadio ){\n                    \n                    const $checkedRadio = $form.querySelector('[name=\"'+ name +'\"]:checked');\n                    value = ($checkedRadio === null ? null : $checkedRadio.value);\n                    \n                } else if( isSelect ){\n\n                    const $selectedOpts = Array.from( $field.options ).filter(option => option.selected);\n                    if( $selectedOpts.length > 1 ){\n\n                        value = [];\n                        $selectedOpts.forEach($field => {\n                            value.push( $field.value );\n                        });\n\n                    }\n                }\n\n                formData[ name ] = value;\n            });\n\n            return formData;\n\n        }\n\n    }\n}\n","\nimport { addClass } from './addClass';\nimport { isNodeList } from './isNodeList';\nimport { removeClass } from './removeClass';\n\nexport const checkDirtyField = ( $fields, fieldOptions ) => {\n\n    $fields = isNodeList($fields) ? Array.from( $fields ) : [$fields];\n    $fields.forEach($field => {\n        if( $field.type !== 'checkbox' && $field.type !== 'radio' ){\n            const $container = $field.closest( fieldOptions.questionContainer ) || $field;\n            if( $field.value ){\n                addClass( $container, fieldOptions.cssClasses.dirty );\n            } else {\n                removeClass( $container, fieldOptions.cssClasses.dirty );\n            }\n        }\n    });\n    \n}\n","\nimport { defaultCallbacksInOptions } from './optionsUtils';\n\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [defaultCallbacksInOptions.fieldOptions.beforeValidation],\n        cssClasses: {\n            dirty:              'is-dirty',\n            error:              'has-error',\n            errorEmpty:         'has-error-empty',\n            errorRule:          'has-error-rule',\n            pending:            'is-pending',\n            valid:              'is-valid'\n        },\n        focusOnRelated:         true,\n        handleFileUpload:       true,\n        onValidationCheckAll:   false,\n        preventPasteFields:     '[type=\"password\"], [data-equal-to]',\n        questionContainer:      '[data-formjs-question]',\n        skipUIfeedback:         false,\n        strictHtmlValidation:   true,\n        validateOnEvents:       'input change'\n    },\n\n    formOptions: {\n        ajaxOptions:            {\n            cache:              'no-store',\n            credentials:        'same-origin',\n            headers: {\n                                'Content-Type': 'application/json',\n                                'Accept':       'application/json'\n            },\n            method:             'POST',\n            mode:               'same-origin',\n            redirect:           'follow',\n            timeout:            0,\n            url:                location.href\n        },\n        ajaxSubmit:             true,\n        beforeSend:             [],\n        cssClasses: {\n            ajaxComplete:       'ajax-complete',\n            ajaxError:          'ajax-error',\n            ajaxPending:        'ajax-pending',\n            ajaxSuccess:        'ajax-success',\n            submit:             'is-submitting',\n            valid:              'is-valid'\n        },\n        getFormData:            defaultCallbacksInOptions.formOptions.getFormData,\n        handleSubmit:           true\n    }\n    \n}\n","\nimport { date }         from './validationRules/date';\nimport { email }        from './validationRules/email';\nimport { number }       from './validationRules/number';\n\nimport { checkbox }     from './validationRules/checkbox';\nimport { equalTo }      from './validationRules/equalTo';\nimport { exactLength }  from './validationRules/exactLength';\nimport { file }         from './validationRules/file';\nimport { length }       from './validationRules/length';\nimport { max }          from './validationRules/max';\nimport { maxlength }    from './validationRules/maxlength';\nimport { min }          from './validationRules/min';\nimport { minlength }    from './validationRules/minlength';\nimport { pattern }      from './validationRules/pattern';\nimport { radio }        from './validationRules/radio';\n\nexport const validationRules = {\n    date,\n    email,\n    number,\n\n    checkbox,\n    equalTo,\n    exactLength,\n    file,\n    length,\n    max,\n    maxlength,\n    min,\n    minlength,\n    pattern,\n    radio\n}\n","\n/*\n    DATE AS ISO 8601 DATE FORMAT:\n    YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n*/\n\nexport const date = function( string ){\n    return {\n        result: /^((((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13578]|1[02])[ \\/\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13456789]|1[012])[ \\/\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.]02[ \\/\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ \\/\\-.]02[ \\/\\-.]29))$/g.test( string )\n    };\n}\n","\n// https://regex101.com/r/cdlyJy/3\n\nexport const email = function( string ){\n    return {\n        result: /^[a-zA-Z_-]([\\w.-]?[a-zA-Z0-9])*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?){2,})+$/.test( string )\n    };\n}\n","\n/*\n    ALL NUMBERS ( INTEGERS AND FLOATING )\n    VALID NUMBERS: 123 | 123.456 | .123\n*/\n\nexport const number = function( string ){\n    return {\n        result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n    };\n}","\nimport { checks } from './checks';\n\nexport const checkbox = function( value, $field ){\n    const $dataChecks = $field.closest('form').querySelector('[name=\"' + $field.name + '\"][data-checks]');\n    return $dataChecks ? checks($dataChecks) : { result: $field.checked };\n}\n","\nexport const checks = function( $field ){\n    const attrValue = JSON.parse( $field.getAttribute('data-checks') ),\n          checkedLength = $field.closest('form').querySelectorAll('[name=\"' + $field.name + '\"]:checked').length,\n          isMinOk = checkedLength >= attrValue[0],\n          isMaxOk = checkedLength <= attrValue[1],\n          obj = { result: isMinOk && isMaxOk };\n\n    if( !obj.result ){\n        obj.errors = { checks: true };\n        if( !isMinOk ){ obj.errors.minChecks = true; }\n        if( !isMaxOk ){ obj.errors.maxChecks = true; }\n    }\n\n    return obj;\n}\n","\nexport const equalTo = function( value, $field ){\n    const $checkFrom = $field.closest('form').querySelector( '[name=\"' + $field.getAttribute('data-equal-to') + '\"]' );\n    return { result: value === $checkFrom.value };\n}\n","\nexport const exactLength = function( value, $field ){\n    const valueLength = value.length,\n          exactLength = $field.getAttribute('data-exact-length') * 1,\n          obj = { result: valueLength === exactLength };\n\n    if( !obj.result ){\n        obj.errors = {};\n        if( valueLength < exactLength ){ obj.errors.minlength = true; }\n        else { obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nexport const file = function( value, $field ){\n    const maxFileSize = ($field.getAttribute('data-max-file-size') || 0) * 1,\n          MIMEtype = $field.accept ? new RegExp($field.accept.replace( '*', '[^\\\\/,]+' )) : null,\n          filesList = Array.from($field.files),\n          obj = { result: true };\n\n    filesList.forEach(file => {\n        const exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize,\n              isAcceptedFileType = MIMEtype !== null ? MIMEtype.test(file.type) : true;\n\n        if( exceedMaxFileSize || !isAcceptedFileType ){\n            obj.result = false;\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {};\n            }\n            if( exceedMaxFileSize ){ obj.errors.maxFileSize = true; }\n            if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true; }\n\n        }\n    });\n\n    return obj;\n}\n","\nexport const length = function( value, $field ){\n    const valueL = value.length,\n          attrValue = JSON.parse( $field.getAttribute('data-length') ),\n          isMinlengthOk = valueL >= attrValue[0],\n          isMaxlengthOk = valueL <= attrValue[1],\n          obj = { result: isMinlengthOk && isMaxlengthOk };\n\n    if( !obj.result ){\n        obj.errors = {};\n        if( !isMinlengthOk ){ obj.errors.minlength = true; }\n        if( !isMaxlengthOk ){ obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const max = function( value, $field ){\n    let maxVal = $field.max;\n    const dateFormat = $field.getAttribute('data-date-format');\n    \n    if( $field.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat );\n        maxVal = maxVal.split('-').join('');\n    }\n\n    value = value * 1;\n    maxVal = maxVal * 1;\n    \n    return { result: value <= maxVal };\n}\n","\nexport const maxlength = function( value, $field ){\n    return { result: value.length <= $field.maxLength * 1 };\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const min = function( value, $field ){\n    let minVal = $field.min;\n    const dateFormat = $field.getAttribute('data-date-format');\n    \n    if( $field.type === 'date' || $field.getAttribute('data-date-format') ){\n        value = getDateAsNumber( value, dateFormat );\n        minVal = minVal.split('-').join('');\n    }\n\n    value = value * 1;\n    minVal = minVal * 1;\n    \n    return { result: value >= minVal };\n}\n","\nexport const minlength = function( value, $field ){\n    return { result: value.length >= $field.minLength * 1 };\n}\n","\nexport const pattern = function( value, $field ){\n    return { result: new RegExp($field.pattern).test(value) };\n}\n","\nexport const radio = function( value, $field ){\n    const $fieldChecked = $field.closest('form').querySelector( '[name=\"'+ $field.name +'\"]:checked' ),\n          isValid = $fieldChecked !== null && $fieldChecked.value.trim().length > 0;\n\n    return { result: isValid };\n}\n","\nexport const dataTypeNumber = function( event ){\n\n    const $field = event.target;\n    \n    if( $field.matches('[data-type=\"number\"]') ){\n        let fieldValue = $field.value;\n        const hasInvalidChars = /[^\\d.,+\\-]/.test(fieldValue);\n        \n        if( hasInvalidChars ){\n            event.stopImmediatePropagation();\n            let valueReplaced = fieldValue.replace(/[^\\d.,+\\-]/g, '');\n            $field.value = valueReplaced;\n        }\n    }\n\n}\n","\nexport const keypressMaxlength = function( event ){\n\n    const $field = event.target;\n    \n    if( $field.matches( '[maxlength]' ) ){\n        const maxLength = $field.maxLength * 1,\n              keyPressed = event.which || event.keyCode,\n              allowedKeys = [8, 37, 38, 39, 46];\n\n        if( $field.value.length >= maxLength && allowedKeys.indexOf(keyPressed) === -1 ){\n            return false;\n        }\n    }\n\n}\n","\nexport const pastePrevent = function( event ){\n\n    const $field = event.target;\n    const fieldOptions = $field.closest('form').formjs.options.fieldOptions;\n\n    if( $field.matches( fieldOptions.preventPasteFields ) ){     \n        event.preventDefault();\n    }\n\n}\n","\nimport { addClass, mergeObjects, removeClass, serializeObject } from './helpers';\n\nconst getFetchMethod = (response, options) => {\n    const accept = options.headers.get('Accept'),\n          contentType = response.headers.get('Content-Type'),\n          headerOpt = accept || contentType || '';\n\n    if( headerOpt.indexOf('application/json') > -1 || headerOpt === '' ){\n        return 'json';\n    } else if( headerOpt.indexOf('text/') > -1 ){\n        return 'text';\n    } else {\n        return 'blob';\n    }\n};\n\nexport function ajaxCall( $form, formDataObj, options ){\n\n    let timeoutTimer;\n    const ajaxOptions = mergeObjects( {}, options.formOptions.ajaxOptions ),\n          isMultipart = ajaxOptions.headers['Content-Type'] === 'multipart/form-data';\n\n    ajaxOptions.body = formDataObj;\n    \n    // POST A FormData OBJECT ( multipart )\n    if( isMultipart && options.fieldOptions.handleFileUpload ){\n        let formDataMultipart = new FormData();\n        \n        for(let key in ajaxOptions.body){\n            formDataMultipart.append( key, ajaxOptions.body[key] );\n        }\n        \n        Array.from( $form.querySelectorAll('[type=\"file\"]') ).forEach($field => {\n            Array.from($field.files).forEach((file, idx) => {\n                const name = $field.name+'['+ idx +']';\n                formDataMultipart.append( name, file, file.name );\n            });\n        });\n        \n        ajaxOptions.body = formDataMultipart;\n    }\n\n    if( ajaxOptions.method === 'GET' ){\n\n        // FETCH WITH \"GET\" METHOD CAN'T HAVE \"body\". SO IT IS APPENDED TO THE URL\n        ajaxOptions.url += ( /\\?/.test(ajaxOptions.url) ? '&' : '?' ) + serializeObject( ajaxOptions.body );\n        delete ajaxOptions.body;\n\n    } else {\n\n        if( ajaxOptions.headers['Content-Type'].indexOf('application/x-www-form-urlencoded') > -1 ){\n            // POST A NORMAL FORM\n            ajaxOptions.body = serializeObject( ajaxOptions.body );\n        } else if( !isMultipart ){\n            // POST A JSON STRING\n            ajaxOptions.body = JSON.stringify(ajaxOptions.body);\n        }\n\n    }\n\n    ajaxOptions.headers = new Headers( ajaxOptions.headers );\n\n    if ( ajaxOptions.timeout > 0 ) {\n        const controller = new AbortController(),\n              signal = controller.signal;\n\n        ajaxOptions.signal = signal;\n        timeoutTimer = window.setTimeout(() => {\n            controller.abort();\n        }, ajaxOptions.timeout);\n    }\n\n    return fetch(ajaxOptions.url, ajaxOptions)\n        .then(response => {\n            if( !response.ok ){\n                return Promise.reject(response);\n            }\n            const fetchMethod = getFetchMethod(response, ajaxOptions);\n            return response[fetchMethod]();\n        })\n        .then(data => {\n            addClass( $form, options.formOptions.cssClasses.ajaxSuccess );\n            return data;\n        })\n        .catch(error => {\n            addClass( $form, options.formOptions.cssClasses.ajaxError );\n            return Promise.reject(error);\n        })\n        .finally(() => {\n            if( timeoutTimer ){\n                window.clearTimeout( timeoutTimer );\n            }\n            removeClass( $form, options.formOptions.cssClasses.submit + ' ' + options.formOptions.cssClasses.ajaxPending );\n            addClass( $form, options.formOptions.cssClasses.ajaxComplete );\n            $form.querySelector('[type=\"submit\"]').disabled = false;\n        });\n\n}\n","\nimport { addClass, customEvents, dispatchCustomEvent, removeClass, runFunctionsSequence } from '../helpers';\nimport { ajaxCall } from '../ajaxCall';\n\nexport function submit( event ){\n\n    const $form = event.target,\n          instance = $form.formjs,\n          options = instance.options,\n          formCssClasses = options.formOptions.cssClasses,\n          isAjaxForm = options.formOptions.ajaxSubmit,\n          $btn = $form.querySelector('[type=\"submit\"]'),\n          eventPreventDefault = ( enableBtn = true ) => {\n              if( $btn && enableBtn ){ $btn.disabled = false; }\n              if( event ){ event.preventDefault(); }\n          };\n\n    if( isAjaxForm ){\n        eventPreventDefault(false);\n    }\n\n    if( $btn ){\n        if( $btn.disabled ){\n            eventPreventDefault(false);\n            return false;\n        }\n        $btn.disabled = true;\n    }\n\n    removeClass( $form, (formCssClasses.ajaxComplete + ' ' + formCssClasses.ajaxError + ' ' + formCssClasses.ajaxSuccess) );\n    addClass( $form, formCssClasses.submit );\n\n    instance.validateForm()\n        .then(fields => {\n\n            const beforeSendData = {\n                stopExecution: false,\n                formData: isAjaxForm ? instance.getFormData() : null\n            };\n\n            const rfsObject = {\n                  functionsList: options.formOptions.beforeSend,\n                  data: beforeSendData,\n                  stopConditionFn: function(data){ return data.stopExecution; }\n            };\n            return runFunctionsSequence(rfsObject);\n\n        }).then(dataList => {\n\n            if( dataList.filter(data => data.stopExecution).length > 0 ){\n                eventPreventDefault();\n                return false;\n            }\n            \n            if( isAjaxForm ){\n                const formData = dataList.pop().formData;\n                addClass( $form, formCssClasses.ajaxPending );\n                dispatchCustomEvent( $form, customEvents.form.submit, { detail: ajaxCall( $form, formData, options ) } );\n            }\n\n        })\n        .catch(fields => {\n            eventPreventDefault();\n            removeClass( $form, formCssClasses.submit );\n        });\n    \n}\n","\nimport { fieldsStringSelector, mergeValidateFieldDefault, isFieldForChangeEvent } from '../helpers';\n\nexport const validation = function( event ){\n\n    const isChangeEvent = event.type === 'change',\n          $field = event.target,\n          self = $field.closest('form').formjs;\n\n    if( $field.matches( fieldsStringSelector ) ){\n        const isFieldForChangeEventBoolean = isFieldForChangeEvent($field);\n        \n        if(\n            (isFieldForChangeEventBoolean && isChangeEvent) ||\n            (!isFieldForChangeEventBoolean && !isChangeEvent)\n        ){\n            \n            return self.validateField( $field )\n                .then(() => {\n                    const type = $field.type,\n                          $realtedEqualTo = $field.closest('form').querySelector('[data-equal-to=\"'+ $field.name +'\"]');\n\n                    if(\n                        // FIELD IS ( required OR data-validate-if-filled ) AND RELATED FIELD data-equal-to HAS A VALUE\n                        ($field.required || $field.matches('[data-validate-if-filled]')) && \n                        !(type === 'checkbox' || type === 'radio') && \n                        $realtedEqualTo && $realtedEqualTo.value.trim() !== ''\n                    ){\n                        self.validateField( $realtedEqualTo ).catch(errors => {});\n                    }\n\n                    return mergeValidateFieldDefault({ result: true, $field });\n                })\n                .catch(errors => mergeValidateFieldDefault({$field, errors}));\n\n        }\n    }\n    \n}\n","\nimport { addClass, fieldsStringSelector, removeClass } from '../helpers';\n\nexport const validationEnd = function( event ){\n\n    const $fieldsArray = event.detail.$field ? [event.detail] : event.detail.fields,\n          options = $fieldsArray[0].$field.closest('form').formjs.options.fieldOptions;\n\n    $fieldsArray.forEach(obj => {\n        const $field = obj.$field;\n        if( $field.matches( fieldsStringSelector ) ){\n            const $container = $field.closest( options.questionContainer ),\n                  isReqFrom = $field.matches('[data-required-from]'),\n                  $reqMore = document.querySelector( $field.getAttribute('data-required-from') );\n\n            if( $container !== null ){\n                removeClass( $container, options.cssClasses.pending );\n            }\n\n            if( $container !== null && !options.skipUIfeedback ){\n\n                if( obj.result ){\n\n                    if( !isReqFrom || (isReqFrom && $reqMore.checked) ){\n                        // IF FIELD IS VALID\n                        const errorClasses = options.cssClasses.error + ' ' + options.cssClasses.errorEmpty + ' ' + options.cssClasses.errorRule;\n                        removeClass( $container, errorClasses );\n                        addClass( $container, options.cssClasses.valid );\n                    }\n\n                } else {\n\n                    // IF FIELD IS NOT VALID\n                    let extraErrorClass = options.cssClasses.errorRule;\n\n                    // HANDLE CASE OF FIELD data-checks\n                    const isChecks = $field.matches('[data-checks]'),\n                          checkedLength = (isChecks ? $container.querySelectorAll('[name=\"' + $field.name + '\"]:checked').length : 0);\n\n                    if( (!isChecks && (obj.errors && obj.errors.empty)) || (isChecks && checkedLength === 0) ){\n                        extraErrorClass = options.cssClasses.errorEmpty;\n                    }\n\n                    const errorClasses = options.cssClasses.error + ' ' + extraErrorClass,\n                          errorClassToRemove = options.cssClasses.errorEmpty + ' ' + options.cssClasses.errorRule;\n                    removeClass( $container, options.cssClasses.valid + ' ' + errorClassToRemove );\n                    addClass( $container, errorClasses );\n\n                }\n            }\n        }\n    });\n\n}\n","\nimport { getFilledFields, isFieldForChangeEvent } from './helpers';\nimport { validation } from './listenerCallbacks';\n\nexport const checkFilledFields = $form => {\n\n    const formFields = getFilledFields( $form );\n    // VALIDATE ALL FILLED FIELDS\n    return Promise.all( formFields.map($field => {\n\n        const isFieldForChangeEventBoolean = isFieldForChangeEvent($field);\n        const fakeEventObj = { target: $field, type: (isFieldForChangeEventBoolean ? 'change': '') };\n        return validation( fakeEventObj );\n\n    }) )\n    .then(fields => fields)\n    .catch(fields => fields);\n\n}\n","\nimport { fieldsStringSelector } from './fieldsStringSelector';\nimport { getUniqueFields } from './getUniqueFields';\n\nexport const getFilledFields = $form => {\n    return getUniqueFields( $form.querySelectorAll(fieldsStringSelector) )\n    .map($field => {\n\n        const name = $field.name,\n              type = $field.type,\n              isCheckboxOrRadio = type === 'checkbox' || type === 'radio',\n              fieldChecked = $form.querySelector('[name=\"' + name + '\"]:checked'),\n              isReqFrom = $field.matches('[data-required-from]'),\n              $reqMore = (isReqFrom ? $form.querySelector($field.getAttribute('data-required-from')) : null);\n\n        return (\n            isCheckboxOrRadio ? (fieldChecked || null) :\n            (isReqFrom && $reqMore.checked) || (!isReqFrom && $field.value) ? $field : null\n        );\n\n    })\n    .filter($field => $field !== null);\n}\n","\nimport { mergeValidateFieldDefault, isDOMNode, runFunctionsSequence } from './helpers';\nimport { isValid } from './isValid';\n\nexport function checkFieldValidity( $field, fieldOptions, validationRules, validationErrors ){\n\n    if( !isDOMNode($field) ){\n        const obj = mergeValidateFieldDefault({$field});\n        return Promise.resolve(obj);\n    }\n\n    const $form = $field.closest('form'),\n          isValidValue = $field.value.trim().length > 0;\n\n    // HANDLE FIELD data-required-from WHEN CHANGING ITS RELATED RADIO\n    if( $field.type === 'radio' ){\n        const $checked = $field.checked ? $field : $form.querySelector('[name=\"'+ $field.name +'\"]:checked'),\n              reqMoreIsChecked = $checked && $checked.matches('[data-require-more]'),\n              $findReqMore = reqMoreIsChecked ? $checked : $form.querySelector('[data-require-more][name=\"'+ $field.name +'\"]'),\n              $findReqFrom = $findReqMore ? $form.querySelector('[data-required-from=\"#'+ $findReqMore.id +'\"]') : null;\n        \n        if( $checked && $findReqFrom ){\n            $findReqFrom.required = $findReqMore.required && $findReqMore.checked;\n            if( !reqMoreIsChecked ){\n                $findReqFrom.value = '';\n            } else if( fieldOptions.focusOnRelated ) {\n                $findReqFrom.focus();\n            }\n        }\n    }\n\n    // HANDLE FIELD data-require-more & data-required-from WHEN *-from IT'S FILLED\n    if( $field.matches('[data-required-from]') && isValidValue ){\n        const $reqMore = $form.querySelector( $field.getAttribute('data-required-from') );\n        $reqMore.checked = true;\n        $field.required = $reqMore.required;\n    }\n\n    const needsValidation = $field.required || ($field.matches('[data-validate-if-filled]') && isValidValue);\n\n    return runFunctionsSequence({\n            functionsList: fieldOptions.beforeValidation,\n            data: {$field}\n        })\n        .then(data => {\n            const dataObj = data.pop();\n            return new Promise(resolve => {\n                if( !needsValidation ){\n                    dataObj.result = true;\n                }\n                resolve( needsValidation ? isValid($field, validationRules, validationErrors) : dataObj );\n            });\n        });\n\n}\n","\nimport { mergeValidateFieldDefault, mergeObjects, toCamelCase } from './helpers';\n\nexport function isValid( $field, validationRules, validationErrors ){\n\n    const fieldValue = $field.value,\n          obj = mergeValidateFieldDefault({result: fieldValue.trim().length > 0, $field}),\n          isRadioOrCheckbox = /^(radio|checkbox)$/.test($field.type),\n          hasSelectedInput = $field.closest('form').querySelectorAll('[name=\"'+ $field.name +'\"]:checked').length > 0;\n\n    if( (!isRadioOrCheckbox && !obj.result) || (isRadioOrCheckbox && !hasSelectedInput) ){\n        obj.result = false;\n        obj.errors = { empty: true };\n        return Promise.resolve(obj);\n    }\n\n    // COLLECT VALIDATION METHOD NAMES ( USED TO RUN VALIDATIONS AND GET ERRORS )\n    const validationMethods = Array.from($field.attributes).reduce((accList, attr) => {\n        const attrName = toCamelCase( attr.name.replace('data-', '') ),\n              attrValue = toCamelCase( attr.value ),\n              isAttrValueWithFn = (attrName === 'type' || attrName === 'subtype') && validationRules[attrValue],\n              isAttrNameWithFn = validationRules[attrName];\n\n        if( isAttrValueWithFn || isAttrNameWithFn ){\n            accList.push( isAttrValueWithFn ? attrValue : attrName );\n        }\n        return accList;\n    }, []);\n\n    return new Promise(resolve => {\n\n        // RUN VALIDATIONS\n        const validationsResult = validationMethods.reduce((accPromise, methodName) => {\n            return accPromise.then(accObj => {\n                return new Promise(resolveVal => {\n                    // RUN VALIDATION INSIDE A PROMISE IS USEFUL FOR ASYNC VALIDATIONS\n                    resolveVal( validationRules[methodName](fieldValue, $field) );\n                }).then(valObj => {\n                    // ADD CUSTOM ERROR-KEY FOR EACH VALIDATION RULE\n                    if( !valObj.result ){\n                        const errorObj = {};\n                        if( typeof valObj.errors === 'undefined' || typeof valObj.errors[methodName] === 'undefined' ){\n                            errorObj[methodName] = true;\n                        }\n                        valObj.errors = mergeObjects({}, valObj.errors, errorObj);\n                    }\n                    valObj = valObj.result ? {} : valObj;\n                    return mergeObjects(accObj, valObj);\n                });\n            });\n        }, Promise.resolve(obj));\n        resolve(validationsResult);\n\n    }).then(data => {\n\n        // GET ERRORS\n        if( !data.result ){\n            data.errors = validationMethods.reduce((accObj, methodName) => {\n                const errors = (validationErrors[methodName] && validationErrors[methodName](fieldValue, $field)) || {};\n                return mergeObjects(accObj, errors);\n            }, data.errors);\n        }\n        return data;\n\n    });\n\n}\n","\nimport { fieldsStringSelector, getUniqueFields, mergeValidateFieldDefault, mergeValidateFormDefault, mergeObjects } from './helpers';\nimport { checkFieldValidity } from './checkFieldValidity';\n\nexport function checkFormValidity( $form, fieldOptions, validationRules, validationErrors, fieldToSkip = null ){\n\n    fieldOptions = mergeObjects( {}, fieldOptions, {focusOnRelated: false} );\n    const $fieldsList = getUniqueFields( $form.querySelectorAll(fieldsStringSelector) );\n\n    return Promise.all( $fieldsList.map($field => {\n\n        if( fieldToSkip && $field === fieldToSkip ){\n            const obj = mergeValidateFieldDefault({$field, result: true});\n            return Promise.resolve(obj);\n        }\n        return checkFieldValidity( $field, fieldOptions, validationRules, validationErrors );\n\n    }) ).then(fields => {\n\n        const areAllFieldsValid = fields.filter(fieldObj => !fieldObj.result).length === 0;\n        return mergeValidateFormDefault({result: areAllFieldsValid, fields});\n\n    });\n\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const mergeValidateFormDefault = obj => {\n    return mergeObjects({}, { result: true, fields: [] }, obj);\n}\n","\nimport { version }              from './modules/version';\nimport { checkFormEl, customEvents, dispatchCustomEvent, excludeSelector, finalizeFieldPromise, finalizeFormPromise, isNodeList, mergeObjects, removeClass } from './modules/helpers';\nimport { options }              from './modules/options';\nimport { validationRules }      from './modules/validationRules';\nimport { validationEnd }        from './modules/listenerCallbacks';\nimport { formStartup }          from './modules/formStartup';\nimport { destroy }              from './modules/destroy';\nimport { checkFilledFields }    from './modules/checkFilledFields';\nimport { checkFieldValidity }   from './modules/checkFieldValidity';\nimport { checkFormValidity }    from './modules/checkFormValidity';\n\nclass Form {\n\n    constructor( form, optionsObj ){\n        const argsL = arguments.length,\n              checkFormElem = checkFormEl(form);\n\n        if( argsL === 0 || (argsL > 0 && !form) ){\n            throw new Error('First argument \"form\" is missing or falsy!');\n        }\n        if( isNodeList(form) ){\n            throw new Error('First argument \"form\" must be a single DOM node or a form CSS selector, not a NodeList!');\n        }\n        if( !checkFormElem.result ){\n            throw new Error('First argument \"form\" is not a DOM node nor a form CSS selector!');\n        }\n\n        const self = this;\n\n        self.$form = checkFormElem.$el;\n        self.$form.formjs = self;\n        self.options = mergeObjects({}, Form.prototype.options, optionsObj);\n\n        // BINDING CONTEXT FOR FUTURE EXECUTION\n        const cbList = [\n            // IN fieldOptions\n            'beforeValidation',\n            // IN formOptions\n            'beforeSend',\n            'getFormData'\n        ];\n        cbList.forEach(cbName => {\n            const optionType = self.options.formOptions[cbName] ? 'formOptions' : 'fieldOptions';\n            let cbOpt = self.options[optionType][cbName];\n\n            if( cbOpt ){\n                self.options[optionType][cbName] = ( Array.isArray(cbOpt) ? cbOpt.map(cbFn => cbFn.bind(self)) : cbOpt.bind(self) );\n            }\n        });\n\n        formStartup( self.$form, self.options );\n    }\n\n    destroy(){\n        destroy(this.$form, this.options);\n    }\n    \n    getFormData(){\n        const $formFields = this.$form.querySelectorAll('input, select, textarea'),\n              $filteredFields = Array.from( $formFields ).filter( elem => elem.matches(excludeSelector) );\n        return this.options.formOptions.getFormData($filteredFields);\n    }\n\n    validateField( field, fieldOptions ){\n        const self = this;\n        const $field = typeof field === 'string' ? this.$form.querySelector(field) : field;\n        fieldOptions = mergeObjects({}, this.options.fieldOptions, fieldOptions);\n        const $form = this.$form;\n        return checkFieldValidity($field, fieldOptions, this.validationRules, this.validationErrors)\n            .then(obj => {\n                return new Promise(resolve => {\n                    dispatchCustomEvent( obj.$field, customEvents.field.validation, { bubbles: false, detail: obj } );\n                    dispatchCustomEvent( $form, customEvents.field.validation, { detail: obj } );\n                    if( obj.result && fieldOptions.onValidationCheckAll ){\n                        // FORCE skipUIfeedback TO BE TEMPORARY true\n                        fieldOptions.skipUIfeedback = true;\n                        checkFormValidity( $form, fieldOptions, self.validationRules, self.validationErrors, obj.$field )\n                            .then(dataForm => {\n                                const clMethodName = dataForm.result ? 'add' : 'remove';\n                                $form.classList[clMethodName]( self.options.formOptions.cssClasses.valid );\n                                dispatchCustomEvent( $form, customEvents.form.validation, { detail: dataForm } );\n                            });\n                    } else if( !obj.result ){\n                        removeClass( $form, self.options.formOptions.cssClasses.valid );\n                    }\n                    return obj;\n                });\n            })\n            .then(finalizeFieldPromise);\n    }\n\n    validateFilledFields(){\n        return checkFilledFields(this.$form);\n    }\n\n    validateForm( fieldOptions ){\n        const self = this;\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions);\n        const $form = self.$form;\n        return checkFormValidity($form, fieldOptions, self.validationRules, self.validationErrors)\n            .then(data => {\n                const clMethodName = data.result ? 'add' : 'remove';\n                $form.classList[clMethodName]( self.options.formOptions.cssClasses.valid );\n                validationEnd( {detail:data} );\n                dispatchCustomEvent( $form, customEvents.form.validation, { detail: data } );\n                return data;\n            })\n            .then(finalizeFormPromise);\n    }\n    \n    static addValidationErrors( errorsObj ){\n        Form.prototype.validationErrors = mergeObjects({}, Form.prototype.validationErrors, errorsObj);\n    }\n\n    static addValidationRules( rulesObj ){\n        Form.prototype.validationRules = mergeObjects({}, Form.prototype.validationRules, rulesObj);\n    }\n    \n    static setOptions( optionsObj ){\n        Form.prototype.options = mergeObjects({}, Form.prototype.options, optionsObj);\n    }\n\n}\n\nForm.prototype.options = options;\nForm.prototype.validationErrors = {};\nForm.prototype.validationRules = validationRules;\nForm.prototype.version = version;\n\nexport default Form;\n","\nimport { isDOMNode } from './isDOMNode';\n\nexport const checkFormEl = form => {\n    let isString = typeof form,\n        isValidNodeSelector = isString === 'string' && isDOMNode(document.querySelector(form)),\n        isFormSelector = isValidNodeSelector && document.querySelector(form).tagName.toLowerCase() === 'form',\n        obj = {\n            result: isDOMNode(form) || isFormSelector,\n            $el: (isString === 'string' ? document.querySelector(form) : form)\n        };\n\n    return obj;\n}\n","\nimport { customEvents } from './helpers';\nimport { keypressMaxlength, dataTypeNumber, pastePrevent, submit, validation, validationEnd } from './listenerCallbacks';\n\nexport function formStartup( $form, options ){\n\n    $form.noValidate = true;\n\n    const fieldOptions = options.fieldOptions,\n          formOptions = options.formOptions;\n        \n    // VALIDATION WITH ATTRIBUTES LIKE HTML ONES ( ALSO FOR BUG FIXING, EG: maxlength IN ANDROID )\n    if( fieldOptions.strictHtmlValidation ){\n        \n        // maxlength\n        // MAXLENGTH IS BUGGY IN ANDROID BROWSERS\n        $form.addEventListener('keypress', keypressMaxlength, false);\n\n        // data-type=\"number\"\n        // SINCE VALIDATING type=\"number\" WITH NON NUMERIC CHARS WILL RETURN EMPTY STRING IN SOME BROWSERS ( EG: FIREFOX )\n        $form.addEventListener('input', dataTypeNumber, false);\n        \n    }\n    \n    if( fieldOptions.preventPasteFields && $form.querySelectorAll( fieldOptions.preventPasteFields ).length ){\n        // INIT EVENT LISTENER FOR \"PASTE\" EVENT TO PREVENT IT ON SPECIFIED FIELDS\n        $form.addEventListener('paste', pastePrevent, false);\n    }\n\n    // INIT EVENTS LISTENER ( AS IN fieldOptions )\n    fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n        const useCapturing = eventName === 'blur' ? true : false;\n        $form.addEventListener(eventName, validation, useCapturing);\n    });\n\n    $form.addEventListener(customEvents.field.validation, validationEnd, false);\n    \n    // HANDLE FORM SUBMIT\n    if( formOptions.handleSubmit ){\n        // INIT FORM SUBMIT ( DEFAULT AND AJAX )\n        $form.addEventListener('submit', submit);\n\n        if( formOptions.ajaxSubmit ){\n            if( $form.getAttribute('enctype') ){\n                formOptions.ajaxOptions.headers['Content-Type'] = $form.getAttribute('enctype');\n            }\n\n            if( $form.getAttribute('method') ){\n                formOptions.ajaxOptions.method = $form.getAttribute('method').toUpperCase();\n            }\n\n            if( $form.getAttribute('action') ){\n                formOptions.ajaxOptions.url = $form.getAttribute('action');\n            }\n        }\n    }\n\n}\n","\nimport { customEvents } from './helpers';\nimport { keypressMaxlength, dataTypeNumber, pastePrevent, submit, validation, validationEnd } from './listenerCallbacks';\n\n\nexport function destroy( $form, options ){\n\n    if( options.fieldOptions.strictHtmlValidation ){\n        $form.removeEventListener('keypress', keypressMaxlength, false);\n        $form.removeEventListener('input', dataTypeNumber, false);\n    }\n\n    if( options.fieldOptions.preventPasteFields ){\n        $form.removeEventListener('paste', pastePrevent, false);\n    }\n\n    if( options.formOptions.handleSubmit ){\n        $form.removeEventListener('submit', submit);\n    }\n\n    options.fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n        const useCapturing = eventName === 'blur' ? true : false;\n        $form.removeEventListener(eventName, validation, useCapturing);\n    });\n\n    $form.removeEventListener(customEvents.field.validation, validationEnd, false);\n\n    delete $form.formjs;\n    \n}\n","\nexport const excludeSelector = ':not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"file\"]):not([data-exclude-data])'\n"],"names":["addClass","element","cssClasses","split","forEach","className","classList","add","isNodeList","nodeList","NodeList","prototype","isPrototypeOf","removeClass","remove","isDOMNode","node","Element","customEvents","validation","submit","isPlainObject","object","Object","toString","call","mergeObjects","out","Array","from","arguments","slice","filter","arg","keys","key","isArray","concat","push","dispatchCustomEvent","elem","eventName","eventOptions","bubbles","eventObj","CustomEvent","dispatchEvent","fieldsStringSelector","finalizeFieldPromise","obj","result","Promise","resolve","reject","errors","finalizeFormPromise","fields","formatMap","YYYY-MM-DD","dateArray","MM-DD-YYYY","DD-MM-YYYY","reverse","getDateAsNumber","dateString","dateFormat","splitChar","string","separator","match","length","getSplitChar","indexOf","replace","join","getUniqueFields","$nodeList","currentFieldName","currentFieldType","$field","name","type","matches","mergeValidateFieldDefault","isFieldForChangeEvent","runFunctionsSequence","functionsList","data","stopConditionFn","reduce","acc","promiseFn","then","res","dataNew","dataList","serializeObject","constructor","a","k","encodeURIComponent","toCamelCase","all","letter","toUpperCase","defaultCallbacksInOptions","fieldOptions","beforeValidation","fieldObj","this","options","$fields","$container","closest","questionContainer","value","dirty","checkDirtyField","skipUIfeedback","pending","formOptions","getFormData","$filteredFields","formData","$form","isCheckbox","isRadio","isSelect","checked","$checkboxes","querySelectorAll","field","$checkedRadio","querySelector","$selectedOpts","option","selected","error","errorEmpty","errorRule","valid","focusOnRelated","handleFileUpload","onValidationCheckAll","preventPasteFields","strictHtmlValidation","validateOnEvents","ajaxOptions","cache","credentials","headers","Content-Type","Accept","method","mode","redirect","timeout","url","location","href","ajaxSubmit","beforeSend","ajaxComplete","ajaxError","ajaxPending","ajaxSuccess","handleSubmit","validationRules","date","test","email","number","checkbox","$dataChecks","attrValue","JSON","parse","getAttribute","checkedLength","isMinOk","isMaxOk","checks","minChecks","maxChecks","equalTo","exactLength","valueLength","minlength","maxlength","file","maxFileSize","MIMEtype","accept","RegExp","filesList","files","exceedMaxFileSize","size","isAcceptedFileType","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","max","maxVal","maxLength","min","minVal","minLength","pattern","radio","$fieldChecked","trim","dataTypeNumber","event","target","fieldValue","stopImmediatePropagation","valueReplaced","keypressMaxlength","keyPressed","which","keyCode","allowedKeys","pastePrevent","formjs","preventDefault","ajaxCall","formDataObj","timeoutTimer","isMultipart","body","formDataMultipart","FormData","append","idx","stringify","Headers","controller","AbortController","signal","window","setTimeout","abort","fetch","response","ok","fetchMethod","get","contentType","headerOpt","getFetchMethod","catch","finally","clearTimeout","disabled","instance","formCssClasses","isAjaxForm","$btn","eventPreventDefault","enableBtn","validateForm","beforeSendData","stopExecution","rfsObject","pop","detail","isChangeEvent","self","isFieldForChangeEventBoolean","validateField","$realtedEqualTo","required","validationEnd","$fieldsArray","isReqFrom","$reqMore","document","errorClasses","extraErrorClass","isChecks","empty","errorClassToRemove","checkFilledFields","formFields","map","isCheckboxOrRadio","fieldChecked","getFilledFields","checkFieldValidity","validationErrors","isValidValue","$checked","reqMoreIsChecked","$findReqMore","$findReqFrom","id","focus","needsValidation","dataObj","isRadioOrCheckbox","hasSelectedInput","validationMethods","attributes","accList","attr","attrName","isAttrValueWithFn","isAttrNameWithFn","accPromise","methodName","accObj","resolveVal","valObj","errorObj","isValid","checkFormValidity","fieldToSkip","$fieldsList","areAllFieldsValid","Form","[object Object]","form","optionsObj","argsL","checkFormElem","isString","isFormSelector","tagName","toLowerCase","$el","checkFormEl","Error","cbName","optionType","cbOpt","cbFn","bind","noValidate","addEventListener","useCapturing","formStartup","removeEventListener","destroy","$formFields","dataForm","clMethodName","errorsObj","rulesObj","version"],"mappings":"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"}