{"version":3,"file":"formjs-esm.min.js","sources":["../src/modules/helpers.js","../src/modules/optionsUtils.js","../src/modules/options.js","../src/modules/validationRules.js","../src/modules/submit.js","../src/modules/ajaxCall.js","../src/modules/listenerCallbacks.js","../src/modules/formStartup.js","../src/modules/init.js","../src/modules/isValidField.js","../src/modules/isValid.js","../src/modules/isValidForm.js","../src/index.js","../src/modules/constructor.js","../src/modules/destroy.js","../src/modules/validateField.js","../src/modules/validateForm.js","../src/modules/validationErrors.js"],"sourcesContent":["\nexport const\n\naddClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.add( className );\n    });\n},\n\ncheckDirtyField = ( fields, cssClasses ) => {\n\n    var fields = (isNodeList(fields) ? Array.from( fields ) : [fields]);\n    \n    fields.forEach(fieldEl => {\n        if( fieldEl.type !== 'checkbox' && fieldEl.type !== 'radio' ){\n            let containerEl = fieldEl.closest('[data-formjs-question]') || fieldEl;\n\n            if( fieldEl.value ){\n                \n                addClass( containerEl, cssClasses );\n                \n            } else {\n                \n                removeClass( containerEl, cssClasses );\n                \n            }\n        }\n    });\n    \n},\n\ncheckFormEl = formEl => {\n    let isString = typeof formEl,\n        isValidNodeSelector = isString === 'string' && isDOMNode(document.querySelector(formEl)),\n        isFormSelector = isValidNodeSelector && document.querySelector(formEl).tagName.toLowerCase() === 'form',\n        obj = {\n            result: isDOMNode(formEl) || isFormSelector,\n            element: (isString === 'string' ? document.querySelector(formEl) : formEl)\n        };\n\n    return obj;\n},\n\ncustomEvents = {\n    field: {\n        validation: 'fjs.field:validation'\n    },\n    form: {\n        submit:     'fjs.form:submit',\n        validation: 'fjs.form:validation'\n    }\n},\n\ndispatchCustomEvent = ( elem, eventName, data = {}, eventOptions = {} ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions);\n    const eventObj = new Event(eventName, eventOptions);\n    eventObj.data = data;\n    elem.dispatchEvent( eventObj );\n},\n\nexcludeSelector = ':not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"file\"]):not([data-exclude-data])',\n\nfieldsStringSelector = 'input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"hidden\"]), select, textarea',\n\ngetFilledFields = formEl => {\n    return getUniqueFields( formEl.querySelectorAll(fieldsStringSelector) )\n    .map(fieldEl => {\n\n        const name = fieldEl.name,\n              type = fieldEl.type,\n              isCheckboxOrRadio = (type === 'checkbox' || type === 'radio'),\n              fieldChecked = formEl.querySelector('[name=\"' + name + '\"]:checked'),\n              isReqFrom = fieldEl.matches('[data-required-from]'),\n              reqMoreEl = (isReqFrom ? formEl.querySelector(fieldEl.getAttribute('data-required-from')) : null);\n\n        return (\n            isCheckboxOrRadio ? (fieldChecked || null) :\n            (isReqFrom && reqMoreEl.checked) || (!isReqFrom && fieldEl.value) ? fieldEl : null\n        );\n\n    })\n    .filter(fieldEl => {\n        return  fieldEl !== null;\n    });\n},\n\ngetSplitChar = string => {\n    let splitChar = '.';\n\n    if( string.indexOf(splitChar) === -1 ){\n        if( string.indexOf('-') >= 0 ){\n            splitChar = '-';\n        } else if( string.indexOf('/') >= 0 ){\n            splitChar = '/';\n        }\n    }\n\n    return splitChar;\n},\n\ngetUniqueFields = nodeList => {\n\n    let currentFieldName = '',\n        currentFieldType = '';\n\n    return Array.from( nodeList ).filter(fieldEl => {\n        const name = fieldEl.name,\n              type = fieldEl.type;\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false;\n        }\n        \n        if( !fieldEl.matches('[data-required-from]') ){\n            currentFieldName = name;\n            currentFieldType = type;\n        }\n        return true;\n    });\n    \n},\n\nisDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node );\n},\n\nisFieldForChangeEvent = fieldEl => {\n    return fieldEl.matches('select, [type=\"radio\"], [type=\"checkbox\"], [type=\"file\"]');\n},\n\nisNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList );\n},\n\nisPlainObject = object => {\n    return Object.prototype.toString.call( object ) === '[object Object]';\n},\n\nmergeObjects = function( out = {} ){\n    for(let i=1; i<arguments.length; i++){\n        let obj = arguments[i];\n\n        if(!obj){ continue; }\n\n        for(let key in obj){\n            let isArray = Object.prototype.toString.call(obj[key]) === \"[object Array]\";\n            let isObject = Object.prototype.toString.call(obj[key]) === \"[object Object]\";\n\n            // COPY ONLY ENUMERABLE PROPERTIES\n            if( obj.hasOwnProperty(key) ){\n                if( isArray ){\n\n                    if( typeof out[key] === 'undefined' ){\n                        out[key] = [];\n                    }\n                    out[key] = out[key].concat( obj[key].slice(0) );\n\n                } else if( isObject ){\n\n                    out[key] = mergeObjects(out[key], obj[key]);\n\n                } else {\n\n                    // * STRING | NUMBER | BOOLEAN | FUNCTION\n                    if( Array.isArray(out[key]) ){\n                        // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                        out[key].push(obj[key]);\n                    } else {\n                        out[key] = obj[key];\n                    }\n\n                }\n            }\n        }\n    }\n\n    return out;\n},\n\nremoveClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.remove( className );\n    });\n},\n\nrunFunctionsSequence = ( { functionsList = [], data = {}, stopConditionFn = function(){return false} } = {} ) => {\n    return functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1]);\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res);\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result);\n                    return res;\n                });\n        });\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList);\n},\n\nserializeObject = obj => {\n    var objToString = (\n            (obj && typeof obj === 'object' && obj.constructor === Object) ? \n            Object.keys(obj)\n                .reduce((a,k) => {\n                    a.push(k+'='+encodeURIComponent(obj[k]));\n                    return a\n                },[]).join('&') : \n            obj\n    );\n    return objToString;\n},\n\ntoCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase(); });\n},\n\nvalidateFieldObjDefault = { result: false, fieldEl: null },\n\nvalidateFormObjDefault = { result: true, fields: [] }\n","\nimport { addClass, checkDirtyField } from './helpers';\n\nexport const defaultCallbacksInOptions = {\n    fieldOptions: {\n\n        beforeValidation: function beforeValidationDefault ( fieldObj ) {\n\n            const fieldOptions = this.options.fieldOptions;\n\n            checkDirtyField( fieldObj.fieldEl, fieldOptions.cssClasses.dirty );\n            if( !fieldOptions.skipUIfeedback ){\n                addClass( fieldObj.fieldEl.closest('[data-formjs-question]'), fieldOptions.cssClasses.pending );\n            }\n\n        }\n\n    },\n    formOptions: {\n\n        getFormData: function getFormDataDefault ( filteredFields ) {\n\n            const formData = {},\n                  formEl = this.formEl;\n\n            filteredFields.forEach(function( fieldEl ){\n                const isCheckbox = fieldEl.type === 'checkbox',\n                      isRadio = fieldEl.type === 'radio',\n                      isSelect = fieldEl.matches('select'),\n                      name = fieldEl.name;\n                let value = fieldEl.value;\n                                \n                if( isCheckbox ) {\n                    \n                    value = fieldEl.checked;\n                    let checkboxes = Array.from( formEl.querySelectorAll('[name=\"'+ name +'\"]') );\n                    if( checkboxes.length > 1 ){\n\n                        value = [];\n                        let checkedElems = checkboxes.filter(field => field.checked);\n                        checkedElems.forEach(fieldEl => {\n                            value.push( fieldEl.value );\n                        });\n\n                    }\n                        \n                } else if( isRadio ){\n                    \n                    let checkedRadio = formEl.querySelector('[name=\"'+ name +'\"]:checked');\n                    value = (checkedRadio === null ? null : checkedRadio.value);\n                    \n                } else if( isSelect ){\n\n                    let selectedOpts = Array.from( fieldEl.options ).filter(option => option.selected);\n                    if( selectedOpts.length > 1 ){\n\n                        value = [];\n                        selectedOpts.forEach(fieldEl => {\n                            value.push( fieldEl.value );\n                        });\n\n                    }\n                }\n\n                formData[ name ] = value;\n            });\n\n            return formData;\n\n        }\n\n    }\n}\n","\nimport { defaultCallbacksInOptions } from './optionsUtils';\n\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [defaultCallbacksInOptions.fieldOptions.beforeValidation],\n        cssClasses: {\n            dirty:              'is-dirty',\n            error:              'has-error',\n            errorEmpty:         'has-error-empty',\n            errorRule:          'has-error-rule',\n            pending:            'is-pending',\n            valid:              'is-valid'\n        },\n        focusOnRelated:         true,\n        handleFileUpload:       true,\n        handleValidation:       true,\n        maxFileSize:            10,\n        onValidationCheckAll:   true,\n        preventPasteFields:     '[type=\"password\"], [data-equal-to]',\n        skipUIfeedback:         false,\n        strictHtmlValidation:   true,\n        validateOnEvents:       'input change'\n    },\n\n    formOptions: {\n        ajaxOptions:            {\n            cache:              'no-store',\n            credentials:        'same-origin',\n            headers: {\n                                'Content-Type': 'application/json',\n                                'Accept':       'application/json'\n            },\n            method:             'POST',\n            mode:               'same-origin',\n            redirect:           'follow',\n            timeout:            0,\n            url:                location.href\n        },\n        ajaxSubmit:             true,\n        beforeSend:             [],\n        cssClasses: {\n            ajaxComplete:       'ajax-complete',\n            ajaxError:          'ajax-error',\n            ajaxPending:        'ajax-pending',\n            ajaxSuccess:        'ajax-success',\n            submit:             'is-submitting',\n            valid:              'is-valid'\n        },\n        getFormData:            defaultCallbacksInOptions.formOptions.getFormData,\n        handleSubmit:           true\n    }\n    \n}\n","\nimport { getSplitChar } from './helpers';\n\nexport const validationRules = {\n            \n    date: function( string ){\n        // DATE AS ISO 8601 DATE FORMAT     YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n\n        let date = /^((((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13578]|1[02])[ \\/\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13456789]|1[012])[ \\/\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.]02[ \\/\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ \\/\\-.]02[ \\/\\-.]29))$/g.test( string ),\n            obj = {\n                result: date\n            };\n\n        return obj;\n    },\n    \n    email: function( string ){\n        // FROM https://emailregex.com\n        // AS FOR RFC 5322 Official Standard EMAIL MUST BE AT LEAST:\n        // a@a.aa\n        let obj = {\n            result: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test( string )\n        };\n\n        return obj;\n    },\n    \n    number: function( string ){\n        // ALL NUMBERS ( INTEGERS AND FLOATING )\n        // VALID NUMBERS: 123 | 123.456 | .123\n        let obj = {\n            result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n        };\n\n        return obj;\n    }\n    \n}\n\nexport const validationRulesAttributes = {\n\n    checkbox: function( data ){\n        let formEl = data.fieldEl.closest('form'),\n            dataChecksEl = formEl.querySelector('[name=\"' + data.fieldEl.name + '\"][data-checks]'),\n            obj = { result: data.fieldEl.checked };\n\n        if( dataChecksEl !== null ){\n            obj = this.checks({ attrValue: dataChecksEl.getAttribute('data-checks'), fieldEl: dataChecksEl});\n        }\n\n        return obj;\n    },\n\n    checks: function( data ){\n        try {\n            let attrValue = JSON.parse(data.attrValue),\n                fieldEl = data.fieldEl,\n                formEl = fieldEl.closest('form'),\n                checkedElLength = formEl.querySelectorAll('[name=\"' + fieldEl.name + '\"]:checked').length,\n                isMinOk = checkedElLength >= attrValue[0],\n                isMaxOk = checkedElLength <= attrValue[1],\n                obj = {\n                    result: isMinOk && isMaxOk\n                };\n\n            if( !obj.result ){\n\n                obj.errors = { checks: true };\n                if( !isMinOk ){ obj.errors.minChecks = true; }\n                if( !isMaxOk ){ obj.errors.maxChecks = true; }\n\n            }\n\n            return obj;\n        } catch(e){\n            throw new Error('\"data-checks\" attribute is not a valid array!');\n        }\n    },\n\n    equalTo: function( data ){\n        let fieldEl = data.fieldEl,\n            formEl = fieldEl.closest('form'),\n            checkFromEl = formEl.querySelector( '[name=\"' + fieldEl.getAttribute('data-equal-to') + '\"]' ),\n            obj = {\n                result: fieldEl.value === checkFromEl.value\n            };\n\n        if( !obj.result ){\n            \n            obj.errors = { equalTo: true };\n        }\n\n        return obj;\n    },\n    \n    exactLength: function( data ){\n        let valueLength = data.fieldEl.value.length,\n            exactLength = (data.attrValue * 1),\n            obj = {\n                result: valueLength === exactLength\n            };\n\n        if( !obj.result ){\n\n            obj.errors = { exactLength: true };\n            if( valueLength < exactLength ){ obj.errors.minlength = true; }\n            else { obj.errors.maxlength = true; }\n\n        }\n\n        return obj;\n    },\n\n    file: function( data ){\n        let fieldEl = data.fieldEl,\n            maxFileSize = (fieldEl.getAttribute('data-max-file-size') || data.fieldOptions.maxFileSize) * 1,\n            MIMEtype = (fieldEl.accept ? new RegExp(fieldEl.accept.replace( '*', '[^\\\\/,]+' )) : null),\n            filesList = Array.from(fieldEl.files),\n            obj = { result: true };\n\n        filesList.forEach(function( file ){\n            let exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize,\n                isAcceptedFileType = (MIMEtype !== null ? MIMEtype.test(file.type) : true);\n\n            if( exceedMaxFileSize || !isAcceptedFileType ){\n                obj.result = false;\n                if( typeof obj.errors === 'undefined' ){\n                    obj.errors = {};\n                }\n                obj.errors.file = true;\n                if( exceedMaxFileSize ){ obj.errors.maxFileSize = true; }\n                if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true; }\n\n            }\n        });\n\n        return obj;\n    },\n\n    length: function( data ){\n        try {\n            let valueL = data.fieldEl.value.length,\n                attrValue = JSON.parse(data.attrValue),\n                isMinlengthOk = valueL >= attrValue[0],\n                isMaxlengthOk = valueL <= attrValue[1],\n                obj = { result: isMinlengthOk && isMaxlengthOk };\n\n            if( !obj.result ){\n\n                obj.errors = { stringLength: true };\n                if( !isMinlengthOk ){ obj.errors.minlength = true; }\n                if( !isMaxlengthOk ){ obj.errors.maxlength = true; }\n\n            }\n\n            return obj;\n        } catch(e){\n            throw new Error('\"data-length\" attribute is not a valid array!');\n        }\n    },\n    \n    max: function( data ){\n        let fieldEl = data.fieldEl,\n            isDate = (fieldEl.matches('[type=\"date\"]') || fieldEl.matches('[data-subtype=\"date\"]') || fieldEl.matches('[data-subtype=\"dateDDMMYYYY\"]')),\n            value = data.fieldEl.value,\n            maxVal = data.attrValue;\n        \n        if( isDate ){\n\n            let splitChar = getSplitChar( value );\n\n            if( value.indexOf(splitChar) === 2 ){\n                // DD MM YYYY\n                value = value.split( splitChar ).reverse();\n            } else {\n                // YYYY MM DD\n                value = value.split( splitChar );\n            }\n\n            value = value.join('');\n            maxVal = maxVal.split('-').join('');\n\n        }\n\n        value = value * 1;\n        maxVal = maxVal * 1;\n\n        let obj = {\n                result: value <= maxVal\n            };\n\n        if( !obj.result ){\n            \n            obj.errors = { max: true };\n        }\n        \n        return obj;\n    },\n    \n    maxlength: function( data ){\n        const obj = {\n            result: data.fieldEl.value.length <= (data.attrValue * 1)\n        };\n\n        if( !obj.result ){\n\n            obj.errors = { maxlength: true };\n        }\n\n        return obj;\n    },\n    \n    min: function( data ){\n        let fieldEl = data.fieldEl,\n            isDate = (fieldEl.matches('[type=\"date\"]') || fieldEl.matches('[data-subtype=\"date\"]') || fieldEl.matches('[data-subtype=\"dateDDMMYYYY\"]')),\n            value = data.fieldEl.value,\n            minVal = data.attrValue;\n        \n        if( isDate ){\n\n            let splitChar = getSplitChar( value );\n\n            if( value.indexOf(splitChar) === 2 ){\n                // DD MM YYYY\n                value = value.split( splitChar ).reverse();\n            } else {\n                // YYYY MM DD\n                value = value.split( splitChar );\n            }\n\n            value = value.join('');\n            minVal = minVal.split('-').join('');\n\n        }\n\n        value = value * 1;\n        minVal = minVal * 1;\n\n        let obj = {\n                result: value >= minVal\n            };\n\n        if( !obj.result ){\n            \n            obj.errors = { min: true };\n        }\n        \n        return obj;\n    },\n\n    minlength: function( data ){\n        const obj = {\n            result: data.fieldEl.value.length >= (data.attrValue * 1)\n        };\n\n        if( !obj.result ){\n\n            obj.errors = { minlength: true };\n        }\n\n        return obj;\n    },\n\n    pattern: function( data ){\n        let fieldEl = data.fieldEl,\n            fieldPattern = fieldEl.pattern,\n            fieldRegex = new RegExp( fieldPattern ),\n            obj = {\n                result: fieldRegex.test( fieldEl.value )\n            };\n\n        if( !obj.result ){\n\n            obj.errors = { pattern: true };\n        }\n\n        return obj;\n    },\n\n    radio: function( data ){\n        let fieldEl = data.fieldEl,\n            fieldChecked = fieldEl.closest('form').querySelector( '[name=\"'+ fieldEl.name +'\"]:checked' ),\n            isValid = fieldChecked !== null && fieldChecked.value.trim().length > 0,\n            obj = { result: isValid };\n\n        return obj;\n    },\n\n    requiredFrom: function( data ){\n        let fieldEl = data.fieldEl,\n            formEl = fieldEl.closest('form'),\n            isValidValue = fieldEl.value.trim().length > 0,\n            reqMoreEl = formEl.querySelector( fieldEl.getAttribute('data-required-from') ),\n            checkedEl = formEl.querySelector( '[name=\"'+ reqMoreEl.name +'\"]:checked' ),\n            obj = { result: checkedEl !== null };\n\n        if( reqMoreEl.checked && reqMoreEl.required ){\n            obj.result = isValidValue;\n        }\n\n        if( !obj.result ){\n            obj.errors = { requiredFrom: true };\n        }\n        \n        return obj;\n    }\n    \n}\n","\nimport { addClass, customEvents, dispatchCustomEvent, removeClass, runFunctionsSequence, validateFormObjDefault } from './helpers';\nimport { ajaxCall } from './ajaxCall';\n\nexport function submit( event ){\n\n    const formEl = event.target,\n          instance = formEl.formjs,\n          options = instance.options,\n          formCssClasses = options.formOptions.cssClasses,\n          isAjaxForm = options.formOptions.ajaxSubmit,\n          btnEl = formEl.querySelector('[type=\"submit\"]'),\n          eventPreventDefault = ( enableBtn = true ) => {\n              if( btnEl && enableBtn ){ btnEl.disabled = false; }\n              if( event ){ event.preventDefault(); }\n          };\n\n    if( isAjaxForm ){\n        eventPreventDefault(false);\n    }\n\n    if( btnEl ){\n        if( btnEl.disabled ){\n            eventPreventDefault(false);\n            return false;\n        }\n        btnEl.disabled = true;\n    }\n\n    removeClass( formEl, (formCssClasses.ajaxComplete + ' ' + formCssClasses.ajaxError + ' ' + formCssClasses.ajaxSuccess) );\n    addClass( formEl, formCssClasses.submit );\n    \n    const handleValidation = options.fieldOptions.handleValidation,\n          formValidationPromise = (handleValidation ? instance.validateForm() : Promise.resolve(validateFormObjDefault));\n\n    formValidationPromise.then(formValidation => {\n\n        let beforeSendData = { stopExecution: false, formData: {} };\n\n        if( !formValidation.result ){\n            eventPreventDefault();\n            removeClass( formEl, formCssClasses.submit );\n            beforeSendData.stopExecution = true;\n            return [beforeSendData];\n        }\n        \n        let formDataObj = (isAjaxForm ? instance.getFormData() : null),\n            callbacksBeforeSend = options.formOptions.beforeSend;\n\n        if( formDataObj ){\n            beforeSendData.formData = formDataObj;\n        }\n\n        const rfsObject = {\n            functionsList: callbacksBeforeSend,\n            data: beforeSendData,\n            stopConditionFn: function(data){ return data.stopExecution; }\n        };\n        return runFunctionsSequence(rfsObject);\n\n    }).then(dataList => {\n\n        if( dataList.filter(data => data.stopExecution).length > 0 ){\n            eventPreventDefault();\n            return false;\n        }\n        \n        if( isAjaxForm ){\n\n            const formData = dataList.pop().formData;\n            addClass( formEl, formCssClasses.ajaxPending );\n            dispatchCustomEvent( formEl, customEvents.form.submit, ajaxCall( formEl, formData, options ) );\n            \n        }\n\n    });\n    \n}\n","\nimport { addClass, mergeObjects, removeClass, serializeObject } from './helpers';\n\nconst getFetchMethod = (response, options) => {\n    const accept = options.headers.get('Accept');\n    const contentType = response.headers.get('Content-Type');\n    const headerOpt = accept || contentType || '';\n\n    if( headerOpt.indexOf('application/json') > -1 || headerOpt === '' ){\n        return 'json';\n    } else if( headerOpt.indexOf('text/') > -1 ){\n        return 'text';\n    } else {\n        return 'blob';\n    }\n};\n\nexport function ajaxCall( formEl, formDataObj, options ){\n\n    let btnEl = formEl.querySelector('[type=\"submit\"]'),\n        timeoutTimer,\n        ajaxOptions = mergeObjects( {}, options.formOptions.ajaxOptions ),\n        isMultipart = ajaxOptions.headers['Content-Type'] === 'multipart/form-data';\n\n    ajaxOptions.body = formDataObj;\n    \n    // POST A FormData OBJECT ( multipart )\n    if( isMultipart && options.fieldOptions.handleFileUpload ){\n        let formDataMultipart = new FormData();\n        \n        for(let key in ajaxOptions.body){\n            formDataMultipart.append( key, ajaxOptions.body[key] );\n        }\n        \n        Array.from( formEl.querySelectorAll('[type=\"file\"]') ).forEach(function( field ){\n            Array.from(field.files).forEach(function( file, idx ){\n                let name = field.name+'['+ idx +']';\n                formDataMultipart.append( name, file, file.name );\n            });\n        });\n        \n        ajaxOptions.body = formDataMultipart;\n    }\n\n    if( ajaxOptions.method === 'GET' ){\n\n        // FETCH WITH \"GET\" METHOD CAN'T HAVE \"body\". SO IT IS APPENDED TO THE URL\n        ajaxOptions.url += ( /\\?/.test(ajaxOptions.url) ? '&' : '?' ) + serializeObject( ajaxOptions.body );\n        delete ajaxOptions.body;\n\n    } else {\n\n        if( ajaxOptions.headers['Content-Type'].indexOf('application/x-www-form-urlencoded') > -1 ){\n            // POST A NORMAL FORM\n            ajaxOptions.body = serializeObject( ajaxOptions.body );\n        } else if( !isMultipart ){\n            // POST A JSON STRING\n            ajaxOptions.body = JSON.stringify(ajaxOptions.body);\n        }\n\n    }\n\n    ajaxOptions.headers = new Headers( ajaxOptions.headers );\n\n    if ( ajaxOptions.timeout > 0 ) {\n        const controller = new AbortController();\n        const signal = controller.signal;\n\n        ajaxOptions.signal = signal;\n\n        timeoutTimer = window.setTimeout(function() {\n            controller.abort();\n        }, ajaxOptions.timeout);\n    }\n\n    return fetch(ajaxOptions.url, ajaxOptions)\n        .then(function( response ){\n            if( !response.ok ){\n                return Promise.reject(response);\n            }\n\n            let fetchMethod = getFetchMethod(response, ajaxOptions);\n\n            return response[fetchMethod]();\n        })\n        .then(function( data ){\n            addClass( formEl, options.formOptions.cssClasses.ajaxSuccess );\n            return data;\n        })\n        .catch(function( error ){\n            addClass( formEl, options.formOptions.cssClasses.ajaxError );\n            return Promise.reject(error);\n        })\n        .finally(function(){\n            if( timeoutTimer ){\n                window.clearTimeout( timeoutTimer );\n            }\n            removeClass( formEl, options.formOptions.cssClasses.submit + ' ' + options.formOptions.cssClasses.ajaxPending );\n            addClass( formEl, options.formOptions.cssClasses.ajaxComplete );\n            btnEl.disabled = false;\n        });\n\n}\n","\nimport { addClass, fieldsStringSelector, isFieldForChangeEvent, removeClass } from './helpers';\nimport { submit } from './submit';\n\nexport const listenerCallbacks = {\n\n    dataTypeNumber: function( event ){\n\n        const fieldEl = event.target;\n        \n        if( fieldEl.matches('[data-type=\"number\"]') ){\n            let fieldValue = fieldEl.value,\n                hasInvalidChars = /[^\\d.,+\\-]/.test(fieldValue);\n            \n            if( hasInvalidChars ){\n                event.stopImmediatePropagation();\n                let valueReplaced = fieldValue.replace(/[^\\d.,+\\-]/g, '');\n                fieldEl.value = valueReplaced;\n            }\n        }\n\n    },\n\n    keypressMaxlength: function( event ){\n\n        const fieldEl = event.target;\n        \n        if( fieldEl.matches( '[maxlength]' ) ){\n            const maxLength = fieldEl.maxLength * 1,\n                keyPressed = event.which || event.keyCode,\n                allowedKeys = [8, 37, 38, 39, 46];\n\n            if( fieldEl.value.length >= maxLength && allowedKeys.indexOf(keyPressed) === -1 ){\n                return false;\n            }\n        }\n\n    },\n\n    pastePrevent: function( event ){\n\n        const fieldEl = event.target;\n        let fieldOptions = fieldEl.closest('form').formjs.options.fieldOptions;\n\n        if( fieldEl.matches( fieldOptions.preventPasteFields ) ){     \n            event.preventDefault();\n        }\n\n    },\n\n    submit: function( event ){\n        submit(event);\n    },\n\n    validation: function( event ){\n\n        const eventName = event.type,\n              fieldEl = event.target,\n              self = fieldEl.closest('form').formjs;\n\n        if( fieldEl.matches( fieldsStringSelector ) ){\n            const isFieldForChangeEventBoolean = isFieldForChangeEvent(fieldEl),\n                isRadio = fieldEl.type === 'radio',\n                isReqFrom = fieldEl.matches('[data-required-from]'),\n                isReqMore = fieldEl.matches('[data-require-more]'),\n                isValidValue = fieldEl.value.trim().length > 0;\n\n            // HANDLE data-require-more FIELDS\n            if( isRadio && eventName === 'change' ){\n                let findReqMoreEl = (isReqMore ? fieldEl : self.formEl.querySelector('[name=\"'+ fieldEl.name +'\"][data-require-more]')),\n                    findReqFromEl = (findReqMoreEl !== null ? self.formEl.querySelector('[data-required-from=\"#'+ findReqMoreEl.id +'\"]') : null);\n\n                if( isReqMore ){\n\n                    if( findReqFromEl !== null ){\n                        findReqFromEl.required = fieldEl.required;\n                        if( self.options.fieldOptions.focusOnRelated ){\n                            findReqFromEl.focus();\n                        }\n                    }\n\n                } else if( findReqMoreEl !== null ){\n\n                    if( findReqFromEl !== null ){\n                        findReqFromEl.required = findReqMoreEl.required && findReqMoreEl.checked;\n                        findReqFromEl.value = '';\n                    }\n\n                }\n            }\n\n            // HANDLE data-required-from FIELDS\n            if( isReqFrom ){\n                if( isValidValue ){\n\n                    let reqMoreEl = self.formEl.querySelector( fieldEl.getAttribute('data-required-from') );\n                    reqMoreEl.checked = true;\n                    fieldEl.required = reqMoreEl.required;\n                }\n            }\n            \n            if(\n                (isFieldForChangeEventBoolean && eventName === 'change') ||\n                (!isFieldForChangeEventBoolean && eventName !== 'change')\n            ){\n                \n                return self.validateField( fieldEl ).then(obj => {\n                    const type = obj.fieldEl.type,\n                          realtedFieldEqualTo = obj.fieldEl.closest('form').querySelector('[data-equal-to=\"'+ obj.fieldEl.name +'\"]');\n\n                    if(\n                        // FIELD IS ( required OR data-validate-if-filled ) AND RELATED FIELD data-equal-to HAS A VALUE\n                        (obj.fieldEl.required || obj.fieldEl.matches('[data-validate-if-filled]')) && \n                        !(type === 'checkbox' || type === 'radio') && \n                        realtedFieldEqualTo && realtedFieldEqualTo.value.trim() !== ''\n                    ){\n                        return self.validateField( realtedFieldEqualTo );\n                    } else {\n                        return obj;\n                    }\n                });\n\n            }\n        }\n        \n    },\n\n    validationEnd: function( event ){\n\n        const fieldsArray = event.data.fieldEl ? [event.data] : event.data.fields,\n              options = fieldsArray[0].fieldEl.closest('form').formjs.options.fieldOptions;\n\n        fieldsArray.forEach(function( obj ){\n            let fieldEl = obj.fieldEl;\n            if( fieldEl.matches( fieldsStringSelector ) ){\n                let containerEl = fieldEl.closest('[data-formjs-question]'),\n                    isReqFrom = fieldEl.matches('[data-required-from]'),\n                    reqMoreEl = document.querySelector( fieldEl.getAttribute('data-required-from') );\n\n                if( containerEl !== null ){\n                    removeClass( containerEl, options.cssClasses.pending );\n                }\n\n                if( containerEl !== null && !options.skipUIfeedback ){\n\n                    if( obj.result ){\n\n                        if( !isReqFrom || (isReqFrom && reqMoreEl.checked) ){\n                            // IF FIELD IS VALID\n                            let errorClasses = options.cssClasses.error + ' ' + options.cssClasses.errorEmpty + ' ' + options.cssClasses.errorRule;\n                            removeClass( containerEl, errorClasses );\n                            addClass( containerEl, options.cssClasses.valid );\n                        }\n\n                    } else {\n\n                        // IF FIELD IS NOT VALID\n                        let extraErrorClass = options.cssClasses.errorRule;\n\n                        // HANDLE CASE OF FIELD data-checks\n                        let isChecks = fieldEl.matches('[data-checks]'),\n                            checkedElLength = (isChecks ? containerEl.querySelectorAll('[name=\"' + fieldEl.name + '\"]:checked').length : 0);\n\n                        if( (!isChecks && (obj.errors && obj.errors.empty)) || (isChecks && checkedElLength === 0) ){\n                            extraErrorClass = options.cssClasses.errorEmpty;\n                        }\n\n                        let errorClasses = options.cssClasses.error + ' ' + extraErrorClass,\n                            errorClassToRemove = options.cssClasses.errorEmpty + ' ' + options.cssClasses.errorRule;\n                        removeClass( containerEl, options.cssClasses.valid + ' ' + errorClassToRemove );\n                        addClass( containerEl, errorClasses );\n\n                    }\n                }\n            }\n        });\n\n    }\n\n}\n","\nimport { customEvents } from './helpers';\nimport { listenerCallbacks } from './listenerCallbacks';\n\nexport function formStartup( formEl, options ){\n\n    formEl.noValidate = true;\n\n    let fieldOptions = options.fieldOptions,\n        formOptions = options.formOptions;\n\n    // HANDLE FIELD VALIDATION\n    if( fieldOptions.handleValidation ){\n        \n        // VALIDATION WITH ATTRIBUTES LIKE HTML ONES ( ALSO FOR BUG FIXING, EG: maxlength IN ANDROID )\n        if( fieldOptions.strictHtmlValidation ){\n            \n            // maxlength\n            // MAXLENGTH IS BUGGY IN ANDROID BROWSERS\n            formEl.addEventListener('keypress', listenerCallbacks.keypressMaxlength, false);\n\n            // data-type=\"number\"\n            // SINCE VALIDATING type=\"number\" WITH NON NUMERIC CHARS WILL RETURN EMPTY STRING IN SOME BROWSERS ( EG: FIREFOX )\n            formEl.addEventListener('input', listenerCallbacks.dataTypeNumber, false);\n            \n        }\n        \n        if( fieldOptions.preventPasteFields && formEl.querySelectorAll( fieldOptions.preventPasteFields ).length ){\n            // INIT EVENT LISTENER FOR \"PASTE\" EVENT TO PREVENT IT ON SPECIFIED FIELDS\n            formEl.addEventListener('paste', listenerCallbacks.pastePrevent, false);\n        }\n\n        // INIT EVENTS LISTENER ( AS IN fieldOptions )\n        fieldOptions.validateOnEvents.split(' ').forEach(function( eventName ){\n            let useCapturing = (eventName === 'blur' ? true : false);\n            formEl.addEventListener(eventName, listenerCallbacks.validation, useCapturing);\n        });\n\n        formEl.addEventListener(customEvents.field.validation, listenerCallbacks.validationEnd, false);\n\n    }\n    \n    // HANDLE FORM SUBMIT\n    if( formOptions.handleSubmit ){\n        // INIT FORM SUBMIT ( DEFAULT AND AJAX )\n        formEl.addEventListener('submit', listenerCallbacks.submit);\n\n        if( formOptions.ajaxSubmit ){\n            if( formEl.getAttribute('enctype') ){\n                formOptions.ajaxOptions.headers['Content-Type'] = formEl.getAttribute('enctype');\n            }\n\n            if( formEl.getAttribute('method') ){\n                formOptions.ajaxOptions.method = formEl.getAttribute('method').toUpperCase();\n            }\n\n            if( formEl.getAttribute('action') ){\n                formOptions.ajaxOptions.url = formEl.getAttribute('action');\n            }\n        }\n    }\n\n}\n","\nimport { getFilledFields, isFieldForChangeEvent } from './helpers';\nimport { listenerCallbacks } from './listenerCallbacks';\n\nexport const init = function( formEl ){\n\n    const instance = formEl.formjs;\n    const formFields = getFilledFields( formEl );\n\n    // VALIDATE ALL FILLED FIELDS\n    return Promise.all( formFields.map(fieldEl => {\n\n        const isFieldForChangeEventBoolean = isFieldForChangeEvent(fieldEl);\n        const fakeEventObj = { target: fieldEl, type: (isFieldForChangeEventBoolean ? 'change': '') };\n        return listenerCallbacks.validation( fakeEventObj );\n\n    }) ).then(fields => {\n        instance.isInitialized = true;\n        return { instance, fields };\n    });;\n\n}\n","\nimport { isDOMNode, mergeObjects, runFunctionsSequence, validateFieldObjDefault } from './helpers';\nimport { isValid } from './isValid';\n\nexport function isValidField( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    const obj = mergeObjects({}, validateFieldObjDefault, {fieldEl});\n\n    if( !isDOMNode(fieldEl) ){ return Promise.resolve(obj); }\n\n    const isValidValue =      fieldEl.value.trim().length > 0,\n          isRequired =        fieldEl.required,\n          isReqFrom =         fieldEl.matches('[data-required-from]'),\n          isValidateIfFilled =fieldEl.matches('[data-validate-if-filled]'),\n          rfsObject = {\n            functionsList: fieldOptions.beforeValidation,\n            data: {fieldEl}\n        };\n\n    return runFunctionsSequence(rfsObject)\n        .then(data => {\n\n            let dataObj = data.pop();\n            return new Promise(resolve => {\n                if(\n                    (!isRequired && !isValidateIfFilled && !isReqFrom) ||   // IT IS A NORMAL FORM FIELD\n                    (isValidateIfFilled && !isValidValue) ||                // IT IS data-validate-if-filled AND EMPTY\n                    (isReqFrom && !isRequired )                             // IT IS data-required-from AND NOT required\n                ){\n\n                    dataObj.result = true;\n                    resolve( dataObj );\n                \n                } else {\n\n                    resolve( isValid( fieldEl, fieldOptions, validationRules, validationErrors ) );\n                    \n                }\n\n            });\n\n        });\n\n}\n","\nimport { mergeObjects, toCamelCase } from './helpers';\nimport { validationRulesAttributes } from './validationRules';\n\nexport function isValid( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    const fieldType = ( fieldEl.matches('[data-subtype]') ? toCamelCase( fieldEl.getAttribute('data-subtype') ) : fieldEl.type ),\n          fieldValue = fieldEl.value,\n          isValidValue = fieldValue.trim().length > 0,\n          // ALPHABETICAL REVERSE ORDER\n          fieldAttributes = Array.from(fieldEl.attributes).sort((a,b) => { return a.name < b.name });\n\n    const attrValidations = [];\n    let attrValidationsResult = isValidValue,\n        obj = { result: isValidValue, fieldEl };\n\n    if( !obj.result ){\n        obj.errors = { empty: true };\n        return Promise.resolve(obj);\n    }\n\n    // COLLECT SPECIFIC VALIDATIONS FOR validationRulesAttributes\n    fieldAttributes.forEach(attr => {\n        // FOR data-* ATTRIBUTES -> REMOVE \"data-\" AND TRANSFORM TO CAMELCASE\n        const attrName = toCamelCase( attr.name.replace('data-', '') ),\n              attrValue = attr.value,\n              isAttrValueWithFn = attrName === 'type' && typeof validationRulesAttributes[attrValue] === 'function',\n              isAttrNameWithFn = typeof validationRulesAttributes[attrName] === 'function';\n\n        if( isAttrValueWithFn || isAttrNameWithFn ){\n\n            const extraValObj = {\n                    attrName: (isAttrValueWithFn ? attrValue : attrName),\n                    attrValue: attrValue,\n                    fieldEl,\n                    fieldOptions\n                };\n\n            if( isAttrValueWithFn || attrName === 'requiredFrom' ){\n                // THESE VALIDATIONS MUST RUN BEFORE ALL OTHERS\n                attrValidations.unshift( extraValObj );\n            } else {\n                attrValidations.push( extraValObj );\n            }\n\n        }\n    });\n\n    return new Promise(resolve => {\n\n        // RUN SPECIFIC VALIDATIONS FOR validationRulesAttributes\n        attrValidations.forEach(item => {\n            const extraVal = validationRulesAttributes[item.attrName]( item );\n            if( !extraVal.result ){\n                obj = mergeObjects({}, obj, extraVal);\n                attrValidationsResult = false;\n            }\n        });\n\n        // RUN VALIDATIONS FOR validationRules\n        if( typeof validationRules[fieldType] === 'function' ){\n            resolve( validationRules[fieldType](fieldValue, fieldEl) );\n        } else {\n            resolve( obj );\n        }\n\n    }).then(data => {\n\n        obj = mergeObjects( {}, obj, data, {fieldEl} );\n        obj.result = obj.result && attrValidationsResult;\n\n        if( !obj.result ){\n            const fieldErrors = (typeof validationErrors[fieldType] === 'function' ? validationErrors[fieldType](fieldValue, fieldEl) : {});\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {};\n            }\n            obj.errors.rule = true;\n            obj.errors = mergeObjects({}, obj.errors, fieldErrors);\n        }\n        \n        return obj;\n\n    });\n\n}\n","\nimport { fieldsStringSelector, getUniqueFields, mergeObjects, validateFormObjDefault } from './helpers';\nimport { isValidField } from './isValidField';\n\nexport function isValidForm( formEl, fieldOptions, validationRules, validationErrors ){\n\n    fieldOptions = mergeObjects( {}, fieldOptions, {focusOnRelated: false} );\n\n    const obj = mergeObjects({}, validateFormObjDefault),\n          fieldsList = getUniqueFields( formEl.querySelectorAll(fieldsStringSelector) );\n\n    return Promise.all( fieldsList.map(fieldEl => {\n        \n        return isValidField( fieldEl, fieldOptions, validationRules, validationErrors );\n\n    }) ).then(list => {\n\n        let areAllFieldsValid = list.filter(fieldObj => !fieldObj.result).length === 0;\n        obj.result = areAllFieldsValid;\n        obj.fields = list;\n\n        return obj;\n\n    });\n\n}\n","\nimport { excludeSelector, mergeObjects } from './modules/helpers';\nimport { options }              from './modules/options';\nimport { validationRules }      from './modules/validationRules';\nimport { validationErrors }     from './modules/validationErrors';\n\n// CONSTRUCTOR FUNCTION & PUBLIC METHODS\nimport { constructorFn }        from './modules/constructor';\nimport { destroy }              from './modules/destroy';\nimport { init }                 from './modules/init';\nimport { validateField }        from './modules/validateField';\nimport { validateForm }         from './modules/validateForm';\n\nconst version = '4.0.1';\n\nclass Form {\n\n    constructor( formEl, optionsObj ){\n        constructorFn(this, formEl, optionsObj);\n    }\n\n    destroy(){\n        destroy(this.formEl, this.options);\n    }\n    \n    getFormData(){\n        const formFieldsEl = this.formEl.querySelectorAll('input, select, textarea'),\n              filteredFields = Array.from( formFieldsEl ).filter( elem => elem.matches(excludeSelector) );\n        return this.options.formOptions.getFormData(filteredFields);\n    }\n\n    init(){\n        return init(this.formEl);\n    }\n\n    validateField( fieldEl, fieldOptions = {} ){\n        fieldEl = (typeof fieldEl === 'string' ? this.formEl.querySelector(fieldEl) : fieldEl);\n        const options = mergeObjects({}, this.options, {fieldOptions});\n        return validateField(fieldEl, options, this.validationRules, this.validationErrors);\n    }\n\n    validateForm( fieldOptions = {} ){\n        const options = mergeObjects({}, this.options, {fieldOptions});\n        return validateForm(this.formEl, options, this.validationRules, this.validationErrors);\n    }\n    \n    static addValidationErrors( errorsObj ){\n        this.prototype.validationErrors = mergeObjects({}, this.prototype.validationErrors, errorsObj);\n    }\n\n    static addValidationRules( rulesObj ){\n        this.prototype.validationRules = mergeObjects({}, this.prototype.validationRules, rulesObj);\n    }\n    \n    static setOptions( optionsObj ){\n        this.prototype.options = mergeObjects({}, this.prototype.options, optionsObj);\n    }\n\n}\n\nForm.prototype.isInitialized = false;\nForm.prototype.options = options;\nForm.prototype.validationErrors = validationErrors;\nForm.prototype.validationRules = validationRules;\nForm.prototype.version = version;\n\nexport default Form;\n","\nimport { checkFormEl, isNodeList, mergeObjects }   from './helpers';\nimport { formStartup }                             from './formStartup';\n\nexport function constructorFn( self, formEl, optionsObj ){\n\n    let argsL = arguments.length,\n        checkFormElem = checkFormEl(formEl);\n\n    if( argsL === 0 || (argsL > 0 && !formEl) ){\n        throw new Error('First argument \"formEl\" is missing or falsy!');\n    }\n    if( isNodeList(formEl) ){\n        throw new Error('First argument \"formEl\" must be a single DOM node or a form CSS selector, not a NodeList!');\n    }\n    if( !checkFormElem.result ){\n        throw new Error('First argument \"formEl\" is not a DOM node nor a form CSS selector!');\n    }\n\n    self.formEl = checkFormElem.element;\n    self.formEl.formjs = self;\n    self.options = mergeObjects({}, self.constructor.prototype.options, optionsObj);\n\n    // BINDING CONTEXT FOR FUTURE EXECUTION\n    const cbList = [\n        // IN fieldOptions\n        'beforeValidation',\n        // IN formOptions\n        'beforeSend',\n        'getFormData'\n    ];\n    cbList.forEach(cbName => {\n        let optionType = self.options.formOptions[cbName] ? 'formOptions' : 'fieldOptions',\n            cbOpt = self.options[optionType][cbName];\n\n        if( cbOpt ){\n            self.options[optionType][cbName] = ( Array.isArray(cbOpt) ? cbOpt.map(cbFn => cbFn.bind(self)) : cbOpt.bind(self) );\n        }\n    });\n\n    formStartup( self.formEl, self.options );\n    \n}\n","\nimport { customEvents } from './helpers';\nimport { listenerCallbacks } from './listenerCallbacks';\n\n\nexport function destroy( formEl, options ){\n\n    if( options.fieldOptions.strictHtmlValidation ){\n        formEl.removeEventListener('keypress', listenerCallbacks.keypressMaxlength, false);\n        formEl.removeEventListener('input', listenerCallbacks.dataTypeNumber, false);\n    }\n\n    if( options.fieldOptions.preventPasteFields ){\n        formEl.removeEventListener('paste', listenerCallbacks.pastePrevent, false);\n    }\n\n    if( options.formOptions.handleSubmit ){\n        formEl.removeEventListener('submit', listenerCallbacks.submit);\n    }\n\n    options.fieldOptions.validateOnEvents.split(' ').forEach(function( eventName ){\n        let useCapturing = (eventName === 'blur' ? true : false);\n        formEl.removeEventListener(eventName, listenerCallbacks.validation, useCapturing);\n    });\n\n    formEl.removeEventListener(customEvents.field.validation, listenerCallbacks.validationEnd, false);\n\n    delete formEl.formjs;\n    \n}\n","\nimport { customEvents, dispatchCustomEvent, removeClass } from './helpers';\nimport { isValidField } from './isValidField';\nimport { isValidForm } from './isValidForm';\n\nexport function validateField( fieldEl, options, validationRules, validationErrors ){\n\n    const formEl = fieldEl.closest('form');\n    const skipUIfeedback = options.fieldOptions.skipUIfeedback;\n    \n    return new Promise(function(resolve){\n\n        const prom = isValidField( fieldEl, options.fieldOptions, validationRules, validationErrors );\n        resolve( prom );\n\n    }).then(obj => {\n\n        return new Promise(resolve => {\n            if( obj.fieldEl ){\n\n                dispatchCustomEvent( obj.fieldEl, customEvents.field.validation, obj, { bubbles: false } );\n                dispatchCustomEvent( formEl, customEvents.field.validation, obj );\n\n                if( options.fieldOptions.onValidationCheckAll && obj.result ){\n                    // FORCE skipUIfeedback TO true\n                    options.fieldOptions.skipUIfeedback = true;\n                    resolve(\n                        isValidForm( formEl, options.fieldOptions, validationRules, validationErrors )\n                            .then(dataForm => {\n                                const clMethodName = dataForm.result ? 'add' : 'remove';\n\n                                formEl.classList[clMethodName]( options.formOptions.cssClasses.valid );\n                                dispatchCustomEvent( formEl, customEvents.form.validation, dataForm );\n                                // RESTORE skipUIfeedback TO THE ORIGINAL VALUE\n                                options.fieldOptions.skipUIfeedback = skipUIfeedback;\n\n                                return obj;\n                            })\n                    );\n                } else if( !obj.result ){\n                    removeClass( formEl, options.formOptions.cssClasses.valid );\n                }\n            }\n            resolve( obj );\n        });\n        \n    });\n    \n}\n","\nimport { customEvents, dispatchCustomEvent } from './helpers';\nimport { listenerCallbacks } from './listenerCallbacks';\nimport { isValidForm } from './isValidForm';\n\nexport function validateForm( formEl, options, validationRules, validationErrors ){\n\n    return new Promise(function(resolve){\n\n        const prom = isValidForm( formEl, options.fieldOptions, validationRules, validationErrors );\n        resolve(prom);\n\n    }).then(data => {\n\n        const clMethodName = data.result ? 'add' : 'remove';\n        formEl.classList[clMethodName]( options.formOptions.cssClasses.valid );\n        listenerCallbacks.validationEnd( {data} );\n        dispatchCustomEvent( formEl, customEvents.form.validation, data );\n\n        return data;\n\n    });\n    \n}\n","\nexport const validationErrors = {\n\n    email: function ( string ) {\n        const obj = {};\n\n        if( string.indexOf('@') === -1 ){\n\n            // @ IS MISSING\n            obj.missingAtChar = true;\n\n        } else {\n\n            let splitAt_at = string.split('@');\n            if( splitAt_at[0].length === 0 ){\n\n                // USER NAME IS MISSING\n                obj.missingUserName = true;\n\n            }\n\n            if( splitAt_at[1].length === 0 ){\n\n                // IS EMPTY AFTER @\n                obj.missingDomain = true;\n                obj.missingExtensionDot = true;\n                obj.missingExtension = true;\n\n            } else if( splitAt_at[1].indexOf('.') === -1 ) {\n\n                // DOT IS MISSING\n                obj.missingExtensionDot = true;\n                obj.missingExtension = true;\n\n            } else {\n\n                // EXTENSION MISSING OR NOT LONG ENOUGH\n                let splitAt_dot = splitAt_at[1].split('.'),\n                    extLength = splitAt_dot[1].length;\n                if( extLength === 0 ) {\n                    obj.missingExtension = true;\n                } else if( extLength < 2 ){\n                    obj.minlengthExtension = true;\n                }\n\n            }\n        }\n\n        return obj;\n\n    }\n\n}"],"names":["addClass","element","cssClasses","split","forEach","className","classList","add","checkFormEl","formEl","isString","isFormSelector","isDOMNode","document","querySelector","tagName","toLowerCase","result","customEvents","validation","submit","dispatchCustomEvent","elem","eventName","data","eventOptions","mergeObjects","bubbles","eventObj","Event","dispatchEvent","fieldsStringSelector","getSplitChar","string","splitChar","indexOf","getUniqueFields","nodeList","currentFieldName","currentFieldType","Array","from","filter","fieldEl","name","type","matches","node","Element","prototype","isPrototypeOf","isFieldForChangeEvent","isNodeList","NodeList","out","i","arguments","length","obj","key","isArray","Object","toString","call","isObject","hasOwnProperty","concat","slice","push","removeClass","remove","runFunctionsSequence","functionsList","stopConditionFn","reduce","acc","promiseFn","then","res","dataNew","Promise","resolve","dataList","serializeObject","constructor","keys","a","k","encodeURIComponent","join","toCamelCase","replace","all","letter","toUpperCase","validateFieldObjDefault","validateFormObjDefault","fields","defaultCallbacksInOptions","fieldOptions","beforeValidation","fieldObj","this","options","dirty","containerEl","closest","value","skipUIfeedback","pending","formOptions","getFormData","filteredFields","formData","isCheckbox","isRadio","isSelect","checked","checkboxes","querySelectorAll","field","checkedRadio","selectedOpts","option","selected","error","errorEmpty","errorRule","valid","focusOnRelated","handleFileUpload","handleValidation","maxFileSize","onValidationCheckAll","preventPasteFields","strictHtmlValidation","validateOnEvents","ajaxOptions","cache","credentials","headers","Content-Type","Accept","method","mode","redirect","timeout","url","location","href","ajaxSubmit","beforeSend","ajaxComplete","ajaxError","ajaxPending","ajaxSuccess","handleSubmit","validationRulesAttributes","checkbox","dataChecksEl","checks","attrValue","getAttribute","JSON","parse","checkedElLength","isMinOk","isMaxOk","errors","minChecks","maxChecks","e","Error","equalTo","checkFromEl","exactLength","valueLength","minlength","maxlength","file","MIMEtype","accept","RegExp","filesList","files","exceedMaxFileSize","size","isAcceptedFileType","test","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","stringLength","max","isDate","maxVal","reverse","min","minVal","pattern","fieldPattern","radio","fieldChecked","trim","requiredFrom","isValidValue","reqMoreEl","required","event","target","instance","formjs","formCssClasses","isAjaxForm","btnEl","eventPreventDefault","enableBtn","disabled","preventDefault","validateForm","formValidation","beforeSendData","stopExecution","formDataObj","callbacksBeforeSend","pop","timeoutTimer","isMultipart","body","formDataMultipart","FormData","append","idx","stringify","Headers","controller","AbortController","signal","window","setTimeout","abort","fetch","response","ok","reject","fetchMethod","get","contentType","headerOpt","getFetchMethod","catch","finally","clearTimeout","ajaxCall","listenerCallbacks","fieldValue","stopImmediatePropagation","valueReplaced","maxLength","keyPressed","which","keyCode","allowedKeys","self","isFieldForChangeEventBoolean","isReqFrom","isReqMore","findReqMoreEl","findReqFromEl","id","focus","validateField","realtedFieldEqualTo","fieldsArray","errorClasses","extraErrorClass","isChecks","empty","errorClassToRemove","formStartup","noValidate","addEventListener","useCapturing","init","formFields","map","isCheckboxOrRadio","getFilledFields","isInitialized","isValidField","validationRules","validationErrors","isRequired","isValidateIfFilled","rfsObject","dataObj","fieldType","fieldAttributes","attributes","sort","b","attrValidations","attrValidationsResult","attr","attrName","isAttrValueWithFn","isAttrNameWithFn","extraValObj","unshift","item","extraVal","fieldErrors","rule","isValid","isValidForm","fieldsList","list","areAllFieldsValid","Form","[object Object]","optionsObj","argsL","checkFormElem","cbList","cbName","optionType","cbOpt","cbFn","bind","constructorFn","removeEventListener","destroy","formFieldsEl","dataForm","clMethodName","errorsObj","rulesObj","email","missingAtChar","splitAt_at","missingUserName","missingDomain","missingExtensionDot","missingExtension","extLength","minlengthExtension","date","number","version"],"mappings":"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"}