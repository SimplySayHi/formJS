{"version":3,"file":"formjs-esm.min.js","sources":["../src/modules/version.js","../src/modules/helpers/addClass.js","../src/modules/helpers/isNodeList.js","../src/modules/helpers/removeClass.js","../src/modules/helpers/isDOMNode.js","../src/modules/helpers/checkFormEl.js","../src/modules/helpers/customEvents.js","../src/modules/helpers/mergeObjects.js","../src/modules/helpers/dispatchCustomEvent.js","../src/modules/helpers/fieldsStringSelector.js","../src/modules/helpers/finalizeFieldPromise.js","../src/modules/helpers/finalizeFormPromise.js","../src/modules/helpers/getDateAsNumber.js","../src/modules/helpers/getSplitChar.js","../src/modules/helpers/getUniqueFields.js","../src/modules/helpers/mergeValidateFieldDefault.js","../src/modules/helpers/isFieldForChangeEvent.js","../src/modules/helpers/runFunctionsSequence.js","../src/modules/helpers/serializeObject.js","../src/modules/helpers/toCamelCase.js","../src/modules/optionsUtils.js","../src/modules/helpers/checkDirtyField.js","../src/modules/options.js","../src/modules/validationRules.js","../src/modules/validationRules/date.js","../src/modules/validationRules/email.js","../src/modules/validationRules/number.js","../src/modules/validationRules/checkbox.js","../src/modules/validationRules/checks.js","../src/modules/validationRules/equalTo.js","../src/modules/validationRules/exactLength.js","../src/modules/validationRules/file.js","../src/modules/validationRules/length.js","../src/modules/validationRules/max.js","../src/modules/validationRules/maxlength.js","../src/modules/validationRules/min.js","../src/modules/validationRules/minlength.js","../src/modules/validationRules/pattern.js","../src/modules/validationRules/radio.js","../src/modules/listenerCallbacks/dataTypeNumber.js","../src/modules/listenerCallbacks/keypressMaxlength.js","../src/modules/listenerCallbacks/pastePrevent.js","../src/modules/ajaxCall.js","../src/modules/listenerCallbacks/submit.js","../src/modules/listenerCallbacks/validation.js","../src/modules/listenerCallbacks/validationEnd.js","../src/modules/formStartup.js","../src/modules/checkFilledFields.js","../src/modules/helpers/getFilledFields.js","../src/modules/checkFieldValidity.js","../src/modules/isValid.js","../src/modules/checkFormValidity.js","../src/modules/helpers/mergeValidateFormDefault.js","../src/index.js","../src/modules/constructor.js","../src/modules/destroy.js","../src/modules/helpers/excludeSelector.js"],"sourcesContent":["\nexport const version = '5.0.0';\n","\nexport const addClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.add( className );\n    });\n}\n","\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList );\n}\n","\nexport const removeClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.remove( className );\n    });\n}\n","\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node );\n}\n","\nimport { isDOMNode } from './isDOMNode';\n\nexport const checkFormEl = formEl => {\n    let isString = typeof formEl,\n        isValidNodeSelector = isString === 'string' && isDOMNode(document.querySelector(formEl)),\n        isFormSelector = isValidNodeSelector && document.querySelector(formEl).tagName.toLowerCase() === 'form',\n        obj = {\n            result: isDOMNode(formEl) || isFormSelector,\n            element: (isString === 'string' ? document.querySelector(formEl) : formEl)\n        };\n\n    return obj;\n}\n","\nexport const customEvents = {\n    field: {\n        validation: 'fjs.field:validation'\n    },\n    form: {\n        submit:     'fjs.form:submit',\n        validation: 'fjs.form:validation'\n    }\n}\n","\nexport const mergeObjects = function( out = {} ){\n    for(let i=1; i<arguments.length; i++){\n        let obj = arguments[i];\n\n        if(!obj){ continue; }\n\n        for(let key in obj){\n            let isArray = Object.prototype.toString.call(obj[key]) === \"[object Array]\";\n            let isObject = Object.prototype.toString.call(obj[key]) === \"[object Object]\";\n\n            // COPY ONLY ENUMERABLE PROPERTIES\n            if( obj.hasOwnProperty(key) ){\n                if( isArray ){\n\n                    if( typeof out[key] === 'undefined' ){\n                        out[key] = [];\n                    }\n                    out[key] = out[key].concat( obj[key].slice(0) );\n\n                } else if( isObject ){\n\n                    out[key] = mergeObjects(out[key], obj[key]);\n\n                } else {\n\n                    // * STRING | NUMBER | BOOLEAN | FUNCTION\n                    if( Array.isArray(out[key]) ){\n                        // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                        out[key].push(obj[key]);\n                    } else {\n                        out[key] = obj[key];\n                    }\n\n                }\n            }\n        }\n    }\n\n    return out;\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const dispatchCustomEvent = ( elem, eventName, eventOptions ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions);\n    const eventObj = new CustomEvent(eventName, eventOptions);\n    elem.dispatchEvent( eventObj );\n}\n","\nexport const fieldsStringSelector = 'input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"hidden\"]), select, textarea'\n","\nexport const finalizeFieldPromise = obj => {\n    if( obj.result ){\n        return Promise.resolve();\n    }\n    return Promise.reject(obj.errors);\n}\n","\nexport const finalizeFormPromise = obj => {\n    if( obj.result ){\n        return Promise.resolve(obj.fields);\n    }\n    return Promise.reject(obj.fields);\n}\n","\nimport { getSplitChar } from './getSplitChar';\n\nconst formatMap = {\n    'YYYY-MM-DD': function(dateArray){\n        return dateArray;\n    },\n    'MM-DD-YYYY': function(dateArray){\n        return [dateArray[2], dateArray[0], dateArray[1]];\n    },\n    'DD-MM-YYYY': function(dateArray){\n        return dateArray.reverse();\n    }\n};\n\nexport const getDateAsNumber = ( dateString, dateFormat ) => {\n    dateFormat = dateFormat || 'YYYY-MM-DD';\n    const splitChar = getSplitChar(dateString);\n\n    if( dateFormat.indexOf(splitChar) < 0 ){\n        return;\n    }\n\n    dateFormat = dateFormat.replace(/[^YMD]/g, '-');\n    dateString = dateString.split(splitChar);\n    dateString = formatMap[dateFormat](dateString).join('');\n    \n    return dateString;\n}\n","\nexport const getSplitChar = string => {\n    // MATCH ANY NON-DIGIT CHAR\n    const separator = string.match(/\\D/);\n    return (separator && separator.length > 0) ? separator[0] : null;\n}\n","\nexport const getUniqueFields = nodeList => {\n\n    let currentFieldName = '',\n        currentFieldType = '';\n\n    return Array.from( nodeList ).filter(fieldEl => {\n        const name = fieldEl.name,\n              type = fieldEl.type;\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false;\n        }\n        \n        if( !fieldEl.matches('[data-required-from]') ){\n            currentFieldName = name;\n            currentFieldType = type;\n        }\n        return true;\n    });\n    \n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const mergeValidateFieldDefault = obj => {\n    return mergeObjects({}, { result: false, fieldEl: null }, obj);\n}\n","\nexport const isFieldForChangeEvent = fieldEl => {\n    return fieldEl.matches('select, [type=\"radio\"], [type=\"checkbox\"], [type=\"file\"]');\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const runFunctionsSequence = ( { functionsList = [], data = {}, stopConditionFn = () => false } = {} ) => {\n    return functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1]);\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res);\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result);\n                    return res;\n                });\n        });\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList);\n}\n","\nexport const serializeObject = obj => {\n    var objToString = (\n            (obj && typeof obj === 'object' && obj.constructor === Object) ? \n            Object.keys(obj)\n                .reduce((a,k) => {\n                    a.push(k+'='+encodeURIComponent(obj[k]));\n                    return a\n                },[]).join('&') : \n            obj\n    );\n    return objToString;\n}\n","\nexport const toCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase(); });\n}\n","\nimport { addClass, checkDirtyField } from './helpers';\n\nexport const defaultCallbacksInOptions = {\n    fieldOptions: {\n\n        beforeValidation: function beforeValidationDefault ( fieldObj ) {\n\n            const fieldOptions = this.options.fieldOptions;\n\n            checkDirtyField( fieldObj.fieldEl, fieldOptions );\n            if( !fieldOptions.skipUIfeedback ){\n                addClass( fieldObj.fieldEl.closest( fieldOptions.questionContainer ), fieldOptions.cssClasses.pending );\n            }\n\n        }\n\n    },\n    formOptions: {\n\n        getFormData: function getFormDataDefault ( filteredFields ) {\n\n            const formData = {},\n                  formEl = this.formEl;\n\n            filteredFields.forEach(fieldEl => {\n                const isCheckbox = fieldEl.type === 'checkbox',\n                      isRadio = fieldEl.type === 'radio',\n                      isSelect = fieldEl.matches('select'),\n                      name = fieldEl.name;\n                let value = fieldEl.value;\n                                \n                if( isCheckbox ) {\n                    \n                    value = fieldEl.checked;\n                    let checkboxes = Array.from( formEl.querySelectorAll('[name=\"'+ name +'\"]') );\n                    if( checkboxes.length > 1 ){\n\n                        value = [];\n                        let checkedElems = checkboxes.filter(field => field.checked);\n                        checkedElems.forEach(fieldEl => {\n                            value.push( fieldEl.value );\n                        });\n\n                    }\n                        \n                } else if( isRadio ){\n                    \n                    const checkedRadio = formEl.querySelector('[name=\"'+ name +'\"]:checked');\n                    value = (checkedRadio === null ? null : checkedRadio.value);\n                    \n                } else if( isSelect ){\n\n                    const selectedOpts = Array.from( fieldEl.options ).filter(option => option.selected);\n                    if( selectedOpts.length > 1 ){\n\n                        value = [];\n                        selectedOpts.forEach(fieldEl => {\n                            value.push( fieldEl.value );\n                        });\n\n                    }\n                }\n\n                formData[ name ] = value;\n            });\n\n            return formData;\n\n        }\n\n    }\n}\n","\nimport { addClass } from './addClass';\nimport { isNodeList } from './isNodeList';\nimport { removeClass } from './removeClass';\n\nexport const checkDirtyField = ( fields, fieldOptions ) => {\n\n    fields = isNodeList(fields) ? Array.from( fields ) : [fields];\n    fields.forEach(fieldEl => {\n        if( fieldEl.type !== 'checkbox' && fieldEl.type !== 'radio' ){\n            const containerEl = fieldEl.closest( fieldOptions.questionContainer ) || fieldEl;\n            if( fieldEl.value ){\n                addClass( containerEl, fieldOptions.cssClasses.dirty );\n            } else {\n                removeClass( containerEl, fieldOptions.cssClasses.dirty );\n            }\n        }\n    });\n    \n}\n","\nimport { defaultCallbacksInOptions } from './optionsUtils';\n\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [defaultCallbacksInOptions.fieldOptions.beforeValidation],\n        cssClasses: {\n            dirty:              'is-dirty',\n            error:              'has-error',\n            errorEmpty:         'has-error-empty',\n            errorRule:          'has-error-rule',\n            pending:            'is-pending',\n            valid:              'is-valid'\n        },\n        focusOnRelated:         true,\n        handleFileUpload:       true,\n        onValidationCheckAll:   false,\n        preventPasteFields:     '[type=\"password\"], [data-equal-to]',\n        questionContainer:      '[data-formjs-question]',\n        skipUIfeedback:         false,\n        strictHtmlValidation:   true,\n        validateOnEvents:       'input change'\n    },\n\n    formOptions: {\n        ajaxOptions:            {\n            cache:              'no-store',\n            credentials:        'same-origin',\n            headers: {\n                                'Content-Type': 'application/json',\n                                'Accept':       'application/json'\n            },\n            method:             'POST',\n            mode:               'same-origin',\n            redirect:           'follow',\n            timeout:            0,\n            url:                location.href\n        },\n        ajaxSubmit:             true,\n        beforeSend:             [],\n        cssClasses: {\n            ajaxComplete:       'ajax-complete',\n            ajaxError:          'ajax-error',\n            ajaxPending:        'ajax-pending',\n            ajaxSuccess:        'ajax-success',\n            submit:             'is-submitting',\n            valid:              'is-valid'\n        },\n        getFormData:            defaultCallbacksInOptions.formOptions.getFormData,\n        handleSubmit:           true\n    }\n    \n}\n","\nimport { date }         from './validationRules/date';\nimport { email }        from './validationRules/email';\nimport { number }       from './validationRules/number';\n\nimport { checkbox }     from './validationRules/checkbox';\nimport { equalTo }      from './validationRules/equalTo';\nimport { exactLength }  from './validationRules/exactLength';\nimport { file }         from './validationRules/file';\nimport { length }       from './validationRules/length';\nimport { max }          from './validationRules/max';\nimport { maxlength }    from './validationRules/maxlength';\nimport { min }          from './validationRules/min';\nimport { minlength }    from './validationRules/minlength';\nimport { pattern }      from './validationRules/pattern';\nimport { radio }        from './validationRules/radio';\n\nexport const validationRules = {\n    date,\n    email,\n    number,\n\n    checkbox,\n    equalTo,\n    exactLength,\n    file,\n    length,\n    max,\n    maxlength,\n    min,\n    minlength,\n    pattern,\n    radio\n}\n","\n/*\n    DATE AS ISO 8601 DATE FORMAT:\n    YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n*/\n\nexport const date = function( string ){\n    return {\n        result: /^((((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13578]|1[02])[ \\/\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13456789]|1[012])[ \\/\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.]02[ \\/\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ \\/\\-.]02[ \\/\\-.]29))$/g.test( string )\n    };\n}\n","\n// https://regex101.com/r/cdlyJy/3\n\nexport const email = function( string ){\n    return {\n        result: /^[a-zA-Z_-]([\\w.-]?[a-zA-Z0-9])*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?){2,})+$/.test( string )\n    };\n}\n","\n/*\n    ALL NUMBERS ( INTEGERS AND FLOATING )\n    VALID NUMBERS: 123 | 123.456 | .123\n*/\n\nexport const number = function( string ){\n    return {\n        result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n    };\n}","\nimport { checks } from './checks';\n\nexport const checkbox = function( value, fieldEl ){\n    const dataChecksEl = fieldEl.closest('form').querySelector('[name=\"' + fieldEl.name + '\"][data-checks]');\n    return dataChecksEl ? checks(dataChecksEl) : { result: fieldEl.checked };\n}\n","\nexport const checks = function( fieldEl ){\n    const attrValue = JSON.parse( fieldEl.getAttribute('data-checks') ),\n          checkedElLength = fieldEl.closest('form').querySelectorAll('[name=\"' + fieldEl.name + '\"]:checked').length,\n          isMinOk = checkedElLength >= attrValue[0],\n          isMaxOk = checkedElLength <= attrValue[1],\n          obj = { result: isMinOk && isMaxOk };\n\n    if( !obj.result ){\n        obj.errors = { checks: true };\n        if( !isMinOk ){ obj.errors.minChecks = true; }\n        if( !isMaxOk ){ obj.errors.maxChecks = true; }\n    }\n\n    return obj;\n}\n","\nexport const equalTo = function( value, fieldEl ){\n    const checkFromEl = fieldEl.closest('form').querySelector( '[name=\"' + fieldEl.getAttribute('data-equal-to') + '\"]' );\n    return { result: value === checkFromEl.value };\n}\n","\nexport const exactLength = function( value, fieldEl ){\n    const valueLength = value.length,\n          exactLength = fieldEl.getAttribute('data-exact-length') * 1,\n          obj = { result: valueLength === exactLength };\n\n    if( !obj.result ){\n        obj.errors = {};\n        if( valueLength < exactLength ){ obj.errors.minlength = true; }\n        else { obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nexport const file = function( value, fieldEl ){\n    const maxFileSize = (fieldEl.getAttribute('data-max-file-size') || 0) * 1,\n          MIMEtype = fieldEl.accept ? new RegExp(fieldEl.accept.replace( '*', '[^\\\\/,]+' )) : null,\n          filesList = Array.from(fieldEl.files),\n          obj = { result: true };\n\n    filesList.forEach(file => {\n        const exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize,\n              isAcceptedFileType = MIMEtype !== null ? MIMEtype.test(file.type) : true;\n\n        if( exceedMaxFileSize || !isAcceptedFileType ){\n            obj.result = false;\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {};\n            }\n            if( exceedMaxFileSize ){ obj.errors.maxFileSize = true; }\n            if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true; }\n\n        }\n    });\n\n    return obj;\n}\n","\nexport const length = function( value, fieldEl ){\n    const valueL = value.length,\n          attrValue = JSON.parse( fieldEl.getAttribute('data-length') ),\n          isMinlengthOk = valueL >= attrValue[0],\n          isMaxlengthOk = valueL <= attrValue[1],\n          obj = { result: isMinlengthOk && isMaxlengthOk };\n\n    if( !obj.result ){\n        obj.errors = {};\n        if( !isMinlengthOk ){ obj.errors.minlength = true; }\n        if( !isMaxlengthOk ){ obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const max = function( value, fieldEl ){\n    let maxVal = fieldEl.max;\n    const dateFormat = fieldEl.getAttribute('data-date-format');\n    \n    if( fieldEl.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat );\n        maxVal = maxVal.split('-').join('');\n    }\n\n    value = value * 1;\n    maxVal = maxVal * 1;\n    \n    return { result: value <= maxVal };\n}\n","\nexport const maxlength = function( value, fieldEl ){\n    return { result: value.length <= fieldEl.maxLength * 1 };\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const min = function( value, fieldEl ){\n    let minVal = fieldEl.min;\n    const dateFormat = fieldEl.getAttribute('data-date-format');\n    \n    if( fieldEl.type === 'date' || fieldEl.getAttribute('data-date-format') ){\n        value = getDateAsNumber( value, dateFormat );\n        minVal = minVal.split('-').join('');\n    }\n\n    value = value * 1;\n    minVal = minVal * 1;\n    \n    return { result: value >= minVal };\n}\n","\nexport const minlength = function( value, fieldEl ){\n    return { result: value.length >= fieldEl.minLength * 1 };\n}\n","\nexport const pattern = function( value, fieldEl ){\n    return { result: new RegExp(fieldEl.pattern).test(value) };\n}\n","\nexport const radio = function( value, fieldEl ){\n    const fieldChecked = fieldEl.closest('form').querySelector( '[name=\"'+ fieldEl.name +'\"]:checked' ),\n          isValid = fieldChecked !== null && fieldChecked.value.trim().length > 0;\n\n    return { result: isValid };\n}\n","\nexport const dataTypeNumber = function( event ){\n\n    const fieldEl = event.target;\n    \n    if( fieldEl.matches('[data-type=\"number\"]') ){\n        let fieldValue = fieldEl.value;\n        const hasInvalidChars = /[^\\d.,+\\-]/.test(fieldValue);\n        \n        if( hasInvalidChars ){\n            event.stopImmediatePropagation();\n            let valueReplaced = fieldValue.replace(/[^\\d.,+\\-]/g, '');\n            fieldEl.value = valueReplaced;\n        }\n    }\n\n}\n","\nexport const keypressMaxlength = function( event ){\n\n    const fieldEl = event.target;\n    \n    if( fieldEl.matches( '[maxlength]' ) ){\n        const maxLength = fieldEl.maxLength * 1,\n              keyPressed = event.which || event.keyCode,\n              allowedKeys = [8, 37, 38, 39, 46];\n\n        if( fieldEl.value.length >= maxLength && allowedKeys.indexOf(keyPressed) === -1 ){\n            return false;\n        }\n    }\n\n}\n","\nexport const pastePrevent = function( event ){\n\n    const fieldEl = event.target;\n    const fieldOptions = fieldEl.closest('form').formjs.options.fieldOptions;\n\n    if( fieldEl.matches( fieldOptions.preventPasteFields ) ){     \n        event.preventDefault();\n    }\n\n}\n","\nimport { addClass, mergeObjects, removeClass, serializeObject } from './helpers';\n\nconst getFetchMethod = (response, options) => {\n    const accept = options.headers.get('Accept'),\n          contentType = response.headers.get('Content-Type'),\n          headerOpt = accept || contentType || '';\n\n    if( headerOpt.indexOf('application/json') > -1 || headerOpt === '' ){\n        return 'json';\n    } else if( headerOpt.indexOf('text/') > -1 ){\n        return 'text';\n    } else {\n        return 'blob';\n    }\n};\n\nexport function ajaxCall( formEl, formDataObj, options ){\n\n    let timeoutTimer;\n    const ajaxOptions = mergeObjects( {}, options.formOptions.ajaxOptions ),\n          isMultipart = ajaxOptions.headers['Content-Type'] === 'multipart/form-data';\n\n    ajaxOptions.body = formDataObj;\n    \n    // POST A FormData OBJECT ( multipart )\n    if( isMultipart && options.fieldOptions.handleFileUpload ){\n        let formDataMultipart = new FormData();\n        \n        for(let key in ajaxOptions.body){\n            formDataMultipart.append( key, ajaxOptions.body[key] );\n        }\n        \n        Array.from( formEl.querySelectorAll('[type=\"file\"]') ).forEach(field => {\n            Array.from(field.files).forEach((file, idx) => {\n                const name = field.name+'['+ idx +']';\n                formDataMultipart.append( name, file, file.name );\n            });\n        });\n        \n        ajaxOptions.body = formDataMultipart;\n    }\n\n    if( ajaxOptions.method === 'GET' ){\n\n        // FETCH WITH \"GET\" METHOD CAN'T HAVE \"body\". SO IT IS APPENDED TO THE URL\n        ajaxOptions.url += ( /\\?/.test(ajaxOptions.url) ? '&' : '?' ) + serializeObject( ajaxOptions.body );\n        delete ajaxOptions.body;\n\n    } else {\n\n        if( ajaxOptions.headers['Content-Type'].indexOf('application/x-www-form-urlencoded') > -1 ){\n            // POST A NORMAL FORM\n            ajaxOptions.body = serializeObject( ajaxOptions.body );\n        } else if( !isMultipart ){\n            // POST A JSON STRING\n            ajaxOptions.body = JSON.stringify(ajaxOptions.body);\n        }\n\n    }\n\n    ajaxOptions.headers = new Headers( ajaxOptions.headers );\n\n    if ( ajaxOptions.timeout > 0 ) {\n        const controller = new AbortController(),\n              signal = controller.signal;\n\n        ajaxOptions.signal = signal;\n        timeoutTimer = window.setTimeout(() => {\n            controller.abort();\n        }, ajaxOptions.timeout);\n    }\n\n    return fetch(ajaxOptions.url, ajaxOptions)\n        .then(response => {\n            if( !response.ok ){\n                return Promise.reject(response);\n            }\n            const fetchMethod = getFetchMethod(response, ajaxOptions);\n            return response[fetchMethod]();\n        })\n        .then(data => {\n            addClass( formEl, options.formOptions.cssClasses.ajaxSuccess );\n            return data;\n        })\n        .catch(error => {\n            addClass( formEl, options.formOptions.cssClasses.ajaxError );\n            return Promise.reject(error);\n        })\n        .finally(() => {\n            if( timeoutTimer ){\n                window.clearTimeout( timeoutTimer );\n            }\n            removeClass( formEl, options.formOptions.cssClasses.submit + ' ' + options.formOptions.cssClasses.ajaxPending );\n            addClass( formEl, options.formOptions.cssClasses.ajaxComplete );\n            formEl.querySelector('[type=\"submit\"]').disabled = false;\n        });\n\n}\n","\nimport { addClass, customEvents, dispatchCustomEvent, removeClass, runFunctionsSequence } from '../helpers';\nimport { ajaxCall } from '../ajaxCall';\n\nexport function submit( event ){\n\n    const formEl = event.target,\n          instance = formEl.formjs,\n          options = instance.options,\n          formCssClasses = options.formOptions.cssClasses,\n          isAjaxForm = options.formOptions.ajaxSubmit,\n          btnEl = formEl.querySelector('[type=\"submit\"]'),\n          eventPreventDefault = ( enableBtn = true ) => {\n              if( btnEl && enableBtn ){ btnEl.disabled = false; }\n              if( event ){ event.preventDefault(); }\n          };\n\n    if( isAjaxForm ){\n        eventPreventDefault(false);\n    }\n\n    if( btnEl ){\n        if( btnEl.disabled ){\n            eventPreventDefault(false);\n            return false;\n        }\n        btnEl.disabled = true;\n    }\n\n    removeClass( formEl, (formCssClasses.ajaxComplete + ' ' + formCssClasses.ajaxError + ' ' + formCssClasses.ajaxSuccess) );\n    addClass( formEl, formCssClasses.submit );\n\n    instance.validateForm()\n        .then(fields => {\n\n            const beforeSendData = {\n                stopExecution: false,\n                formData: isAjaxForm ? instance.getFormData() : null\n            };\n\n            const rfsObject = {\n                  functionsList: options.formOptions.beforeSend,\n                  data: beforeSendData,\n                  stopConditionFn: function(data){ return data.stopExecution; }\n            };\n            return runFunctionsSequence(rfsObject);\n\n        }).then(dataList => {\n\n            if( dataList.filter(data => data.stopExecution).length > 0 ){\n                eventPreventDefault();\n                return false;\n            }\n            \n            if( isAjaxForm ){\n                const formData = dataList.pop().formData;\n                addClass( formEl, formCssClasses.ajaxPending );\n                dispatchCustomEvent( formEl, customEvents.form.submit, { detail: ajaxCall( formEl, formData, options ) } );\n            }\n\n        })\n        .catch(fields => {\n            eventPreventDefault();\n            removeClass( formEl, formCssClasses.submit );\n        });\n    \n}\n","\nimport { fieldsStringSelector, mergeValidateFieldDefault, isFieldForChangeEvent } from '../helpers';\n\nexport const validation = function( event ){\n\n    const isChangeEvent = event.type === 'change',\n          fieldEl = event.target,\n          self = fieldEl.closest('form').formjs;\n\n    if( fieldEl.matches( fieldsStringSelector ) ){\n        const isFieldForChangeEventBoolean = isFieldForChangeEvent(fieldEl);\n        \n        if(\n            (isFieldForChangeEventBoolean && isChangeEvent) ||\n            (!isFieldForChangeEventBoolean && !isChangeEvent)\n        ){\n            \n            return self.validateField( fieldEl )\n                .then(() => {\n                    const type = fieldEl.type,\n                          realtedFieldEqualTo = fieldEl.closest('form').querySelector('[data-equal-to=\"'+ fieldEl.name +'\"]');\n\n                    if(\n                        // FIELD IS ( required OR data-validate-if-filled ) AND RELATED FIELD data-equal-to HAS A VALUE\n                        (fieldEl.required || fieldEl.matches('[data-validate-if-filled]')) && \n                        !(type === 'checkbox' || type === 'radio') && \n                        realtedFieldEqualTo && realtedFieldEqualTo.value.trim() !== ''\n                    ){\n                        self.validateField( realtedFieldEqualTo ).catch(errors => {});\n                    }\n\n                    return mergeValidateFieldDefault({ result: true, fieldEl });\n                })\n                .catch(errors => mergeValidateFieldDefault({fieldEl, errors}));\n\n        }\n    }\n    \n}\n","\nimport { addClass, fieldsStringSelector, removeClass } from '../helpers';\n\nexport const validationEnd = function( event ){\n\n    const fieldsArray = event.detail.fieldEl ? [event.detail] : event.detail.fields,\n          options = fieldsArray[0].fieldEl.closest('form').formjs.options.fieldOptions;\n\n    fieldsArray.forEach(obj => {\n        const fieldEl = obj.fieldEl;\n        if( fieldEl.matches( fieldsStringSelector ) ){\n            const containerEl = fieldEl.closest( options.questionContainer ),\n                isReqFrom = fieldEl.matches('[data-required-from]'),\n                reqMoreEl = document.querySelector( fieldEl.getAttribute('data-required-from') );\n\n            if( containerEl !== null ){\n                removeClass( containerEl, options.cssClasses.pending );\n            }\n\n            if( containerEl !== null && !options.skipUIfeedback ){\n\n                if( obj.result ){\n\n                    if( !isReqFrom || (isReqFrom && reqMoreEl.checked) ){\n                        // IF FIELD IS VALID\n                        const errorClasses = options.cssClasses.error + ' ' + options.cssClasses.errorEmpty + ' ' + options.cssClasses.errorRule;\n                        removeClass( containerEl, errorClasses );\n                        addClass( containerEl, options.cssClasses.valid );\n                    }\n\n                } else {\n\n                    // IF FIELD IS NOT VALID\n                    let extraErrorClass = options.cssClasses.errorRule;\n\n                    // HANDLE CASE OF FIELD data-checks\n                    const isChecks = fieldEl.matches('[data-checks]'),\n                          checkedElLength = (isChecks ? containerEl.querySelectorAll('[name=\"' + fieldEl.name + '\"]:checked').length : 0);\n\n                    if( (!isChecks && (obj.errors && obj.errors.empty)) || (isChecks && checkedElLength === 0) ){\n                        extraErrorClass = options.cssClasses.errorEmpty;\n                    }\n\n                    const errorClasses = options.cssClasses.error + ' ' + extraErrorClass,\n                          errorClassToRemove = options.cssClasses.errorEmpty + ' ' + options.cssClasses.errorRule;\n                    removeClass( containerEl, options.cssClasses.valid + ' ' + errorClassToRemove );\n                    addClass( containerEl, errorClasses );\n\n                }\n            }\n        }\n    });\n\n}\n","\nimport { customEvents } from './helpers';\nimport { keypressMaxlength, dataTypeNumber, pastePrevent, submit, validation, validationEnd } from './listenerCallbacks';\n\nexport function formStartup( formEl, options ){\n\n    formEl.noValidate = true;\n\n    const fieldOptions = options.fieldOptions,\n          formOptions = options.formOptions;\n        \n    // VALIDATION WITH ATTRIBUTES LIKE HTML ONES ( ALSO FOR BUG FIXING, EG: maxlength IN ANDROID )\n    if( fieldOptions.strictHtmlValidation ){\n        \n        // maxlength\n        // MAXLENGTH IS BUGGY IN ANDROID BROWSERS\n        formEl.addEventListener('keypress', keypressMaxlength, false);\n\n        // data-type=\"number\"\n        // SINCE VALIDATING type=\"number\" WITH NON NUMERIC CHARS WILL RETURN EMPTY STRING IN SOME BROWSERS ( EG: FIREFOX )\n        formEl.addEventListener('input', dataTypeNumber, false);\n        \n    }\n    \n    if( fieldOptions.preventPasteFields && formEl.querySelectorAll( fieldOptions.preventPasteFields ).length ){\n        // INIT EVENT LISTENER FOR \"PASTE\" EVENT TO PREVENT IT ON SPECIFIED FIELDS\n        formEl.addEventListener('paste', pastePrevent, false);\n    }\n\n    // INIT EVENTS LISTENER ( AS IN fieldOptions )\n    fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n        const useCapturing = eventName === 'blur' ? true : false;\n        formEl.addEventListener(eventName, validation, useCapturing);\n    });\n\n    formEl.addEventListener(customEvents.field.validation, validationEnd, false);\n    \n    // HANDLE FORM SUBMIT\n    if( formOptions.handleSubmit ){\n        // INIT FORM SUBMIT ( DEFAULT AND AJAX )\n        formEl.addEventListener('submit', submit);\n\n        if( formOptions.ajaxSubmit ){\n            if( formEl.getAttribute('enctype') ){\n                formOptions.ajaxOptions.headers['Content-Type'] = formEl.getAttribute('enctype');\n            }\n\n            if( formEl.getAttribute('method') ){\n                formOptions.ajaxOptions.method = formEl.getAttribute('method').toUpperCase();\n            }\n\n            if( formEl.getAttribute('action') ){\n                formOptions.ajaxOptions.url = formEl.getAttribute('action');\n            }\n        }\n    }\n\n}\n","\nimport { getFilledFields, isFieldForChangeEvent } from './helpers';\nimport { validation } from './listenerCallbacks';\n\nexport const checkFilledFields = formEl => {\n\n    const formFields = getFilledFields( formEl );\n    // VALIDATE ALL FILLED FIELDS\n    return Promise.all( formFields.map(fieldEl => {\n\n        const isFieldForChangeEventBoolean = isFieldForChangeEvent(fieldEl);\n        const fakeEventObj = { target: fieldEl, type: (isFieldForChangeEventBoolean ? 'change': '') };\n        return validation( fakeEventObj );\n\n    }) )\n    .then(fields => fields)\n    .catch(fields => fields);\n\n}\n","\nimport { fieldsStringSelector } from './fieldsStringSelector';\nimport { getUniqueFields } from './getUniqueFields';\n\nexport const getFilledFields = formEl => {\n    return getUniqueFields( formEl.querySelectorAll(fieldsStringSelector) )\n    .map(fieldEl => {\n\n        const name = fieldEl.name,\n              type = fieldEl.type,\n              isCheckboxOrRadio = (type === 'checkbox' || type === 'radio'),\n              fieldChecked = formEl.querySelector('[name=\"' + name + '\"]:checked'),\n              isReqFrom = fieldEl.matches('[data-required-from]'),\n              reqMoreEl = (isReqFrom ? formEl.querySelector(fieldEl.getAttribute('data-required-from')) : null);\n\n        return (\n            isCheckboxOrRadio ? (fieldChecked || null) :\n            (isReqFrom && reqMoreEl.checked) || (!isReqFrom && fieldEl.value) ? fieldEl : null\n        );\n\n    })\n    .filter(fieldEl => fieldEl !== null);\n}\n","\nimport { mergeValidateFieldDefault, isDOMNode, runFunctionsSequence } from './helpers';\nimport { isValid } from './isValid';\n\nexport function checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    if( !isDOMNode(fieldEl) ){\n        const obj = mergeValidateFieldDefault({fieldEl});\n        return Promise.resolve(obj);\n    }\n\n    const formEl = fieldEl.closest('form'),\n          isValidValue = fieldEl.value.trim().length > 0;\n\n    // HANDLE FIELD data-required-from WHEN CHANGING ITS RELATED RADIO\n    if( fieldEl.type === 'radio' ){\n        const checkedEl = fieldEl.checked ? fieldEl : formEl.querySelector('[name=\"'+ fieldEl.name +'\"]:checked'),\n              reqMoreIsChecked = checkedEl && checkedEl.matches('[data-require-more]'),\n              findReqMoreEl = reqMoreIsChecked ? checkedEl : formEl.querySelector('[data-require-more][name=\"'+ fieldEl.name +'\"]'),\n              findReqFromEl = findReqMoreEl ? formEl.querySelector('[data-required-from=\"#'+ findReqMoreEl.id +'\"]') : null;\n        \n        if( checkedEl && findReqFromEl ){\n            findReqFromEl.required = findReqMoreEl.required && findReqMoreEl.checked;\n            if( !reqMoreIsChecked ){\n                findReqFromEl.value = '';\n            } else if( fieldOptions.focusOnRelated ) {\n                findReqFromEl.focus();\n            }\n        }\n    }\n\n    // HANDLE FIELD data-require-more & data-required-from WHEN *-from IT'S FILLED\n    if( fieldEl.matches('[data-required-from]') && isValidValue ){\n        const reqMoreEl = formEl.querySelector( fieldEl.getAttribute('data-required-from') );\n        reqMoreEl.checked = true;\n        fieldEl.required = reqMoreEl.required;\n    }\n\n    const needsValidation = fieldEl.required || (fieldEl.matches('[data-validate-if-filled]') && isValidValue);\n\n    return runFunctionsSequence({\n            functionsList: fieldOptions.beforeValidation,\n            data: {fieldEl}\n        })\n        .then(data => {\n            const dataObj = data.pop();\n            return new Promise(resolve => {\n                if( !needsValidation ){\n                    dataObj.result = true;\n                }\n                resolve( needsValidation ? isValid(fieldEl, validationRules, validationErrors) : dataObj );\n            });\n        });\n\n}\n","\nimport { mergeValidateFieldDefault, mergeObjects, toCamelCase } from './helpers';\n\nexport function isValid( fieldEl, validationRules, validationErrors ){\n\n    const fieldValue = fieldEl.value,\n          obj = mergeValidateFieldDefault({result: fieldValue.trim().length > 0, fieldEl}),\n          isRadioOrCheckbox = /^(radio|checkbox)$/.test(fieldEl.type),\n          hasSelectedInput = fieldEl.closest('form').querySelectorAll('[name=\"'+ fieldEl.name +'\"]:checked').length > 0;\n\n    if( (!isRadioOrCheckbox && !obj.result) || (isRadioOrCheckbox && !hasSelectedInput) ){\n        obj.result = false;\n        obj.errors = { empty: true };\n        return Promise.resolve(obj);\n    }\n\n    // COLLECT VALIDATION METHOD NAMES ( USED TO RUN VALIDATIONS AND GET ERRORS )\n    const validationMethods = Array.from(fieldEl.attributes).reduce((accList, attr) => {\n        const attrName = toCamelCase( attr.name.replace('data-', '') ),\n              attrValue = toCamelCase( attr.value ),\n              isAttrValueWithFn = (attrName === 'type' || attrName === 'subtype') && validationRules[attrValue],\n              isAttrNameWithFn = validationRules[attrName];\n\n        if( isAttrValueWithFn || isAttrNameWithFn ){\n            accList.push( isAttrValueWithFn ? attrValue : attrName );\n        }\n        return accList;\n    }, []);\n\n    return new Promise(resolve => {\n\n        // RUN VALIDATIONS\n        const validationsResult = validationMethods.reduce((accPromise, methodName) => {\n            return accPromise.then(accObj => {\n                return new Promise(resolveVal => {\n                    // RUN VALIDATION INSIDE A PROMISE IS USEFUL FOR ASYNC VALIDATIONS\n                    resolveVal( validationRules[methodName](fieldValue, fieldEl) );\n                }).then(valObj => {\n                    // ADD CUSTOM ERROR-KEY FOR EACH VALIDATION RULE\n                    if( !valObj.result ){\n                        const errorObj = {};\n                        if( typeof valObj.errors === 'undefined' || typeof valObj.errors[methodName] === 'undefined' ){\n                            errorObj[methodName] = true;\n                        }\n                        valObj.errors = mergeObjects({}, valObj.errors, errorObj);\n                    }\n                    valObj = valObj.result ? {} : valObj;\n                    return mergeObjects(accObj, valObj);\n                });\n            });\n        }, Promise.resolve(obj));\n        resolve(validationsResult);\n\n    }).then(data => {\n\n        // GET ERRORS\n        if( !data.result ){\n            data.errors = validationMethods.reduce((accObj, methodName) => {\n                const errors = (validationErrors[methodName] && validationErrors[methodName](fieldValue, fieldEl)) || {};\n                return mergeObjects(accObj, errors);\n            }, data.errors);\n        }\n        return data;\n\n    });\n\n}\n","\nimport { fieldsStringSelector, getUniqueFields, mergeValidateFieldDefault, mergeValidateFormDefault, mergeObjects } from './helpers';\nimport { checkFieldValidity } from './checkFieldValidity';\n\nexport function checkFormValidity( formEl, fieldOptions, validationRules, validationErrors, fieldToSkip = null ){\n\n    fieldOptions = mergeObjects( {}, fieldOptions, {focusOnRelated: false} );\n    const fieldsList = getUniqueFields( formEl.querySelectorAll(fieldsStringSelector) );\n\n    return Promise.all( fieldsList.map(fieldEl => {\n\n        if( fieldToSkip && fieldEl === fieldToSkip ){\n            const obj = mergeValidateFieldDefault({fieldEl, result: true});\n            return Promise.resolve(obj);\n        }\n        return checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors );\n\n    }) ).then(fields => {\n\n        const areAllFieldsValid = fields.filter(fieldObj => !fieldObj.result).length === 0;\n        return mergeValidateFormDefault({result: areAllFieldsValid, fields});\n\n    });\n\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const mergeValidateFormDefault = obj => {\n    return mergeObjects({}, { result: true, fields: [] }, obj);\n}\n","\nimport { version }              from './modules/version';\nimport { customEvents, dispatchCustomEvent, excludeSelector, finalizeFieldPromise, finalizeFormPromise, mergeObjects, removeClass } from './modules/helpers';\nimport { options }              from './modules/options';\nimport { validationRules }      from './modules/validationRules';\nimport { validationEnd }        from './modules/listenerCallbacks';\nimport { constructorFn }        from './modules/constructor';\nimport { destroy }              from './modules/destroy';\nimport { checkFilledFields }    from './modules/checkFilledFields';\nimport { checkFieldValidity }   from './modules/checkFieldValidity';\nimport { checkFormValidity }    from './modules/checkFormValidity';\n\nclass Form {\n\n    constructor( formEl, optionsObj ){\n        constructorFn(this, formEl, optionsObj);\n    }\n\n    destroy(){\n        destroy(this.formEl, this.options);\n    }\n    \n    getFormData(){\n        const formFieldsEl = this.formEl.querySelectorAll('input, select, textarea'),\n              filteredFields = Array.from( formFieldsEl ).filter( elem => elem.matches(excludeSelector) );\n        return this.options.formOptions.getFormData(filteredFields);\n    }\n\n    validateField( fieldEl, fieldOptions ){\n        fieldEl = (typeof fieldEl === 'string' ? this.formEl.querySelector(fieldEl) : fieldEl);\n        fieldOptions = mergeObjects({}, this.options.fieldOptions, fieldOptions);\n        const formEl = this.formEl;\n        const skipUIfeedback = this.options.fieldOptions.skipUIfeedback;\n        return checkFieldValidity(fieldEl, fieldOptions, this.validationRules, this.validationErrors)\n            .then(obj => {\n                return new Promise(resolve => {\n                    if( obj.fieldEl ){\n                        dispatchCustomEvent( obj.fieldEl, customEvents.field.validation, { bubbles: false, detail: obj } );\n                        dispatchCustomEvent( formEl, customEvents.field.validation, { detail: obj } );\n                        if( fieldOptions.onValidationCheckAll && obj.result ){\n                            // FORCE skipUIfeedback TO true\n                            fieldOptions.skipUIfeedback = true;\n                            resolve(\n                                checkFormValidity( formEl, fieldOptions, this.validationRules, this.validationErrors, obj.fieldEl )\n                                    .then(dataForm => {\n                                        const clMethodName = dataForm.result ? 'add' : 'remove';\n                                        formEl.classList[clMethodName]( this.options.formOptions.cssClasses.valid );\n                                        dispatchCustomEvent( formEl, customEvents.form.validation, { detail: dataForm } );\n                                        // RESTORE skipUIfeedback TO THE ORIGINAL VALUE\n                                        fieldOptions.skipUIfeedback = skipUIfeedback;\n                                        return obj;\n                                    })\n                            );\n                        } else if( !obj.result ){\n                            removeClass( formEl, this.options.formOptions.cssClasses.valid );\n                        }\n                    }\n                    resolve( obj );\n                });\n            })\n            .then(finalizeFieldPromise);\n    }\n\n    validateFilledFields(){\n        return checkFilledFields(this.formEl);\n    }\n\n    validateForm( fieldOptions ){\n        fieldOptions = mergeObjects({}, this.options.fieldOptions, fieldOptions);\n        const formEl = this.formEl;\n        return checkFormValidity(formEl, fieldOptions, this.validationRules, this.validationErrors)\n            .then(data => {\n                const clMethodName = data.result ? 'add' : 'remove';\n                formEl.classList[clMethodName]( this.options.formOptions.cssClasses.valid );\n                validationEnd( {detail:data} );\n                dispatchCustomEvent( formEl, customEvents.form.validation, { detail: data } );\n                return data;\n            })\n            .then(finalizeFormPromise);\n    }\n    \n    static addValidationErrors( errorsObj ){\n        this.prototype.validationErrors = mergeObjects({}, this.prototype.validationErrors, errorsObj);\n    }\n\n    static addValidationRules( rulesObj ){\n        this.prototype.validationRules = mergeObjects({}, this.prototype.validationRules, rulesObj);\n    }\n    \n    static setOptions( optionsObj ){\n        this.prototype.options = mergeObjects({}, this.prototype.options, optionsObj);\n    }\n\n}\n\nForm.prototype.options = options;\nForm.prototype.validationErrors = {};\nForm.prototype.validationRules = validationRules;\nForm.prototype.version = version;\n\nexport default Form;\n","\nimport { checkFormEl, isNodeList, mergeObjects }   from './helpers';\nimport { formStartup }                             from './formStartup';\n\nexport function constructorFn( self, formEl, optionsObj ){\n\n    const argsL = arguments.length,\n          checkFormElem = checkFormEl(formEl);\n\n    if( argsL === 0 || (argsL > 0 && !formEl) ){\n        throw new Error('First argument \"formEl\" is missing or falsy!');\n    }\n    if( isNodeList(formEl) ){\n        throw new Error('First argument \"formEl\" must be a single DOM node or a form CSS selector, not a NodeList!');\n    }\n    if( !checkFormElem.result ){\n        throw new Error('First argument \"formEl\" is not a DOM node nor a form CSS selector!');\n    }\n\n    self.formEl = checkFormElem.element;\n    self.formEl.formjs = self;\n    self.options = mergeObjects({}, self.constructor.prototype.options, optionsObj);\n\n    // BINDING CONTEXT FOR FUTURE EXECUTION\n    const cbList = [\n        // IN fieldOptions\n        'beforeValidation',\n        // IN formOptions\n        'beforeSend',\n        'getFormData'\n    ];\n    cbList.forEach(cbName => {\n        const optionType = self.options.formOptions[cbName] ? 'formOptions' : 'fieldOptions';\n        let cbOpt = self.options[optionType][cbName];\n\n        if( cbOpt ){\n            self.options[optionType][cbName] = ( Array.isArray(cbOpt) ? cbOpt.map(cbFn => cbFn.bind(self)) : cbOpt.bind(self) );\n        }\n    });\n\n    formStartup( self.formEl, self.options );\n    \n}\n","\nimport { customEvents } from './helpers';\nimport { keypressMaxlength, dataTypeNumber, pastePrevent, submit, validation, validationEnd } from './listenerCallbacks';\n\n\nexport function destroy( formEl, options ){\n\n    if( options.fieldOptions.strictHtmlValidation ){\n        formEl.removeEventListener('keypress', keypressMaxlength, false);\n        formEl.removeEventListener('input', dataTypeNumber, false);\n    }\n\n    if( options.fieldOptions.preventPasteFields ){\n        formEl.removeEventListener('paste', pastePrevent, false);\n    }\n\n    if( options.formOptions.handleSubmit ){\n        formEl.removeEventListener('submit', submit);\n    }\n\n    options.fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n        const useCapturing = eventName === 'blur' ? true : false;\n        formEl.removeEventListener(eventName, validation, useCapturing);\n    });\n\n    formEl.removeEventListener(customEvents.field.validation, validationEnd, false);\n\n    delete formEl.formjs;\n    \n}\n","\nexport const excludeSelector = ':not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"file\"]):not([data-exclude-data])'\n"],"names":["addClass","element","cssClasses","split","forEach","className","classList","add","isNodeList","nodeList","NodeList","prototype","isPrototypeOf","removeClass","remove","isDOMNode","node","Element","checkFormEl","formEl","isString","isFormSelector","document","querySelector","tagName","toLowerCase","result","customEvents","validation","submit","mergeObjects","out","i","arguments","length","obj","key","isArray","Object","toString","call","isObject","hasOwnProperty","concat","slice","Array","push","dispatchCustomEvent","elem","eventName","eventOptions","bubbles","eventObj","CustomEvent","dispatchEvent","fieldsStringSelector","finalizeFieldPromise","Promise","resolve","reject","errors","finalizeFormPromise","fields","formatMap","YYYY-MM-DD","dateArray","MM-DD-YYYY","DD-MM-YYYY","reverse","getDateAsNumber","dateString","dateFormat","splitChar","string","separator","match","getSplitChar","indexOf","replace","join","getUniqueFields","currentFieldName","currentFieldType","from","filter","fieldEl","name","type","matches","mergeValidateFieldDefault","isFieldForChangeEvent","runFunctionsSequence","functionsList","data","stopConditionFn","reduce","acc","promiseFn","then","res","dataNew","dataList","serializeObject","constructor","keys","a","k","encodeURIComponent","toCamelCase","all","letter","toUpperCase","defaultCallbacksInOptions","fieldOptions","beforeValidation","fieldObj","this","options","containerEl","closest","questionContainer","value","dirty","checkDirtyField","skipUIfeedback","pending","formOptions","getFormData","filteredFields","formData","isCheckbox","isRadio","isSelect","checked","checkboxes","querySelectorAll","field","checkedRadio","selectedOpts","option","selected","error","errorEmpty","errorRule","valid","focusOnRelated","handleFileUpload","onValidationCheckAll","preventPasteFields","strictHtmlValidation","validateOnEvents","ajaxOptions","cache","credentials","headers","Content-Type","Accept","method","mode","redirect","timeout","url","location","href","ajaxSubmit","beforeSend","ajaxComplete","ajaxError","ajaxPending","ajaxSuccess","handleSubmit","validationRules","date","test","email","number","checkbox","dataChecksEl","attrValue","JSON","parse","getAttribute","checkedElLength","isMinOk","isMaxOk","checks","minChecks","maxChecks","equalTo","exactLength","valueLength","minlength","maxlength","file","maxFileSize","MIMEtype","accept","RegExp","filesList","files","exceedMaxFileSize","size","isAcceptedFileType","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","max","maxVal","maxLength","min","minVal","minLength","pattern","radio","fieldChecked","trim","dataTypeNumber","event","target","fieldValue","stopImmediatePropagation","valueReplaced","keypressMaxlength","keyPressed","which","keyCode","allowedKeys","pastePrevent","formjs","preventDefault","ajaxCall","formDataObj","timeoutTimer","isMultipart","body","formDataMultipart","FormData","append","idx","stringify","Headers","controller","AbortController","signal","window","setTimeout","abort","fetch","response","ok","fetchMethod","get","contentType","headerOpt","getFetchMethod","catch","finally","clearTimeout","disabled","instance","formCssClasses","isAjaxForm","btnEl","eventPreventDefault","enableBtn","validateForm","beforeSendData","stopExecution","rfsObject","pop","detail","isChangeEvent","self","isFieldForChangeEventBoolean","validateField","realtedFieldEqualTo","required","validationEnd","fieldsArray","isReqFrom","reqMoreEl","errorClasses","extraErrorClass","isChecks","empty","errorClassToRemove","formStartup","noValidate","addEventListener","useCapturing","checkFilledFields","formFields","map","isCheckboxOrRadio","getFilledFields","checkFieldValidity","validationErrors","isValidValue","checkedEl","reqMoreIsChecked","findReqMoreEl","findReqFromEl","id","focus","needsValidation","dataObj","isRadioOrCheckbox","hasSelectedInput","validationMethods","attributes","accList","attr","attrName","isAttrValueWithFn","isAttrNameWithFn","accPromise","methodName","accObj","resolveVal","valObj","errorObj","isValid","checkFormValidity","fieldToSkip","fieldsList","areAllFieldsValid","Form","[object Object]","optionsObj","argsL","checkFormElem","Error","cbList","cbName","optionType","cbOpt","cbFn","bind","constructorFn","removeEventListener","destroy","formFieldsEl","dataForm","clMethodName","errorsObj","rulesObj","version"],"mappings":"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"}