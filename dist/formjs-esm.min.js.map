{"version":3,"file":"formjs-esm.min.js","sources":["../src/modules/version.js","../src/modules/helpers/addClass.js","../src/modules/helpers/isNodeList.js","../src/modules/helpers/removeClass.js","../src/modules/helpers/isDOMNode.js","../src/modules/helpers/checkFormEl.js","../src/modules/helpers/customEvents.js","../src/modules/helpers/mergeObjects.js","../src/modules/helpers/dispatchCustomEvent.js","../src/modules/helpers/fieldsStringSelector.js","../src/modules/helpers/getSplitChar.js","../src/modules/helpers/getUniqueFields.js","../src/modules/helpers/getValidateFieldDefault.js","../src/modules/helpers/getValidateFormDefault.js","../src/modules/helpers/isFieldForChangeEvent.js","../src/modules/helpers/runFunctionsSequence.js","../src/modules/helpers/serializeObject.js","../src/modules/helpers/toCamelCase.js","../src/modules/optionsUtils.js","../src/modules/helpers/checkDirtyField.js","../src/modules/options.js","../src/modules/validationRules.js","../src/modules/submit.js","../src/modules/ajaxCall.js","../src/modules/listenerCallbacks.js","../src/modules/formStartup.js","../src/modules/init.js","../src/modules/helpers/getFilledFields.js","../src/modules/checkFieldValidity.js","../src/modules/isValid.js","../src/modules/checkFormValidity.js","../src/index.js","../src/modules/constructor.js","../src/modules/destroy.js","../src/modules/helpers/excludeSelector.js","../src/modules/validationErrors.js"],"sourcesContent":["\nexport const version = '4.0.2';\n","\nexport const addClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.add( className );\n    });\n}\n","\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList );\n}\n","\nexport const removeClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.remove( className );\n    });\n}\n","\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node );\n}\n","\nimport { isDOMNode } from './isDOMNode';\n\nexport const checkFormEl = formEl => {\n    let isString = typeof formEl,\n        isValidNodeSelector = isString === 'string' && isDOMNode(document.querySelector(formEl)),\n        isFormSelector = isValidNodeSelector && document.querySelector(formEl).tagName.toLowerCase() === 'form',\n        obj = {\n            result: isDOMNode(formEl) || isFormSelector,\n            element: (isString === 'string' ? document.querySelector(formEl) : formEl)\n        };\n\n    return obj;\n}\n","\nexport const customEvents = {\n    field: {\n        validation: 'fjs.field:validation'\n    },\n    form: {\n        submit:     'fjs.form:submit',\n        validation: 'fjs.form:validation'\n    }\n}\n","\nexport const mergeObjects = function( out = {} ){\n    for(let i=1; i<arguments.length; i++){\n        let obj = arguments[i];\n\n        if(!obj){ continue; }\n\n        for(let key in obj){\n            let isArray = Object.prototype.toString.call(obj[key]) === \"[object Array]\";\n            let isObject = Object.prototype.toString.call(obj[key]) === \"[object Object]\";\n\n            // COPY ONLY ENUMERABLE PROPERTIES\n            if( obj.hasOwnProperty(key) ){\n                if( isArray ){\n\n                    if( typeof out[key] === 'undefined' ){\n                        out[key] = [];\n                    }\n                    out[key] = out[key].concat( obj[key].slice(0) );\n\n                } else if( isObject ){\n\n                    out[key] = mergeObjects(out[key], obj[key]);\n\n                } else {\n\n                    // * STRING | NUMBER | BOOLEAN | FUNCTION\n                    if( Array.isArray(out[key]) ){\n                        // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                        out[key].push(obj[key]);\n                    } else {\n                        out[key] = obj[key];\n                    }\n\n                }\n            }\n        }\n    }\n\n    return out;\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const dispatchCustomEvent = ( elem, eventName, data = {}, eventOptions = {} ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions);\n    const eventObj = new Event(eventName, eventOptions);\n    eventObj.data = data;\n    elem.dispatchEvent( eventObj );\n}\n","\nexport const fieldsStringSelector = 'input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"hidden\"]), select, textarea'\n","\nexport const getSplitChar = string => {\n    let splitChar = '.';\n\n    if( string.indexOf(splitChar) === -1 ){\n        if( string.indexOf('-') >= 0 ){\n            splitChar = '-';\n        } else if( string.indexOf('/') >= 0 ){\n            splitChar = '/';\n        }\n    }\n\n    return splitChar;\n}\n","\nexport const getUniqueFields = nodeList => {\n\n    let currentFieldName = '',\n        currentFieldType = '';\n\n    return Array.from( nodeList ).filter(fieldEl => {\n        const name = fieldEl.name,\n              type = fieldEl.type;\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false;\n        }\n        \n        if( !fieldEl.matches('[data-required-from]') ){\n            currentFieldName = name;\n            currentFieldType = type;\n        }\n        return true;\n    });\n    \n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const getValidateFieldDefault = obj => {\n    return mergeObjects({}, { result: false, fieldEl: null }, obj);\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const getValidateFormDefault = obj => {\n    return mergeObjects({}, { result: true, fields: [] }, obj);\n}\n","\nexport const isFieldForChangeEvent = fieldEl => {\n    return fieldEl.matches('select, [type=\"radio\"], [type=\"checkbox\"], [type=\"file\"]');\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const runFunctionsSequence = ( { functionsList = [], data = {}, stopConditionFn = function(){return false} } = {} ) => {\n    return functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1]);\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res);\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result);\n                    return res;\n                });\n        });\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList);\n}\n","\nexport const serializeObject = obj => {\n    var objToString = (\n            (obj && typeof obj === 'object' && obj.constructor === Object) ? \n            Object.keys(obj)\n                .reduce((a,k) => {\n                    a.push(k+'='+encodeURIComponent(obj[k]));\n                    return a\n                },[]).join('&') : \n            obj\n    );\n    return objToString;\n}\n","\nexport const toCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase(); });\n}\n","\nimport { addClass, checkDirtyField } from './helpers';\n\nexport const defaultCallbacksInOptions = {\n    fieldOptions: {\n\n        beforeValidation: function beforeValidationDefault ( fieldObj ) {\n\n            const fieldOptions = this.options.fieldOptions;\n\n            checkDirtyField( fieldObj.fieldEl, fieldOptions.cssClasses.dirty );\n            if( !fieldOptions.skipUIfeedback ){\n                addClass( fieldObj.fieldEl.closest('[data-formjs-question]'), fieldOptions.cssClasses.pending );\n            }\n\n        }\n\n    },\n    formOptions: {\n\n        getFormData: function getFormDataDefault ( filteredFields ) {\n\n            const formData = {},\n                  formEl = this.formEl;\n\n            filteredFields.forEach(function( fieldEl ){\n                const isCheckbox = fieldEl.type === 'checkbox',\n                      isRadio = fieldEl.type === 'radio',\n                      isSelect = fieldEl.matches('select'),\n                      name = fieldEl.name;\n                let value = fieldEl.value;\n                                \n                if( isCheckbox ) {\n                    \n                    value = fieldEl.checked;\n                    let checkboxes = Array.from( formEl.querySelectorAll('[name=\"'+ name +'\"]') );\n                    if( checkboxes.length > 1 ){\n\n                        value = [];\n                        let checkedElems = checkboxes.filter(field => field.checked);\n                        checkedElems.forEach(fieldEl => {\n                            value.push( fieldEl.value );\n                        });\n\n                    }\n                        \n                } else if( isRadio ){\n                    \n                    let checkedRadio = formEl.querySelector('[name=\"'+ name +'\"]:checked');\n                    value = (checkedRadio === null ? null : checkedRadio.value);\n                    \n                } else if( isSelect ){\n\n                    let selectedOpts = Array.from( fieldEl.options ).filter(option => option.selected);\n                    if( selectedOpts.length > 1 ){\n\n                        value = [];\n                        selectedOpts.forEach(fieldEl => {\n                            value.push( fieldEl.value );\n                        });\n\n                    }\n                }\n\n                formData[ name ] = value;\n            });\n\n            return formData;\n\n        }\n\n    }\n}\n","\nimport { addClass } from './addClass';\nimport { isNodeList } from './isNodeList';\nimport { removeClass } from './removeClass';\n\nexport const checkDirtyField = ( fields, cssClasses ) => {\n\n    var fields = (isNodeList(fields) ? Array.from( fields ) : [fields]);\n    \n    fields.forEach(fieldEl => {\n        if( fieldEl.type !== 'checkbox' && fieldEl.type !== 'radio' ){\n            let containerEl = fieldEl.closest('[data-formjs-question]') || fieldEl;\n\n            if( fieldEl.value ){\n                \n                addClass( containerEl, cssClasses );\n                \n            } else {\n                \n                removeClass( containerEl, cssClasses );\n                \n            }\n        }\n    });\n    \n}\n","\nimport { defaultCallbacksInOptions } from './optionsUtils';\n\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [defaultCallbacksInOptions.fieldOptions.beforeValidation],\n        cssClasses: {\n            dirty:              'is-dirty',\n            error:              'has-error',\n            errorEmpty:         'has-error-empty',\n            errorRule:          'has-error-rule',\n            pending:            'is-pending',\n            valid:              'is-valid'\n        },\n        focusOnRelated:         true,\n        handleFileUpload:       true,\n        handleValidation:       true,\n        maxFileSize:            10,\n        onValidationCheckAll:   true,\n        preventPasteFields:     '[type=\"password\"], [data-equal-to]',\n        skipUIfeedback:         false,\n        strictHtmlValidation:   true,\n        validateOnEvents:       'input change'\n    },\n\n    formOptions: {\n        ajaxOptions:            {\n            cache:              'no-store',\n            credentials:        'same-origin',\n            headers: {\n                                'Content-Type': 'application/json',\n                                'Accept':       'application/json'\n            },\n            method:             'POST',\n            mode:               'same-origin',\n            redirect:           'follow',\n            timeout:            0,\n            url:                location.href\n        },\n        ajaxSubmit:             true,\n        beforeSend:             [],\n        cssClasses: {\n            ajaxComplete:       'ajax-complete',\n            ajaxError:          'ajax-error',\n            ajaxPending:        'ajax-pending',\n            ajaxSuccess:        'ajax-success',\n            submit:             'is-submitting',\n            valid:              'is-valid'\n        },\n        getFormData:            defaultCallbacksInOptions.formOptions.getFormData,\n        handleSubmit:           true\n    }\n    \n}\n","\nimport { getSplitChar } from './helpers';\n\nexport const validationRules = {\n    \n    date: function( string ){\n        // DATE AS ISO 8601 DATE FORMAT     YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n\n        let date = /^((((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13578]|1[02])[ \\/\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13456789]|1[012])[ \\/\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.]02[ \\/\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ \\/\\-.]02[ \\/\\-.]29))$/g.test( string ),\n            obj = {\n                result: date\n            };\n\n        return obj;\n    },\n    \n    email: function( string ){\n        // https://regex101.com/r/cdlyJy/3\n        let obj = {\n            result: /^[a-zA-Z_-]([\\w.-]?[a-zA-Z0-9])*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?){2,})+$/.test( string )\n        };\n\n        return obj;\n    },\n    \n    number: function( string ){\n        // ALL NUMBERS ( INTEGERS AND FLOATING )\n        // VALID NUMBERS: 123 | 123.456 | .123\n        let obj = {\n            result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n        };\n\n        return obj;\n    }\n    \n}\n\nexport const validationRulesAttributes = {\n\n    checkbox: function( data ){\n        let formEl = data.fieldEl.closest('form'),\n            dataChecksEl = formEl.querySelector('[name=\"' + data.fieldEl.name + '\"][data-checks]'),\n            obj = { result: data.fieldEl.checked };\n\n        if( dataChecksEl !== null ){\n            obj = this.checks({ attrValue: dataChecksEl.getAttribute('data-checks'), fieldEl: dataChecksEl});\n        }\n\n        return obj;\n    },\n\n    checks: function( data ){\n        try {\n            let attrValue = JSON.parse(data.attrValue),\n                fieldEl = data.fieldEl,\n                formEl = fieldEl.closest('form'),\n                checkedElLength = formEl.querySelectorAll('[name=\"' + fieldEl.name + '\"]:checked').length,\n                isMinOk = checkedElLength >= attrValue[0],\n                isMaxOk = checkedElLength <= attrValue[1],\n                obj = {\n                    result: isMinOk && isMaxOk\n                };\n\n            if( !obj.result ){\n\n                obj.errors = { checks: true };\n                if( !isMinOk ){ obj.errors.minChecks = true; }\n                if( !isMaxOk ){ obj.errors.maxChecks = true; }\n\n            }\n\n            return obj;\n        } catch(e){\n            throw new Error('\"data-checks\" attribute is not a valid array!');\n        }\n    },\n\n    equalTo: function( data ){\n        let fieldEl = data.fieldEl,\n            formEl = fieldEl.closest('form'),\n            checkFromEl = formEl.querySelector( '[name=\"' + fieldEl.getAttribute('data-equal-to') + '\"]' ),\n            obj = {\n                result: fieldEl.value === checkFromEl.value\n            };\n\n        if( !obj.result ){\n            \n            obj.errors = { equalTo: true };\n        }\n\n        return obj;\n    },\n    \n    exactLength: function( data ){\n        let valueLength = data.fieldEl.value.length,\n            exactLength = (data.attrValue * 1),\n            obj = {\n                result: valueLength === exactLength\n            };\n\n        if( !obj.result ){\n\n            obj.errors = { exactLength: true };\n            if( valueLength < exactLength ){ obj.errors.minlength = true; }\n            else { obj.errors.maxlength = true; }\n\n        }\n\n        return obj;\n    },\n\n    file: function( data ){\n        let fieldEl = data.fieldEl,\n            maxFileSize = (fieldEl.getAttribute('data-max-file-size') || data.fieldOptions.maxFileSize) * 1,\n            MIMEtype = (fieldEl.accept ? new RegExp(fieldEl.accept.replace( '*', '[^\\\\/,]+' )) : null),\n            filesList = Array.from(fieldEl.files),\n            obj = { result: true };\n\n        filesList.forEach(function( file ){\n            let exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize,\n                isAcceptedFileType = (MIMEtype !== null ? MIMEtype.test(file.type) : true);\n\n            if( exceedMaxFileSize || !isAcceptedFileType ){\n                obj.result = false;\n                if( typeof obj.errors === 'undefined' ){\n                    obj.errors = {};\n                }\n                obj.errors.file = true;\n                if( exceedMaxFileSize ){ obj.errors.maxFileSize = true; }\n                if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true; }\n\n            }\n        });\n\n        return obj;\n    },\n\n    length: function( data ){\n        try {\n            let valueL = data.fieldEl.value.length,\n                attrValue = JSON.parse(data.attrValue),\n                isMinlengthOk = valueL >= attrValue[0],\n                isMaxlengthOk = valueL <= attrValue[1],\n                obj = { result: isMinlengthOk && isMaxlengthOk };\n\n            if( !obj.result ){\n\n                obj.errors = { stringLength: true };\n                if( !isMinlengthOk ){ obj.errors.minlength = true; }\n                if( !isMaxlengthOk ){ obj.errors.maxlength = true; }\n\n            }\n\n            return obj;\n        } catch(e){\n            throw new Error('\"data-length\" attribute is not a valid array!');\n        }\n    },\n    \n    max: function( data ){\n        let fieldEl = data.fieldEl,\n            isDate = (fieldEl.matches('[type=\"date\"]') || fieldEl.matches('[data-subtype=\"date\"]') || fieldEl.matches('[data-subtype=\"dateDDMMYYYY\"]')),\n            value = data.fieldEl.value,\n            maxVal = data.attrValue;\n        \n        if( isDate ){\n\n            let splitChar = getSplitChar( value );\n\n            if( value.indexOf(splitChar) === 2 ){\n                // DD MM YYYY\n                value = value.split( splitChar ).reverse();\n            } else {\n                // YYYY MM DD\n                value = value.split( splitChar );\n            }\n\n            value = value.join('');\n            maxVal = maxVal.split('-').join('');\n\n        }\n\n        value = value * 1;\n        maxVal = maxVal * 1;\n\n        let obj = {\n                result: value <= maxVal\n            };\n\n        if( !obj.result ){\n            \n            obj.errors = { max: true };\n        }\n        \n        return obj;\n    },\n    \n    maxlength: function( data ){\n        const obj = {\n            result: data.fieldEl.value.length <= (data.attrValue * 1)\n        };\n\n        if( !obj.result ){\n\n            obj.errors = { maxlength: true };\n        }\n\n        return obj;\n    },\n    \n    min: function( data ){\n        let fieldEl = data.fieldEl,\n            isDate = (fieldEl.matches('[type=\"date\"]') || fieldEl.matches('[data-subtype=\"date\"]') || fieldEl.matches('[data-subtype=\"dateDDMMYYYY\"]')),\n            value = data.fieldEl.value,\n            minVal = data.attrValue;\n        \n        if( isDate ){\n\n            let splitChar = getSplitChar( value );\n\n            if( value.indexOf(splitChar) === 2 ){\n                // DD MM YYYY\n                value = value.split( splitChar ).reverse();\n            } else {\n                // YYYY MM DD\n                value = value.split( splitChar );\n            }\n\n            value = value.join('');\n            minVal = minVal.split('-').join('');\n\n        }\n\n        value = value * 1;\n        minVal = minVal * 1;\n\n        let obj = {\n                result: value >= minVal\n            };\n\n        if( !obj.result ){\n            \n            obj.errors = { min: true };\n        }\n        \n        return obj;\n    },\n\n    minlength: function( data ){\n        const obj = {\n            result: data.fieldEl.value.length >= (data.attrValue * 1)\n        };\n\n        if( !obj.result ){\n\n            obj.errors = { minlength: true };\n        }\n\n        return obj;\n    },\n\n    pattern: function( data ){\n        let fieldEl = data.fieldEl,\n            fieldPattern = fieldEl.pattern,\n            fieldRegex = new RegExp( fieldPattern ),\n            obj = {\n                result: fieldRegex.test( fieldEl.value )\n            };\n\n        if( !obj.result ){\n\n            obj.errors = { pattern: true };\n        }\n\n        return obj;\n    },\n\n    radio: function( data ){\n        let fieldEl = data.fieldEl,\n            fieldChecked = fieldEl.closest('form').querySelector( '[name=\"'+ fieldEl.name +'\"]:checked' ),\n            isValid = fieldChecked !== null && fieldChecked.value.trim().length > 0,\n            obj = { result: isValid };\n\n        return obj;\n    },\n\n    requiredFrom: function( data ){\n        let fieldEl = data.fieldEl,\n            formEl = fieldEl.closest('form'),\n            isValidValue = fieldEl.value.trim().length > 0,\n            reqMoreEl = formEl.querySelector( fieldEl.getAttribute('data-required-from') ),\n            checkedEl = formEl.querySelector( '[name=\"'+ reqMoreEl.name +'\"]:checked' ),\n            obj = { result: checkedEl !== null };\n\n        if( reqMoreEl.checked && reqMoreEl.required ){\n            obj.result = isValidValue;\n        }\n\n        if( !obj.result ){\n            obj.errors = { requiredFrom: true };\n        }\n        \n        return obj;\n    }\n    \n}\n","\nimport { addClass, customEvents, dispatchCustomEvent, getValidateFormDefault, removeClass, runFunctionsSequence } from './helpers';\nimport { ajaxCall } from './ajaxCall';\n\nexport function submit( event ){\n\n    const formEl = event.target,\n          instance = formEl.formjs,\n          options = instance.options,\n          formCssClasses = options.formOptions.cssClasses,\n          isAjaxForm = options.formOptions.ajaxSubmit,\n          btnEl = formEl.querySelector('[type=\"submit\"]'),\n          eventPreventDefault = ( enableBtn = true ) => {\n              if( btnEl && enableBtn ){ btnEl.disabled = false; }\n              if( event ){ event.preventDefault(); }\n          };\n\n    if( isAjaxForm ){\n        eventPreventDefault(false);\n    }\n\n    if( btnEl ){\n        if( btnEl.disabled ){\n            eventPreventDefault(false);\n            return false;\n        }\n        btnEl.disabled = true;\n    }\n\n    removeClass( formEl, (formCssClasses.ajaxComplete + ' ' + formCssClasses.ajaxError + ' ' + formCssClasses.ajaxSuccess) );\n    addClass( formEl, formCssClasses.submit );\n    \n    const handleValidation = options.fieldOptions.handleValidation,\n          formValidationPromise = (handleValidation ? instance.validateForm() : Promise.resolve(getValidateFormDefault()));\n\n    formValidationPromise.then(formValidation => {\n\n        let beforeSendData = { stopExecution: false, formData: {} };\n\n        if( !formValidation.result ){\n            eventPreventDefault();\n            removeClass( formEl, formCssClasses.submit );\n            beforeSendData.stopExecution = true;\n            return [beforeSendData];\n        }\n        \n        let formDataObj = (isAjaxForm ? instance.getFormData() : null),\n            callbacksBeforeSend = options.formOptions.beforeSend;\n\n        if( formDataObj ){\n            beforeSendData.formData = formDataObj;\n        }\n\n        const rfsObject = {\n            functionsList: callbacksBeforeSend,\n            data: beforeSendData,\n            stopConditionFn: function(data){ return data.stopExecution; }\n        };\n        return runFunctionsSequence(rfsObject);\n\n    }).then(dataList => {\n\n        if( dataList.filter(data => data.stopExecution).length > 0 ){\n            eventPreventDefault();\n            return false;\n        }\n        \n        if( isAjaxForm ){\n\n            const formData = dataList.pop().formData;\n            addClass( formEl, formCssClasses.ajaxPending );\n            dispatchCustomEvent( formEl, customEvents.form.submit, ajaxCall( formEl, formData, options ) );\n            \n        }\n\n    });\n    \n}\n","\nimport { addClass, mergeObjects, removeClass, serializeObject } from './helpers';\n\nconst getFetchMethod = (response, options) => {\n    const accept = options.headers.get('Accept');\n    const contentType = response.headers.get('Content-Type');\n    const headerOpt = accept || contentType || '';\n\n    if( headerOpt.indexOf('application/json') > -1 || headerOpt === '' ){\n        return 'json';\n    } else if( headerOpt.indexOf('text/') > -1 ){\n        return 'text';\n    } else {\n        return 'blob';\n    }\n};\n\nexport function ajaxCall( formEl, formDataObj, options ){\n\n    let btnEl = formEl.querySelector('[type=\"submit\"]'),\n        timeoutTimer,\n        ajaxOptions = mergeObjects( {}, options.formOptions.ajaxOptions ),\n        isMultipart = ajaxOptions.headers['Content-Type'] === 'multipart/form-data';\n\n    ajaxOptions.body = formDataObj;\n    \n    // POST A FormData OBJECT ( multipart )\n    if( isMultipart && options.fieldOptions.handleFileUpload ){\n        let formDataMultipart = new FormData();\n        \n        for(let key in ajaxOptions.body){\n            formDataMultipart.append( key, ajaxOptions.body[key] );\n        }\n        \n        Array.from( formEl.querySelectorAll('[type=\"file\"]') ).forEach(function( field ){\n            Array.from(field.files).forEach(function( file, idx ){\n                let name = field.name+'['+ idx +']';\n                formDataMultipart.append( name, file, file.name );\n            });\n        });\n        \n        ajaxOptions.body = formDataMultipart;\n    }\n\n    if( ajaxOptions.method === 'GET' ){\n\n        // FETCH WITH \"GET\" METHOD CAN'T HAVE \"body\". SO IT IS APPENDED TO THE URL\n        ajaxOptions.url += ( /\\?/.test(ajaxOptions.url) ? '&' : '?' ) + serializeObject( ajaxOptions.body );\n        delete ajaxOptions.body;\n\n    } else {\n\n        if( ajaxOptions.headers['Content-Type'].indexOf('application/x-www-form-urlencoded') > -1 ){\n            // POST A NORMAL FORM\n            ajaxOptions.body = serializeObject( ajaxOptions.body );\n        } else if( !isMultipart ){\n            // POST A JSON STRING\n            ajaxOptions.body = JSON.stringify(ajaxOptions.body);\n        }\n\n    }\n\n    ajaxOptions.headers = new Headers( ajaxOptions.headers );\n\n    if ( ajaxOptions.timeout > 0 ) {\n        const controller = new AbortController();\n        const signal = controller.signal;\n\n        ajaxOptions.signal = signal;\n\n        timeoutTimer = window.setTimeout(function() {\n            controller.abort();\n        }, ajaxOptions.timeout);\n    }\n\n    return fetch(ajaxOptions.url, ajaxOptions)\n        .then(function( response ){\n            if( !response.ok ){\n                return Promise.reject(response);\n            }\n\n            let fetchMethod = getFetchMethod(response, ajaxOptions);\n\n            return response[fetchMethod]();\n        })\n        .then(function( data ){\n            addClass( formEl, options.formOptions.cssClasses.ajaxSuccess );\n            return data;\n        })\n        .catch(function( error ){\n            addClass( formEl, options.formOptions.cssClasses.ajaxError );\n            return Promise.reject(error);\n        })\n        .finally(function(){\n            if( timeoutTimer ){\n                window.clearTimeout( timeoutTimer );\n            }\n            removeClass( formEl, options.formOptions.cssClasses.submit + ' ' + options.formOptions.cssClasses.ajaxPending );\n            addClass( formEl, options.formOptions.cssClasses.ajaxComplete );\n            btnEl.disabled = false;\n        });\n\n}\n","\nimport { addClass, fieldsStringSelector, isFieldForChangeEvent, removeClass } from './helpers';\nimport { submit } from './submit';\n\nexport const listenerCallbacks = {\n\n    dataTypeNumber: function( event ){\n\n        const fieldEl = event.target;\n        \n        if( fieldEl.matches('[data-type=\"number\"]') ){\n            let fieldValue = fieldEl.value,\n                hasInvalidChars = /[^\\d.,+\\-]/.test(fieldValue);\n            \n            if( hasInvalidChars ){\n                event.stopImmediatePropagation();\n                let valueReplaced = fieldValue.replace(/[^\\d.,+\\-]/g, '');\n                fieldEl.value = valueReplaced;\n            }\n        }\n\n    },\n\n    keypressMaxlength: function( event ){\n\n        const fieldEl = event.target;\n        \n        if( fieldEl.matches( '[maxlength]' ) ){\n            const maxLength = fieldEl.maxLength * 1,\n                keyPressed = event.which || event.keyCode,\n                allowedKeys = [8, 37, 38, 39, 46];\n\n            if( fieldEl.value.length >= maxLength && allowedKeys.indexOf(keyPressed) === -1 ){\n                return false;\n            }\n        }\n\n    },\n\n    pastePrevent: function( event ){\n\n        const fieldEl = event.target;\n        let fieldOptions = fieldEl.closest('form').formjs.options.fieldOptions;\n\n        if( fieldEl.matches( fieldOptions.preventPasteFields ) ){     \n            event.preventDefault();\n        }\n\n    },\n\n    submit: function( event ){\n        submit(event);\n    },\n\n    validation: function( event ){\n\n        const eventName = event.type,\n              fieldEl = event.target,\n              self = fieldEl.closest('form').formjs;\n\n        if( fieldEl.matches( fieldsStringSelector ) ){\n            const isFieldForChangeEventBoolean = isFieldForChangeEvent(fieldEl),\n                isRadio = fieldEl.type === 'radio',\n                isReqFrom = fieldEl.matches('[data-required-from]'),\n                isReqMore = fieldEl.matches('[data-require-more]'),\n                isValidValue = fieldEl.value.trim().length > 0;\n\n            // HANDLE data-require-more FIELDS\n            if( isRadio && eventName === 'change' ){\n                let findReqMoreEl = (isReqMore ? fieldEl : self.formEl.querySelector('[name=\"'+ fieldEl.name +'\"][data-require-more]')),\n                    findReqFromEl = (findReqMoreEl !== null ? self.formEl.querySelector('[data-required-from=\"#'+ findReqMoreEl.id +'\"]') : null);\n\n                if( isReqMore ){\n\n                    if( findReqFromEl !== null ){\n                        findReqFromEl.required = fieldEl.required;\n                        if( self.options.fieldOptions.focusOnRelated ){\n                            findReqFromEl.focus();\n                        }\n                    }\n\n                } else if( findReqMoreEl !== null ){\n\n                    if( findReqFromEl !== null ){\n                        findReqFromEl.required = findReqMoreEl.required && findReqMoreEl.checked;\n                        findReqFromEl.value = '';\n                    }\n\n                }\n            }\n\n            // HANDLE data-required-from FIELDS\n            if( isReqFrom ){\n                if( isValidValue ){\n\n                    let reqMoreEl = self.formEl.querySelector( fieldEl.getAttribute('data-required-from') );\n                    reqMoreEl.checked = true;\n                    fieldEl.required = reqMoreEl.required;\n                }\n            }\n            \n            if(\n                (isFieldForChangeEventBoolean && eventName === 'change') ||\n                (!isFieldForChangeEventBoolean && eventName !== 'change')\n            ){\n                \n                return self.validateField( fieldEl ).then(obj => {\n                    const type = obj.fieldEl.type,\n                          realtedFieldEqualTo = obj.fieldEl.closest('form').querySelector('[data-equal-to=\"'+ obj.fieldEl.name +'\"]');\n\n                    if(\n                        // FIELD IS ( required OR data-validate-if-filled ) AND RELATED FIELD data-equal-to HAS A VALUE\n                        (obj.fieldEl.required || obj.fieldEl.matches('[data-validate-if-filled]')) && \n                        !(type === 'checkbox' || type === 'radio') && \n                        realtedFieldEqualTo && realtedFieldEqualTo.value.trim() !== ''\n                    ){\n                        return self.validateField( realtedFieldEqualTo );\n                    } else {\n                        return obj;\n                    }\n                });\n\n            }\n        }\n        \n    },\n\n    validationEnd: function( event ){\n\n        const fieldsArray = event.data.fieldEl ? [event.data] : event.data.fields,\n              options = fieldsArray[0].fieldEl.closest('form').formjs.options.fieldOptions;\n\n        fieldsArray.forEach(function( obj ){\n            let fieldEl = obj.fieldEl;\n            if( fieldEl.matches( fieldsStringSelector ) ){\n                let containerEl = fieldEl.closest('[data-formjs-question]'),\n                    isReqFrom = fieldEl.matches('[data-required-from]'),\n                    reqMoreEl = document.querySelector( fieldEl.getAttribute('data-required-from') );\n\n                if( containerEl !== null ){\n                    removeClass( containerEl, options.cssClasses.pending );\n                }\n\n                if( containerEl !== null && !options.skipUIfeedback ){\n\n                    if( obj.result ){\n\n                        if( !isReqFrom || (isReqFrom && reqMoreEl.checked) ){\n                            // IF FIELD IS VALID\n                            let errorClasses = options.cssClasses.error + ' ' + options.cssClasses.errorEmpty + ' ' + options.cssClasses.errorRule;\n                            removeClass( containerEl, errorClasses );\n                            addClass( containerEl, options.cssClasses.valid );\n                        }\n\n                    } else {\n\n                        // IF FIELD IS NOT VALID\n                        let extraErrorClass = options.cssClasses.errorRule;\n\n                        // HANDLE CASE OF FIELD data-checks\n                        let isChecks = fieldEl.matches('[data-checks]'),\n                            checkedElLength = (isChecks ? containerEl.querySelectorAll('[name=\"' + fieldEl.name + '\"]:checked').length : 0);\n\n                        if( (!isChecks && (obj.errors && obj.errors.empty)) || (isChecks && checkedElLength === 0) ){\n                            extraErrorClass = options.cssClasses.errorEmpty;\n                        }\n\n                        let errorClasses = options.cssClasses.error + ' ' + extraErrorClass,\n                            errorClassToRemove = options.cssClasses.errorEmpty + ' ' + options.cssClasses.errorRule;\n                        removeClass( containerEl, options.cssClasses.valid + ' ' + errorClassToRemove );\n                        addClass( containerEl, errorClasses );\n\n                    }\n                }\n            }\n        });\n\n    }\n\n}\n","\nimport { customEvents } from './helpers';\nimport { listenerCallbacks } from './listenerCallbacks';\n\nexport function formStartup( formEl, options ){\n\n    formEl.noValidate = true;\n\n    let fieldOptions = options.fieldOptions,\n        formOptions = options.formOptions;\n\n    // HANDLE FIELD VALIDATION\n    if( fieldOptions.handleValidation ){\n        \n        // VALIDATION WITH ATTRIBUTES LIKE HTML ONES ( ALSO FOR BUG FIXING, EG: maxlength IN ANDROID )\n        if( fieldOptions.strictHtmlValidation ){\n            \n            // maxlength\n            // MAXLENGTH IS BUGGY IN ANDROID BROWSERS\n            formEl.addEventListener('keypress', listenerCallbacks.keypressMaxlength, false);\n\n            // data-type=\"number\"\n            // SINCE VALIDATING type=\"number\" WITH NON NUMERIC CHARS WILL RETURN EMPTY STRING IN SOME BROWSERS ( EG: FIREFOX )\n            formEl.addEventListener('input', listenerCallbacks.dataTypeNumber, false);\n            \n        }\n        \n        if( fieldOptions.preventPasteFields && formEl.querySelectorAll( fieldOptions.preventPasteFields ).length ){\n            // INIT EVENT LISTENER FOR \"PASTE\" EVENT TO PREVENT IT ON SPECIFIED FIELDS\n            formEl.addEventListener('paste', listenerCallbacks.pastePrevent, false);\n        }\n\n        // INIT EVENTS LISTENER ( AS IN fieldOptions )\n        fieldOptions.validateOnEvents.split(' ').forEach(function( eventName ){\n            let useCapturing = (eventName === 'blur' ? true : false);\n            formEl.addEventListener(eventName, listenerCallbacks.validation, useCapturing);\n        });\n\n        formEl.addEventListener(customEvents.field.validation, listenerCallbacks.validationEnd, false);\n\n    }\n    \n    // HANDLE FORM SUBMIT\n    if( formOptions.handleSubmit ){\n        // INIT FORM SUBMIT ( DEFAULT AND AJAX )\n        formEl.addEventListener('submit', listenerCallbacks.submit);\n\n        if( formOptions.ajaxSubmit ){\n            if( formEl.getAttribute('enctype') ){\n                formOptions.ajaxOptions.headers['Content-Type'] = formEl.getAttribute('enctype');\n            }\n\n            if( formEl.getAttribute('method') ){\n                formOptions.ajaxOptions.method = formEl.getAttribute('method').toUpperCase();\n            }\n\n            if( formEl.getAttribute('action') ){\n                formOptions.ajaxOptions.url = formEl.getAttribute('action');\n            }\n        }\n    }\n\n}\n","\nimport { getFilledFields, isFieldForChangeEvent } from './helpers';\nimport { listenerCallbacks } from './listenerCallbacks';\n\nexport const init = function( formEl ){\n\n    const instance = formEl.formjs;\n    const formFields = getFilledFields( formEl );\n\n    // VALIDATE ALL FILLED FIELDS\n    return Promise.all( formFields.map(fieldEl => {\n\n        const isFieldForChangeEventBoolean = isFieldForChangeEvent(fieldEl);\n        const fakeEventObj = { target: fieldEl, type: (isFieldForChangeEventBoolean ? 'change': '') };\n        return listenerCallbacks.validation( fakeEventObj );\n\n    }) ).then(fields => {\n        instance.isInitialized = true;\n        return { instance, fields };\n    });;\n\n}\n","\nimport { fieldsStringSelector } from './fieldsStringSelector';\nimport { getUniqueFields } from './getUniqueFields';\n\nexport const getFilledFields = formEl => {\n    return getUniqueFields( formEl.querySelectorAll(fieldsStringSelector) )\n    .map(fieldEl => {\n\n        const name = fieldEl.name,\n              type = fieldEl.type,\n              isCheckboxOrRadio = (type === 'checkbox' || type === 'radio'),\n              fieldChecked = formEl.querySelector('[name=\"' + name + '\"]:checked'),\n              isReqFrom = fieldEl.matches('[data-required-from]'),\n              reqMoreEl = (isReqFrom ? formEl.querySelector(fieldEl.getAttribute('data-required-from')) : null);\n\n        return (\n            isCheckboxOrRadio ? (fieldChecked || null) :\n            (isReqFrom && reqMoreEl.checked) || (!isReqFrom && fieldEl.value) ? fieldEl : null\n        );\n\n    })\n    .filter(fieldEl => fieldEl !== null);\n}\n","\nimport { getValidateFieldDefault, isDOMNode, runFunctionsSequence } from './helpers';\nimport { isValid } from './isValid';\n\nexport function checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    if( !isDOMNode(fieldEl) ){\n        const obj = getValidateFieldDefault({fieldEl});\n        return Promise.resolve(obj);\n    }\n\n    const isValidValue =      fieldEl.value.trim().length > 0,\n          isRequired =        fieldEl.required,\n          isReqFrom =         fieldEl.matches('[data-required-from]'),\n          isValidateIfFilled =fieldEl.matches('[data-validate-if-filled]'),\n          rfsObject = {\n            functionsList: fieldOptions.beforeValidation,\n            data: {fieldEl}\n        };\n\n    return runFunctionsSequence(rfsObject)\n        .then(data => {\n\n            let dataObj = data.pop();\n            return new Promise(resolve => {\n                if(\n                    (!isRequired && !isValidateIfFilled && !isReqFrom) ||   // IT IS A NORMAL FORM FIELD\n                    (isValidateIfFilled && !isValidValue) ||                // IT IS data-validate-if-filled AND EMPTY\n                    (isReqFrom && !isRequired )                             // IT IS data-required-from AND NOT required\n                ){\n\n                    dataObj.result = true;\n                    resolve( dataObj );\n                \n                } else {\n\n                    resolve( isValid( fieldEl, fieldOptions, validationRules, validationErrors ) );\n                    \n                }\n\n            });\n\n        });\n\n}\n","\nimport { getValidateFieldDefault, mergeObjects, toCamelCase } from './helpers';\nimport { validationRulesAttributes } from './validationRules';\n\nexport function isValid( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    const fieldType = ( fieldEl.matches('[data-subtype]') ? toCamelCase( fieldEl.getAttribute('data-subtype') ) : fieldEl.type ),\n          fieldValue = fieldEl.value,\n          isValidValue = fieldValue.trim().length > 0,\n          // ALPHABETICAL REVERSE ORDER\n          fieldAttributes = Array.from(fieldEl.attributes).sort((a,b) => { return a.name < b.name });\n\n    const attrValidations = [];\n    let attrValidationsResult = isValidValue,\n        obj = getValidateFieldDefault({result: isValidValue, fieldEl});\n\n    if( !obj.result ){\n        obj.errors = { empty: true };\n        return Promise.resolve(obj);\n    }\n\n    // COLLECT SPECIFIC VALIDATIONS FOR validationRulesAttributes\n    fieldAttributes.forEach(attr => {\n        // FOR data-* ATTRIBUTES -> REMOVE \"data-\" AND TRANSFORM TO CAMELCASE\n        const attrName = toCamelCase( attr.name.replace('data-', '') ),\n              attrValue = attr.value,\n              isAttrValueWithFn = attrName === 'type' && typeof validationRulesAttributes[attrValue] === 'function',\n              isAttrNameWithFn = typeof validationRulesAttributes[attrName] === 'function';\n\n        if( isAttrValueWithFn || isAttrNameWithFn ){\n\n            const extraValObj = {\n                    attrName: (isAttrValueWithFn ? attrValue : attrName),\n                    attrValue: attrValue,\n                    fieldEl,\n                    fieldOptions\n                };\n\n            if( isAttrValueWithFn || attrName === 'requiredFrom' ){\n                // THESE VALIDATIONS MUST RUN BEFORE ALL OTHERS\n                attrValidations.unshift( extraValObj );\n            } else {\n                attrValidations.push( extraValObj );\n            }\n\n        }\n    });\n\n    return new Promise(resolve => {\n\n        // RUN SPECIFIC VALIDATIONS FOR validationRulesAttributes\n        attrValidations.forEach(item => {\n            const extraVal = validationRulesAttributes[item.attrName]( item );\n            if( !extraVal.result ){\n                obj = mergeObjects({}, obj, extraVal);\n                attrValidationsResult = false;\n            }\n        });\n\n        // RUN VALIDATIONS FOR validationRules\n        if( typeof validationRules[fieldType] === 'function' ){\n            resolve( validationRules[fieldType](fieldValue, fieldEl) );\n        } else {\n            resolve( obj );\n        }\n\n    }).then(data => {\n\n        obj = mergeObjects( {}, obj, data, {fieldEl} );\n        obj.result = obj.result && attrValidationsResult;\n\n        if( !obj.result ){\n            const fieldErrors = (typeof validationErrors[fieldType] === 'function' ? validationErrors[fieldType](fieldValue, fieldEl) : {});\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {};\n            }\n            obj.errors.rule = true;\n            obj.errors = mergeObjects({}, obj.errors, fieldErrors);\n        }\n        \n        return obj;\n\n    });\n\n}\n","\nimport { fieldsStringSelector, getUniqueFields, getValidateFieldDefault, getValidateFormDefault, mergeObjects } from './helpers';\nimport { checkFieldValidity } from './checkFieldValidity';\n\nexport function checkFormValidity( formEl, fieldOptions, validationRules, validationErrors, fieldToSkip = null ){\n\n    fieldOptions = mergeObjects( {}, fieldOptions, {focusOnRelated: false} );\n\n    const obj = getValidateFormDefault(),\n          fieldsList = getUniqueFields( formEl.querySelectorAll(fieldsStringSelector) );\n\n    return Promise.all( fieldsList.map(fieldEl => {\n\n        if( fieldToSkip && fieldEl === fieldToSkip ){\n            const obj2 = getValidateFieldDefault({fieldEl, result: true});\n            return Promise.resolve(obj2);\n        }\n        \n        return checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors );\n\n    }) ).then(list => {\n\n        let areAllFieldsValid = list.filter(fieldObj => !fieldObj.result).length === 0;\n        obj.result = areAllFieldsValid;\n        obj.fields = list;\n\n        return obj;\n\n    });\n\n}\n","\nimport { version }              from './modules/version';\nimport { customEvents, dispatchCustomEvent, excludeSelector, mergeObjects, removeClass } from './modules/helpers';\nimport { options }              from './modules/options';\nimport { validationRules }      from './modules/validationRules';\nimport { validationErrors }     from './modules/validationErrors';\nimport { listenerCallbacks }    from './modules/listenerCallbacks';\nimport { constructorFn }        from './modules/constructor';\nimport { destroy }              from './modules/destroy';\nimport { init }                 from './modules/init';\nimport { checkFieldValidity }   from './modules/checkFieldValidity';\nimport { checkFormValidity }    from './modules/checkFormValidity';\n\nclass Form {\n\n    constructor( formEl, optionsObj ){\n        constructorFn(this, formEl, optionsObj);\n    }\n\n    destroy(){\n        destroy(this.formEl, this.options);\n    }\n    \n    getFormData(){\n        const formFieldsEl = this.formEl.querySelectorAll('input, select, textarea'),\n              filteredFields = Array.from( formFieldsEl ).filter( elem => elem.matches(excludeSelector) );\n        return this.options.formOptions.getFormData(filteredFields);\n    }\n\n    init(){\n        return init(this.formEl);\n    }\n\n    validateField( fieldEl, fieldOptions ){\n        fieldEl = (typeof fieldEl === 'string' ? this.formEl.querySelector(fieldEl) : fieldEl);\n        fieldOptions = mergeObjects({}, this.options.fieldOptions, fieldOptions);\n        const formEl = this.formEl;\n        const skipUIfeedback = this.options.fieldOptions.skipUIfeedback;\n        return checkFieldValidity(fieldEl, fieldOptions, this.validationRules, this.validationErrors)\n            .then(obj => {\n                return new Promise(resolve => {\n                    if( obj.fieldEl ){\n                        dispatchCustomEvent( obj.fieldEl, customEvents.field.validation, obj, { bubbles: false } );\n                        dispatchCustomEvent( formEl, customEvents.field.validation, obj );\n                        if( fieldOptions.onValidationCheckAll && obj.result ){\n                            // FORCE skipUIfeedback TO true\n                            fieldOptions.skipUIfeedback = true;\n                            resolve(\n                                checkFormValidity( formEl, fieldOptions, this.validationRules, this.validationErrors, fieldEl )\n                                    .then(dataForm => {\n                                        const clMethodName = dataForm.result ? 'add' : 'remove';\n                                        formEl.classList[clMethodName]( this.options.formOptions.cssClasses.valid );\n                                        dispatchCustomEvent( formEl, customEvents.form.validation, dataForm );\n                                        // RESTORE skipUIfeedback TO THE ORIGINAL VALUE\n                                        fieldOptions.skipUIfeedback = skipUIfeedback;\n                                        return obj;\n                                    })\n                            );\n                        } else if( !obj.result ){\n                            removeClass( formEl, this.options.formOptions.cssClasses.valid );\n                        }\n                    }\n                    resolve( obj );\n                });\n            });\n    }\n\n    validateForm( fieldOptions ){\n        fieldOptions = mergeObjects({}, this.options.fieldOptions, fieldOptions);\n        const formEl = this.formEl;\n        return checkFormValidity(formEl, fieldOptions, this.validationRules, this.validationErrors)\n            .then(data => {\n                const clMethodName = data.result ? 'add' : 'remove';\n                formEl.classList[clMethodName]( this.options.formOptions.cssClasses.valid );\n                listenerCallbacks.validationEnd( {data} );\n                dispatchCustomEvent( formEl, customEvents.form.validation, data );\n                return data;\n            });\n\n    }\n    \n    static addValidationErrors( errorsObj ){\n        this.prototype.validationErrors = mergeObjects({}, this.prototype.validationErrors, errorsObj);\n    }\n\n    static addValidationRules( rulesObj ){\n        this.prototype.validationRules = mergeObjects({}, this.prototype.validationRules, rulesObj);\n    }\n    \n    static setOptions( optionsObj ){\n        this.prototype.options = mergeObjects({}, this.prototype.options, optionsObj);\n    }\n\n}\n\nForm.prototype.isInitialized = false;\nForm.prototype.options = options;\nForm.prototype.validationErrors = validationErrors;\nForm.prototype.validationRules = validationRules;\nForm.prototype.version = version;\n\nexport default Form;\n","\nimport { checkFormEl, isNodeList, mergeObjects }   from './helpers';\nimport { formStartup }                             from './formStartup';\n\nexport function constructorFn( self, formEl, optionsObj ){\n\n    let argsL = arguments.length,\n        checkFormElem = checkFormEl(formEl);\n\n    if( argsL === 0 || (argsL > 0 && !formEl) ){\n        throw new Error('First argument \"formEl\" is missing or falsy!');\n    }\n    if( isNodeList(formEl) ){\n        throw new Error('First argument \"formEl\" must be a single DOM node or a form CSS selector, not a NodeList!');\n    }\n    if( !checkFormElem.result ){\n        throw new Error('First argument \"formEl\" is not a DOM node nor a form CSS selector!');\n    }\n\n    self.formEl = checkFormElem.element;\n    self.formEl.formjs = self;\n    self.options = mergeObjects({}, self.constructor.prototype.options, optionsObj);\n\n    // BINDING CONTEXT FOR FUTURE EXECUTION\n    const cbList = [\n        // IN fieldOptions\n        'beforeValidation',\n        // IN formOptions\n        'beforeSend',\n        'getFormData'\n    ];\n    cbList.forEach(cbName => {\n        let optionType = self.options.formOptions[cbName] ? 'formOptions' : 'fieldOptions',\n            cbOpt = self.options[optionType][cbName];\n\n        if( cbOpt ){\n            self.options[optionType][cbName] = ( Array.isArray(cbOpt) ? cbOpt.map(cbFn => cbFn.bind(self)) : cbOpt.bind(self) );\n        }\n    });\n\n    formStartup( self.formEl, self.options );\n    \n}\n","\nimport { customEvents } from './helpers';\nimport { listenerCallbacks } from './listenerCallbacks';\n\n\nexport function destroy( formEl, options ){\n\n    if( options.fieldOptions.strictHtmlValidation ){\n        formEl.removeEventListener('keypress', listenerCallbacks.keypressMaxlength, false);\n        formEl.removeEventListener('input', listenerCallbacks.dataTypeNumber, false);\n    }\n\n    if( options.fieldOptions.preventPasteFields ){\n        formEl.removeEventListener('paste', listenerCallbacks.pastePrevent, false);\n    }\n\n    if( options.formOptions.handleSubmit ){\n        formEl.removeEventListener('submit', listenerCallbacks.submit);\n    }\n\n    options.fieldOptions.validateOnEvents.split(' ').forEach(function( eventName ){\n        let useCapturing = (eventName === 'blur' ? true : false);\n        formEl.removeEventListener(eventName, listenerCallbacks.validation, useCapturing);\n    });\n\n    formEl.removeEventListener(customEvents.field.validation, listenerCallbacks.validationEnd, false);\n\n    delete formEl.formjs;\n    \n}\n","\nexport const excludeSelector = ':not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"file\"]):not([data-exclude-data])'\n","\nexport const validationErrors = {\n\n    email: function ( string ) {\n        const obj = {};\n\n        if( string.indexOf('@') === -1 ){\n\n            // @ IS MISSING\n            obj.missingAtChar = true;\n\n        } else {\n\n            let splitAt_at = string.split('@');\n            if( splitAt_at[0].length === 0 ){\n\n                // USER NAME IS MISSING\n                obj.missingUserName = true;\n\n            }\n\n            if( splitAt_at[1].length === 0 ){\n\n                // IS EMPTY AFTER @\n                obj.missingDomain = true;\n                obj.missingExtensionDot = true;\n                obj.missingExtension = true;\n\n            } else if( splitAt_at[1].indexOf('.') === -1 ) {\n\n                // DOT IS MISSING\n                obj.missingExtensionDot = true;\n                obj.missingExtension = true;\n\n            } else {\n\n                // EXTENSION MISSING OR NOT LONG ENOUGH\n                let splitAt_dot = splitAt_at[1].split('.'),\n                    extLength = splitAt_dot[1].length;\n                if( extLength === 0 ) {\n                    obj.missingExtension = true;\n                } else if( extLength < 2 ){\n                    obj.minlengthExtension = true;\n                }\n\n            }\n        }\n\n        return obj;\n\n    }\n\n}"],"names":["addClass","element","cssClasses","split","forEach","className","classList","add","isNodeList","nodeList","NodeList","prototype","isPrototypeOf","removeClass","remove","isDOMNode","node","Element","checkFormEl","formEl","isString","isFormSelector","document","querySelector","tagName","toLowerCase","result","customEvents","validation","submit","mergeObjects","out","i","arguments","length","obj","key","isArray","Object","toString","call","isObject","hasOwnProperty","concat","slice","Array","push","dispatchCustomEvent","elem","eventName","data","eventOptions","bubbles","eventObj","Event","dispatchEvent","fieldsStringSelector","getSplitChar","string","splitChar","indexOf","getUniqueFields","currentFieldName","currentFieldType","from","filter","fieldEl","name","type","matches","getValidateFieldDefault","getValidateFormDefault","fields","isFieldForChangeEvent","runFunctionsSequence","functionsList","stopConditionFn","reduce","acc","promiseFn","then","res","dataNew","Promise","resolve","dataList","serializeObject","constructor","keys","a","k","encodeURIComponent","join","toCamelCase","replace","all","letter","toUpperCase","defaultCallbacksInOptions","fieldOptions","beforeValidation","fieldObj","this","options","dirty","containerEl","closest","value","skipUIfeedback","pending","formOptions","getFormData","filteredFields","formData","isCheckbox","isRadio","isSelect","checked","checkboxes","querySelectorAll","field","checkedRadio","selectedOpts","option","selected","error","errorEmpty","errorRule","valid","focusOnRelated","handleFileUpload","handleValidation","maxFileSize","onValidationCheckAll","preventPasteFields","strictHtmlValidation","validateOnEvents","ajaxOptions","cache","credentials","headers","Content-Type","Accept","method","mode","redirect","timeout","url","location","href","ajaxSubmit","beforeSend","ajaxComplete","ajaxError","ajaxPending","ajaxSuccess","handleSubmit","validationRulesAttributes","checkbox","dataChecksEl","checks","attrValue","getAttribute","JSON","parse","checkedElLength","isMinOk","isMaxOk","errors","minChecks","maxChecks","e","Error","equalTo","checkFromEl","exactLength","valueLength","minlength","maxlength","file","MIMEtype","accept","RegExp","filesList","files","exceedMaxFileSize","size","isAcceptedFileType","test","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","stringLength","max","isDate","maxVal","reverse","min","minVal","pattern","fieldPattern","radio","fieldChecked","trim","requiredFrom","isValidValue","reqMoreEl","required","event","target","instance","formjs","formCssClasses","isAjaxForm","btnEl","eventPreventDefault","enableBtn","disabled","preventDefault","validateForm","formValidation","beforeSendData","stopExecution","formDataObj","callbacksBeforeSend","pop","timeoutTimer","isMultipart","body","formDataMultipart","FormData","append","idx","stringify","Headers","controller","AbortController","signal","window","setTimeout","abort","fetch","response","ok","reject","fetchMethod","get","contentType","headerOpt","getFetchMethod","catch","finally","clearTimeout","ajaxCall","listenerCallbacks","fieldValue","stopImmediatePropagation","valueReplaced","maxLength","keyPressed","which","keyCode","allowedKeys","self","isFieldForChangeEventBoolean","isReqFrom","isReqMore","findReqMoreEl","findReqFromEl","id","focus","validateField","realtedFieldEqualTo","fieldsArray","errorClasses","extraErrorClass","isChecks","empty","errorClassToRemove","formStartup","noValidate","addEventListener","useCapturing","init","formFields","map","isCheckboxOrRadio","getFilledFields","isInitialized","checkFieldValidity","validationRules","validationErrors","isRequired","isValidateIfFilled","rfsObject","dataObj","fieldType","fieldAttributes","attributes","sort","b","attrValidations","attrValidationsResult","attr","attrName","isAttrValueWithFn","isAttrNameWithFn","extraValObj","unshift","item","extraVal","fieldErrors","rule","isValid","checkFormValidity","fieldToSkip","fieldsList","obj2","list","areAllFieldsValid","Form","[object Object]","optionsObj","argsL","checkFormElem","cbList","cbName","optionType","cbOpt","cbFn","bind","constructorFn","removeEventListener","destroy","formFieldsEl","dataForm","clMethodName","errorsObj","rulesObj","email","missingAtChar","splitAt_at","missingUserName","missingDomain","missingExtensionDot","missingExtension","extLength","minlengthExtension","date","number","version"],"mappings":"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"}