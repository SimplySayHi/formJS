{"version":3,"file":"formjs-esm.min.js","sources":["../src/modules/helpers/addClass.js","../src/modules/helpers/isNodeList.js","../src/modules/helpers/removeClass.js","../src/modules/helpers/isDOMNode.js","../src/modules/helpers/customEvents.js","../src/modules/helpers/mergeObjects.js","../src/modules/helpers/isPlainObject.js","../src/modules/helpers/dispatchCustomEvent.js","../src/modules/helpers/fieldsStringSelector.js","../src/modules/helpers/finalizeFormPromise.js","../src/modules/helpers/getDateAsNumber.js","../src/modules/helpers/getSplitChar.js","../src/modules/helpers/getUniqueFields.js","../src/modules/helpers/getFormFields.js","../src/modules/helpers/getJSONobjectFromFieldAttribute.js","../src/modules/helpers/mergeValidateFieldDefault.js","../src/modules/helpers/isFieldForChangeEvent.js","../src/modules/helpers/runFunctionsSequence.js","../src/modules/helpers/serializeObject.js","../src/modules/helpers/toCamelCase.js","../src/modules/options.js","../src/modules/optionsUtils/beforeValidation.js","../src/modules/helpers/checkDirtyField.js","../src/modules/optionsUtils/getFormData.js","../src/modules/validationRules.js","../src/modules/validationRules/date.js","../src/modules/validationRules/email.js","../src/modules/validationRules/number.js","../src/modules/validationRules/checkbox.js","../src/modules/validationRules/checks.js","../src/modules/validationRules/equalTo.js","../src/modules/validationRules/exactLength.js","../src/modules/validationRules/file.js","../src/modules/validationRules/length.js","../src/modules/validationRules/max.js","../src/modules/validationRules/maxlength.js","../src/modules/validationRules/min.js","../src/modules/validationRules/minlength.js","../src/modules/validationRules/pattern.js","../src/modules/validationRules/radio.js","../src/modules/listenerCallbacks/dataTypeNumber.js","../src/modules/listenerCallbacks/formValidationEnd.js","../src/modules/listenerCallbacks/keypressMaxlength.js","../src/modules/listenerCallbacks/pastePrevent.js","../src/modules/ajaxCall.js","../src/modules/listenerCallbacks/submit.js","../src/modules/listenerCallbacks/groupValidationEnd.js","../src/modules/listenerCallbacks/validation.js","../src/modules/listenerCallbacks/validationEnd.js","../src/modules/checkFieldValidity.js","../src/modules/isValid.js","../src/modules/checkFieldsValidity.js","../src/modules/helpers/mergeValidateFormDefault.js","../src/index.js","../src/modules/helpers/checkFormEl.js","../src/modules/formStartup.js","../src/modules/destroy.js","../src/modules/helpers/finalizeFieldPromise.js","../src/modules/helpers/finalizeFieldsGroupPromise.js","../src/modules/helpers/getFilledFields.js"],"sourcesContent":["\nexport const addClass = ( element, cssClasses = '' ) => {\n    element && element.classList.add( ...cssClasses.split(' ') )\n}\n","\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList )\n}\n","\nexport const removeClass = ( element, cssClasses = '' ) => {\n    element && element.classList.remove( ...cssClasses.split(' ') )\n}\n","\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node )\n}\n","\nexport const customEvents = {\n    field: {\n        validation: 'fjs.field:validation'\n    },\n    form: {\n        destroy:    'fjs.form:destroy',\n        init:       'fjs.form:init',\n        submit:     'fjs.form:submit',\n        validation: 'fjs.form:validation'\n    },\n    group: {\n        validation: 'fjs.group:validation'\n    }\n}\n","\nimport { isPlainObject } from './isPlainObject'\n\nexport const mergeObjects = function( out = {} ){\n    Array.from(arguments).slice(1).filter(arg => !!arg).forEach(arg => {\n        Object.keys(arg).forEach(key => {\n            if( Array.isArray(arg[key]) ){\n                out[key] = (out[key] || []).concat( arg[key].slice(0) )\n            } else if( isPlainObject(arg[key]) ){\n                out[key] = mergeObjects((out[key] || {}), arg[key])\n            } else {\n                // * STRING | NUMBER | BOOLEAN | FUNCTION\n                if( Array.isArray(out[key]) ){\n                    // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                    out[key].push(arg[key])\n                } else {\n                    out[key] = arg[key]\n                }\n            }\n        })\n    })\n\n    return out\n}\n","\nexport const isPlainObject = object => {\n    return Object.prototype.toString.call( object ) === '[object Object]'\n}\n","\nimport { mergeObjects } from './mergeObjects'\n\nexport const dispatchCustomEvent = ( elem, eventName, eventOptions ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions)\n    const eventObj = new CustomEvent(eventName, eventOptions)\n    elem.dispatchEvent( eventObj )\n}\n","\nexport const fieldsStringSelector = 'input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"hidden\"]), select, textarea'\n","\nexport const finalizeFormPromise = ({fields, result}) => {\n    if( result ){\n        return Promise.resolve(fields)\n    }\n    return Promise.reject(fields)\n}\n","\nimport { getSplitChar } from './getSplitChar'\n\nconst formatMap = {\n    'YYYY-MM-DD': function(dateArray){\n        return dateArray\n    },\n    'MM-DD-YYYY': function(dateArray){\n        return [dateArray[2], dateArray[0], dateArray[1]]\n    },\n    'DD-MM-YYYY': function(dateArray){\n        return dateArray.reverse()\n    }\n}\n\nexport const getDateAsNumber = ( dateString, dateFormat ) => {\n    dateFormat = dateFormat || 'YYYY-MM-DD'\n    const splitChar = getSplitChar(dateString)\n\n    if( dateFormat.indexOf(splitChar) < 0 ){\n        return\n    }\n\n    dateFormat = dateFormat.replace(/[^YMD]/g, '-')\n    dateString = dateString.split(splitChar)\n    dateString = formatMap[dateFormat](dateString).join('')\n    \n    return dateString\n}\n","\nexport const getSplitChar = string => {\n    // MATCH ANY NON-DIGIT CHAR\n    const separator = string.match(/\\D/)\n    return (separator && separator.length > 0) ? separator[0] : null\n}\n","\nexport const getUniqueFields = $nodeList => {\n\n    let currentFieldName = ''\n    let currentFieldType = ''\n\n    return Array.from( $nodeList ).filter($field => {\n        const name = $field.name\n        const type = $field.type\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false\n        }\n        \n        if( !$field.matches('[data-required-from]') ){\n            currentFieldName = name\n            currentFieldType = type\n        }\n        \n        return true\n    })\n    \n}\n","\nimport { getUniqueFields } from './getUniqueFields'\n\n// TO SIMULATE fieldsStringSelector => { hidden: false }\n// TO SIMULATE excludeSelector ( USED IN METHOD getFormData ) => { file: false, excludeData: false } => ':not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"file\"]):not([data-exclude-data])'\nexport const getFormFields = ( $form, { unique = false, hidden = true, file = true, excludeData = true } = {} ) => {\n    const BASIC_SELECTOR = 'select, textarea, input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"])'\n    const FIELDS_SELECTOR = `${BASIC_SELECTOR}${hidden ? '' : ':not([type=\"hidden\"])'}${file ? '' : ':not([type=\"file\"])'}${excludeData ? '' : ':not([data-exclude-data])'}`\n    \n    const $fields = unique ? getUniqueFields($form.elements) : Array.from($form.elements)\n\n    return $fields.filter( $el => $el.matches( FIELDS_SELECTOR ) )\n}\n","\nexport const getJSONobjectFromFieldAttribute = ( $field, attrName ) => {\n    const $customAttr = $field.closest(`[${attrName}]`)\n    return ($customAttr && JSON.parse($customAttr.getAttribute(attrName))) || {}\n}\n","\nimport { mergeObjects } from './mergeObjects'\n\nexport const mergeValidateFieldDefault = obj => {\n    return mergeObjects({}, { result: false, $field: null }, obj)\n}\n","\nexport const isFieldForChangeEvent = $field => {\n    return $field.matches('select, [type=\"radio\"], [type=\"checkbox\"], [type=\"file\"]')\n}\n","\nimport { mergeObjects } from './mergeObjects'\n\nexport const runFunctionsSequence = ( { functionsList = [], data = {}, stopConditionFn = () => false } = {} ) => {\n    return functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1])\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res)\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result)\n                    return res\n                })\n        })\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList)\n}\n","\nexport const serializeObject = obj => {\n    const objToString = (\n            (obj && typeof obj === 'object' && obj.constructor === Object) ? \n            Object.keys(obj)\n                .reduce((a,k) => {\n                    a.push(k+'='+encodeURIComponent(obj[k]))\n                    return a\n                },[]).join('&') : \n            obj\n    )\n    return objToString\n}\n","\nexport const toCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase() })\n}\n","\nimport { beforeValidation } from './optionsUtils/beforeValidation'\nimport { getFormData } from './optionsUtils/getFormData'\n\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [beforeValidation],\n        cssClasses: {\n            dirty:              'is-dirty',\n            error:              'has-error',\n            errorEmpty:         'has-error-empty',\n            errorRule:          'has-error-rule',\n            pending:            'is-pending',\n            valid:              'is-valid'\n        },\n        focusOnRelated:         true,\n        maxFileSize:            10,\n        onValidationCheckAll:   false,\n        preventPasteFields:     '[type=\"password\"], [data-equal-to]',\n        questionContainer:      '[data-formjs-question]',\n        skipUIfeedback:         false,\n        strictHtmlValidation:   true,\n        trimValue:              false,\n        validateOnEvents:       'input change'\n    },\n\n    formOptions: {\n        ajaxOptions:            {\n            cache:              'no-store',\n            credentials:        'same-origin',\n            headers: {\n                                'Content-Type': 'application/json',\n                                'Accept':       'application/json'\n            },\n            method:             'POST',\n            mode:               'same-origin',\n            redirect:           'follow',\n            timeout:            0,\n            url:                location.href\n        },\n        ajaxSubmit:             true,\n        beforeSend:             [],\n        cssClasses: {\n            ajaxComplete:       'ajax-complete',\n            ajaxError:          'ajax-error',\n            ajaxPending:        'ajax-pending',\n            ajaxSuccess:        'ajax-success',\n            submit:             'is-submitting',\n            valid:              'is-valid'\n        },\n        getFormData:            getFormData,\n        groups:                 [],\n        handleFileUpload:       true,\n        handleSubmit:           true,\n        onInitCheckFilled:      true\n    }\n    \n}\n","\nimport { addClass, checkDirtyField, isFieldForChangeEvent } from '../helpers'\n\nexport const beforeValidation = function beforeValidationDefault ( { $field, fieldOptions } ) {\n\n    if( fieldOptions.trimValue && !isFieldForChangeEvent($field) ){\n        $field.value = $field.value.trim()\n    }\n\n    checkDirtyField( $field, fieldOptions )\n\n    if( !fieldOptions.skipUIfeedback ){\n        addClass( $field.closest( fieldOptions.questionContainer ), fieldOptions.cssClasses.pending )\n    }\n\n}\n","\nimport { addClass } from './addClass'\nimport { isNodeList } from './isNodeList'\nimport { removeClass } from './removeClass'\n\nexport const checkDirtyField = ( $fields, fieldOptions ) => {\n\n    $fields = isNodeList($fields) ? Array.from( $fields ) : [$fields]\n\n    $fields.forEach($field => {\n        const isNotCheckboxOrRadio = !['checkbox', 'radio'].includes($field.type)\n        if( isNotCheckboxOrRadio ){\n            const $container = $field.closest( fieldOptions.questionContainer ) || $field\n            if( $field.value ){\n                addClass( $container, fieldOptions.cssClasses.dirty )\n            } else {\n                removeClass( $container, fieldOptions.cssClasses.dirty )\n            }\n        }\n    })\n    \n}\n","\nimport { getFormFields } from '../helpers'\n\nexport const getFormData = function getFormDataDefault( $filteredFields, trimValues ){\n\n    const formData = {}\n    const $form = this.$form\n    const $formFields = getFormFields($form)\n    let prevObj = formData\n  \n    $filteredFields.forEach($field => {\n        const isCheckbox = $field.type === 'checkbox'\n        const isRadio = $field.type === 'radio'\n        const isSelect = $field.matches('select')\n        const name = $field.name\n        let value = trimValues ? $field.value.trim() : $field.value\n  \n        if( isCheckbox ){\n\n            value = $field.checked\n            let $checkboxes = $formFields.filter($el => $el.name === name)\n            if( $checkboxes.length > 1 ){\n                value = []\n                let $checked = $checkboxes.filter((field) => field.checked)\n                $checked.forEach($field => {\n                    value.push($field.value)\n                })\n            }\n\n        } else if( isRadio ){\n\n            const $checkedRadio = $formFields.find($el => $el.matches(`[name=\"${name}\"]:checked`))\n            value = $checkedRadio ? $checkedRadio.value : null\n\n        } else if( isSelect ){\n\n            const $selectedOpts = Array.from($field.options).filter(option => option.selected)\n            if( $selectedOpts.length > 1 ){\n                value = []\n                $selectedOpts.forEach($field => { \n                    value.push($field.value)\n                })\n            }\n        }\n  \n        const nameSplit = name.split('.')\n        nameSplit.forEach((keyName, index, list) => {\n            const isLastKeyName = index + 1 === list.length\n  \n            if( Array.isArray(prevObj) ){\n                const keyNameSplit = keyName.split('___')\n                const arrPos = keyNameSplit[0] - 1\n                const arrayHasItemAtIndex = typeof prevObj[arrPos] !== 'undefined'\n                const arrItemKeyName = keyNameSplit[1]\n  \n                if( !arrayHasItemAtIndex ){\n                    prevObj.push({})\n                }\n  \n                keyName = arrItemKeyName\n\n                if( isLastKeyName ){\n                    prevObj[arrPos][keyName] = value\n                } else if( typeof prevObj[arrPos][keyName] === 'undefined' ) {\n                    prevObj[arrPos][keyName] = {}\n                }\n                \n                if( !isLastKeyName ){\n                    prevObj = prevObj[arrPos][keyName]\n                    return\n                }\n            } else {\n                const isKeyNameArray = keyName.endsWith('[]')\n                keyName = keyName.replace('[]', '')\n  \n                if( isLastKeyName ){\n                    prevObj[keyName] = value\n                } else if( typeof prevObj[keyName] === 'undefined' ){\n                    if( isKeyNameArray ){\n                        prevObj[keyName] = []\n                    } else {\n                        prevObj[keyName] = {}\n                    }\n                }\n            }\n  \n            prevObj = isLastKeyName ? formData : prevObj[keyName]\n        })\n    })\n  \n    return formData\n\n}\n","\nimport { date }         from './validationRules/date'\nimport { email }        from './validationRules/email'\nimport { number }       from './validationRules/number'\n\nimport { checkbox }     from './validationRules/checkbox'\nimport { equalTo }      from './validationRules/equalTo'\nimport { exactLength }  from './validationRules/exactLength'\nimport { file }         from './validationRules/file'\nimport { length }       from './validationRules/length'\nimport { max }          from './validationRules/max'\nimport { maxlength }    from './validationRules/maxlength'\nimport { min }          from './validationRules/min'\nimport { minlength }    from './validationRules/minlength'\nimport { pattern }      from './validationRules/pattern'\nimport { radio }        from './validationRules/radio'\n\nexport const validationRules = {\n    date,\n    email,\n    number,\n\n    checkbox,\n    equalTo,\n    exactLength,\n    file,\n    length,\n    max,\n    maxlength,\n    min,\n    minlength,\n    pattern,\n    radio\n}\n","\n/*\n    DATE AS ISO 8601 DATE FORMAT:\n    YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n*/\n\nexport const date = function( string ){\n    return {\n        result: /^((((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13578]|1[02])[ \\/\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13456789]|1[012])[ \\/\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.]02[ \\/\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ \\/\\-.]02[ \\/\\-.]29))$/g.test( string )\n    }\n}\n","\n// https://regex101.com/r/cdlyJy/3\n\nexport const email = function( string ){\n    return {\n        result: /^[a-zA-Z_-]([\\w.-]?[a-zA-Z0-9])*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?){2,})+$/.test( string )\n    }\n}\n","\n/*\n    ALL NUMBERS ( INTEGERS AND FLOATING )\n    VALID NUMBERS: 123 | 123.456 | .123\n*/\n\nexport const number = function( string ){\n    return {\n        result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n    }\n}","\nimport { getFormFields } from '../helpers'\nimport { checks } from './checks'\n\nexport const checkbox = function( value, $field ){\n    const $dataChecks = getFormFields($field.form).find( $el => $el.matches(`[name=\"${$field.name}\"][data-checks]`) )\n    return $dataChecks ? checks($dataChecks) : { result: $field.checked }\n}\n","\nimport { getFormFields } from '../helpers'\n\nexport const checks = function( $field ){\n    const attrValue = JSON.parse( $field.dataset.checks )\n    const checkedLength = getFormFields($field.form).filter($el => $el.matches(`[name=\"${$field.name}\"]:checked`)).length\n    const isMinOk = checkedLength >= attrValue[0]\n    const isMaxOk = checkedLength <= attrValue[1]\n    const obj = { result: isMinOk && isMaxOk }\n\n    if( !obj.result ){\n        obj.errors = { checks: true }\n        if( !isMinOk ){ obj.errors.minChecks = true }\n        if( !isMaxOk ){ obj.errors.maxChecks = true }\n    }\n\n    return obj\n}\n","\nimport { getFormFields } from '../helpers'\n\nexport const equalTo = function( value, $field ){\n    const $checkFrom = getFormFields($field.form).find( $el => $el.matches(`[name=\"${$field.dataset.equalTo}\"]`) )\n    return { result: value === $checkFrom.value }\n}\n","\nexport const exactLength = function( value, $field ){\n    const valueLength = value.length\n    const exactLength = $field.dataset.exactLength * 1\n    const obj = { result: valueLength === exactLength }\n\n    if( !obj.result ){\n        obj.errors = {}\n        if( valueLength < exactLength ){ obj.errors.minlength = true }\n        else { obj.errors.maxlength = true }\n    }\n\n    return obj\n}\n","\nexport const file = function( value, $field, fieldOptions ){\n    const maxFileSize = ($field.getAttribute('data-max-file-size') || fieldOptions.maxFileSize) * 1\n    const MIMEtype = $field.accept ? new RegExp($field.accept.replace( '*', '[^\\\\/,]+' )) : null\n    const filesList = Array.from($field.files)\n    const obj = { result: true }\n\n    filesList.forEach(file => {\n        const exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize\n        const isAcceptedFileType = MIMEtype !== null ? MIMEtype.test(file.type) : true\n\n        if( exceedMaxFileSize || !isAcceptedFileType ){\n            obj.result = false\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {}\n            }\n            if( exceedMaxFileSize ){ obj.errors.maxFileSize = true }\n            if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true }\n\n        }\n    })\n\n    return obj\n}\n","\nexport const length = function( value, $field ){\n    const valueL = value.length\n    const attrValue = JSON.parse( $field.dataset.length )\n    const isMinlengthOk = valueL >= attrValue[0]\n    const isMaxlengthOk = valueL <= attrValue[1]\n    const obj = { result: isMinlengthOk && isMaxlengthOk }\n\n    if( !obj.result ){\n        obj.errors = {}\n        if( !isMinlengthOk ){ obj.errors.minlength = true }\n        if( !isMaxlengthOk ){ obj.errors.maxlength = true }\n    }\n\n    return obj\n}\n","\nimport { getDateAsNumber } from '../helpers'\n\nexport const max = function( value, $field ){\n    let maxVal = $field.max\n    const dateFormat = $field.dataset.dateFormat\n    \n    if( $field.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat )\n        maxVal = maxVal.split('-').join('')\n    }\n\n    value = value * 1\n    maxVal = maxVal * 1\n    \n    return { result: value <= maxVal }\n}\n","\nexport const maxlength = function( value, $field ){\n    return { result: value.length <= $field.maxLength * 1 }\n}\n","\nimport { getDateAsNumber } from '../helpers'\n\nexport const min = function( value, $field ){\n    let minVal = $field.min\n    const dateFormat = $field.dataset.dateFormat\n    \n    if( $field.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat )\n        minVal = minVal.split('-').join('')\n    }\n\n    value = value * 1\n    minVal = minVal * 1\n    \n    return { result: value >= minVal }\n}\n","\nexport const minlength = function( value, $field ){\n    return { result: value.length >= $field.minLength * 1 }\n}\n","\nexport const pattern = function( value, $field ){\n    return { result: new RegExp($field.pattern).test(value) }\n}\n","\nimport { getFormFields } from '../helpers'\n\nexport const radio = function( value, $field ){\n    const $fieldChecked = getFormFields($field.form).find( $el => $el.matches(`[name=\"${$field.name}\"]:checked`) )\n    const isValid = $fieldChecked !== null && $fieldChecked.value.trim().length > 0\n\n    return { result: isValid }\n}\n","\nexport const dataTypeNumber = function( event ){\n\n    const $field = event.target\n    \n    if( $field.matches('[data-type=\"number\"]') ){\n        let fieldValue = $field.value\n        const hasInvalidChars = /[^\\d.,+\\-]/.test(fieldValue)\n        \n        if( hasInvalidChars ){\n            event.stopImmediatePropagation()\n            let valueReplaced = fieldValue.replace(/[^\\d.,+\\-]/g, '')\n            $field.value = valueReplaced\n        }\n    }\n\n}\n","\nexport const formValidationEnd = function( event ){\n    const $form = event.target\n    const options = $form.formjs.options\n    \n    if( !options.fieldOptions.skipUIfeedback ){\n        const clMethodName = event.detail.result ? 'add' : 'remove'\n        $form.classList[clMethodName]( options.formOptions.cssClasses.valid )\n    }\n}\n","\nexport const keypressMaxlength = function( event ){\n\n    const $field = event.target\n    \n    if( $field.matches( '[maxlength]' ) ){\n        const maxLength = $field.maxLength * 1\n        const keyPressed = event.which || event.keyCode\n        const allowedKeys = [8, 37, 38, 39, 46]\n\n        if( $field.value.length >= maxLength && allowedKeys.indexOf(keyPressed) === -1 ){\n            return false\n        }\n    }\n\n}\n","\nexport const pastePrevent = function( event ){\n\n    const $field = event.target\n    const fieldOptions = $field.form.formjs.options.fieldOptions\n\n    if( $field.matches( fieldOptions.preventPasteFields ) ){     \n        event.preventDefault()\n    }\n\n}\n","\nimport { addClass, getFormFields, mergeObjects, removeClass, serializeObject } from './helpers'\n\nconst getFetchMethod = (response, options) => {\n    const accept = options.headers.get('Accept')\n    const contentType = response.headers.get('Content-Type')\n    const headerOpt = accept || contentType || ''\n\n    if( headerOpt.indexOf('application/json') > -1 || headerOpt === '' ){\n        return 'json'\n    } else if( headerOpt.indexOf('text/') > -1 ){\n        return 'text'\n    } else {\n        return 'blob'\n    }\n}\n\nexport async function ajaxCall( $form, formDataObj, options ){\n\n    let timeoutTimer\n    const ajaxOptions = mergeObjects( {}, options.formOptions.ajaxOptions )\n    const isMultipart = ajaxOptions.headers['Content-Type'] === 'multipart/form-data'\n\n    ajaxOptions.body = formDataObj\n    \n    // POST A FormData OBJECT ( multipart )\n    if( isMultipart && options.formOptions.handleFileUpload ){\n        let formDataMultipart = new FormData()\n        \n        for(let key in ajaxOptions.body){\n            formDataMultipart.append( key, ajaxOptions.body[key] )\n        }\n        \n        getFormFields($form).filter($el => $el.type === 'file').forEach($field => {\n            Array.from($field.files).forEach((file, idx) => {\n                const name = `${$field.name}[${idx}]`\n                formDataMultipart.append( name, file, file.name )\n            })\n        })\n        \n        ajaxOptions.body = formDataMultipart\n    }\n\n    if( ajaxOptions.method === 'GET' ){\n\n        // FETCH WITH \"GET\" METHOD CAN'T HAVE \"body\". SO IT IS APPENDED TO THE URL\n        ajaxOptions.url += ( /\\?/.test(ajaxOptions.url) ? '&' : '?' ) + serializeObject( ajaxOptions.body )\n        delete ajaxOptions.body\n\n    } else {\n\n        if( ajaxOptions.headers['Content-Type'].indexOf('application/x-www-form-urlencoded') > -1 ){\n            // POST A NORMAL FORM\n            ajaxOptions.body = serializeObject( ajaxOptions.body )\n        } else if( !isMultipart ){\n            // POST A JSON STRING\n            ajaxOptions.body = JSON.stringify(ajaxOptions.body)\n        }\n\n    }\n\n    ajaxOptions.headers = new Headers( ajaxOptions.headers )\n\n    if ( ajaxOptions.timeout > 0 ) {\n        const controller = new AbortController()\n        const signal = controller.signal\n\n        ajaxOptions.signal = signal\n        timeoutTimer = window.setTimeout(() => {\n            controller.abort()\n        }, ajaxOptions.timeout)\n    }\n\n    return await fetch(ajaxOptions.url, ajaxOptions)\n        .then(response => {\n            if( !response.ok ){\n                throw new Error(response.statusText)\n            }\n            const fetchMethod = getFetchMethod(response, ajaxOptions)\n            return response[fetchMethod]()\n        })\n        .then(data => {\n            addClass( $form, options.formOptions.cssClasses.ajaxSuccess )\n            return data\n        })\n        .catch(error => {\n            addClass( $form, options.formOptions.cssClasses.ajaxError )\n            throw new Error(error.message)\n        })\n        .finally(() => {\n            if( timeoutTimer ){\n                window.clearTimeout( timeoutTimer )\n            }\n            removeClass( $form, `${options.formOptions.cssClasses.submit} ${options.formOptions.cssClasses.ajaxPending}` )\n            addClass( $form, options.formOptions.cssClasses.ajaxComplete )\n            Array.from($form.elements).find($el => $el.type === 'submit').disabled = false\n        })\n\n}\n","\nimport { addClass, customEvents, dispatchCustomEvent, removeClass, runFunctionsSequence } from '../helpers'\nimport { ajaxCall } from '../ajaxCall'\n\nexport function submit( event ){\n\n    const $form = event.target\n    const instance = $form.formjs\n    const options = instance.options\n    const formCssClasses = options.formOptions.cssClasses\n    const isAjaxForm = options.formOptions.ajaxSubmit\n    const $btn = Array.from($form.elements).find($el => $el.matches('[type=\"submit\"]'))\n\n    const eventPreventDefault = ( enableBtn = true ) => {\n        if( $btn && enableBtn ){ $btn.disabled = false }\n        if( event ){ event.preventDefault() }\n    }\n\n    if( isAjaxForm ){\n        eventPreventDefault(false)\n    }\n\n    if( $btn ){\n        if( $btn.disabled ){\n            eventPreventDefault(false)\n            return false\n        }\n        $btn.disabled = true\n    }\n\n    removeClass( $form, `${formCssClasses.ajaxComplete} ${formCssClasses.ajaxError} ${formCssClasses.ajaxSuccess}` )\n    addClass( $form, formCssClasses.submit )\n\n    instance.validateForm()\n        .then(data => {\n            \n            const hasGroup = typeof data.group !== 'undefined'\n\n            if( hasGroup && !data.canSubmit ){\n                return [{ stopExecution: true }]\n            }\n\n            const beforeSendData = {\n                stopExecution: false,\n                formData: isAjaxForm ? instance.getFormData() : null\n            }\n\n            const rfsObject = {\n                  functionsList: options.formOptions.beforeSend,\n                  data: beforeSendData,\n                  stopConditionFn: function(data){ return data.stopExecution }\n            }\n            return runFunctionsSequence(rfsObject)\n\n        }).then(dataList => {\n\n            if( dataList.some(({stopExecution}) => stopExecution) ){\n                eventPreventDefault()\n                return false\n            }\n            \n            if( isAjaxForm ){\n                const formData = dataList.pop().formData\n                addClass( $form, formCssClasses.ajaxPending )\n                dispatchCustomEvent( $form, customEvents.form.submit, { detail: ajaxCall( $form, formData, options ) } )\n            }\n\n        })\n        .catch(fields => {\n            eventPreventDefault()\n            removeClass( $form, formCssClasses.submit )\n        })\n    \n}\n","\nexport const groupValidationEnd = function( event ){\n\n    const detail = event.detail\n\n    if( detail.result ){\n        event.target.formjs.currentGroup = detail.group.next\n    }\n    \n}\n","\nimport { fieldsStringSelector, getFormFields, isFieldForChangeEvent } from '../helpers'\n\nexport const validation = function( event ){\n\n    const isChangeEvent = event.type === 'change'\n    const $field = event.target\n    const self = $field.form.formjs\n\n    if( $field.matches( fieldsStringSelector ) ){\n        const isFieldForChangeEventBoolean = isFieldForChangeEvent($field)\n        const hasOnlyChangeEvent = self.options.fieldOptions.validateOnEvents === 'change'\n        \n        if(\n            (isFieldForChangeEventBoolean && isChangeEvent) ||\n            (!isFieldForChangeEventBoolean && (!isChangeEvent || hasOnlyChangeEvent))\n        ){\n            \n            self.validateField( $field )\n                .then(() => {\n                    const type = $field.type\n                    const $relatedEqualTo = getFormFields($field.form).find($el => $el.matches(`[data-equal-to=\"${$field.name}\"]`))\n\n                    if(\n                        // FIELD IS ( required OR data-validate-if-filled ) AND RELATED FIELD data-equal-to HAS A VALUE\n                        ($field.required || $field.matches('[data-validate-if-filled]')) && \n                        !(type === 'checkbox' || type === 'radio') && \n                        $relatedEqualTo && $relatedEqualTo.value.trim() !== ''\n                    ){\n                        self.validateField( $relatedEqualTo ).catch(errors => {})\n                    }\n                })\n                .catch(errors => {})\n\n        }\n    }\n    \n}\n","\nimport { addClass, getFormFields, getJSONobjectFromFieldAttribute, removeClass, mergeObjects } from '../helpers'\n\nexport const validationEnd = function( event ){\n\n    const eventDetail = event.detail\n    const $field = eventDetail.$field\n    const dataFieldOptions = getJSONobjectFromFieldAttribute( $field, 'data-field-options' )\n    const fieldOptions = mergeObjects({}, $field.form.formjs.options.fieldOptions, dataFieldOptions)\n    const $container = $field.closest( fieldOptions.questionContainer )\n    const isReqFrom = $field.matches('[data-required-from]')\n    const $reqMore = getFormFields($field.form).find($el => $el.matches($field.dataset.requiredFrom))\n\n    if( !fieldOptions.skipUIfeedback ){\n\n        if( eventDetail.result ){\n\n            if( !isReqFrom || (isReqFrom && $reqMore.checked) ){\n                // IF FIELD IS VALID\n                const errorClasses = `${fieldOptions.cssClasses.error} ${fieldOptions.cssClasses.errorEmpty} ${fieldOptions.cssClasses.errorRule}`\n                removeClass( $container, errorClasses )\n                addClass( $container, fieldOptions.cssClasses.valid )\n            }\n\n        } else {\n\n            // IF FIELD IS NOT VALID\n            let extraErrorClass = fieldOptions.cssClasses.errorRule\n\n            // HANDLE CASE OF FIELD data-checks\n            const isChecks = $field.matches('[data-checks]')\n            const checkedElLength = (isChecks ? getFormFields($field.form).filter($el => $el.matches(`[name=\"${$field.name}\"]:checked`)).length : 0)\n\n            if( (!isChecks && (eventDetail.errors && eventDetail.errors.empty)) || (isChecks && checkedElLength === 0) ){\n                extraErrorClass = fieldOptions.cssClasses.errorEmpty\n            }\n\n            let errorClasses = `${fieldOptions.cssClasses.error} ${extraErrorClass}`\n            let errorClassToRemove = `${fieldOptions.cssClasses.errorEmpty} ${fieldOptions.cssClasses.errorRule}`\n            removeClass( $container, `${fieldOptions.cssClasses.valid} ${errorClassToRemove}` )\n            addClass( $container, errorClasses )\n\n        }\n    }\n\n}\n","\nimport {    \n    getFormFields,\n    getJSONobjectFromFieldAttribute,\n    isDOMNode,\n    mergeObjects,\n    mergeValidateFieldDefault,\n    removeClass,\n    runFunctionsSequence\n}                   from './helpers'\nimport { isValid }  from './isValid'\n\nexport async function checkFieldValidity( $field, fieldOptions, validationRules, validationErrors ){\n\n    if( !isDOMNode($field) ){\n        const obj = mergeValidateFieldDefault({$field})\n        return Promise.resolve(obj)\n    }\n\n    const $form = $field.form\n    const $formFields = getFormFields($form)\n    const isValidValue = $field.value.trim().length > 0\n    const dataFieldOptions = getJSONobjectFromFieldAttribute( $field, 'data-field-options' )\n\n    fieldOptions = mergeObjects( fieldOptions, dataFieldOptions )\n\n    // HANDLE FIELD data-required-from WHEN CHANGING ITS RELATED RADIO\n    if( $field.type === 'radio' ){\n        const $checked = $field.checked ? $field : $formFields.find($el => $el.matches(`[name=\"${$field.name}\"]:checked`))\n        const reqMoreIsChecked = $checked && $checked.matches('[data-require-more]')\n        const $findReqMore = reqMoreIsChecked ? $checked : $formFields.find($el => $el.matches(`[data-require-more][name=\"${$field.name}\"]`))\n        const $findReqFrom = $findReqMore ? $formFields.find($el => $el.matches(`[data-required-from=\"#${$findReqMore.id}\"]`)) : null\n        \n        if( $checked && $findReqFrom ){\n            $findReqFrom.required = $findReqMore.required && $findReqMore.checked\n            if( !reqMoreIsChecked ){\n                $findReqFrom.value = ''\n            } else if( fieldOptions.focusOnRelated ) {\n                $findReqFrom.focus()\n            }\n        }\n    }\n\n    // HANDLE FIELD data-require-more & data-required-from WHEN *-from IT'S FILLED\n    if( $field.matches('[data-required-from]') && isValidValue ){\n        const $reqMore = $formFields.find( $el => $el.matches($field.dataset.requiredFrom) )\n        $reqMore.checked = true\n        $field.required = $reqMore.required\n    }\n\n    const dataBeforeValidation = (await runFunctionsSequence({\n        functionsList: fieldOptions.beforeValidation,\n        data: { $field, fieldOptions }\n    })).pop()\n\n    const needsValidation = $field.required || ($field.matches('[data-validate-if-filled]') && isValidValue)\n\n    if( !needsValidation ){\n        delete dataBeforeValidation.fieldOptions\n        dataBeforeValidation.result = true\n    }\n    \n    const validationResult = needsValidation ? await isValid($field, fieldOptions, validationRules, validationErrors) : dataBeforeValidation\n\n    const $container = fieldOptions.questionContainer && validationResult.$field.closest( fieldOptions.questionContainer )\n    removeClass( $container, fieldOptions.cssClasses.pending )\n    \n    return validationResult\n\n}\n","\nimport { getFormFields, mergeObjects, mergeValidateFieldDefault, toCamelCase } from './helpers'\n\nexport async function isValid( $field, fieldOptions, validationRules, validationErrors ){\n\n    const fieldValue = $field.value\n    const obj = mergeValidateFieldDefault({result: fieldValue.trim().length > 0, $field})\n    const isCheckboxOrRadio = ['checkbox', 'radio'].includes($field.type)\n    const hasSelectedInput = getFormFields($field.form).filter($el => $el.matches(`[name=\"${$field.name}\"]:checked`)).length > 0\n\n    if( (!isCheckboxOrRadio && !obj.result) || (isCheckboxOrRadio && !hasSelectedInput) ){\n        obj.result = false\n        obj.errors = { empty: true }\n        return Promise.resolve(obj)\n    }\n\n    // COLLECT VALIDATION METHOD NAMES ( USED TO RUN VALIDATIONS AND GET ERRORS )\n    const validationMethods = Array.from($field.attributes).reduce((accList, attr) => {\n        const attrName = toCamelCase( attr.name.replace('data-', '') )\n        const attrValue = toCamelCase( attr.value )\n        const isAttrValueWithFn = ['type', 'subtype'].includes(attrName) && validationRules[attrValue]\n        const isAttrNameWithFn = validationRules[attrName]\n\n        if( isAttrValueWithFn || isAttrNameWithFn ){\n            accList.push( isAttrValueWithFn ? attrValue : attrName )\n        }\n        return accList\n    }, [])\n\n    const validity = await new Promise(resolve => {\n\n        // RUN VALIDATIONS\n        const validationsResult = validationMethods.reduce((accPromise, methodName) => {\n            return accPromise.then(accObj => {\n                return new Promise(resolveVal => {\n                    // RUN VALIDATION INSIDE A PROMISE IS USEFUL FOR ASYNC VALIDATIONS\n                    resolveVal( validationRules[methodName](fieldValue, $field, fieldOptions) )\n                }).then(valObj => {\n                    // ADD CUSTOM ERROR-KEY FOR EACH VALIDATION RULE\n                    if( !valObj.result ){\n                        const errorObj = {}\n                        if( typeof valObj.errors === 'undefined' || typeof valObj.errors[methodName] === 'undefined' ){\n                            errorObj[methodName] = true\n                        }\n                        valObj.errors = mergeObjects({}, valObj.errors, errorObj)\n                    }\n                    valObj = valObj.result ? {} : valObj\n                    return mergeObjects(accObj, valObj)\n                })\n            })\n        }, Promise.resolve(obj))\n        resolve(validationsResult)\n\n    })\n\n    if( !validity.result ){\n        validity.errors = validationMethods.reduce((accObj, methodName) => {\n            const errors = (validationErrors[methodName] && validationErrors[methodName](fieldValue, $field)) || {}\n            return mergeObjects(accObj, errors)\n        }, validity.errors)\n    }\n\n    return validity\n\n}\n","\nimport { getUniqueFields, mergeValidateFieldDefault, mergeValidateFormDefault, mergeObjects } from './helpers'\nimport { checkFieldValidity } from './checkFieldValidity'\n\nexport async function checkFieldsValidity( $fields, fieldOptions, validationRules, validationErrors, fieldToSkip = null ){\n\n    fieldOptions = mergeObjects( {}, fieldOptions, {focusOnRelated: false} )\n    const $fieldsList = getUniqueFields( $fields )\n\n    const fieldsValidity = await Promise.all( $fieldsList.map($field => {\n\n        if( fieldToSkip && $field === fieldToSkip ){\n            const obj = mergeValidateFieldDefault({$field, result: true})\n            return Promise.resolve(obj)\n        }\n        \n        return checkFieldValidity( $field, fieldOptions, validationRules, validationErrors )\n\n    }) )\n\n    const areAllFieldsValid = fieldsValidity.every(({result}) => result)\n\n    return mergeValidateFormDefault({result: areAllFieldsValid, fields:fieldsValidity})\n\n}\n","\nimport { mergeObjects } from './mergeObjects'\n\nexport const mergeValidateFormDefault = obj => {\n    return mergeObjects({}, { result: true, fields: [] }, obj)\n}\n","\nimport { version }              from '../package.json'\nimport { \n    checkFormEl, \n    customEvents, \n    dispatchCustomEvent, \n    fieldsStringSelector, \n    finalizeFieldPromise, \n    finalizeFieldsGroupPromise, \n    finalizeFormPromise, \n    getFilledFields, \n    getFormFields, \n    isDOMNode, \n    isNodeList,\n    mergeObjects, \n    removeClass }               from './modules/helpers'\nimport { options }              from './modules/options'\nimport { validationRules }      from './modules/validationRules'\nimport { formStartup }          from './modules/formStartup'\nimport { destroy }              from './modules/destroy'\nimport { checkFieldValidity }   from './modules/checkFieldValidity'\nimport { checkFieldsValidity }  from './modules/checkFieldsValidity'\n\nclass Form {\n\n    constructor( form, optionsObj ){\n        const argsL = arguments.length\n        const checkFormElem = checkFormEl(form)\n\n        if( argsL === 0 || (argsL > 0 && !form) ){\n            throw new Error('First argument \"form\" is missing or falsy!')\n        }\n        if( isNodeList(form) ){\n            throw new Error('First argument \"form\" must be a single DOM node or a form CSS selector, not a NodeList!')\n        }\n        if( !checkFormElem.result ){\n            throw new Error('First argument \"form\" is not a DOM node nor a form CSS selector!')\n        }\n\n        const self = this\n\n        self.$form = checkFormElem.$el\n        self.$form.formjs = self\n        self.options = mergeObjects({}, Form.prototype.options, optionsObj)\n        self.currentGroup = self.options.formOptions.groups[0]\n\n        // BINDING CONTEXT FOR FUTURE EXECUTION\n        const cbList = [\n            // IN fieldOptions\n            'beforeValidation',\n            // IN formOptions\n            'beforeSend',\n            'getFormData'\n        ]\n        cbList.forEach(cbName => {\n            const optionType = self.options.formOptions[cbName] ? 'formOptions' : 'fieldOptions'\n            let cbOpt = self.options[optionType][cbName]\n\n            if( cbOpt ){\n                self.options[optionType][cbName] = ( Array.isArray(cbOpt) ? cbOpt.map(cbFn => cbFn.bind(self)) : cbOpt.bind(self) )\n            }\n        })\n\n        formStartup( self.$form, self.options )\n\n        const initOptions = {}\n        if( self.options.formOptions.onInitCheckFilled ){\n            initOptions.detail = self.validateFilledFields().catch(fields => {})\n        }\n        dispatchCustomEvent( self.$form, customEvents.form.init, initOptions )\n    }\n\n    destroy(){\n        destroy(this.$form, this.options)\n        dispatchCustomEvent( this.$form, customEvents.form.destroy )\n    }\n    \n    getFormData( trimValues = this.options.fieldOptions.trimValue ){\n        const $fields = this.$dataFields\n        return this.options.formOptions.getFormData( $fields, trimValues )\n    }\n\n    // TODO: UPDATE DOC => field MUST BE A DOM-NODE OR THE FIELD name/id\n    async validateField( field, fieldOptions ){\n        const self = this\n        const $form = self.$form\n        let $field = field\n\n        if( typeof field === 'string' ){\n            const element = $form.elements.namedItem(field)\n            if( isDOMNode(element) ){\n                $field = element\n            } else {\n                $field = element[0]\n            }\n        }\n\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions)\n\n        const fieldValidity = await checkFieldValidity($field, fieldOptions, self.validationRules, self.validationErrors)\n\n        dispatchCustomEvent( fieldValidity.$field, customEvents.field.validation, { detail: fieldValidity } )\n        \n        if( fieldValidity.result ){\n            if( fieldOptions.onValidationCheckAll ){\n                const selector = self.currentGroup || fieldsStringSelector\n                const $fields = self.$fields.filter($el => $el.matches(selector))\n\n                checkFieldsValidity( $fields, fieldOptions, self.validationRules, self.validationErrors, fieldValidity.$field )\n                    .then(dataForm => {\n                        const groups = self.options.formOptions.groups\n                        const validationEventName = self.currentGroup ? customEvents.group.validation : customEvents.form.validation\n                        if( groups.length > 0 ){\n                            dataForm.group = {\n                                prev: groups[groups.indexOf(selector) - 1],\n                                current: selector,\n                                next: groups[groups.indexOf(selector) + 1]\n                            }\n                            dataForm.canSubmit = dataForm.result && !dataForm.group.next\n                        }\n                        dispatchCustomEvent( $form, validationEventName, { detail: dataForm } )\n                    })\n            }\n        } else {\n            removeClass( $form, self.options.formOptions.cssClasses.valid )\n        }\n\n        return finalizeFieldPromise(fieldValidity)\n    }\n\n    async validateFieldsGroup( group = this.currentGroup, fieldOptions ){\n        const self = this\n        \n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions)\n        \n        const $fields = self.$fields.filter($el => $el.matches(group))\n        const groupValidity = await checkFieldsValidity($fields, fieldOptions, self.validationRules, self.validationErrors)\n\n        groupValidity.fields.forEach(obj => {\n            obj.isCheckingGroup = true\n            dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } )\n        })\n\n        const groups = self.options.formOptions.groups\n        if( groups.length > 0 ){\n            groupValidity.group = {\n                prev: groups[groups.indexOf(group) - 1],\n                current: group,\n                next: groups[groups.indexOf(group) + 1]\n            }\n            groupValidity.canSubmit = groupValidity.result && !groupValidity.group.next\n        }\n\n        dispatchCustomEvent( self.$form, customEvents.group.validation, { detail: groupValidity } )\n        \n        return finalizeFieldsGroupPromise(groupValidity)\n    }\n\n    async validateFilledFields( fieldOptions ){\n        const self = this\n        const $filledFields = getFilledFields( self.$form )\n\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions)\n\n        const filledFieldsValidity = await checkFieldsValidity($filledFields, fieldOptions, self.validationRules, self.validationErrors)\n\n        filledFieldsValidity.fields.forEach(obj => {\n            dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } )\n        })\n        \n        return finalizeFormPromise(filledFieldsValidity)\n    }\n\n    async validateForm( fieldOptions ){\n        const self = this\n\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions)\n\n        if( self.currentGroup ){\n            return self.validateFieldsGroup( self.currentGroup, fieldOptions )\n        }\n\n        const $form = self.$form\n        const $fields = this.$visibleFields\n\n        const formVaidity = await checkFieldsValidity($fields, fieldOptions, self.validationRules, self.validationErrors)\n\n        formVaidity.fields.forEach(obj => {\n            obj.isCheckingForm = true\n            dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } )\n        })\n\n        dispatchCustomEvent( $form, customEvents.form.validation, { detail: formVaidity } )\n\n        return finalizeFormPromise(formVaidity)\n    }\n\n    get $fields () {\n        return getFormFields( this.$form )\n    }\n\n    get $dataFields () {\n        return getFormFields( this.$form, { file: false, excludeData: false } )\n    }\n\n    get $uniqueFields () {\n        return getFormFields( this.$form, { unique: true } )\n    }\n\n    get $visibleFields () {\n        return getFormFields( this.$form, { hidden: false } )\n    }\n    \n    static addValidationErrors( errorsObj ){\n        Form.prototype.validationErrors = mergeObjects({}, Form.prototype.validationErrors, errorsObj)\n    }\n\n    static addValidationRules( rulesObj ){\n        Form.prototype.validationRules = mergeObjects({}, Form.prototype.validationRules, rulesObj)\n    }\n    \n    static setOptions( optionsObj ){\n        Form.prototype.options = mergeObjects({}, Form.prototype.options, optionsObj)\n    }\n\n}\n\nForm.prototype.options = options\nForm.prototype.validationErrors = {}\nForm.prototype.validationRules = validationRules\nForm.prototype.version = version\n\nexport default Form\n","\nimport { isDOMNode } from './isDOMNode'\n\nexport const checkFormEl = form => {\n    const formIsString = typeof form === 'string'\n    const isValidNodeSelector = formIsString && isDOMNode(document.querySelector(form))\n    const isFormSelector = isValidNodeSelector && document.querySelector(form).tagName.toLowerCase() === 'form'\n    \n    return {\n        result: isDOMNode(form) || isFormSelector,\n        $el: (formIsString ? document.querySelector(form) : form)\n    }\n}\n","\nimport { customEvents, getFormFields } from './helpers'\nimport { \n    dataTypeNumber,\n    formValidationEnd,\n    groupValidationEnd,\n    keypressMaxlength,\n    pastePrevent,\n    submit,\n    validation, \n    validationEnd \n} from './listenerCallbacks'\n\nexport function formStartup( $form, options ){\n\n    $form.noValidate = true\n\n    const fieldOptions = options.fieldOptions\n    const formOptions = options.formOptions\n        \n    // VALIDATION WITH ATTRIBUTES LIKE HTML ONES ( ALSO FOR BUG FIXING, EG: maxlength IN ANDROID )\n    if( fieldOptions.strictHtmlValidation ){\n        \n        // maxlength\n        // MAXLENGTH IS BUGGY IN ANDROID BROWSERS\n        $form.addEventListener('keypress', keypressMaxlength, false)\n\n        // data-type=\"number\"\n        // SINCE VALIDATING type=\"number\" WITH NON NUMERIC CHARS WILL RETURN EMPTY STRING IN SOME BROWSERS ( EG: FIREFOX )\n        $form.addEventListener('input', dataTypeNumber, false)\n        \n    }\n    \n    if( fieldOptions.preventPasteFields && getFormFields($form).filter($el => $el.matches(fieldOptions.preventPasteFields) ).length ){\n        // INIT EVENT LISTENER FOR \"PASTE\" EVENT TO PREVENT IT ON SPECIFIED FIELDS\n        $form.addEventListener('paste', pastePrevent, false)\n    }\n\n    // INIT EVENTS LISTENER ( AS IN fieldOptions )\n    fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n        const useCapture = ['blur', 'focus'].includes(eventName)\n        $form.addEventListener(eventName, validation, useCapture)\n    })\n\n    $form.addEventListener(customEvents.field.validation, validationEnd, false)\n    if( formOptions.groups.length > 0 ){\n        $form.addEventListener(customEvents.group.validation, groupValidationEnd, false)\n    }\n    $form.addEventListener(customEvents.form.validation, formValidationEnd, false)\n    \n    // HANDLE FORM SUBMIT\n    if( formOptions.handleSubmit ){\n        // INIT FORM SUBMIT ( DEFAULT AND AJAX )\n        $form.addEventListener('submit', submit)\n\n        if( formOptions.ajaxSubmit ){\n            if( $form.getAttribute('enctype') ){\n                formOptions.ajaxOptions.headers['Content-Type'] = $form.getAttribute('enctype')\n            }\n\n            if( $form.getAttribute('method') ){\n                formOptions.ajaxOptions.method = $form.getAttribute('method').toUpperCase()\n            }\n\n            if( $form.getAttribute('action') ){\n                formOptions.ajaxOptions.url = $form.getAttribute('action')\n            }\n        }\n    }\n\n}\n","\nimport { customEvents } from './helpers'\nimport { dataTypeNumber, formValidationEnd, groupValidationEnd, keypressMaxlength, pastePrevent, submit, validation, validationEnd } from './listenerCallbacks'\n\n\nexport function destroy( $form, options ){\n\n    if( options.fieldOptions.strictHtmlValidation ){\n        $form.removeEventListener('keypress', keypressMaxlength, false)\n        $form.removeEventListener('input', dataTypeNumber, false)\n    }\n\n    if( options.fieldOptions.preventPasteFields ){\n        $form.removeEventListener('paste', pastePrevent, false)\n    }\n\n    if( options.formOptions.handleSubmit ){\n        $form.removeEventListener('submit', submit)\n    }\n\n    options.fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n        const useCapturing = eventName === 'blur' ? true : false\n        $form.removeEventListener(eventName, validation, useCapturing)\n    })\n\n    $form.removeEventListener(customEvents.field.validation, validationEnd, false)\n    if( options.formOptions.groups.length > 0 ){\n        $form.removeEventListener(customEvents.group.validation, groupValidationEnd, false)\n    }\n    $form.removeEventListener(customEvents.form.validation, formValidationEnd, false)\n\n    delete $form.formjs\n    \n}\n","\nexport const finalizeFieldPromise = ({errors, result}) => {\n    if( result ){\n        return Promise.resolve()\n    }\n    return Promise.reject(errors)\n}\n","\nexport const finalizeFieldsGroupPromise = ({canSubmit, fields, group, result}) => {\n    if( result ){\n        return Promise.resolve({canSubmit, fields, group})\n    }\n    return Promise.reject({fields, group})\n}\n","\nimport { getFormFields } from './getFormFields'\n\nexport const getFilledFields = $form => {\n    const $formFields = getFormFields($form, { unique: true, hidden: false })\n    return $formFields.map($field => {\n\n        const name = $field.name\n        const type = $field.type\n        const isCheckboxOrRadio = ['checkbox', 'radio'].includes(type)\n        const fieldChecked = $formFields.find($el => $el.matches(`[name=\"${name}\"]:checked`))\n        const isReqFrom = $field.matches('[data-required-from]')\n        const $reqMore = (isReqFrom ? $formFields.find($el => $el.matches($field.dataset.requiredFrom)) : null)\n\n        return (\n            isCheckboxOrRadio ? (fieldChecked || null) :\n            (isReqFrom && $reqMore.checked) || (!isReqFrom && $field.value) ? $field : null\n        )\n\n    })\n    .filter($field => $field !== null)\n}\n"],"names":["addClass","element","cssClasses","classList","add","split","isNodeList","nodeList","NodeList","prototype","isPrototypeOf","removeClass","remove","isDOMNode","node","Element","customEvents","field","validation","form","destroy","init","submit","group","mergeObjects","out","Array","from","arguments","slice","filter","arg","forEach","Object","keys","key","object","isArray","concat","toString","call","push","dispatchCustomEvent","elem","eventName","eventOptions","bubbles","eventObj","CustomEvent","dispatchEvent","fieldsStringSelector","finalizeFormPromise","fields","result","Promise","resolve","reject","formatMap","dateArray","reverse","getDateAsNumber","dateString","dateFormat","splitChar","string","separator","match","length","getSplitChar","indexOf","replace","join","getUniqueFields","$nodeList","currentFieldName","currentFieldType","$field","name","type","matches","getFormFields","$form","unique","hidden","file","excludeData","FIELDS_SELECTOR","elements","$el","getJSONobjectFromFieldAttribute","attrName","$customAttr","closest","JSON","parse","getAttribute","mergeValidateFieldDefault","obj","isFieldForChangeEvent","runFunctionsSequence","functionsList","data","stopConditionFn","reduce","acc","promiseFn","then","res","dataNew","dataList","serializeObject","constructor","a","k","encodeURIComponent","toCamelCase","all","letter","toUpperCase","options","fieldOptions","beforeValidation","trimValue","value","trim","$fields","includes","$container","questionContainer","dirty","checkDirtyField","skipUIfeedback","pending","error","errorEmpty","errorRule","valid","focusOnRelated","maxFileSize","onValidationCheckAll","preventPasteFields","strictHtmlValidation","validateOnEvents","formOptions","ajaxOptions","cache","credentials","headers","Accept","method","mode","redirect","timeout","url","location","href","ajaxSubmit","beforeSend","ajaxComplete","ajaxError","ajaxPending","ajaxSuccess","getFormData","$filteredFields","trimValues","formData","this","$formFields","prevObj","isCheckbox","isRadio","isSelect","checked","$checkboxes","$checkedRadio","find","$selectedOpts","option","selected","keyName","index","list","isLastKeyName","keyNameSplit","arrPos","arrayHasItemAtIndex","arrItemKeyName","isKeyNameArray","endsWith","groups","handleFileUpload","handleSubmit","onInitCheckFilled","validationRules","date","test","email","number","checkbox","$dataChecks","attrValue","dataset","checks","checkedLength","isMinOk","isMaxOk","errors","minChecks","maxChecks","equalTo","exactLength","valueLength","minlength","maxlength","MIMEtype","accept","RegExp","filesList","files","exceedMaxFileSize","size","isAcceptedFileType","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","max","maxVal","maxLength","min","minVal","minLength","pattern","radio","$fieldChecked","dataTypeNumber","event","target","fieldValue","stopImmediatePropagation","valueReplaced","formValidationEnd","formjs","clMethodName","detail","keypressMaxlength","keyPressed","which","keyCode","allowedKeys","pastePrevent","preventDefault","getFetchMethod","response","get","contentType","headerOpt","async","ajaxCall","formDataObj","timeoutTimer","isMultipart","body","formDataMultipart","FormData","append","idx","stringify","Headers","controller","AbortController","signal","window","setTimeout","abort","fetch","ok","Error","statusText","catch","message","finally","clearTimeout","disabled","instance","formCssClasses","isAjaxForm","$btn","eventPreventDefault","enableBtn","validateForm","canSubmit","stopExecution","beforeSendData","rfsObject","some","pop","groupValidationEnd","currentGroup","next","isChangeEvent","self","isFieldForChangeEventBoolean","hasOnlyChangeEvent","validateField","$relatedEqualTo","required","validationEnd","eventDetail","dataFieldOptions","isReqFrom","$reqMore","requiredFrom","errorClasses","extraErrorClass","isChecks","checkedElLength","empty","errorClassToRemove","checkFieldValidity","validationErrors","isValidValue","$checked","reqMoreIsChecked","$findReqMore","$findReqFrom","id","focus","dataBeforeValidation","needsValidation","validationResult","isCheckboxOrRadio","hasSelectedInput","validationMethods","attributes","accList","attr","isAttrValueWithFn","isAttrNameWithFn","validity","accPromise","methodName","accObj","resolveVal","valObj","errorObj","isValid","checkFieldsValidity","fieldToSkip","$fieldsList","fieldsValidity","map","areAllFieldsValid","every","Form","optionsObj","argsL","checkFormElem","formIsString","isFormSelector","document","querySelector","tagName","toLowerCase","checkFormEl","cbName","optionType","cbOpt","cbFn","bind","noValidate","addEventListener","useCapture","formStartup","initOptions","validateFilledFields","removeEventListener","useCapturing","$dataFields","namedItem","fieldValidity","selector","dataForm","validationEventName","prev","current","finalizeFieldPromise","validateFieldsGroup","groupValidity","isCheckingGroup","finalizeFieldsGroupPromise","$filledFields","fieldChecked","getFilledFields","filledFieldsValidity","$visibleFields","formVaidity","isCheckingForm","$uniqueFields","addValidationErrors","errorsObj","addValidationRules","rulesObj","setOptions","version"],"mappings":"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"}