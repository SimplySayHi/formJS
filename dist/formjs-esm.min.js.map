{"version":3,"file":"formjs-esm.min.js","sources":["../src/modules/helpers/addClass.js","../src/modules/helpers/isNodeList.js","../src/modules/helpers/removeClass.js","../src/modules/helpers/isDOMNode.js","../src/modules/helpers/checkTouchedField.js","../src/modules/helpers/customEvents.js","../src/modules/helpers/isPlainObject.js","../src/modules/helpers/mergeObjects.js","../src/modules/helpers/dispatchCustomEvent.js","../src/modules/helpers/excludeSelector.js","../src/modules/helpers/fieldsStringSelector.js","../src/modules/helpers/finalizeFieldPromise.js","../src/modules/helpers/finalizeFieldsGroupPromise.js","../src/modules/helpers/finalizeFormPromise.js","../src/modules/helpers/getDateAsNumber.js","../src/modules/helpers/getSplitChar.js","../src/modules/helpers/getInitialValues.js","../src/modules/helpers/getJSONobjectFromFieldAttribute.js","../src/modules/helpers/getUniqueFields.js","../src/modules/helpers/mergeValidateFieldDefault.js","../src/modules/helpers/mergeValidateFormDefault.js","../src/modules/helpers/isFieldForChangeEvent.js","../src/modules/helpers/runFunctionsSequence.js","../src/modules/helpers/serializeObject.js","../src/modules/helpers/toCamelCase.js","../src/modules/options.js","../src/modules/optionsUtils/beforeValidation.js","../src/modules/helpers/checkDirtyField.js","../src/modules/helpers/checkModifiedField.js","../src/modules/optionsUtils/getFormData.js","../src/modules/validationRules.js","../src/modules/validationRules/date.js","../src/modules/validationRules/email.js","../src/modules/validationRules/number.js","../src/modules/validationRules/checkbox.js","../src/modules/validationRules/checks.js","../src/modules/validationRules/equalTo.js","../src/modules/validationRules/exactLength.js","../src/modules/validationRules/file.js","../src/modules/validationRules/length.js","../src/modules/validationRules/max.js","../src/modules/validationRules/maxlength.js","../src/modules/validationRules/min.js","../src/modules/validationRules/minlength.js","../src/modules/validationRules/pattern.js","../src/modules/validationRules/radio.js","../src/modules/listenerCallbacks/blurHandler.js","../src/modules/listenerCallbacks/dataTypeNumber.js","../src/modules/listenerCallbacks/formValidationEnd.js","../src/modules/listenerCallbacks/keypressMaxlength.js","../src/modules/listenerCallbacks/pastePrevent.js","../src/modules/ajaxCall.js","../src/modules/helpers/objectToFormData.js","../src/modules/listenerCallbacks/submit.js","../src/modules/listenerCallbacks/groupValidationEnd.js","../src/modules/listenerCallbacks/validation.js","../src/modules/listenerCallbacks/validationEnd.js","../src/modules/checkFieldValidity.js","../src/modules/isValid.js","../src/modules/checkFieldsValidity.js","../src/index.js","../src/modules/helpers/checkFormEl.js","../src/modules/formStartup.js","../src/modules/destroy.js","../src/modules/helpers/getFilledFields.js"],"sourcesContent":["\nexport const addClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.add( className );\n    });\n}\n","/* eslint-disable no-prototype-builtins */\n\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList );\n}\n","\nexport const removeClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.remove( className );\n    });\n}\n","/* eslint-disable no-prototype-builtins */\n\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node );\n}\n","\nimport { addClass } from './addClass';\n\nexport const checkTouchedField = ( $field, fieldOptions ) => {\n\n    const $container = $field.closest( fieldOptions.questionContainer ) || $field;\n    addClass( $container, fieldOptions.cssClasses.touched );\n    \n}\n","\nexport const customEvents = {\n    field: {\n        validation: 'fjs.field:validation'\n    },\n    form: {\n        destroy:    'fjs.form:destroy',\n        init:       'fjs.form:init',\n        submit:     'fjs.form:submit',\n        validation: 'fjs.form:validation'\n    },\n    group: {\n        validation: 'fjs.group:validation'\n    }\n}\n","\nexport const isPlainObject = object => {\n    return Object.prototype.toString.call( object ) === '[object Object]';\n}\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const mergeObjects = function( out = {} ){\n    Array.from(arguments).slice(1).filter(arg => !!arg).forEach(arg => {\n        Object.keys(arg).forEach(key => {\n            if( Array.isArray(arg[key]) ){\n                out[key] = (out[key] || []).concat( arg[key].slice(0) );\n            } else if( isPlainObject(arg[key]) ){\n                out[key] = mergeObjects((out[key] || {}), arg[key]);\n            } else {\n                // * STRING | NUMBER | BOOLEAN | FUNCTION\n                if( Array.isArray(out[key]) ){\n                    // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                    out[key].push(arg[key]);\n                } else {\n                    out[key] = arg[key];\n                }\n            }\n        });\n    });\n\n    return out;\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const dispatchCustomEvent = ( elem, eventName, eventOptions ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions);\n    const eventObj = new CustomEvent(eventName, eventOptions);\n    elem.dispatchEvent( eventObj );\n}\n","\nexport const excludeSelector = ':not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"file\"]):not([data-exclude-data])'\n","\nexport const fieldsStringSelector = 'input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"hidden\"]), select, textarea'\n","\nexport const finalizeFieldPromise = ({errors, result}) => {\n    if( result ){\n        return Promise.resolve();\n    }\n    return Promise.reject(errors);\n}\n","\nexport const finalizeFieldsGroupPromise = ({canSubmit, fields, group, result}) => {\n    if( result ){\n        return Promise.resolve({canSubmit, fields, group});\n    }\n    return Promise.reject({fields, group});\n}\n","\nexport const finalizeFormPromise = ({fields, result}) => {\n    if( result ){\n        return Promise.resolve(fields);\n    }\n    return Promise.reject(fields);\n}\n","\nimport { getSplitChar } from './getSplitChar';\n\nconst formatMap = {\n    'YYYY-MM-DD': function(dateArray){\n        return dateArray;\n    },\n    'MM-DD-YYYY': function(dateArray){\n        return [dateArray[2], dateArray[0], dateArray[1]];\n    },\n    'DD-MM-YYYY': function(dateArray){\n        return dateArray.reverse();\n    }\n};\n\nexport const getDateAsNumber = ( dateString, dateFormat ) => {\n    dateFormat = dateFormat || 'YYYY-MM-DD';\n    const splitChar = getSplitChar(dateString);\n\n    if( !dateFormat.includes(splitChar) ){\n        return;\n    }\n\n    dateFormat = dateFormat.replace(/[^YMD]/g, '-');\n    dateString = dateString.split(splitChar);\n    dateString = formatMap[dateFormat](dateString).join('');\n    \n    return dateString;\n}\n","\nexport const getSplitChar = string => {\n    // MATCH ANY NON-DIGIT CHAR\n    const separator = string.match(/\\D/);\n    return (separator && separator.length > 0) ? separator[0] : null;\n}\n","\nimport { excludeSelector } from './excludeSelector'\n\nexport const getInitialValues = $form => {\n    const $fields = [...$form.querySelectorAll('input, select, textarea')].filter($el => $el.matches(excludeSelector))\n\n    const data = $fields.reduce((accData, { tagName, type, name, value, checked, multiple, options }) => {\n        const isCheckboxOrRadio = ['checkbox', 'radio'].includes(type)\n        const isMultiCheckbox = type === 'checkbox' && $form.querySelectorAll(`[name=\"${name}\"]`).length > 1\n\n        if( typeof accData[name] !== 'undefined' && isCheckboxOrRadio && !checked ){\n            return accData\n        }\n        \n        if( typeof accData[name] === 'undefined' ){\n            if( isCheckboxOrRadio && !checked ){\n                accData[name] = isMultiCheckbox ? [] : null\n                return accData\n            }\n\n            const isMultiSelect = tagName === 'SELECT' && multiple\n            const multiSelectValues = options && [...options].filter(opt => opt.selected)\n            accData[name] = isMultiSelect ? multiSelectValues : (isMultiCheckbox ? [value] : value)\n        } else if( isMultiCheckbox ){\n            accData[name].push(value)\n        } else {\n            accData[name] = value\n        }\n\n        return accData\n    }, {})\n\n    return data\n}\n","\nexport const getJSONobjectFromFieldAttribute = ( fieldEl, attrName ) => {\n    const customAttrEl = fieldEl.closest('['+ attrName +']');\n    return (customAttrEl && JSON.parse(customAttrEl.getAttribute(attrName))) || {};\n}\n","\nexport const getUniqueFields = $nodeList => {\n\n    let currentFieldName = '',\n        currentFieldType = '';\n\n    return Array.from( $nodeList ).filter($field => {\n        const name = $field.name,\n              type = $field.type;\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false;\n        }\n        \n        if( !$field.matches('[data-required-from]') ){\n            currentFieldName = name;\n            currentFieldType = type;\n        }\n        return true;\n    });\n    \n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const mergeValidateFieldDefault = obj => {\n    return mergeObjects({}, { result: false, $field: null }, obj);\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const mergeValidateFormDefault = obj => {\n    return mergeObjects({}, { result: true, fields: [] }, obj);\n}\n","\nexport const isFieldForChangeEvent = $field => {\n    return $field.matches('select, [type=\"radio\"], [type=\"checkbox\"], [type=\"file\"]');\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const runFunctionsSequence = ( { functionsList = [], data = {}, stopConditionFn = () => false } = {} ) => {\n    return functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1]);\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res);\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result);\n                    return res;\n                });\n        });\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList);\n}\n","\nexport const serializeObject = obj => {\n    const objToString = (\n            (obj && typeof obj === 'object' && obj.constructor === Object) ? \n            Object.keys(obj)\n                .reduce((a,k) => {\n                    a.push(k+'='+encodeURIComponent(obj[k]));\n                    return a\n                },[]).join('&') : \n            obj\n    );\n    return objToString;\n}\n","\nexport const toCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase(); });\n}\n","\nimport { beforeValidation } from './optionsUtils/beforeValidation';\nimport { getFormData } from './optionsUtils/getFormData';\n\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [beforeValidation],\n        cssClasses: {\n            dirty:              'is-dirty',\n            error:              'has-error',\n            errorEmpty:         'has-error-empty',\n            errorRule:          'has-error-rule',\n            modified:           'is-modified',\n            pending:            'is-pending',\n            touched:            'is-touched',\n            valid:              'is-valid'\n        },\n        focusOnRelated:         true,\n        maxFileSize:            10,\n        onValidationCheckAll:   false,\n        preventPasteFields:     '[type=\"password\"], [data-equal-to]',\n        questionContainer:      '[data-formjs-question]',\n        skipUIfeedback:         false,\n        strictHtmlValidation:   true,\n        trimValue:              false,\n        validateOnEvents:       'input change'\n    },\n\n    formOptions: {\n        ajaxOptions:            {\n            cache:              'no-store',\n            credentials:        'same-origin',\n            headers: {\n                                'Content-Type': 'application/json',\n                                'Accept':       'application/json'\n            },\n            method:             'POST',\n            mode:               'same-origin',\n            redirect:           'follow',\n            timeout:            0,\n            url:                location.href\n        },\n        ajaxSubmit:             true,\n        beforeSend:             [],\n        cssClasses: {\n            ajaxComplete:       'ajax-complete',\n            ajaxError:          'ajax-error',\n            ajaxPending:        'ajax-pending',\n            ajaxSuccess:        'ajax-success',\n            error:              'form-error',\n            pending:            'form-pending',\n            submit:             'is-submitting',\n            valid:              'is-valid'\n        },\n        getFormData:            getFormData,\n        groups:                 [],\n        handleFileUpload:       true,\n        handleSubmit:           true,\n        nestedMultipartDataToJSON: true,\n        onInitCheckFilled:      true\n    }\n    \n}\n","\nimport { addClass, checkDirtyField, checkModifiedField, isFieldForChangeEvent } from '../helpers';\n\nexport const beforeValidation = function beforeValidationDefault ( { $field, fieldOptions } ) {\n\n    const initialValues = $field.form.formjs._.initialValues\n\n    if( fieldOptions.trimValue && !isFieldForChangeEvent($field) ){\n        $field.value = $field.value.trim();\n    }\n\n    checkDirtyField( $field, fieldOptions );\n    checkModifiedField( $field, initialValues, fieldOptions );\n\n    if( !fieldOptions.skipUIfeedback ){\n        addClass( $field.closest( fieldOptions.questionContainer ), fieldOptions.cssClasses.pending );\n    }\n\n}\n","\nimport { addClass } from './addClass';\nimport { isNodeList } from './isNodeList';\nimport { removeClass } from './removeClass';\n\nexport const checkDirtyField = ( $fields, fieldOptions ) => {\n\n    $fields = isNodeList($fields) ? Array.from( $fields ) : [$fields];\n    $fields.forEach($field => {\n        if( $field.type !== 'checkbox' && $field.type !== 'radio' ){\n            const $container = $field.closest( fieldOptions.questionContainer ) || $field;\n            if( $field.value ){\n                addClass( $container, fieldOptions.cssClasses.dirty );\n            } else {\n                removeClass( $container, fieldOptions.cssClasses.dirty );\n            }\n        }\n    });\n    \n}\n","\nimport { addClass } from './addClass';\nimport { removeClass } from './removeClass';\n\nconst isValueModified = ( { form, tagName, type, name, value, multiple, options }, initValues ) => {\n    // WORKAROUND FOR SURVEYJS: initValues IS {} AFTER SURVEY INIT\n    if( !(name in initValues) ){ return true }\n\n    const isRadio = type === 'radio';\n    const isCheckbox = type === 'checkbox';\n    const isSelect = tagName === 'SELECT';\n    const isMultiAnswer = (isCheckbox && form.querySelectorAll(`[name=\"${name}\"]`).length > 1) || (isSelect && multiple);\n\n    if( isMultiAnswer ){\n        const multiValues = isCheckbox ? \n                            [...form.querySelectorAll(`[name=\"${name}\"]:checked`)].map($el => $el.value) : \n                            [...options].filter(opt => opt.selected);\n        \n        const checkValues = initValues[name].length !== multiValues.length || \n                            multiValues.filter(val => initValues[name].includes(val)).length !== initValues[name].length;\n\n        return checkValues;\n    } else if( isRadio ){\n        const $checkedRadio = form.querySelector(`[name=\"${name}\"]:checked`);\n\n        value = null;\n\n        if( $checkedRadio ){\n            value = $checkedRadio.value;\n        }\n    }\n\n    return value !== initValues[name];\n}\n\nexport const checkModifiedField = ( $field, initialValues, fieldOptions ) => {\n\n    const $container = $field.closest( fieldOptions.questionContainer ) || $field;\n    const isModified = isValueModified( $field, initialValues );\n    \n    if( isModified ){\n        addClass( $container, fieldOptions.cssClasses.modified );\n    } else {\n        removeClass( $container, fieldOptions.cssClasses.modified );\n    }\n    \n}\n","\nexport const getFormData = function getFormDataDefault( $filteredFields, trimValues ){\n\n    const formData = {};\n    const $form = this.$form;\n    let prevObj = formData;\n  \n    $filteredFields.forEach($field => {\n        const isCheckbox = $field.type === \"checkbox\";\n        const isRadio = $field.type === \"radio\";\n        const isSelect = $field.matches(\"select\");\n        const name = $field.name;\n        let value = trimValues ? $field.value.trim() : $field.value;\n  \n        if( isCheckbox ){\n\n            value = $field.checked;\n            let $checkboxes = Array.from( $form.querySelectorAll('[name=\"' + name + '\"]') );\n            if( $checkboxes.length > 1 ){\n                value = [];\n                let $checked = $checkboxes.filter((field) => field.checked);\n                $checked.forEach($field => {\n                    value.push($field.value);\n                });\n            }\n\n        } else if( isRadio ){\n\n            const $checkedRadio = $form.querySelector('[name=\"' + name + '\"]:checked');\n            value = $checkedRadio === null ? null : $checkedRadio.value;\n\n        } else if( isSelect ){\n\n            const $selectedOpts = Array.from($field.options).filter(option => option.selected);\n            if( $selectedOpts.length > 1 ){\n                value = [];\n                $selectedOpts.forEach($field => { \n                    value.push($field.value); \n                });\n            }\n        }\n  \n        const nameSplit = name.split(\".\");\n        nameSplit.forEach((keyName, index, list) => {\n            const isLastKeyName = index + 1 === list.length;\n  \n            if( Array.isArray(prevObj) ){\n                const keyNameSplit = keyName.split(\"___\");\n                const arrPos = keyNameSplit[0] - 1;\n                const arrayHasItemAtIndex = typeof prevObj[arrPos] !== \"undefined\";\n                const arrItemKeyName = keyNameSplit[1];\n  \n                if( !arrayHasItemAtIndex ){\n                    prevObj.push({});\n                }\n  \n                keyName = arrItemKeyName;\n\n                if( isLastKeyName ){\n                    prevObj[arrPos][keyName] = value;\n                } else if( typeof prevObj[arrPos][keyName] === 'undefined' ) {\n                    prevObj[arrPos][keyName] = {};\n                }\n                \n                if( !isLastKeyName ){\n                    prevObj = prevObj[arrPos][keyName];\n                    return;\n                }\n            } else {\n                const isKeyNameArray = keyName.endsWith(\"[]\");\n                keyName = keyName.replace(\"[]\", \"\");\n  \n                if( isLastKeyName ){\n                    prevObj[keyName] = value;\n                } else if( typeof prevObj[keyName] === \"undefined\" ){\n                    if( isKeyNameArray ){\n                        prevObj[keyName] = [];\n                    } else {\n                        prevObj[keyName] = {};\n                    }\n                }\n            }\n  \n            prevObj = isLastKeyName ? formData : prevObj[keyName];\n        });\n    });\n  \n    return formData;\n\n}\n","\nimport { date }         from './validationRules/date';\nimport { email }        from './validationRules/email';\nimport { number }       from './validationRules/number';\n\nimport { checkbox }     from './validationRules/checkbox';\nimport { equalTo }      from './validationRules/equalTo';\nimport { exactLength }  from './validationRules/exactLength';\nimport { file }         from './validationRules/file';\nimport { length }       from './validationRules/length';\nimport { max }          from './validationRules/max';\nimport { maxlength }    from './validationRules/maxlength';\nimport { min }          from './validationRules/min';\nimport { minlength }    from './validationRules/minlength';\nimport { pattern }      from './validationRules/pattern';\nimport { radio }        from './validationRules/radio';\n\nexport const validationRules = {\n    date,\n    email,\n    number,\n\n    checkbox,\n    equalTo,\n    exactLength,\n    file,\n    length,\n    max,\n    maxlength,\n    min,\n    minlength,\n    pattern,\n    radio\n}\n","\n/*\n    DATE AS ISO 8601 DATE FORMAT:\n    YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n*/\n\nexport const date = function( string ){\n    return {\n        result: /^((((19|[2-9]\\d)\\d{2})[ /\\-.](0[13578]|1[02])[ /\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ /\\-.](0[13456789]|1[012])[ /\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ /\\-.]02[ /\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ /\\-.]02[ /\\-.]29))$/g.test( string )\n    };\n}\n","\n// https://regex101.com/r/cdlyJy/3\n\nexport const email = function( string ){\n    return {\n        result: /^[a-zA-Z_-]([\\w.-]?[a-zA-Z0-9])*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?){2,})+$/.test( string )\n    };\n}\n","\n/*\n    ALL NUMBERS ( INTEGERS AND FLOATING )\n    VALID NUMBERS: 123 | 123.456 | .123\n*/\n\nexport const number = function( string ){\n    return {\n        result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n    };\n}","\nimport { checks } from './checks';\n\nexport const checkbox = function( value, $field ){\n    const $dataChecks = $field.closest('form').querySelector('[name=\"' + $field.name + '\"][data-checks]');\n    return $dataChecks ? checks($dataChecks) : { result: $field.checked };\n}\n","\nexport const checks = function( $field ){\n    const attrValue = JSON.parse( $field.getAttribute('data-checks') ),\n          checkedLength = $field.closest('form').querySelectorAll('[name=\"' + $field.name + '\"]:checked').length,\n          isMinOk = checkedLength >= attrValue[0],\n          isMaxOk = checkedLength <= attrValue[1],\n          obj = { result: isMinOk && isMaxOk };\n\n    if( !obj.result ){\n        obj.errors = { checks: true };\n        if( !isMinOk ){ obj.errors.minChecks = true; }\n        if( !isMaxOk ){ obj.errors.maxChecks = true; }\n    }\n\n    return obj;\n}\n","\nexport const equalTo = function( value, $field ){\n    const $checkFrom = $field.closest('form').querySelector( '[name=\"' + $field.getAttribute('data-equal-to') + '\"]' );\n    return { result: value === $checkFrom.value };\n}\n","\nexport const exactLength = function( value, $field ){\n    const valueLength = value.length,\n          exactLength = $field.getAttribute('data-exact-length') * 1,\n          obj = { result: valueLength === exactLength };\n\n    if( !obj.result ){\n        obj.errors = {};\n        if( valueLength < exactLength ){ obj.errors.minlength = true; }\n        else { obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nexport const file = function( value, $field, fieldOptions ){\n    const maxFileSize = ($field.getAttribute('data-max-file-size') || fieldOptions.maxFileSize) * 1,\n          MIMEtype = $field.accept ? new RegExp($field.accept.replace( '*', '[^\\\\/,]+' )) : null,\n          filesList = Array.from($field.files),\n          obj = { result: true };\n\n    filesList.forEach(file => {\n        const exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize,\n              isAcceptedFileType = MIMEtype !== null ? MIMEtype.test(file.type) : true;\n\n        if( exceedMaxFileSize || !isAcceptedFileType ){\n            obj.result = false;\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {};\n            }\n            if( exceedMaxFileSize ){ obj.errors.maxFileSize = true; }\n            if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true; }\n\n        }\n    });\n\n    return obj;\n}\n","\nexport const length = function( value, $field ){\n    const valueL = value.length,\n          attrValue = JSON.parse( $field.getAttribute('data-length') ),\n          isMinlengthOk = valueL >= attrValue[0],\n          isMaxlengthOk = valueL <= attrValue[1],\n          obj = { result: isMinlengthOk && isMaxlengthOk };\n\n    if( !obj.result ){\n        obj.errors = {};\n        if( !isMinlengthOk ){ obj.errors.minlength = true; }\n        if( !isMaxlengthOk ){ obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const max = function( value, $field ){\n    let maxVal = $field.max;\n    const dateFormat = $field.getAttribute('data-date-format');\n    \n    if( $field.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat );\n        maxVal = maxVal.split('-').join('');\n    }\n\n    value = value * 1;\n    maxVal = maxVal * 1;\n    \n    return { result: value <= maxVal };\n}\n","\nexport const maxlength = function( value, $field ){\n    return { result: value.length <= $field.maxLength * 1 };\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const min = function( value, $field ){\n    let minVal = $field.min;\n    const dateFormat = $field.getAttribute('data-date-format');\n    \n    if( $field.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat );\n        minVal = minVal.split('-').join('');\n    }\n\n    value = value * 1;\n    minVal = minVal * 1;\n    \n    return { result: value >= minVal };\n}\n","\nexport const minlength = function( value, $field ){\n    return { result: value.length >= $field.minLength * 1 };\n}\n","\nexport const pattern = function( value, $field ){\n    return { result: new RegExp($field.pattern).test(value) };\n}\n","\nexport const radio = function( value, $field ){\n    const $fieldChecked = $field.closest('form').querySelector( '[name=\"'+ $field.name +'\"]:checked' ),\n          isValid = $fieldChecked !== null && $fieldChecked.value.trim().length > 0;\n\n    return { result: isValid };\n}\n","\nimport { checkTouchedField } from '../helpers';\n\nexport const blurHandler = function( event ){\n\n    const $field = event.target;\n    const { fieldOptions } = $field.form.formjs.options;\n\n    checkTouchedField( $field, fieldOptions );\n\n}\n","\nexport const dataTypeNumber = function( event ){\n\n    const $field = event.target;\n    \n    if( $field.matches('[data-type=\"number\"]') ){\n        let fieldValue = $field.value;\n        const hasInvalidChars = /[^\\d.,+-]/.test(fieldValue);\n        \n        if( hasInvalidChars ){\n            event.stopImmediatePropagation();\n            let valueReplaced = fieldValue.replace(/[^\\d.,+-]/g, '');\n            $field.value = valueReplaced;\n        }\n    }\n\n}\n","\nimport { addClass, checkTouchedField, removeClass } from '../helpers';\n\nexport const formValidationEnd = function( event ){\n\n    const { result, fields } = event.detail;\n    const $form = event.target;\n    const { fieldOptions, formOptions: { cssClasses } } = $form.formjs.options;\n\n    if( fields[0].isCheckingForm ){\n        fields.forEach(({ $field }) => {\n            checkTouchedField( $field, fieldOptions );\n        });\n    } else {\n        fields.forEach(({ $field }) => {\n            removeClass( $field.closest(fieldOptions.questionContainer), fieldOptions.cssClasses.pending );\n        });\n    }\n\n    if( !fieldOptions.skipUIfeedback ){\n        const feedbackClassesKey = result ? 'valid' : 'error';\n        removeClass( $form, (`${cssClasses.pending} ${cssClasses.valid} ${cssClasses.error}`) );\n        addClass( $form, cssClasses[feedbackClassesKey] );\n    }\n    \n}\n","\nexport const keypressMaxlength = function( event ){\n\n    const $field = event.target;\n    \n    if( $field.matches( '[maxlength]' ) ){\n        const maxLength = $field.maxLength * 1,\n              keyPressed = event.which || event.keyCode,\n              allowedKeys = [8, 37, 38, 39, 46];\n\n        if( $field.value.length >= maxLength && allowedKeys.indexOf(keyPressed) === -1 ){\n            return false;\n        }\n    }\n\n}\n","\nexport const pastePrevent = function( event ){\n\n    const $field = event.target;\n    const fieldOptions = $field.closest('form').formjs.options.fieldOptions;\n\n    if( $field.matches( fieldOptions.preventPasteFields ) ){     \n        event.preventDefault();\n    }\n\n}\n","\nimport { addClass, isPlainObject, mergeObjects, objectToFormData, removeClass, serializeObject } from './helpers';\n\nconst getFetchMethod = (response, options) => {\n    const accept = options.headers.get('Accept'),\n          contentType = response.headers.get('Content-Type'),\n          headerOpt = accept || contentType || '';\n\n    if( headerOpt.includes('application/json') || headerOpt === '' ){\n        return 'json';\n    } else if( headerOpt.includes('text/') ){\n        return 'text';\n    } else {\n        return 'blob';\n    }\n};\n\nexport function ajaxCall( $form, formDataObj, options ){\n\n    let timeoutTimer;\n    const ajaxOptions = mergeObjects( {}, options.formOptions.ajaxOptions );\n    \n    ajaxOptions.body = formDataObj;\n    \n    const enctypeAttr = $form.getAttribute('enctype');\n    const isMultipartForm = enctypeAttr && enctypeAttr.includes('multipart/form-data');\n    const isMultipartHeader = ajaxOptions.headers['Content-Type'].includes('multipart/form-data');\n    let bodyIsPlainObj = isPlainObject(ajaxOptions.body);\n    \n    // POST A FormData OBJECT ( multipart )\n    if( (isMultipartForm || isMultipartHeader) && bodyIsPlainObj ){\n        let formDataMultipart = objectToFormData(ajaxOptions.body, options.formOptions.nestedMultipartDataToJSON);\n        \n        if( options.formOptions.handleFileUpload ){\n            Array.from( $form.querySelectorAll('[type=\"file\"]') ).forEach($field => {\n                Array.from($field.files).forEach((file, idx) => {\n                    const name = $field.name+'['+ idx +']';\n                    formDataMultipart.append( name, file, file.name );\n                });\n            });\n        }\n        \n        ajaxOptions.body = formDataMultipart;\n        bodyIsPlainObj = false;\n    }\n\n    if( ajaxOptions.method === 'GET' ){\n\n        // FETCH WITH \"GET\" METHOD CAN'T HAVE \"body\". SO IT IS APPENDED TO THE URL\n        ajaxOptions.url += ( /\\?/.test(ajaxOptions.url) ? '&' : '?' ) + serializeObject( ajaxOptions.body );\n        delete ajaxOptions.body;\n\n    } else {\n\n        if( ajaxOptions.headers['Content-Type'].includes('application/x-www-form-urlencoded') ){\n            // POST A NORMAL FORM\n            ajaxOptions.body = serializeObject( ajaxOptions.body );\n        } else if( bodyIsPlainObj ){\n            // POST A JSON STRING\n            ajaxOptions.body = JSON.stringify(ajaxOptions.body);\n        }\n\n    }\n\n    const bodyIsString = typeof ajaxOptions.body === 'string';\n    const isMultipartWithAutoContentType = !bodyIsString && (isMultipartForm && !isMultipartHeader)\n\n    if( isMultipartWithAutoContentType ){\n        delete ajaxOptions.headers['Content-Type']\n    }\n\n    ajaxOptions.headers = new Headers( ajaxOptions.headers );\n\n    if ( ajaxOptions.timeout > 0 ) {\n        const controller = new AbortController(),\n              signal = controller.signal;\n\n        ajaxOptions.signal = signal;\n        timeoutTimer = window.setTimeout(() => {\n            controller.abort();\n        }, ajaxOptions.timeout);\n    }\n\n    return fetch(ajaxOptions.url, ajaxOptions)\n        .then(response => {\n            if( !response.ok ){\n                throw new Error(response.statusText);\n            }\n            const fetchMethod = getFetchMethod(response, ajaxOptions);\n            return response[fetchMethod]();\n        })\n        .then(data => {\n            addClass( $form, options.formOptions.cssClasses.ajaxSuccess );\n            return data;\n        })\n        .catch(error => {\n            addClass( $form, options.formOptions.cssClasses.ajaxError );\n            throw new Error(error.message);\n        })\n        .finally(() => {\n            if( timeoutTimer ){\n                window.clearTimeout( timeoutTimer );\n            }\n            removeClass( $form, options.formOptions.cssClasses.submit + ' ' + options.formOptions.cssClasses.ajaxPending );\n            addClass( $form, options.formOptions.cssClasses.ajaxComplete );\n            $form.querySelector('[type=\"submit\"]').disabled = false;\n        });\n\n}\n","\nexport const objectToFormData = ( dataObj, nestedToJSON = true, formData = new FormData() ) => {\n\n    function createFormData (obj, subKeyStr = ''){\n        for( let i in obj ){\n            const value             = obj[i];\n            const i_isNumber        = !Object.is((i*1), Number.NaN)\n            const subSubKeyString   = i_isNumber ? '[' + i + ']' : '.' + i;\n            const subKeyStrTrans    = subKeyStr ? subKeyStr + subSubKeyString : i;\n\n            if( typeof value === 'object' && value != null ){\n                if( nestedToJSON || (Array.isArray(value) && value.length === 0) ){\n                    formData.append(subKeyStrTrans, JSON.stringify(value));\n                } else {\n                    createFormData(value, subKeyStrTrans);\n                }\n            } else {\n                formData.append(subKeyStrTrans, value);\n            }\n        }\n    }\n\n    createFormData(dataObj);\n\n    return formData;\n\n}\n","\nimport { addClass, customEvents, dispatchCustomEvent, removeClass, runFunctionsSequence } from '../helpers';\nimport { ajaxCall } from '../ajaxCall';\n\nexport function submit( event ){\n\n    const $form = event.target,\n          instance = $form.formjs,\n          options = instance.options,\n          formCssClasses = options.formOptions.cssClasses,\n          isAjaxForm = options.formOptions.ajaxSubmit,\n          $btn = $form.querySelector('[type=\"submit\"]'),\n          eventPreventDefault = ( enableBtn = true ) => {\n              if( $btn && enableBtn ){ $btn.disabled = false; }\n              if( event ){ event.preventDefault(); }\n          };\n\n    if( isAjaxForm ){\n        eventPreventDefault(false);\n    }\n\n    if( $btn ){\n        if( $btn.disabled ){\n            eventPreventDefault(false);\n            return false;\n        }\n        $btn.disabled = true;\n    }\n\n    removeClass( $form, (formCssClasses.ajaxComplete + ' ' + formCssClasses.ajaxError + ' ' + formCssClasses.ajaxSuccess) );\n\n    instance.validateForm()\n        .then(data => {\n            \n            const hasGroup = typeof data.group !== 'undefined';\n\n            if( hasGroup && !data.canSubmit ){\n                return [{ stopExecution: true }]\n            }\n\n            const beforeSendData = {\n                stopExecution: false,\n                formData: isAjaxForm ? instance.getFormData() : null\n            };\n\n            const rfsObject = {\n                  functionsList: options.formOptions.beforeSend,\n                  data: beforeSendData,\n                  stopConditionFn: function(data){ return data.stopExecution; }\n            };\n            return runFunctionsSequence(rfsObject);\n\n        }).then(dataList => {\n\n            if( dataList.some(({stopExecution}) => stopExecution) ){\n                eventPreventDefault();\n                return false;\n            }\n\n            addClass( $form, formCssClasses.submit );\n            \n            if( isAjaxForm ){\n                const formData = dataList.pop().formData;\n                addClass( $form, formCssClasses.ajaxPending );\n                dispatchCustomEvent( $form, customEvents.form.submit, { detail: ajaxCall( $form, formData, options ) } );\n            }\n\n        })\n        .catch(() => {\n            eventPreventDefault();\n            removeClass( $form, formCssClasses.submit );\n        });\n    \n}\n","\nimport { addClass, checkTouchedField, removeClass } from '../helpers';\n\nexport const groupValidationEnd = function( event ){\n\n    const $form = event.target;\n    const { result, group, fields } = event.detail;\n    const { fieldOptions, formOptions } = $form.formjs.options;\n\n    if( result ){\n        $form.formjs.currentGroup = group.next;\n    }\n\n    if( fields[0].isCheckingGroup ){\n        fields.forEach(({ $field }) => {\n            checkTouchedField( $field, fieldOptions );\n        });\n    } else {\n        fields.forEach(({ $field }) => {\n            removeClass( $field.closest(fieldOptions.questionContainer), fieldOptions.cssClasses.pending );\n        });\n    }\n\n    if( !fieldOptions.skipUIfeedback ){\n        removeClass( $form, (`${formOptions.cssClasses.pending} ${formOptions.cssClasses.valid} ${formOptions.cssClasses.error}`) );\n\n        const feedbackClassesKey = !result ? 'error' : (!group.next ? 'valid' : '');\n        if( feedbackClassesKey ){\n            addClass( $form, formOptions.cssClasses[feedbackClassesKey] );\n        }\n    }\n    \n}\n","\nimport { fieldsStringSelector, isFieldForChangeEvent } from '../helpers';\n\nexport const validation = function( event ){\n\n    const isChangeEvent = event.type === 'change',\n          $field = event.target,\n          self = $field.closest('form').formjs;\n\n    if( $field.matches( fieldsStringSelector ) ){\n        const isFieldForChangeEventBoolean = isFieldForChangeEvent($field);\n        const hasOnlyChangeEvent = self.options.fieldOptions.validateOnEvents === 'change';\n        \n        if(\n            (isFieldForChangeEventBoolean && isChangeEvent) ||\n            (!isFieldForChangeEventBoolean && (!isChangeEvent || hasOnlyChangeEvent))\n        ){\n            \n            self.validateField( $field )\n                .then(() => {\n                    const type = $field.type;\n                    const $relatedEqualTo = $field.closest('form').querySelector('[data-equal-to=\"'+ $field.name +'\"]');\n\n                    if(\n                        // FIELD IS ( required OR data-validate-if-filled ) AND RELATED FIELD data-equal-to HAS A VALUE\n                        ($field.required || $field.matches('[data-validate-if-filled]')) && \n                        !(type === 'checkbox' || type === 'radio') && \n                        $relatedEqualTo && $relatedEqualTo.value.trim() !== ''\n                    ){\n                        self.validateField( $relatedEqualTo ).catch(() => {});\n                    }\n                })\n                .catch(() => {});\n\n        }\n    }\n    \n}\n","\nimport { addClass, getJSONobjectFromFieldAttribute, removeClass, mergeObjects } from '../helpers';\n\nexport const validationEnd = function( event ){\n\n    const { $field, result, errors } = event.detail,\n          dataFieldOptions = getJSONobjectFromFieldAttribute( $field, 'data-field-options' ),\n          { cssClasses, questionContainer, skipUIfeedback } = mergeObjects({}, $field.form.formjs.options.fieldOptions, dataFieldOptions),\n          $container = $field.closest( questionContainer ),\n          isReqFrom = $field.matches('[data-required-from]'),\n          $reqMore = document.querySelector( $field.getAttribute('data-required-from') );\n\n    if( $container && !skipUIfeedback ){\n        const formClasses = Object.values($field.form.formjs.options.formOptions.cssClasses)\n                                .reduce((accString, cssClass) => {\n                                    return `${accString} ${cssClass}`\n                                }, '').trim();\n        removeClass( $field.form, formClasses );\n        removeClass( $container, cssClasses.pending );\n\n        if( result ){\n\n            if( !isReqFrom || (isReqFrom && $reqMore.checked) ){\n                // IF FIELD IS VALID\n                const errorClasses = cssClasses.error + ' ' + cssClasses.errorEmpty + ' ' + cssClasses.errorRule;\n                removeClass( $container, errorClasses );\n                addClass( $container, cssClasses.valid );\n            }\n\n        } else {\n\n            // IF FIELD IS NOT VALID\n            let extraErrorClass = cssClasses.errorRule;\n\n            // HANDLE CASE OF FIELD data-checks\n            const isChecks = $field.matches('[data-checks]'),\n                  checkedElLength = (isChecks ? $container.querySelectorAll('[name=\"' + $field.name + '\"]:checked').length : 0);\n\n            if( (!isChecks && (errors && errors.empty)) || (isChecks && checkedElLength === 0) ){\n                extraErrorClass = cssClasses.errorEmpty;\n            }\n\n            let errorClasses = cssClasses.error + ' ' + extraErrorClass,\n                errorClassToRemove = cssClasses.errorEmpty + ' ' + cssClasses.errorRule;\n            removeClass( $container, cssClasses.valid + ' ' + errorClassToRemove );\n            addClass( $container, errorClasses );\n\n        }\n    }\n\n}\n","\nimport {    getJSONobjectFromFieldAttribute,\n            isDOMNode,\n            mergeObjects,\n            mergeValidateFieldDefault,\n            runFunctionsSequence\n        }           from './helpers';\nimport { isValid }  from './isValid';\n\nexport function checkFieldValidity( $field, fieldOptions, validationRules, validationErrors ){\n\n    if( !isDOMNode($field) ){\n        const obj = mergeValidateFieldDefault({$field});\n        return Promise.resolve(obj);\n    }\n\n    const $form = $field.closest('form'),\n          isValidValue = $field.value.trim().length > 0,\n          dataFieldOptions = getJSONobjectFromFieldAttribute( $field, 'data-field-options' );\n\n    fieldOptions = mergeObjects( fieldOptions, dataFieldOptions );\n\n    // HANDLE FIELD data-required-from WHEN CHANGING ITS RELATED RADIO\n    if( $field.type === 'radio' ){\n        const $checked = $field.checked ? $field : $form.querySelector('[name=\"'+ $field.name +'\"]:checked'),\n              reqMoreIsChecked = $checked && $checked.matches('[data-require-more]'),\n              $findReqMore = reqMoreIsChecked ? $checked : $form.querySelector('[data-require-more][name=\"'+ $field.name +'\"]'),\n              $findReqFrom = $findReqMore ? $form.querySelector('[data-required-from=\"#'+ $findReqMore.id +'\"]') : null;\n        \n        if( $checked && $findReqFrom ){\n            $findReqFrom.required = $findReqMore.required && $findReqMore.checked;\n            if( !reqMoreIsChecked ){\n                $findReqFrom.value = '';\n            } else if( fieldOptions.focusOnRelated ) {\n                $findReqFrom.focus();\n            }\n        }\n    }\n\n    // HANDLE FIELD data-require-more & data-required-from WHEN *-from IT'S FILLED\n    if( $field.matches('[data-required-from]') && isValidValue ){\n        const $reqMore = $form.querySelector( $field.getAttribute('data-required-from') );\n        $reqMore.checked = true;\n        $field.required = $reqMore.required;\n    }\n\n    const needsValidation = $field.required || ($field.matches('[data-validate-if-filled]') && isValidValue);\n\n    return runFunctionsSequence({\n            functionsList: fieldOptions.beforeValidation,\n            data: { $field, fieldOptions }\n        })\n        .then(data => {\n            const dataObj = data.pop();\n            return new Promise(resolve => {\n                if( !needsValidation ){\n                    dataObj.result = true;\n                }\n                resolve( needsValidation ? isValid($field, fieldOptions, validationRules, validationErrors) : dataObj );\n            });\n        });\n\n}\n","\nimport { mergeValidateFieldDefault, mergeObjects, toCamelCase } from './helpers';\n\nexport function isValid( $field, fieldOptions, validationRules, validationErrors ){\n\n    const fieldValue = $field.value,\n          obj = mergeValidateFieldDefault({result: fieldValue.trim().length > 0, $field}),\n          isRadioOrCheckbox = /^(radio|checkbox)$/.test($field.type),\n          hasSelectedInput = $field.closest('form').querySelectorAll('[name=\"'+ $field.name +'\"]:checked').length > 0;\n\n    if( (!isRadioOrCheckbox && !obj.result) || (isRadioOrCheckbox && !hasSelectedInput) ){\n        obj.result = false;\n        obj.errors = { empty: true };\n        return Promise.resolve(obj);\n    }\n\n    // COLLECT VALIDATION METHOD NAMES ( USED TO RUN VALIDATIONS AND GET ERRORS )\n    const validationMethods = Array.from($field.attributes).reduce((accList, attr) => {\n        const attrName = toCamelCase( attr.name.replace('data-', '') ),\n              attrValue = toCamelCase( attr.value ),\n              isAttrValueWithFn = (attrName === 'type' || attrName === 'subtype') && validationRules[attrValue],\n              isAttrNameWithFn = validationRules[attrName];\n\n        if( isAttrValueWithFn || isAttrNameWithFn ){\n            accList.push( isAttrValueWithFn ? attrValue : attrName );\n        }\n        return accList;\n    }, []);\n\n    return new Promise(resolve => {\n\n        // RUN VALIDATIONS\n        const validationsResult = validationMethods.reduce((accPromise, methodName) => {\n            return accPromise.then(accObj => {\n                return new Promise(resolveVal => {\n                    // RUN VALIDATION INSIDE A PROMISE IS USEFUL FOR ASYNC VALIDATIONS\n                    resolveVal( validationRules[methodName](fieldValue, $field, fieldOptions) );\n                }).then(valObj => {\n                    // ADD CUSTOM ERROR-KEY FOR EACH VALIDATION RULE\n                    if( !valObj.result ){\n                        const errorObj = {};\n                        if( typeof valObj.errors === 'undefined' || typeof valObj.errors[methodName] === 'undefined' ){\n                            errorObj[methodName] = true;\n                        }\n                        valObj.errors = mergeObjects({}, valObj.errors, errorObj);\n                    }\n                    valObj = valObj.result ? {} : valObj;\n                    return mergeObjects(accObj, valObj);\n                });\n            });\n        }, Promise.resolve(obj));\n        resolve(validationsResult);\n\n    }).then(data => {\n\n        // GET ERRORS\n        if( !data.result ){\n            data.errors = validationMethods.reduce((accObj, methodName) => {\n                const errors = (validationErrors[methodName] && validationErrors[methodName](fieldValue, $field)) || {};\n                return mergeObjects(accObj, errors);\n            }, data.errors);\n        }\n        return data;\n\n    });\n\n}\n","\nimport { getUniqueFields, mergeValidateFieldDefault, mergeValidateFormDefault, mergeObjects } from './helpers';\nimport { checkFieldValidity } from './checkFieldValidity';\n\nexport function checkFieldsValidity( $fields, fieldOptions, validationRules, validationErrors, fieldToSkip = null ){\n\n    fieldOptions = mergeObjects( {}, fieldOptions, {focusOnRelated: false} );\n    const $fieldsList = getUniqueFields( $fields );\n\n    return Promise.all( $fieldsList.map($field => {\n\n        if( fieldToSkip && $field === fieldToSkip ){\n            const obj = mergeValidateFieldDefault({$field, result: true});\n            return Promise.resolve(obj);\n        }\n        return checkFieldValidity( $field, fieldOptions, validationRules, validationErrors );\n\n    }) ).then(fields => {\n\n        const areAllFieldsValid = fields.every(({result}) => result);\n        return mergeValidateFormDefault({result: areAllFieldsValid, fields});\n\n    });\n\n}\n","\nimport { version }              from '../package.json';\nimport { \n    addClass,\n    checkFormEl, \n    checkTouchedField, \n    customEvents, \n    dispatchCustomEvent, \n    excludeSelector, \n    fieldsStringSelector, \n    finalizeFieldPromise, \n    finalizeFieldsGroupPromise, \n    finalizeFormPromise, \n    getFilledFields, \n    getInitialValues,\n    getUniqueFields,\n    isNodeList,\n    mergeObjects, \n    mergeValidateFormDefault, \n    removeClass }               from './modules/helpers';\nimport { options }              from './modules/options';\nimport { validationRules }      from './modules/validationRules';\nimport { formStartup }          from './modules/formStartup';\nimport { destroy }              from './modules/destroy';\nimport { checkFieldValidity }   from './modules/checkFieldValidity';\nimport { checkFieldsValidity }  from './modules/checkFieldsValidity';\n\nclass Form {\n\n    constructor( form, optionsObj ){\n        const argsL = arguments.length,\n              checkFormElem = checkFormEl(form);\n\n        if( argsL === 0 || (argsL > 0 && !form) ){\n            throw new Error('First argument \"form\" is missing or falsy!');\n        }\n        if( isNodeList(form) ){\n            throw new Error('First argument \"form\" must be a single DOM node or a form CSS selector, not a NodeList!');\n        }\n        if( !checkFormElem.result ){\n            throw new Error('First argument \"form\" is not a DOM node nor a form CSS selector!');\n        }\n\n        const self = this;\n\n        self.$form = checkFormElem.$el;\n        self.$form.formjs = self;\n        self.options = mergeObjects({}, Form.prototype.options, optionsObj);\n        self.currentGroup = self.options.formOptions.groups[0];\n\n        // BINDING CONTEXT FOR FUTURE EXECUTION\n        const cbList = [\n            // IN fieldOptions\n            'beforeValidation',\n            // IN formOptions\n            'beforeSend',\n            'getFormData'\n        ];\n        cbList.forEach(cbName => {\n            const optionType = self.options.formOptions[cbName] ? 'formOptions' : 'fieldOptions';\n            let cbOpt = self.options[optionType][cbName];\n\n            if( cbOpt ){\n                self.options[optionType][cbName] = ( Array.isArray(cbOpt) ? cbOpt.map(cbFn => cbFn.bind(self)) : cbOpt.bind(self) );\n            }\n        });\n\n        self._ = {\n            initialValues: getInitialValues(self.$form),\n            // WORKAROUND FOR SURVEYJS: initialValues IS {} AFTER SURVEY INIT\n            asyncInitEnd: function () {\n                const onInitCheckFilled = self.options.formOptions.onInitCheckFilled;\n                this.initialValues = getInitialValues(self.$form);\n                return onInitCheckFilled ? self.validateFilledFields().catch(fields => fields) : Promise.resolve([]);\n            }\n        }\n\n        formStartup( self.$form, self.options );\n\n        const initOptions = {};\n        if( self.options.formOptions.onInitCheckFilled ){\n            initOptions.detail = self.validateFilledFields().catch(fields => fields);\n        }\n        dispatchCustomEvent( self.$form, customEvents.form.init, initOptions );\n    }\n\n    destroy(){\n        destroy(this.$form, this.options);\n        dispatchCustomEvent( this.$form, customEvents.form.destroy );\n    }\n    \n    getFormData( trimValues = this.options.fieldOptions.trimValue ){\n        const $formFields = this.$form.querySelectorAll('input, select, textarea'),\n              $filteredFields = Array.from( $formFields ).filter( elem => elem.matches(excludeSelector) );\n        return this.options.formOptions.getFormData( $filteredFields, trimValues );\n    }\n\n    validateField( field, fieldOptions ){\n        const self = this;\n        const $form = self.$form;\n        const $field = typeof field === 'string' ? $form.querySelector(field) : field;\n\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions);\n        \n        return checkFieldValidity($field, fieldOptions, self.validationRules, self.validationErrors)\n            .then(obj => {\n                dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } );\n                if( obj.result ){\n                    if( fieldOptions.onValidationCheckAll ){\n                        const selector = self.currentGroup || fieldsStringSelector;\n                        const $fields = $form.querySelectorAll(selector);\n                        checkFieldsValidity( $fields, fieldOptions, self.validationRules, self.validationErrors, obj.$field )\n                            .then(dataForm => {\n                                const groups = self.options.formOptions.groups;\n                                const validationEventName = self.currentGroup ? customEvents.group.validation : customEvents.form.validation;\n                                if( groups.length > 0 ){\n                                    dataForm.group = {\n                                        prev: groups[groups.indexOf(selector) - 1],\n                                        current: selector,\n                                        next: groups[groups.indexOf(selector) + 1]\n                                    }\n                                    dataForm.canSubmit = dataForm.result && !dataForm.group.next;\n                                }\n                                dispatchCustomEvent( $form, validationEventName, { detail: dataForm } );\n                            });\n                    }\n                } else {\n                    removeClass( $form, self.options.formOptions.cssClasses.valid );\n                    addClass( $form, self.options.formOptions.cssClasses.error );\n                }\n                return obj;\n            })\n            .then(finalizeFieldPromise);\n    }\n\n    validateFieldsGroup( group = this.currentGroup, fieldOptions ){\n        const self = this;\n\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions);\n        \n        const $fields = self.$form.querySelectorAll(group);\n        const skipUIfeedback = fieldOptions.skipUIfeedback;\n\n        if( !skipUIfeedback ){\n            addClass( self.$form, self.options.formOptions.cssClasses.pending );\n        }\n\n        return checkFieldsValidity($fields, fieldOptions, self.validationRules, self.validationErrors)\n            .then(data => {\n                data.fields.forEach(obj => {\n                    obj.isCheckingGroup = true;\n                    dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } );\n                });\n                const groups = self.options.formOptions.groups;\n                if( groups.length > 0 ){\n                    data.group = {\n                        prev: groups[groups.indexOf(group) - 1],\n                        current: group,\n                        next: groups[groups.indexOf(group) + 1]\n                    }\n                    data.canSubmit = data.result && !data.group.next;\n                }\n                dispatchCustomEvent( self.$form, customEvents.group.validation, { detail: data } );\n                return data;\n            })\n            .then(finalizeFieldsGroupPromise);\n    }\n\n    validateFilledFields( fieldOptions ){\n        const self = this;\n        const $form = self.$form;\n        const $filledFields = getFilledFields( $form );\n        const requiredFieldsLength = getUniqueFields( $form.querySelectorAll(fieldsStringSelector) ).filter($field => $field.required).length;\n        const formClasses = self.options.formOptions.cssClasses;\n\n        if( $filledFields.length === 0 ){\n            const obj = mergeValidateFormDefault({result: true, fields: []})\n            return Promise.resolve(obj);\n        }\n\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions);\n\n        const skipUIfeedback = fieldOptions.skipUIfeedback;\n\n        if( !skipUIfeedback ){\n            addClass( $form, formClasses.pending );\n        }\n\n        return checkFieldsValidity($filledFields, fieldOptions, self.validationRules, self.validationErrors)\n            .then(data => {\n                data.fields.forEach(obj => {\n                    checkTouchedField( obj.$field, fieldOptions );\n                    dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } );\n                });\n            \n                if( !skipUIfeedback ){\n                    removeClass( $form, (`${formClasses.pending} ${formClasses.valid} ${formClasses.error}`) );\n                    \n                    if( data.result && $filledFields.length === requiredFieldsLength ) {\n                        addClass( $form, formClasses.valid );\n                    } else if( !data.result ) {\n                        addClass( $form, formClasses.error );\n                    }\n                }\n                \n                return data;\n            })\n            .then(finalizeFormPromise);\n    }\n\n    validateForm( fieldOptions ){\n        const self = this;\n\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions);\n\n        if( self.currentGroup ){\n            return self.validateFieldsGroup( self.currentGroup, fieldOptions )\n        }\n\n        const $form = self.$form;\n        const $fields = $form.querySelectorAll(fieldsStringSelector);\n\n        if( !fieldOptions.skipUIfeedback ){\n            addClass( $form, self.options.formOptions.cssClasses.pending );\n        }\n\n        return checkFieldsValidity($fields, fieldOptions, self.validationRules, self.validationErrors)\n            .then(data => {\n                data.fields.forEach(obj => {\n                    obj.isCheckingForm = true;\n                    dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } );\n                });\n                dispatchCustomEvent( $form, customEvents.form.validation, { detail: data } );\n                return data;\n            })\n            .then(finalizeFormPromise);\n    }\n    \n    static addValidationErrors( errorsObj ){\n        Form.prototype.validationErrors = mergeObjects({}, Form.prototype.validationErrors, errorsObj);\n    }\n\n    static addValidationRules( rulesObj ){\n        Form.prototype.validationRules = mergeObjects({}, Form.prototype.validationRules, rulesObj);\n    }\n    \n    static setOptions( optionsObj ){\n        Form.prototype.options = mergeObjects({}, Form.prototype.options, optionsObj);\n    }\n\n}\n\nForm.prototype.options = options;\nForm.prototype.validationErrors = {};\nForm.prototype.validationRules = validationRules;\nForm.prototype.version = version;\n\nexport default Form;\n","\nimport { isDOMNode } from './isDOMNode';\n\nexport const checkFormEl = form => {\n    let isString = typeof form,\n        isValidNodeSelector = isString === 'string' && isDOMNode(document.querySelector(form)),\n        isFormSelector = isValidNodeSelector && document.querySelector(form).tagName.toLowerCase() === 'form',\n        obj = {\n            result: isDOMNode(form) || isFormSelector,\n            $el: (isString === 'string' ? document.querySelector(form) : form)\n        };\n\n    return obj;\n}\n","\nimport { customEvents } from './helpers';\nimport { \n    blurHandler,\n    dataTypeNumber,\n    formValidationEnd,\n    groupValidationEnd,\n    keypressMaxlength,\n    pastePrevent,\n    submit,\n    validation, \n    validationEnd \n} from './listenerCallbacks';\n\nexport function formStartup( $form, options ){\n\n    $form.noValidate = true;\n\n    const fieldOptions = options.fieldOptions,\n          formOptions = options.formOptions;\n        \n    // VALIDATION WITH ATTRIBUTES LIKE HTML ONES ( ALSO FOR BUG FIXING, EG: maxlength IN ANDROID )\n    if( fieldOptions.strictHtmlValidation ){\n        \n        // maxlength\n        // MAXLENGTH IS BUGGY IN ANDROID BROWSERS\n        $form.addEventListener('keypress', keypressMaxlength, false);\n\n        // data-type=\"number\"\n        // SINCE VALIDATING type=\"number\" WITH NON NUMERIC CHARS WILL RETURN EMPTY STRING IN SOME BROWSERS ( EG: FIREFOX )\n        $form.addEventListener('input', dataTypeNumber, false);\n        \n    }\n    \n    if( fieldOptions.preventPasteFields && $form.querySelectorAll( fieldOptions.preventPasteFields ).length ){\n        // INIT EVENT LISTENER FOR \"PASTE\" EVENT TO PREVENT IT ON SPECIFIED FIELDS\n        $form.addEventListener('paste', pastePrevent, false);\n    }\n\n    $form.addEventListener('blur', blurHandler, true);\n\n    // INIT EVENTS LISTENER ( AS IN fieldOptions )\n    fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n        const useCapture = /^(blur|focus)$/.test(eventName);\n        $form.addEventListener(eventName, validation, useCapture);\n    });\n\n    $form.addEventListener(customEvents.field.validation, validationEnd, false);\n    if( formOptions.groups.length > 0 ){\n        $form.addEventListener(customEvents.group.validation, groupValidationEnd, false);\n    }\n    $form.addEventListener(customEvents.form.validation, formValidationEnd, false);\n    \n    // HANDLE FORM SUBMIT\n    if( formOptions.handleSubmit ){\n        // INIT FORM SUBMIT ( DEFAULT AND AJAX )\n        $form.addEventListener('submit', submit);\n\n        if( formOptions.ajaxSubmit ){\n            const enctype = $form.getAttribute('enctype')\n            if( enctype && !enctype.includes('multipart/form-data') ){\n                formOptions.ajaxOptions.headers['Content-Type'] = enctype;\n            }\n\n            const method = $form.getAttribute('method');\n            if( method ){\n                formOptions.ajaxOptions.method = method.toUpperCase();\n            }\n\n            const action = $form.getAttribute('action')\n            if( action ){\n                formOptions.ajaxOptions.url = action;\n            }\n        }\n    }\n\n}\n","\nimport { customEvents } from './helpers';\nimport { blurHandler, dataTypeNumber, formValidationEnd, groupValidationEnd, keypressMaxlength, pastePrevent, submit, validation, validationEnd } from './listenerCallbacks';\n\nexport function destroy( $form, options ){\n\n    if( options.fieldOptions.strictHtmlValidation ){\n        $form.removeEventListener('keypress', keypressMaxlength, false);\n        $form.removeEventListener('input', dataTypeNumber, false);\n    }\n\n    if( options.fieldOptions.preventPasteFields ){\n        $form.removeEventListener('paste', pastePrevent, false);\n    }\n\n    if( options.formOptions.handleSubmit ){\n        $form.removeEventListener('submit', submit);\n    }\n\n    $form.removeEventListener('blur', blurHandler, true);\n\n    options.fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n        const useCapturing = ['blur', 'focus'].includes(eventName);\n        $form.removeEventListener(eventName, validation, useCapturing);\n    });\n\n    $form.removeEventListener(customEvents.field.validation, validationEnd, false);\n    if( options.formOptions.groups.length > 0 ){\n        $form.removeEventListener(customEvents.group.validation, groupValidationEnd, false);\n    }\n    $form.removeEventListener(customEvents.form.validation, formValidationEnd, false);\n\n    delete $form.formjs;\n    \n}\n","\nimport { fieldsStringSelector } from './fieldsStringSelector';\nimport { getUniqueFields } from './getUniqueFields';\n\nexport const getFilledFields = $form => {\n    return getUniqueFields( $form.querySelectorAll(fieldsStringSelector) )\n    .map($field => {\n\n        const name = $field.name,\n              type = $field.type,\n              isCheckboxOrRadio = type === 'checkbox' || type === 'radio',\n              fieldChecked = $form.querySelector('[name=\"' + name + '\"]:checked'),\n              isReqFrom = $field.matches('[data-required-from]'),\n              $reqMore = (isReqFrom ? $form.querySelector($field.getAttribute('data-required-from')) : null);\n\n        return (\n            isCheckboxOrRadio ? (fieldChecked || null) :\n            (isReqFrom && $reqMore.checked) || (!isReqFrom && $field.value) ? $field : null\n        );\n\n    })\n    .filter($field => $field !== null);\n}\n"],"names":["addClass","element","cssClasses","split","forEach","className","classList","add","isNodeList","nodeList","NodeList","prototype","isPrototypeOf","removeClass","remove","isDOMNode","node","Element","checkTouchedField","$field","fieldOptions","$container","closest","questionContainer","touched","customEvents","validation","destroy","init","submit","isPlainObject","object","Object","toString","call","mergeObjects","out","Array","from","arguments","slice","filter","arg","keys","key","isArray","concat","push","dispatchCustomEvent","elem","eventName","eventOptions","bubbles","eventObj","CustomEvent","dispatchEvent","excludeSelector","fieldsStringSelector","finalizeFieldPromise","errors","result","Promise","resolve","reject","finalizeFieldsGroupPromise","canSubmit","fields","group","finalizeFormPromise","formatMap","YYYY-MM-DD","dateArray","MM-DD-YYYY","DD-MM-YYYY","reverse","getDateAsNumber","dateString","dateFormat","splitChar","string","separator","match","length","getSplitChar","includes","replace","join","getInitialValues","$form","querySelectorAll","$el","matches","reduce","accData","tagName","type","name","value","checked","multiple","options","isCheckboxOrRadio","isMultiCheckbox","isMultiSelect","multiSelectValues","opt","selected","getJSONobjectFromFieldAttribute","fieldEl","attrName","customAttrEl","JSON","parse","getAttribute","getUniqueFields","$nodeList","currentFieldName","currentFieldType","mergeValidateFieldDefault","obj","mergeValidateFormDefault","isFieldForChangeEvent","runFunctionsSequence","functionsList","data","stopConditionFn","acc","promiseFn","then","res","dataNew","dataList","serializeObject","constructor","a","k","encodeURIComponent","toCamelCase","all","letter","toUpperCase","beforeValidation","initialValues","form","formjs","_","trimValue","trim","$fields","dirty","checkDirtyField","initValues","isRadio","isCheckbox","isSelect","multiValues","map","val","$checkedRadio","querySelector","isValueModified","modified","checkModifiedField","skipUIfeedback","pending","error","errorEmpty","errorRule","valid","focusOnRelated","maxFileSize","onValidationCheckAll","preventPasteFields","strictHtmlValidation","validateOnEvents","formOptions","ajaxOptions","cache","credentials","headers","Content-Type","Accept","method","mode","redirect","timeout","url","location","href","ajaxSubmit","beforeSend","ajaxComplete","ajaxError","ajaxPending","ajaxSuccess","getFormData","$filteredFields","trimValues","formData","this","prevObj","$checkboxes","field","$selectedOpts","option","keyName","index","list","isLastKeyName","keyNameSplit","arrPos","arrayHasItemAtIndex","arrItemKeyName","isKeyNameArray","endsWith","groups","handleFileUpload","handleSubmit","nestedMultipartDataToJSON","onInitCheckFilled","validationRules","date","test","email","number","checkbox","$dataChecks","attrValue","checkedLength","isMinOk","isMaxOk","checks","minChecks","maxChecks","equalTo","exactLength","valueLength","minlength","maxlength","file","MIMEtype","accept","RegExp","filesList","files","exceedMaxFileSize","size","isAcceptedFileType","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","max","maxVal","maxLength","min","minVal","minLength","pattern","radio","$fieldChecked","blurHandler","event","target","dataTypeNumber","fieldValue","stopImmediatePropagation","valueReplaced","formValidationEnd","detail","isCheckingForm","feedbackClassesKey","keypressMaxlength","keyPressed","which","keyCode","allowedKeys","indexOf","pastePrevent","preventDefault","ajaxCall","formDataObj","timeoutTimer","body","enctypeAttr","isMultipartForm","isMultipartHeader","bodyIsPlainObj","formDataMultipart","dataObj","nestedToJSON","FormData","createFormData","subKeyStr","i","subSubKeyString","is","Number","NaN","subKeyStrTrans","append","stringify","objectToFormData","idx","Headers","controller","AbortController","signal","window","setTimeout","abort","fetch","response","ok","Error","statusText","fetchMethod","get","contentType","headerOpt","getFetchMethod","catch","message","finally","clearTimeout","disabled","instance","formCssClasses","isAjaxForm","$btn","eventPreventDefault","enableBtn","validateForm","stopExecution","beforeSendData","rfsObject","some","pop","groupValidationEnd","currentGroup","next","isCheckingGroup","isChangeEvent","self","isFieldForChangeEventBoolean","hasOnlyChangeEvent","validateField","$relatedEqualTo","required","validationEnd","dataFieldOptions","isReqFrom","$reqMore","document","formClasses","values","accString","cssClass","errorClasses","extraErrorClass","isChecks","checkedElLength","empty","errorClassToRemove","checkFieldValidity","validationErrors","isValidValue","$checked","reqMoreIsChecked","$findReqMore","$findReqFrom","id","focus","needsValidation","isRadioOrCheckbox","hasSelectedInput","validationMethods","attributes","accList","attr","isAttrValueWithFn","isAttrNameWithFn","accPromise","methodName","accObj","resolveVal","valObj","errorObj","isValid","checkFieldsValidity","fieldToSkip","$fieldsList","areAllFieldsValid","every","Form","[object Object]","optionsObj","argsL","checkFormElem","isString","isFormSelector","toLowerCase","checkFormEl","cbName","optionType","cbOpt","cbFn","bind","asyncInitEnd","validateFilledFields","noValidate","addEventListener","useCapture","enctype","action","formStartup","initOptions","removeEventListener","useCapturing","$formFields","selector","dataForm","validationEventName","prev","current","$filledFields","fieldChecked","getFilledFields","requiredFieldsLength","validateFieldsGroup","errorsObj","rulesObj","version"],"mappings":";AACO,MAAMA,EAAW,CAAEC,EAASC,KAC/BA,EAAWC,MAAM,KAAKC,QAAQC,IAC1BJ,EAAQK,UAAUC,IAAKF,MCDlBG,EAAaC,GACfC,SAASC,UAAUC,cAAeH,GCFhCI,EAAc,CAAEZ,EAASC,KAClCA,EAAWC,MAAM,KAAKC,QAAQC,IAC1BJ,EAAQK,UAAUQ,OAAQT,MCDrBU,EAAYC,GACdC,QAAQN,UAAUC,cAAeI,GCA/BE,EAAoB,CAAEC,EAAQC,KAEvC,MAAMC,EAAaF,EAAOG,QAASF,EAAaG,oBAAuBJ,EACvEnB,EAAUqB,EAAYD,EAAalB,WAAWsB,UCLrCC,EACF,CACHC,WAAY,wBAFPD,EAIH,CACFE,QAAY,mBACZC,KAAY,gBACZC,OAAY,kBACZH,WAAY,uBARPD,EAUF,CACHC,WAAY,wBCXPI,EAAgBC,GAC2B,oBAA7CC,OAAOrB,UAAUsB,SAASC,KAAMH,GCC9BI,EAAe,SAAUC,EAAM,IAmBxC,OAlBAC,MAAMC,KAAKC,WAAWC,MAAM,GAAGC,OAAOC,KAASA,GAAKtC,QAAQsC,IACxDV,OAAOW,KAAKD,GAAKtC,QAAQwC,IACjBP,MAAMQ,QAAQH,EAAIE,IAClBR,EAAIQ,IAAQR,EAAIQ,IAAQ,IAAIE,OAAQJ,EAAIE,GAAKJ,MAAM,IAC5CV,EAAcY,EAAIE,IACzBR,EAAIQ,GAAOT,EAAcC,EAAIQ,IAAQ,GAAKF,EAAIE,IAG1CP,MAAMQ,QAAQT,EAAIQ,IAElBR,EAAIQ,GAAKG,KAAKL,EAAIE,IAElBR,EAAIQ,GAAOF,EAAIE,OAMxBR,GCnBEY,EAAsB,CAAEC,EAAMC,EAAWC,KAClDA,EAAehB,EAAa,GAAI,CAAEiB,SAAS,GAAQD,GACnD,MAAME,EAAW,IAAIC,YAAYJ,EAAWC,GAC5CF,EAAKM,cAAeF,ICLXG,EAAkB,6GCAlBC,EAAuB,6GCAvBC,EAAuB,EAAEC,OAAAA,EAAQC,OAAAA,KACtCA,EACOC,QAAQC,UAEZD,QAAQE,OAAOJ,GCJbK,EAA6B,EAAEC,UAAAA,EAAWC,OAAAA,EAAQC,MAAAA,EAAOP,OAAAA,KAC9DA,EACOC,QAAQC,QAAQ,CAACG,UAAAA,EAAWC,OAAAA,EAAQC,MAAAA,IAExCN,QAAQE,OAAO,CAACG,OAAAA,EAAQC,MAAAA,ICJtBC,EAAsB,EAAEF,OAAAA,EAAQN,OAAAA,KACrCA,EACOC,QAAQC,QAAQI,GAEpBL,QAAQE,OAAOG,GCFpBG,EAAY,CACdC,aAAc,SAASC,GACnB,OAAOA,GAEXC,aAAc,SAASD,GACnB,MAAO,CAACA,EAAU,GAAIA,EAAU,GAAIA,EAAU,KAElDE,aAAc,SAASF,GACnB,OAAOA,EAAUG,YAIZC,EAAkB,CAAEC,EAAYC,KACzCA,EAAaA,GAAc,aAC3B,MAAMC,EChBkBC,CAAAA,IAExB,MAAMC,EAAYD,EAAOE,MAAM,MAC/B,OAAQD,GAAaA,EAAUE,OAAS,EAAKF,EAAU,GAAK,MDa1CG,CAAaP,GAE/B,GAAKC,EAAWO,SAASN,GAQzB,OAJAD,EAAaA,EAAWQ,QAAQ,UAAW,KAC3CT,EAAaA,EAAWzE,MAAM2E,GAC9BF,EAAaP,EAAUQ,GAAYD,GAAYU,KAAK,KEtB3CC,EAAmBC,GACZ,IAAIA,EAAMC,iBAAiB,4BAA4BhD,OAAOiD,GAAOA,EAAIC,QAAQnC,IAE5EoC,OAAO,CAACC,GAAWC,QAAAA,EAASC,KAAAA,EAAMC,KAAAA,EAAMC,MAAAA,EAAOC,QAAAA,EAASC,SAAAA,EAAUC,QAAAA,MACnF,MAAMC,EAAoB,CAAC,WAAY,SAASjB,SAASW,GACnDO,EAA2B,aAATP,GAAuBP,EAAMC,iBAAiB,UAAUO,OAAUd,OAAS,EAEnG,QAA6B,IAAlBW,EAAQG,IAAyBK,IAAsBH,EAC9D,OAAOL,EAGX,QAA6B,IAAlBA,EAAQG,GAAuB,CACtC,GAAIK,IAAsBH,EAEtB,OADAL,EAAQG,GAAQM,EAAkB,GAAK,KAChCT,EAGX,MAAMU,EAA4B,WAAZT,GAAwBK,EACxCK,EAAoBJ,GAAW,IAAIA,GAAS3D,OAAOgE,GAAOA,EAAIC,UACpEb,EAAQG,GAAQO,EAAgBC,EAAqBF,EAAkB,CAACL,GAASA,OAC1EK,EACPT,EAAQG,GAAMjD,KAAKkD,GAEnBJ,EAAQG,GAAQC,EAGpB,OAAOJ,GACR,IC7BMc,EAAkC,CAAEC,EAASC,KACtD,MAAMC,EAAeF,EAAQtF,QAAQ,IAAKuF,EAAU,KACpD,OAAQC,GAAgBC,KAAKC,MAAMF,EAAaG,aAAaJ,KAAe,ICFnEK,EAAkBC,IAE3B,IAAIC,EAAmB,GACnBC,EAAmB,GAEvB,OAAOhF,MAAMC,KAAM6E,GAAY1E,OAAOtB,IAClC,MAAM6E,EAAO7E,EAAO6E,KACdD,EAAO5E,EAAO4E,KAEpB,OAAIC,IAASoB,GAAoBrB,IAASsB,KAIrClG,EAAOwE,QAAQ,0BAChByB,EAAmBpB,EACnBqB,EAAmBtB,IAEhB,MCfFuB,EAA4BC,GAC9BpF,EAAa,GAAI,CAAEyB,QAAQ,EAAOzC,OAAQ,MAAQoG,GCDhDC,EAA2BD,GAC7BpF,EAAa,GAAI,CAAEyB,QAAQ,EAAMM,OAAQ,IAAMqD,GCH7CE,EAAwBtG,GAC1BA,EAAOwE,QAAQ,4DCCb+B,EAAuB,EAAIC,cAAAA,EAAgB,GAAIC,KAAAA,EAAO,GAAIC,gBAAAA,EAAkB,MAAM,IAAU,KAC9FF,EAAc/B,OAAO,CAACkC,EAAKC,IACvBD,EAAIE,KAAKC,IACZ,IAAIC,EAAU/F,EAAa,GAAI8F,EAAIA,EAAI/C,OAAS,IAChD,OAAI2C,EAAgBK,GACTrE,QAAQC,QAAQmE,GAEpB,IAAIpE,QAAQC,IAAaA,EAAQiE,EAAUG,MAC7CF,KAAK,CAACpE,EAASsE,KACZD,EAAIlF,KAAKa,GACFqE,MAGpBpE,QAAQC,QAAQ,CAAC8D,KACfI,KAAKG,GAAYA,EAASjD,OAAS,EAAIiD,EAAS3F,MAAM,GAAK2F,GChBvDC,EAAkBb,GAElBA,GAAsB,iBAARA,GAAoBA,EAAIc,cAAgBrG,OACvDA,OAAOW,KAAK4E,GACP3B,OAAO,CAAC0C,EAAEC,KACPD,EAAEvF,KAAKwF,EAAE,IAAIC,mBAAmBjB,EAAIgB,KAC7BD,GACT,IAAIhD,KAAK,KACfiC,ECRCkB,EAAc1D,GAChBA,EAAOM,QAAQ,aAAc,CAACqD,EAAKC,IAAoBA,EAAOC,eCE5DxC,EAAU,CAEnBhF,aAAc,CACVyH,iBAAwB,CCJA,UAAmC1H,OAAEA,EAAMC,aAAEA,IAEzE,MAAM0H,EAAgB3H,EAAO4H,KAAKC,OAAOC,EAAEH,cAEvC1H,EAAa8H,YAAczB,EAAsBtG,KACjDA,EAAO8E,MAAQ9E,EAAO8E,MAAMkD,QCHL,EAAEC,EAAShI,MAEtCgI,EAAU5I,EAAW4I,GAAW/G,MAAMC,KAAM8G,GAAY,CAACA,IACjDhJ,QAAQe,IACZ,GAAoB,aAAhBA,EAAO4E,MAAuC,UAAhB5E,EAAO4E,KAAkB,CACvD,MAAM1E,EAAaF,EAAOG,QAASF,EAAaG,oBAAuBJ,EACnEA,EAAO8E,MACPjG,EAAUqB,EAAYD,EAAalB,WAAWmJ,OAE9CxI,EAAaQ,EAAYD,EAAalB,WAAWmJ,WDH7DC,CAAiBnI,EAAQC,GEwBK,EAAED,EAAQ2H,EAAe1H,KAEvD,MAAMC,EAAaF,EAAOG,QAASF,EAAaG,oBAAuBJ,EAjCnD,GAAI4H,KAAAA,EAAMjD,QAAAA,EAASC,KAAAA,EAAMC,KAAAA,EAAMC,MAAAA,EAAOE,SAAAA,EAAUC,QAAAA,GAAWmD,KAE/E,KAAMvD,KAAQuD,GAAe,OAAO,EAEpC,MAAMC,EAAmB,UAATzD,EACV0D,EAAsB,aAAT1D,EACb2D,EAAuB,WAAZ5D,EAGjB,GAFuB2D,GAAcV,EAAKtD,iBAAiB,UAAUO,OAAUd,OAAS,GAAOwE,GAAYvD,EAExF,CACf,MAAMwD,EAAcF,EACA,IAAIV,EAAKtD,iBAAiB,UAAUO,gBAAmB4D,IAAIlE,GAAOA,EAAIO,OACtE,IAAIG,GAAS3D,OAAOgE,GAAOA,EAAIC,UAKnD,OAHoB6C,EAAWvD,GAAMd,SAAWyE,EAAYzE,QACxCyE,EAAYlH,OAAOoH,GAAON,EAAWvD,GAAMZ,SAASyE,IAAM3E,SAAWqE,EAAWvD,GAAMd,OAGvG,GAAIsE,EAAS,CAChB,MAAMM,EAAgBf,EAAKgB,cAAc,UAAU/D,eAEnDC,EAAQ,KAEJ6D,IACA7D,EAAQ6D,EAAc7D,OAI9B,OAAOA,IAAUsD,EAAWvD,IAMTgE,CAAiB7I,EAAQ2H,GAGxC9I,EAAUqB,EAAYD,EAAalB,WAAW+J,UAE9CpJ,EAAaQ,EAAYD,EAAalB,WAAW+J,WF/BrDC,CAAoB/I,EAAQ2H,EAAe1H,GAEtCA,EAAa+I,gBACdnK,EAAUmB,EAAOG,QAASF,EAAaG,mBAAqBH,EAAalB,WAAWkK,WDPpFlK,WAAY,CACRmJ,MAAoB,WACpBgB,MAAoB,YACpBC,WAAoB,kBACpBC,UAAoB,iBACpBN,SAAoB,cACpBG,QAAoB,aACpB5I,QAAoB,aACpBgJ,MAAoB,YAExBC,gBAAwB,EACxBC,YAAwB,GACxBC,sBAAwB,EACxBC,mBAAwB,qCACxBrJ,kBAAwB,yBACxB4I,gBAAwB,EACxBU,sBAAwB,EACxB3B,WAAwB,EACxB4B,iBAAwB,gBAG5BC,YAAa,CACTC,YAAwB,CACpBC,MAAoB,WACpBC,YAAoB,cACpBC,QAAS,CACWC,eAAgB,mBAChBC,OAAgB,oBAEpCC,OAAoB,OACpBC,KAAoB,cACpBC,SAAoB,SACpBC,QAAoB,EACpBC,IAAoBC,SAASC,MAEjCC,YAAwB,EACxBC,WAAwB,GACxB5L,WAAY,CACR6L,aAAoB,gBACpBC,UAAoB,aACpBC,YAAoB,eACpBC,YAAoB,eACpB7B,MAAoB,aACpBD,QAAoB,eACpBvI,OAAoB,gBACpB2I,MAAoB,YAExB2B,YItDmB,SAA6BC,EAAiBC,GAErE,MAAMC,EAAW,GACX9G,EAAQ+G,KAAK/G,MACnB,IAAIgH,EAAUF,EAkFd,OAhFAF,EAAgBhM,QAAQe,IACpB,MAAMsI,EAA6B,aAAhBtI,EAAO4E,KACpByD,EAA0B,UAAhBrI,EAAO4E,KACjB2D,EAAWvI,EAAOwE,QAAQ,UAC1BK,EAAO7E,EAAO6E,KACpB,IAAIC,EAAQoG,EAAalL,EAAO8E,MAAMkD,OAAShI,EAAO8E,MAEtD,GAAIwD,EAAY,CAEZxD,EAAQ9E,EAAO+E,QACf,IAAIuG,EAAcpK,MAAMC,KAAMkD,EAAMC,iBAAiB,UAAYO,EAAO,OACxE,GAAIyG,EAAYvH,OAAS,EAAG,CACxBe,EAAQ,GACOwG,EAAYhK,OAAQiK,GAAUA,EAAMxG,SAC1C9F,QAAQe,IACb8E,EAAMlD,KAAK5B,EAAO8E,eAIvB,GAAIuD,EAAS,CAEhB,MAAMM,EAAgBtE,EAAMuE,cAAc,UAAY/D,EAAO,cAC7DC,EAA0B,OAAlB6D,EAAyB,KAAOA,EAAc7D,WAEnD,GAAIyD,EAAU,CAEjB,MAAMiD,EAAgBtK,MAAMC,KAAKnB,EAAOiF,SAAS3D,OAAOmK,GAAUA,EAAOlG,UACrEiG,EAAczH,OAAS,IACvBe,EAAQ,GACR0G,EAAcvM,QAAQe,IAClB8E,EAAMlD,KAAK5B,EAAO8E,UAKZD,EAAK7F,MAAM,KACnBC,QAAQ,CAACyM,EAASC,EAAOC,KAC/B,MAAMC,EAAgBF,EAAQ,IAAMC,EAAK7H,OAEzC,GAAI7C,MAAMQ,QAAQ2J,GAAU,CACxB,MAAMS,EAAeJ,EAAQ1M,MAAM,OAC7B+M,EAASD,EAAa,GAAK,EAC3BE,OAAiD,IAApBX,EAAQU,GACrCE,EAAiBH,EAAa,GAcpC,GAZKE,GACDX,EAAQzJ,KAAK,IAGjB8J,EAAUO,EAENJ,EACAR,EAAQU,GAAQL,GAAW5G,OACgB,IAA7BuG,EAAQU,GAAQL,KAC9BL,EAAQU,GAAQL,GAAW,KAG1BG,EAED,YADAR,EAAUA,EAAQU,GAAQL,QAG3B,CACH,MAAMQ,EAAiBR,EAAQS,SAAS,MACxCT,EAAUA,EAAQxH,QAAQ,KAAM,IAE5B2H,EACAR,EAAQK,GAAW5G,OACgB,IAArBuG,EAAQK,KAElBL,EAAQK,GADRQ,EACmB,GAEA,IAK/Bb,EAAUQ,EAAgBV,EAAWE,EAAQK,OAI9CP,GJ/BHiB,OAAwB,GACxBC,kBAAwB,EACxBC,cAAwB,EACxBC,2BAA2B,EAC3BC,mBAAwB,IK3CnBC,EAAkB,CAC3BC,KCZgB,SAAU9I,GAC1B,MAAO,CACHnB,OAAQ,yTAAyTkK,KAAM/I,KDW3UgJ,MEhBiB,SAAUhJ,GAC3B,MAAO,CACHnB,OAAQ,4IAA4IkK,KAAM/I,KFe9JiJ,OGdkB,SAAUjJ,GAC5B,MAAO,CACHnB,OAAQ,0BAA0BkK,KAAM/I,KHc5CkJ,SInBoB,SAAUhI,EAAO9E,GACrC,MAAM+M,EAAc/M,EAAOG,QAAQ,QAAQyI,cAAc,UAAY5I,EAAO6E,KAAO,mBACnF,OAAOkI,ECJW,SAAU/M,GAC5B,MAAMgN,EAAYpH,KAAKC,MAAO7F,EAAO8F,aAAa,gBAC5CmH,EAAgBjN,EAAOG,QAAQ,QAAQmE,iBAAiB,UAAYtE,EAAO6E,KAAO,cAAcd,OAChGmJ,EAAUD,GAAiBD,EAAU,GACrCG,EAAUF,GAAiBD,EAAU,GACrC5G,EAAM,CAAE3D,OAAQyK,GAAWC,GAQjC,OANK/G,EAAI3D,SACL2D,EAAI5D,OAAS,CAAE4K,QAAQ,GAClBF,IAAW9G,EAAI5D,OAAO6K,WAAY,GAClCF,IAAW/G,EAAI5D,OAAO8K,WAAY,IAGpClH,EDTcgH,CAAOL,GAAe,CAAEtK,OAAQzC,EAAO+E,UJkB5DwI,QMtBmB,SAAUzI,EAAO9E,GAEpC,MAAO,CAAEyC,OAAQqC,IADE9E,EAAOG,QAAQ,QAAQyI,cAAe,UAAY5I,EAAO8F,aAAa,iBAAmB,MACtEhB,QNqBtC0I,YOvBuB,SAAU1I,EAAO9E,GACxC,MAAMyN,EAAc3I,EAAMf,OACpByJ,EAAyD,EAA3CxN,EAAO8F,aAAa,qBAClCM,EAAM,CAAE3D,OAAQgL,IAAgBD,GAQtC,OANKpH,EAAI3D,SACL2D,EAAI5D,OAAS,GACTiL,EAAcD,EAAepH,EAAI5D,OAAOkL,WAAY,EACjDtH,EAAI5D,OAAOmL,WAAY,GAG3BvH,GPaPwH,KQxBgB,SAAU9I,EAAO9E,EAAQC,GACzC,MAAMsJ,EAAwF,GAAzEvJ,EAAO8F,aAAa,uBAAyB7F,EAAasJ,aACzEsE,EAAW7N,EAAO8N,OAAS,IAAIC,OAAO/N,EAAO8N,OAAO5J,QAAS,IAAK,aAAgB,KAClF8J,EAAY9M,MAAMC,KAAKnB,EAAOiO,OAC9B7H,EAAM,CAAE3D,QAAQ,GAiBtB,OAfAuL,EAAU/O,QAAQ2O,IACd,MAAMM,EAAoB3E,EAAc,GAAMqE,EAAKO,KAAK,KAAK,KAAQ5E,EAC/D6E,EAAkC,OAAbP,GAAoBA,EAASlB,KAAKiB,EAAKhJ,OAE9DsJ,GAAsBE,IACtBhI,EAAI3D,QAAS,OACa,IAAf2D,EAAI5D,SACX4D,EAAI5D,OAAS,IAEb0L,IAAqB9H,EAAI5D,OAAO+G,aAAc,GAC7C6E,IAAsBhI,EAAI5D,OAAO6L,kBAAmB,MAK1DjI,GRIPrC,OSzBkB,SAAUe,EAAO9E,GACnC,MAAMsO,EAASxJ,EAAMf,OACfiJ,EAAYpH,KAAKC,MAAO7F,EAAO8F,aAAa,gBAC5CyI,EAAgBD,GAAUtB,EAAU,GACpCwB,EAAgBF,GAAUtB,EAAU,GACpC5G,EAAM,CAAE3D,OAAQ8L,GAAiBC,GAQvC,OANKpI,EAAI3D,SACL2D,EAAI5D,OAAS,GACR+L,IAAiBnI,EAAI5D,OAAOkL,WAAY,GACxCc,IAAiBpI,EAAI5D,OAAOmL,WAAY,IAG1CvH,GTaPqI,IUxBe,SAAU3J,EAAO9E,GAChC,IAAI0O,EAAS1O,EAAOyO,IACpB,MAAM/K,EAAa1D,EAAO8F,aAAa,oBAUvC,OARoB,SAAhB9F,EAAO4E,MAAmBlB,KAC1BoB,EAAQtB,EAAiBsB,EAAOpB,GAChCgL,EAASA,EAAO1P,MAAM,KAAKmF,KAAK,KAIpCuK,GAAkB,EAEX,CAAEjM,QAHTqC,GAAgB,IAGU4J,IVa1Bf,UW3BqB,SAAU7I,EAAO9E,GACtC,MAAO,CAAEyC,OAAQqC,EAAMf,QAA6B,EAAnB/D,EAAO2O,YX2BxCC,IY1Be,SAAU9J,EAAO9E,GAChC,IAAI6O,EAAS7O,EAAO4O,IACpB,MAAMlL,EAAa1D,EAAO8F,aAAa,oBAUvC,OARoB,SAAhB9F,EAAO4E,MAAmBlB,KAC1BoB,EAAQtB,EAAiBsB,EAAOpB,GAChCmL,EAASA,EAAO7P,MAAM,KAAKmF,KAAK,KAIpC0K,GAAkB,EAEX,CAAEpM,QAHTqC,GAAgB,IAGU+J,IZe1BnB,Ua7BqB,SAAU5I,EAAO9E,GACtC,MAAO,CAAEyC,OAAQqC,EAAMf,QAA6B,EAAnB/D,EAAO8O,Yb6BxCC,Qc9BmB,SAAUjK,EAAO9E,GACpC,MAAO,CAAEyC,OAAQ,IAAIsL,OAAO/N,EAAO+O,SAASpC,KAAK7H,Kd8BjDkK,Me/BiB,SAAUlK,EAAO9E,GAClC,MAAMiP,EAAgBjP,EAAOG,QAAQ,QAAQyI,cAAe,UAAW5I,EAAO6E,KAAM,cAGpF,MAAO,CAAEpC,OAFyB,OAAlBwM,GAA0BA,EAAcnK,MAAMkD,OAAOjE,OAAS,KCArEmL,EAAc,SAAUC,GAEjC,MAAMnP,EAASmP,EAAMC,QACfnP,aAAEA,GAAiBD,EAAO4H,KAAKC,OAAO5C,QAE5ClF,EAAmBC,EAAQC,ICPlBoP,EAAiB,SAAUF,GAEpC,MAAMnP,EAASmP,EAAMC,OAErB,GAAIpP,EAAOwE,QAAQ,wBAAyB,CACxC,IAAI8K,EAAatP,EAAO8E,MAGxB,GAFwB,YAAY6H,KAAK2C,GAEpB,CACjBH,EAAMI,2BACN,IAAIC,EAAgBF,EAAWpL,QAAQ,aAAc,IACrDlE,EAAO8E,MAAQ0K,KCTdC,EAAoB,SAAUN,GAEvC,MAAM1M,OAAEA,EAAMM,OAAEA,GAAWoM,EAAMO,OAC3BrL,EAAQ8K,EAAMC,QACdnP,aAAEA,EAAc2J,aAAa7K,WAAEA,IAAiBsF,EAAMwD,OAAO5C,QAYnE,GAVIlC,EAAO,GAAG4M,eACV5M,EAAO9D,QAAQ,EAAGe,OAAAA,MACdD,EAAmBC,EAAQC,KAG/B8C,EAAO9D,QAAQ,EAAGe,OAAAA,MACdN,EAAaM,EAAOG,QAAQF,EAAaG,mBAAoBH,EAAalB,WAAWkK,YAIxFhJ,EAAa+I,eAAgB,CAC9B,MAAM4G,EAAqBnN,EAAS,QAAU,QAC9C/C,EAAa2E,EAAQ,GAAGtF,EAAWkK,WAAWlK,EAAWsK,SAAStK,EAAWmK,SAC7ErK,EAAUwF,EAAOtF,EAAW6Q,MCrBvBC,EAAoB,SAAUV,GAEvC,MAAMnP,EAASmP,EAAMC,OAErB,GAAIpP,EAAOwE,QAAS,eAAiB,CACjC,MAAMmK,EAA+B,EAAnB3O,EAAO2O,UACnBmB,EAAaX,EAAMY,OAASZ,EAAMa,QAClCC,EAAc,CAAC,EAAG,GAAI,GAAI,GAAI,IAEpC,GAAIjQ,EAAO8E,MAAMf,QAAU4K,IAAkD,IAArCsB,EAAYC,QAAQJ,GACxD,OAAO,ICVNK,EAAe,SAAUhB,GAElC,MAAMnP,EAASmP,EAAMC,OACfnP,EAAeD,EAAOG,QAAQ,QAAQ0H,OAAO5C,QAAQhF,aAEvDD,EAAOwE,QAASvE,EAAawJ,qBAC7B0F,EAAMiB,kBCUP,SAASC,EAAUhM,EAAOiM,EAAarL,GAE1C,IAAIsL,EACJ,MAAM1G,EAAc7I,EAAc,GAAIiE,EAAQ2E,YAAYC,aAE1DA,EAAY2G,KAAOF,EAEnB,MAAMG,EAAcpM,EAAMyB,aAAa,WACjC4K,EAAkBD,GAAeA,EAAYxM,SAAS,uBACtD0M,EAAoB9G,EAAYG,QAAQ,gBAAgB/F,SAAS,uBACvE,IAAI2M,EAAiBjQ,EAAckJ,EAAY2G,MAG/C,IAAKE,GAAmBC,IAAsBC,EAAgB,CAC1D,IAAIC,EC9BoB,EAAEC,EAASC,GAAe,EAAM5F,EAAW,IAAI6F,YAE3E,SAASC,EAAgB7K,EAAK8K,EAAY,IACtC,IAAK,IAAIC,KAAK/K,EAAK,CACf,MAAMtB,EAAoBsB,EAAI+K,GAExBC,EADqBvQ,OAAOwQ,GAAM,EAAFF,EAAMG,OAAOC,KACI,IAAMJ,EAAtB,IAAMA,EAAI,IAC3CK,EAAoBN,EAAYA,EAAYE,EAAkBD,EAE/C,iBAAVrM,GAA+B,MAATA,EACzBiM,GAAiB7P,MAAMQ,QAAQoD,IAA2B,IAAjBA,EAAMf,OAC/CoH,EAASsG,OAAOD,EAAgB5L,KAAK8L,UAAU5M,IAE/CmM,EAAenM,EAAO0M,GAG1BrG,EAASsG,OAAOD,EAAgB1M,IAK5CmM,CAAeH,GAER3F,GDOqBwG,CAAiB9H,EAAY2G,KAAMvL,EAAQ2E,YAAY2C,2BAE3EtH,EAAQ2E,YAAYyC,kBACpBnL,MAAMC,KAAMkD,EAAMC,iBAAiB,kBAAmBrF,QAAQe,IAC1DkB,MAAMC,KAAKnB,EAAOiO,OAAOhP,QAAQ,CAAC2O,EAAMgE,KACpC,MAAM/M,EAAO7E,EAAO6E,KAAK,IAAK+M,EAAK,IACnCf,EAAkBY,OAAQ5M,EAAM+I,EAAMA,EAAK/I,UAKvDgF,EAAY2G,KAAOK,EACnBD,GAAiB,EAGM,QAAvB/G,EAAYM,QAGZN,EAAYU,MAAS,KAAKoC,KAAK9C,EAAYU,KAAO,IAAM,KAAQtD,EAAiB4C,EAAY2G,aACtF3G,EAAY2G,MAIf3G,EAAYG,QAAQ,gBAAgB/F,SAAS,qCAE7C4F,EAAY2G,KAAOvJ,EAAiB4C,EAAY2G,MACzCI,IAEP/G,EAAY2G,KAAO5K,KAAK8L,UAAU7H,EAAY2G,OActD,KATiD,iBAArB3G,EAAY2G,OACiBE,IAAoBC,UAGlE9G,EAAYG,QAAQ,gBAG/BH,EAAYG,QAAU,IAAI6H,QAAShI,EAAYG,SAE1CH,EAAYS,QAAU,EAAI,CAC3B,MAAMwH,EAAa,IAAIC,gBACjBC,EAASF,EAAWE,OAE1BnI,EAAYmI,OAASA,EACrBzB,EAAe0B,OAAOC,WAAW,KAC7BJ,EAAWK,SACZtI,EAAYS,SAGnB,OAAO8H,MAAMvI,EAAYU,IAAKV,GACzBhD,KAAKwL,IACF,IAAKA,EAASC,GACV,MAAM,IAAIC,MAAMF,EAASG,YAE7B,MAAMC,EArFK,EAACJ,EAAUpN,KAC9B,MAAM6I,EAAS7I,EAAQ+E,QAAQ0I,IAAI,UAC7BC,EAAcN,EAASrI,QAAQ0I,IAAI,gBACnCE,EAAY9E,GAAU6E,GAAe,GAE3C,OAAIC,EAAU3O,SAAS,qBAAqC,KAAd2O,EACnC,OACAA,EAAU3O,SAAS,SACnB,OAEA,QA2EiB4O,CAAeR,EAAUxI,GAC7C,OAAOwI,EAASI,OAEnB5L,KAAKJ,IACF5H,EAAUwF,EAAOY,EAAQ2E,YAAY7K,WAAWgM,aACzCtE,IAEVqM,MAAM5J,IAEH,MADArK,EAAUwF,EAAOY,EAAQ2E,YAAY7K,WAAW8L,WAC1C,IAAI0H,MAAMrJ,EAAM6J,WAEzBC,QAAQ,KACDzC,GACA0B,OAAOgB,aAAc1C,GAEzB7Q,EAAa2E,EAAOY,EAAQ2E,YAAY7K,WAAW2B,OAAS,IAAMuE,EAAQ2E,YAAY7K,WAAW+L,aACjGjM,EAAUwF,EAAOY,EAAQ2E,YAAY7K,WAAW6L,cAChDvG,EAAMuE,cAAc,mBAAmBsK,UAAW,IErGvD,SAASxS,EAAQyO,GAEpB,MAAM9K,EAAQ8K,EAAMC,OACd+D,EAAW9O,EAAMwD,OACjB5C,EAAUkO,EAASlO,QACnBmO,EAAiBnO,EAAQ2E,YAAY7K,WACrCsU,EAAapO,EAAQ2E,YAAYc,WACjC4I,EAAOjP,EAAMuE,cAAc,mBAC3B2K,EAAsB,CAAEC,GAAY,KAC5BF,GAAQE,IAAaF,EAAKJ,UAAW,GACrC/D,GAASA,EAAMiB,kBAO7B,GAJIiD,GACAE,GAAoB,GAGpBD,EAAM,CACN,GAAIA,EAAKJ,SAEL,OADAK,GAAoB,IACb,EAEXD,EAAKJ,UAAW,EAGpBxT,EAAa2E,EAAQ+O,EAAexI,aAAe,IAAMwI,EAAevI,UAAY,IAAMuI,EAAerI,aAEzGoI,EAASM,eACJ5M,KAAKJ,IAIF,QAFuC,IAAfA,EAAKzD,QAEZyD,EAAK3D,UAClB,MAAO,CAAC,CAAE4Q,eAAe,IAG7B,MAAMC,EAAiB,CACnBD,eAAe,EACfvI,SAAUkI,EAAaF,EAASnI,cAAgB,MAG9C4I,EAAY,CACZpN,cAAevB,EAAQ2E,YAAYe,WACnClE,KAAMkN,EACNjN,gBAAiB,SAASD,GAAO,OAAOA,EAAKiN,gBAEnD,OAAOnN,EAAqBqN,KAE7B/M,KAAKG,IAEJ,GAAIA,EAAS6M,KAAK,EAAEH,cAAAA,KAAmBA,GAEnC,OADAH,KACO,EAKX,GAFA1U,EAAUwF,EAAO+O,EAAe1S,QAE5B2S,EAAY,CACZ,MAAMlI,EAAWnE,EAAS8M,MAAM3I,SAChCtM,EAAUwF,EAAO+O,EAAetI,aAChCjJ,EAAqBwC,EAAO/D,EAAkBI,OAAQ,CAAEgP,OAAQW,EAAUhM,EAAO8G,EAAUlG,QAIlG6N,MAAM,KACHS,IACA7T,EAAa2E,EAAO+O,EAAe1S,UCnExC,MAAMqT,EAAqB,SAAU5E,GAExC,MAAM9K,EAAQ8K,EAAMC,QACd3M,OAAEA,EAAMO,MAAEA,EAAKD,OAAEA,GAAWoM,EAAMO,QAClCzP,aAAEA,EAAY2J,YAAEA,GAAgBvF,EAAMwD,OAAO5C,QAgBnD,GAdIxC,IACA4B,EAAMwD,OAAOmM,aAAehR,EAAMiR,MAGlClR,EAAO,GAAGmR,gBACVnR,EAAO9D,QAAQ,EAAGe,OAAAA,MACdD,EAAmBC,EAAQC,KAG/B8C,EAAO9D,QAAQ,EAAGe,OAAAA,MACdN,EAAaM,EAAOG,QAAQF,EAAaG,mBAAoBH,EAAalB,WAAWkK,YAIxFhJ,EAAa+I,eAAgB,CAC9BtJ,EAAa2E,EAAK,GAAMuF,EAAY7K,WAAWkK,WAAWW,EAAY7K,WAAWsK,SAASO,EAAY7K,WAAWmK,SAEjH,MAAM0G,EAAsBnN,EAAqBO,EAAMiR,KAAiB,GAAV,QAAzB,QACjCrE,GACA/Q,EAAUwF,EAAOuF,EAAY7K,WAAW6Q,MCzBvCrP,EAAa,SAAU4O,GAEhC,MAAMgF,EAA+B,WAAfhF,EAAMvK,KACtB5E,EAASmP,EAAMC,OACfgF,EAAOpU,EAAOG,QAAQ,QAAQ0H,OAEpC,GAAI7H,EAAOwE,QAASlC,GAAwB,CACxC,MAAM+R,EAA+B/N,EAAsBtG,GACrDsU,EAAoE,WAA/CF,EAAKnP,QAAQhF,aAAa0J,kBAGhD0K,GAAgCF,IAC/BE,KAAkCF,GAAiBG,KAGrDF,EAAKG,cAAevU,GACf6G,KAAK,KACF,MAAMjC,EAAO5E,EAAO4E,KACd4P,EAAkBxU,EAAOG,QAAQ,QAAQyI,cAAc,mBAAoB5I,EAAO6E,KAAM,OAIzF7E,EAAOyU,UAAYzU,EAAOwE,QAAQ,+BACxB,aAATI,GAAgC,UAATA,GACzB4P,GAAoD,KAAjCA,EAAgB1P,MAAMkD,QAEzCoM,EAAKG,cAAeC,GAAkB1B,MAAM,UAGnDA,MAAM,UC7BV4B,EAAgB,SAAUvF,GAEnC,MAAMnP,OAAEA,EAAMyC,OAAEA,EAAMD,OAAEA,GAAW2M,EAAMO,OACnCiF,EAAmBnP,EAAiCxF,EAAQ,uBAC5DjB,WAAEA,EAAUqB,kBAAEA,EAAiB4I,eAAEA,GAAmBhI,EAAa,GAAIhB,EAAO4H,KAAKC,OAAO5C,QAAQhF,aAAc0U,GAC9GzU,EAAaF,EAAOG,QAASC,GAC7BwU,EAAY5U,EAAOwE,QAAQ,wBAC3BqQ,EAAWC,SAASlM,cAAe5I,EAAO8F,aAAa,uBAE7D,GAAI5F,IAAe8I,EAAgB,CAC/B,MAAM+L,EAAclU,OAAOmU,OAAOhV,EAAO4H,KAAKC,OAAO5C,QAAQ2E,YAAY7K,YAChD0F,OAAO,CAACwQ,EAAWC,IACT,GAAGD,KAAaC,IACxB,IAAIlN,OAI/B,GAHAtI,EAAaM,EAAO4H,KAAMmN,GAC1BrV,EAAaQ,EAAYnB,EAAWkK,SAEhCxG,GAEA,IAAKmS,GAAcA,GAAaC,EAAS9P,QAAU,CAE/C,MAAMoQ,EAAepW,EAAWmK,MAAQ,IAAMnK,EAAWoK,WAAa,IAAMpK,EAAWqK,UACvF1J,EAAaQ,EAAYiV,GACzBtW,EAAUqB,EAAYnB,EAAWsK,YAGlC,CAGH,IAAI+L,EAAkBrW,EAAWqK,UAGjC,MAAMiM,EAAWrV,EAAOwE,QAAQ,iBAC1B8Q,EAAmBD,EAAWnV,EAAWoE,iBAAiB,UAAYtE,EAAO6E,KAAO,cAAcd,OAAS,IAE3GsR,GAAa7S,GAAUA,EAAO+S,OAAYF,GAAgC,IAApBC,KACxDF,EAAkBrW,EAAWoK,YAGjC,IAAIgM,EAAepW,EAAWmK,MAAQ,IAAMkM,EACxCI,EAAqBzW,EAAWoK,WAAa,IAAMpK,EAAWqK,UAClE1J,EAAaQ,EAAYnB,EAAWsK,MAAQ,IAAMmM,GAClD3W,EAAUqB,EAAYiV,MCpC3B,SAASM,EAAoBzV,EAAQC,EAAcwM,EAAiBiJ,GAEvE,IAAK9V,EAAUI,GAAS,CACpB,MAAMoG,EAAMD,EAA0B,CAACnG,OAAAA,IACvC,OAAO0C,QAAQC,QAAQyD,GAG3B,MAAM/B,EAAQrE,EAAOG,QAAQ,QACvBwV,EAAe3V,EAAO8E,MAAMkD,OAAOjE,OAAS,EAC5C4Q,EAAmBnP,EAAiCxF,EAAQ,sBAKlE,GAHAC,EAAee,EAAcf,EAAc0U,GAGvB,UAAhB3U,EAAO4E,KAAkB,CACzB,MAAMgR,EAAW5V,EAAO+E,QAAU/E,EAASqE,EAAMuE,cAAc,UAAW5I,EAAO6E,KAAM,cACjFgR,EAAmBD,GAAYA,EAASpR,QAAQ,uBAChDsR,EAAeD,EAAmBD,EAAWvR,EAAMuE,cAAc,6BAA8B5I,EAAO6E,KAAM,MAC5GkR,EAAeD,EAAezR,EAAMuE,cAAc,yBAA0BkN,EAAaE,GAAI,MAAQ,KAEvGJ,GAAYG,IACZA,EAAatB,SAAWqB,EAAarB,UAAYqB,EAAa/Q,QACzD8Q,EAEM5V,EAAaqJ,gBACpByM,EAAaE,QAFbF,EAAajR,MAAQ,IAQjC,GAAI9E,EAAOwE,QAAQ,yBAA2BmR,EAAc,CACxD,MAAMd,EAAWxQ,EAAMuE,cAAe5I,EAAO8F,aAAa,uBAC1D+O,EAAS9P,SAAU,EACnB/E,EAAOyU,SAAWI,EAASJ,SAG/B,MAAMyB,EAAkBlW,EAAOyU,UAAazU,EAAOwE,QAAQ,8BAAgCmR,EAE3F,OAAOpP,EAAqB,CACpBC,cAAevG,EAAayH,iBAC5BjB,KAAM,CAAEzG,OAAAA,EAAQC,aAAAA,KAEnB4G,KAAKJ,IACF,MAAMqK,EAAUrK,EAAKqN,MACrB,OAAO,IAAIpR,QAAQC,IACVuT,IACDpF,EAAQrO,QAAS,GAErBE,EAASuT,ECvDlB,SAAkBlW,EAAQC,EAAcwM,EAAiBiJ,GAE5D,MAAMpG,EAAatP,EAAO8E,MACpBsB,EAAMD,EAA0B,CAAC1D,OAAQ6M,EAAWtH,OAAOjE,OAAS,EAAG/D,OAAAA,IACvEmW,EAAoB,qBAAqBxJ,KAAK3M,EAAO4E,MACrDwR,EAAmBpW,EAAOG,QAAQ,QAAQmE,iBAAiB,UAAWtE,EAAO6E,KAAM,cAAcd,OAAS,EAEhH,IAAMoS,IAAsB/P,EAAI3D,QAAY0T,IAAsBC,EAG9D,OAFAhQ,EAAI3D,QAAS,EACb2D,EAAI5D,OAAS,CAAE+S,OAAO,GACf7S,QAAQC,QAAQyD,GAI3B,MAAMiQ,EAAoBnV,MAAMC,KAAKnB,EAAOsW,YAAY7R,OAAO,CAAC8R,EAASC,KACrE,MAAM9Q,EAAW4B,EAAakP,EAAK3R,KAAKX,QAAQ,QAAS,KACnD8I,EAAY1F,EAAakP,EAAK1R,OAC9B2R,GAAkC,SAAb/Q,GAAoC,YAAbA,IAA2B+G,EAAgBO,GACvF0J,EAAmBjK,EAAgB/G,GAKzC,OAHI+Q,GAAqBC,IACrBH,EAAQ3U,KAAM6U,EAAoBzJ,EAAYtH,GAE3C6Q,GACR,IAEH,OAAO,IAAI7T,QAAQC,IAsBfA,EAnB0B0T,EAAkB5R,OAAO,CAACkS,EAAYC,IACrDD,EAAW9P,KAAKgQ,GACZ,IAAInU,QAAQoU,IAEfA,EAAYrK,EAAgBmK,GAAYtH,EAAYtP,EAAQC,MAC7D4G,KAAKkQ,IAEJ,IAAKA,EAAOtU,OAAQ,CAChB,MAAMuU,EAAW,QACY,IAAlBD,EAAOvU,aAA+D,IAA9BuU,EAAOvU,OAAOoU,KAC7DI,EAASJ,IAAc,GAE3BG,EAAOvU,OAASxB,EAAa,GAAI+V,EAAOvU,OAAQwU,GAGpD,OADAD,EAASA,EAAOtU,OAAS,GAAKsU,EACvB/V,EAAa6V,EAAQE,MAGrCrU,QAAQC,QAAQyD,OAGpBS,KAAKJ,IAGCA,EAAKhE,SACNgE,EAAKjE,OAAS6T,EAAkB5R,OAAO,CAACoS,EAAQD,KAC5C,MAAMpU,EAAUkT,EAAiBkB,IAAelB,EAAiBkB,GAAYtH,EAAYtP,IAAY,GACrG,OAAOgB,EAAa6V,EAAQrU,IAC7BiE,EAAKjE,SAELiE,IDJ4BwQ,CAAQjX,EAAQC,EAAcwM,EAAiBiJ,GAAoB5E,OEtDvG,SAASoG,EAAqBjP,EAAShI,EAAcwM,EAAiBiJ,EAAkByB,EAAc,MAEzGlX,EAAee,EAAc,GAAIf,EAAc,CAACqJ,gBAAgB,IAChE,MAAM8N,EAAcrR,EAAiBkC,GAErC,OAAOvF,QAAQ6E,IAAK6P,EAAY3O,IAAIzI,IAEhC,GAAImX,GAAenX,IAAWmX,EAAa,CACvC,MAAM/Q,EAAMD,EAA0B,CAACnG,OAAAA,EAAQyC,QAAQ,IACvD,OAAOC,QAAQC,QAAQyD,GAE3B,OAAOqP,EAAoBzV,EAAQC,EAAcwM,EAAiBiJ,MAEjE7O,KAAK9D,IAEN,MAAMsU,EAAoBtU,EAAOuU,MAAM,EAAE7U,OAAAA,KAAYA,GACrD,OAAO4D,EAAyB,CAAC5D,OAAQ4U,EAAmBtU,OAAAA,MCOpE,MAAMwU,EAEFC,YAAa5P,EAAM6P,GACf,MAAMC,EAAQtW,UAAU2C,OAClB4T,EC5Ba/P,CAAAA,IACvB,IAAIgQ,SAAkBhQ,EAElBiQ,EADmC,WAAbD,GAAyBhY,EAAUkV,SAASlM,cAAchB,KACe,SAAvDkN,SAASlM,cAAchB,GAAMjD,QAAQmT,cAMjF,MALU,CACFrV,OAAQ7C,EAAUgI,IAASiQ,EAC3BtT,IAAmB,WAAbqT,EAAwB9C,SAASlM,cAAchB,GAAQA,IDsB3CmQ,CAAYnQ,GAElC,GAAc,IAAV8P,GAAgBA,EAAQ,IAAM9P,EAC9B,MAAM,IAAI2K,MAAM,8CAEpB,GAAIlT,EAAWuI,GACX,MAAM,IAAI2K,MAAM,2FAEpB,IAAKoF,EAAclV,OACf,MAAM,IAAI8P,MAAM,oEAGpB,MAAM6B,EAAOhJ,KAEbgJ,EAAK/P,MAAQsT,EAAcpT,IAC3B6P,EAAK/P,MAAMwD,OAASuM,EACpBA,EAAKnP,QAAUjE,EAAa,GAAIuW,EAAK/X,UAAUyF,QAASwS,GACxDrD,EAAKJ,aAAeI,EAAKnP,QAAQ2E,YAAYwC,OAAO,GAGrC,CAEX,mBAEA,aACA,eAEGnN,QAAQ+Y,IACX,MAAMC,EAAa7D,EAAKnP,QAAQ2E,YAAYoO,GAAU,cAAgB,eACtE,IAAIE,EAAQ9D,EAAKnP,QAAQgT,GAAYD,GAEjCE,IACA9D,EAAKnP,QAAQgT,GAAYD,GAAY9W,MAAMQ,QAAQwW,GAASA,EAAMzP,IAAI0P,GAAQA,EAAKC,KAAKhE,IAAS8D,EAAME,KAAKhE,MAIpHA,EAAKtM,EAAI,CACLH,cAAevD,EAAiBgQ,EAAK/P,OAErCgU,aAAc,WACV,MAAM7L,EAAoB4H,EAAKnP,QAAQ2E,YAAY4C,kBAEnD,OADApB,KAAKzD,cAAgBvD,EAAiBgQ,EAAK/P,OACpCmI,EAAoB4H,EAAKkE,uBAAuBxF,MAAM/P,GAAUA,GAAUL,QAAQC,QAAQ,ME3D1G,SAAsB0B,EAAOY,GAEhCZ,EAAMkU,YAAa,EAEnB,MAAMtY,EAAegF,EAAQhF,aACvB2J,EAAc3E,EAAQ2E,YAmC5B,GAhCI3J,EAAayJ,uBAIbrF,EAAMmU,iBAAiB,WAAY3I,GAAmB,GAItDxL,EAAMmU,iBAAiB,QAASnJ,GAAgB,IAIhDpP,EAAawJ,oBAAsBpF,EAAMC,iBAAkBrE,EAAawJ,oBAAqB1F,QAE7FM,EAAMmU,iBAAiB,QAASrI,GAAc,GAGlD9L,EAAMmU,iBAAiB,OAAQtJ,GAAa,GAG5CjP,EAAa0J,iBAAiB3K,MAAM,KAAKC,QAAQ8C,IAC7C,MAAM0W,EAAa,iBAAiB9L,KAAK5K,GACzCsC,EAAMmU,iBAAiBzW,EAAWxB,EAAYkY,KAGlDpU,EAAMmU,iBAAiBlY,EAAmBC,WAAYmU,GAAe,GACjE9K,EAAYwC,OAAOrI,OAAS,GAC5BM,EAAMmU,iBAAiBlY,EAAmBC,WAAYwT,GAAoB,GAE9E1P,EAAMmU,iBAAiBlY,EAAkBC,WAAYkP,GAAmB,GAGpE7F,EAAY0C,eAEZjI,EAAMmU,iBAAiB,SAAU9X,GAE7BkJ,EAAYc,YAAY,CACxB,MAAMgO,EAAUrU,EAAMyB,aAAa,WAC/B4S,IAAYA,EAAQzU,SAAS,yBAC7B2F,EAAYC,YAAYG,QAAQ,gBAAkB0O,GAGtD,MAAMvO,EAAS9F,EAAMyB,aAAa,UAC9BqE,IACAP,EAAYC,YAAYM,OAASA,EAAO1C,eAG5C,MAAMkR,EAAStU,EAAMyB,aAAa,UAC9B6S,IACA/O,EAAYC,YAAYU,IAAMoO,IFMtCC,CAAaxE,EAAK/P,MAAO+P,EAAKnP,SAE9B,MAAM4T,EAAc,GAChBzE,EAAKnP,QAAQ2E,YAAY4C,oBACzBqM,EAAYnJ,OAAS0E,EAAKkE,uBAAuBxF,MAAM/P,GAAUA,IAErElB,EAAqBuS,EAAK/P,MAAO/D,EAAkBG,KAAMoY,GAG7DrB,WGlFG,SAAkBnT,EAAOY,GAExBA,EAAQhF,aAAayJ,uBACrBrF,EAAMyU,oBAAoB,WAAYjJ,GAAmB,GACzDxL,EAAMyU,oBAAoB,QAASzJ,GAAgB,IAGnDpK,EAAQhF,aAAawJ,oBACrBpF,EAAMyU,oBAAoB,QAAS3I,GAAc,GAGjDlL,EAAQ2E,YAAY0C,cACpBjI,EAAMyU,oBAAoB,SAAUpY,GAGxC2D,EAAMyU,oBAAoB,OAAQ5J,GAAa,GAE/CjK,EAAQhF,aAAa0J,iBAAiB3K,MAAM,KAAKC,QAAQ8C,IACrD,MAAMgX,EAAe,CAAC,OAAQ,SAAS9U,SAASlC,GAChDsC,EAAMyU,oBAAoB/W,EAAWxB,EAAYwY,KAGrD1U,EAAMyU,oBAAoBxY,EAAmBC,WAAYmU,GAAe,GACpEzP,EAAQ2E,YAAYwC,OAAOrI,OAAS,GACpCM,EAAMyU,oBAAoBxY,EAAmBC,WAAYwT,GAAoB,GAEjF1P,EAAMyU,oBAAoBxY,EAAkBC,WAAYkP,GAAmB,UAEpEpL,EAAMwD,OHuDTrH,CAAQ4K,KAAK/G,MAAO+G,KAAKnG,SACzBpD,EAAqBuJ,KAAK/G,MAAO/D,EAAkBE,SAGvDgX,YAAatM,EAAaE,KAAKnG,QAAQhF,aAAa8H,WAChD,MAAMiR,EAAc5N,KAAK/G,MAAMC,iBAAiB,2BAC1C2G,EAAkB/J,MAAMC,KAAM6X,GAAc1X,OAAQQ,GAAQA,EAAK0C,QAAQnC,IAC/E,OAAO+I,KAAKnG,QAAQ2E,YAAYoB,YAAaC,EAAiBC,GAGlEsM,cAAejM,EAAOtL,GAClB,MAAMmU,EAAOhJ,KACP/G,EAAQ+P,EAAK/P,MAKnB,OAAOoR,EAJyB,iBAAVlK,EAAqBlH,EAAMuE,cAAc2C,GAASA,EAExEtL,EAAee,EAAa,GAAIoT,EAAKnP,QAAQhF,aAAcA,GAEXmU,EAAK3H,gBAAiB2H,EAAKsB,kBACtE7O,KAAKT,IAEF,GADAvE,EAAqBuE,EAAIpG,OAAQM,EAAmBC,WAAY,CAAEmP,OAAQtJ,IACtEA,EAAI3D,QACJ,GAAIxC,EAAauJ,qBAAsB,CACnC,MAAMyP,EAAW7E,EAAKJ,cAAgB1R,EAEtC4U,EADgB7S,EAAMC,iBAAiB2U,GACThZ,EAAcmU,EAAK3H,gBAAiB2H,EAAKsB,iBAAkBtP,EAAIpG,QACxF6G,KAAKqS,IACF,MAAM9M,EAASgI,EAAKnP,QAAQ2E,YAAYwC,OAClC+M,EAAsB/E,EAAKJ,aAAe1T,EAAmBC,WAAaD,EAAkBC,WAC9F6L,EAAOrI,OAAS,IAChBmV,EAASlW,MAAQ,CACboW,KAAMhN,EAAOA,EAAO8D,QAAQ+I,GAAY,GACxCI,QAASJ,EACThF,KAAM7H,EAAOA,EAAO8D,QAAQ+I,GAAY,IAE5CC,EAASpW,UAAYoW,EAASzW,SAAWyW,EAASlW,MAAMiR,MAE5DpS,EAAqBwC,EAAO8U,EAAqB,CAAEzJ,OAAQwJ,YAIvExZ,EAAa2E,EAAO+P,EAAKnP,QAAQ2E,YAAY7K,WAAWsK,OACxDxK,EAAUwF,EAAO+P,EAAKnP,QAAQ2E,YAAY7K,WAAWmK,OAEzD,OAAO9C,IAEVS,KAAKtE,GAGdiV,oBAAqBxU,EAAQoI,KAAK4I,aAAc/T,GAC5C,MAAMmU,EAAOhJ,KAEbnL,EAAee,EAAa,GAAIoT,EAAKnP,QAAQhF,aAAcA,GAE3D,MAAMgI,EAAUmM,EAAK/P,MAAMC,iBAAiBtB,GAO5C,OANuB/C,EAAa+I,gBAGhCnK,EAAUuV,EAAK/P,MAAO+P,EAAKnP,QAAQ2E,YAAY7K,WAAWkK,SAGvDiO,EAAoBjP,EAAShI,EAAcmU,EAAK3H,gBAAiB2H,EAAKsB,kBACxE7O,KAAKJ,IACFA,EAAK1D,OAAO9D,QAAQmH,IAChBA,EAAI8N,iBAAkB,EACtBrS,EAAqBuE,EAAIpG,OAAQM,EAAmBC,WAAY,CAAEmP,OAAQtJ,MAE9E,MAAMgG,EAASgI,EAAKnP,QAAQ2E,YAAYwC,OAUxC,OATIA,EAAOrI,OAAS,IAChB0C,EAAKzD,MAAQ,CACToW,KAAMhN,EAAOA,EAAO8D,QAAQlN,GAAS,GACrCqW,QAASrW,EACTiR,KAAM7H,EAAOA,EAAO8D,QAAQlN,GAAS,IAEzCyD,EAAK3D,UAAY2D,EAAKhE,SAAWgE,EAAKzD,MAAMiR,MAEhDpS,EAAqBuS,EAAK/P,MAAO/D,EAAmBC,WAAY,CAAEmP,OAAQjJ,IACnEA,IAEVI,KAAKhE,GAGd2U,qBAAsBvX,GAClB,MAAMmU,EAAOhJ,KACP/G,EAAQ+P,EAAK/P,MACbiV,EIvKiBjV,CAAAA,GACpB0B,EAAiB1B,EAAMC,iBAAiBhC,IAC9CmG,IAAIzI,IAED,MAAM6E,EAAO7E,EAAO6E,KACdD,EAAO5E,EAAO4E,KACdM,EAA6B,aAATN,GAAgC,UAATA,EAC3C2U,EAAelV,EAAMuE,cAAc,UAAY/D,EAAO,cACtD+P,EAAY5U,EAAOwE,QAAQ,wBAC3BqQ,EAAYD,EAAYvQ,EAAMuE,cAAc5I,EAAO8F,aAAa,uBAAyB,KAE/F,OACIZ,EAAqBqU,GAAgB,KACpC3E,GAAaC,EAAS9P,UAAc6P,GAAa5U,EAAO8E,MAAS9E,EAAS,OAIlFsB,OAAOtB,GAAqB,OAAXA,GJsJQwZ,CAAiBnV,GACjCoV,EAAuB1T,EAAiB1B,EAAMC,iBAAiBhC,IAAwBhB,OAAOtB,GAAUA,EAAOyU,UAAU1Q,OACzHgR,EAAcX,EAAKnP,QAAQ2E,YAAY7K,WAE7C,GAA6B,IAAzBua,EAAcvV,OAAc,CAC5B,MAAMqC,EAAMC,EAAyB,CAAC5D,QAAQ,EAAMM,OAAQ,KAC5D,OAAOL,QAAQC,QAAQyD,GAK3B,MAAM4C,GAFN/I,EAAee,EAAa,GAAIoT,EAAKnP,QAAQhF,aAAcA,IAEvB+I,eAMpC,OAJKA,GACDnK,EAAUwF,EAAO0Q,EAAY9L,SAG1BiO,EAAoBoC,EAAerZ,EAAcmU,EAAK3H,gBAAiB2H,EAAKsB,kBAC9E7O,KAAKJ,IACFA,EAAK1D,OAAO9D,QAAQmH,IAChBrG,EAAmBqG,EAAIpG,OAAQC,GAC/B4B,EAAqBuE,EAAIpG,OAAQM,EAAmBC,WAAY,CAAEmP,OAAQtJ,MAGzE4C,IACDtJ,EAAa2E,EAAQ,GAAG0Q,EAAY9L,WAAW8L,EAAY1L,SAAS0L,EAAY7L,SAE5EzC,EAAKhE,QAAU6W,EAAcvV,SAAW0V,EACxC5a,EAAUwF,EAAO0Q,EAAY1L,OACrB5C,EAAKhE,QACb5D,EAAUwF,EAAO0Q,EAAY7L,QAI9BzC,IAEVI,KAAK5D,GAGduU,aAAcvX,GACV,MAAMmU,EAAOhJ,KAIb,GAFAnL,EAAee,EAAa,GAAIoT,EAAKnP,QAAQhF,aAAcA,GAEvDmU,EAAKJ,aACL,OAAOI,EAAKsF,oBAAqBtF,EAAKJ,aAAc/T,GAGxD,MAAMoE,EAAQ+P,EAAK/P,MACb4D,EAAU5D,EAAMC,iBAAiBhC,GAMvC,OAJKrC,EAAa+I,gBACdnK,EAAUwF,EAAO+P,EAAKnP,QAAQ2E,YAAY7K,WAAWkK,SAGlDiO,EAAoBjP,EAAShI,EAAcmU,EAAK3H,gBAAiB2H,EAAKsB,kBACxE7O,KAAKJ,IACFA,EAAK1D,OAAO9D,QAAQmH,IAChBA,EAAIuJ,gBAAiB,EACrB9N,EAAqBuE,EAAIpG,OAAQM,EAAmBC,WAAY,CAAEmP,OAAQtJ,MAE9EvE,EAAqBwC,EAAO/D,EAAkBC,WAAY,CAAEmP,OAAQjJ,IAC7DA,IAEVI,KAAK5D,GAGduU,2BAA4BmC,GACxBpC,EAAK/X,UAAUkW,iBAAmB1U,EAAa,GAAIuW,EAAK/X,UAAUkW,iBAAkBiE,GAGxFnC,0BAA2BoC,GACvBrC,EAAK/X,UAAUiN,gBAAkBzL,EAAa,GAAIuW,EAAK/X,UAAUiN,gBAAiBmN,GAGtFpC,kBAAmBC,GACfF,EAAK/X,UAAUyF,QAAUjE,EAAa,GAAIuW,EAAK/X,UAAUyF,QAASwS,IAK1EF,EAAK/X,UAAUyF,QAAUA,EACzBsS,EAAK/X,UAAUkW,iBAAmB,GAClC6B,EAAK/X,UAAUiN,gBAAkBA,EACjC8K,EAAK/X,UAAUqa"}